//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:2.0.50727.4927
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.42.
// 
namespace POS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("NewDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NewDataSet : global::System.Data.DataSet {
        
        private TRUCKDataTable tableTRUCK;
        
        private FORWARDERDataTable tableFORWARDER;
        
        private UDF_HEADERDataTable tableUDF_HEADER;
        
        private UDF_DETAILDataTable tableUDF_DETAIL;
        
        private PALLETDataTable tablePALLET;
        
        private UDF_PALLETDataTable tableUDF_PALLET;
        
        private BOXESDataTable tableBOXES;
        
        private UDF_BOXDataTable tableUDF_BOX;
        
        private global::System.Data.DataRelation relationTRUCK_FORWARDER;
        
        private global::System.Data.DataRelation relationFORWARDER_UDF_HEADER;
        
        private global::System.Data.DataRelation relationFORWARDER_UDF_DETAIL;
        
        private global::System.Data.DataRelation relationFORWARDER_PALLET;
        
        private global::System.Data.DataRelation relationPALLET_UDF_PALLET;
        
        private global::System.Data.DataRelation relationPALLET_BOXES;
        
        private global::System.Data.DataRelation relationBOXES_UDF_BOX;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NewDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected NewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TRUCK"] != null)) {
                    base.Tables.Add(new TRUCKDataTable(ds.Tables["TRUCK"]));
                }
                if ((ds.Tables["FORWARDER"] != null)) {
                    base.Tables.Add(new FORWARDERDataTable(ds.Tables["FORWARDER"]));
                }
                if ((ds.Tables["UDF_HEADER"] != null)) {
                    base.Tables.Add(new UDF_HEADERDataTable(ds.Tables["UDF_HEADER"]));
                }
                if ((ds.Tables["UDF_DETAIL"] != null)) {
                    base.Tables.Add(new UDF_DETAILDataTable(ds.Tables["UDF_DETAIL"]));
                }
                if ((ds.Tables["PALLET"] != null)) {
                    base.Tables.Add(new PALLETDataTable(ds.Tables["PALLET"]));
                }
                if ((ds.Tables["UDF_PALLET"] != null)) {
                    base.Tables.Add(new UDF_PALLETDataTable(ds.Tables["UDF_PALLET"]));
                }
                if ((ds.Tables["BOXES"] != null)) {
                    base.Tables.Add(new BOXESDataTable(ds.Tables["BOXES"]));
                }
                if ((ds.Tables["UDF_BOX"] != null)) {
                    base.Tables.Add(new UDF_BOXDataTable(ds.Tables["UDF_BOX"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TRUCKDataTable TRUCK {
            get {
                return this.tableTRUCK;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FORWARDERDataTable FORWARDER {
            get {
                return this.tableFORWARDER;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UDF_HEADERDataTable UDF_HEADER {
            get {
                return this.tableUDF_HEADER;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UDF_DETAILDataTable UDF_DETAIL {
            get {
                return this.tableUDF_DETAIL;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PALLETDataTable PALLET {
            get {
                return this.tablePALLET;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UDF_PALLETDataTable UDF_PALLET {
            get {
                return this.tableUDF_PALLET;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BOXESDataTable BOXES {
            get {
                return this.tableBOXES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UDF_BOXDataTable UDF_BOX {
            get {
                return this.tableUDF_BOX;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            NewDataSet cln = ((NewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TRUCK"] != null)) {
                    base.Tables.Add(new TRUCKDataTable(ds.Tables["TRUCK"]));
                }
                if ((ds.Tables["FORWARDER"] != null)) {
                    base.Tables.Add(new FORWARDERDataTable(ds.Tables["FORWARDER"]));
                }
                if ((ds.Tables["UDF_HEADER"] != null)) {
                    base.Tables.Add(new UDF_HEADERDataTable(ds.Tables["UDF_HEADER"]));
                }
                if ((ds.Tables["UDF_DETAIL"] != null)) {
                    base.Tables.Add(new UDF_DETAILDataTable(ds.Tables["UDF_DETAIL"]));
                }
                if ((ds.Tables["PALLET"] != null)) {
                    base.Tables.Add(new PALLETDataTable(ds.Tables["PALLET"]));
                }
                if ((ds.Tables["UDF_PALLET"] != null)) {
                    base.Tables.Add(new UDF_PALLETDataTable(ds.Tables["UDF_PALLET"]));
                }
                if ((ds.Tables["BOXES"] != null)) {
                    base.Tables.Add(new BOXESDataTable(ds.Tables["BOXES"]));
                }
                if ((ds.Tables["UDF_BOX"] != null)) {
                    base.Tables.Add(new UDF_BOXDataTable(ds.Tables["UDF_BOX"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTRUCK = ((TRUCKDataTable)(base.Tables["TRUCK"]));
            if ((initTable == true)) {
                if ((this.tableTRUCK != null)) {
                    this.tableTRUCK.InitVars();
                }
            }
            this.tableFORWARDER = ((FORWARDERDataTable)(base.Tables["FORWARDER"]));
            if ((initTable == true)) {
                if ((this.tableFORWARDER != null)) {
                    this.tableFORWARDER.InitVars();
                }
            }
            this.tableUDF_HEADER = ((UDF_HEADERDataTable)(base.Tables["UDF_HEADER"]));
            if ((initTable == true)) {
                if ((this.tableUDF_HEADER != null)) {
                    this.tableUDF_HEADER.InitVars();
                }
            }
            this.tableUDF_DETAIL = ((UDF_DETAILDataTable)(base.Tables["UDF_DETAIL"]));
            if ((initTable == true)) {
                if ((this.tableUDF_DETAIL != null)) {
                    this.tableUDF_DETAIL.InitVars();
                }
            }
            this.tablePALLET = ((PALLETDataTable)(base.Tables["PALLET"]));
            if ((initTable == true)) {
                if ((this.tablePALLET != null)) {
                    this.tablePALLET.InitVars();
                }
            }
            this.tableUDF_PALLET = ((UDF_PALLETDataTable)(base.Tables["UDF_PALLET"]));
            if ((initTable == true)) {
                if ((this.tableUDF_PALLET != null)) {
                    this.tableUDF_PALLET.InitVars();
                }
            }
            this.tableBOXES = ((BOXESDataTable)(base.Tables["BOXES"]));
            if ((initTable == true)) {
                if ((this.tableBOXES != null)) {
                    this.tableBOXES.InitVars();
                }
            }
            this.tableUDF_BOX = ((UDF_BOXDataTable)(base.Tables["UDF_BOX"]));
            if ((initTable == true)) {
                if ((this.tableUDF_BOX != null)) {
                    this.tableUDF_BOX.InitVars();
                }
            }
            this.relationTRUCK_FORWARDER = this.Relations["TRUCK_FORWARDER"];
            this.relationFORWARDER_UDF_HEADER = this.Relations["FORWARDER_UDF_HEADER"];
            this.relationFORWARDER_UDF_DETAIL = this.Relations["FORWARDER_UDF_DETAIL"];
            this.relationFORWARDER_PALLET = this.Relations["FORWARDER_PALLET"];
            this.relationPALLET_UDF_PALLET = this.Relations["PALLET_UDF_PALLET"];
            this.relationPALLET_BOXES = this.Relations["PALLET_BOXES"];
            this.relationBOXES_UDF_BOX = this.Relations["BOXES_UDF_BOX"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "NewDataSet";
            this.Prefix = "";
            this.Locale = new global::System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTRUCK = new TRUCKDataTable();
            base.Tables.Add(this.tableTRUCK);
            this.tableFORWARDER = new FORWARDERDataTable();
            base.Tables.Add(this.tableFORWARDER);
            this.tableUDF_HEADER = new UDF_HEADERDataTable();
            base.Tables.Add(this.tableUDF_HEADER);
            this.tableUDF_DETAIL = new UDF_DETAILDataTable();
            base.Tables.Add(this.tableUDF_DETAIL);
            this.tablePALLET = new PALLETDataTable();
            base.Tables.Add(this.tablePALLET);
            this.tableUDF_PALLET = new UDF_PALLETDataTable();
            base.Tables.Add(this.tableUDF_PALLET);
            this.tableBOXES = new BOXESDataTable();
            base.Tables.Add(this.tableBOXES);
            this.tableUDF_BOX = new UDF_BOXDataTable();
            base.Tables.Add(this.tableUDF_BOX);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("TRUCK_FORWARDER", new global::System.Data.DataColumn[] {
                        this.tableTRUCK.TRUCK_Id_0Column}, new global::System.Data.DataColumn[] {
                        this.tableFORWARDER.TRUCK_Id_0Column});
            this.tableFORWARDER.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FORWARDER_UDF_HEADER", new global::System.Data.DataColumn[] {
                        this.tableFORWARDER.FORWARDER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableUDF_HEADER.FORWARDER_IdColumn});
            this.tableUDF_HEADER.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FORWARDER_UDF_DETAIL", new global::System.Data.DataColumn[] {
                        this.tableFORWARDER.FORWARDER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableUDF_DETAIL.FORWARDER_IdColumn});
            this.tableUDF_DETAIL.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FORWARDER_PALLET", new global::System.Data.DataColumn[] {
                        this.tableFORWARDER.FORWARDER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablePALLET.FORWARDER_IdColumn});
            this.tablePALLET.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("PALLET_UDF_PALLET", new global::System.Data.DataColumn[] {
                        this.tablePALLET.PALLET_Id_0Column}, new global::System.Data.DataColumn[] {
                        this.tableUDF_PALLET.PALLET_Id_0Column});
            this.tableUDF_PALLET.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("PALLET_BOXES", new global::System.Data.DataColumn[] {
                        this.tablePALLET.PALLET_Id_0Column}, new global::System.Data.DataColumn[] {
                        this.tableBOXES.PALLET_Id_0Column});
            this.tableBOXES.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("BOXES_UDF_BOX", new global::System.Data.DataColumn[] {
                        this.tableBOXES.BOXES_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableUDF_BOX.BOXES_IdColumn});
            this.tableUDF_BOX.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationTRUCK_FORWARDER = new global::System.Data.DataRelation("TRUCK_FORWARDER", new global::System.Data.DataColumn[] {
                        this.tableTRUCK.TRUCK_Id_0Column}, new global::System.Data.DataColumn[] {
                        this.tableFORWARDER.TRUCK_Id_0Column}, false);
            this.relationTRUCK_FORWARDER.Nested = true;
            this.Relations.Add(this.relationTRUCK_FORWARDER);
            this.relationFORWARDER_UDF_HEADER = new global::System.Data.DataRelation("FORWARDER_UDF_HEADER", new global::System.Data.DataColumn[] {
                        this.tableFORWARDER.FORWARDER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableUDF_HEADER.FORWARDER_IdColumn}, false);
            this.relationFORWARDER_UDF_HEADER.Nested = true;
            this.Relations.Add(this.relationFORWARDER_UDF_HEADER);
            this.relationFORWARDER_UDF_DETAIL = new global::System.Data.DataRelation("FORWARDER_UDF_DETAIL", new global::System.Data.DataColumn[] {
                        this.tableFORWARDER.FORWARDER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableUDF_DETAIL.FORWARDER_IdColumn}, false);
            this.relationFORWARDER_UDF_DETAIL.Nested = true;
            this.Relations.Add(this.relationFORWARDER_UDF_DETAIL);
            this.relationFORWARDER_PALLET = new global::System.Data.DataRelation("FORWARDER_PALLET", new global::System.Data.DataColumn[] {
                        this.tableFORWARDER.FORWARDER_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tablePALLET.FORWARDER_IdColumn}, false);
            this.relationFORWARDER_PALLET.Nested = true;
            this.Relations.Add(this.relationFORWARDER_PALLET);
            this.relationPALLET_UDF_PALLET = new global::System.Data.DataRelation("PALLET_UDF_PALLET", new global::System.Data.DataColumn[] {
                        this.tablePALLET.PALLET_Id_0Column}, new global::System.Data.DataColumn[] {
                        this.tableUDF_PALLET.PALLET_Id_0Column}, false);
            this.relationPALLET_UDF_PALLET.Nested = true;
            this.Relations.Add(this.relationPALLET_UDF_PALLET);
            this.relationPALLET_BOXES = new global::System.Data.DataRelation("PALLET_BOXES", new global::System.Data.DataColumn[] {
                        this.tablePALLET.PALLET_Id_0Column}, new global::System.Data.DataColumn[] {
                        this.tableBOXES.PALLET_Id_0Column}, false);
            this.relationPALLET_BOXES.Nested = true;
            this.Relations.Add(this.relationPALLET_BOXES);
            this.relationBOXES_UDF_BOX = new global::System.Data.DataRelation("BOXES_UDF_BOX", new global::System.Data.DataColumn[] {
                        this.tableBOXES.BOXES_IdColumn}, new global::System.Data.DataColumn[] {
                        this.tableUDF_BOX.BOXES_IdColumn}, false);
            this.relationBOXES_UDF_BOX.Nested = true;
            this.Relations.Add(this.relationBOXES_UDF_BOX);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTRUCK() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFORWARDER() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUDF_HEADER() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUDF_DETAIL() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePALLET() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUDF_PALLET() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBOXES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUDF_BOX() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            NewDataSet ds = new NewDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TRUCKRowChangeEventHandler(object sender, TRUCKRowChangeEvent e);
        
        public delegate void FORWARDERRowChangeEventHandler(object sender, FORWARDERRowChangeEvent e);
        
        public delegate void UDF_HEADERRowChangeEventHandler(object sender, UDF_HEADERRowChangeEvent e);
        
        public delegate void UDF_DETAILRowChangeEventHandler(object sender, UDF_DETAILRowChangeEvent e);
        
        public delegate void PALLETRowChangeEventHandler(object sender, PALLETRowChangeEvent e);
        
        public delegate void UDF_PALLETRowChangeEventHandler(object sender, UDF_PALLETRowChangeEvent e);
        
        public delegate void BOXESRowChangeEventHandler(object sender, BOXESRowChangeEvent e);
        
        public delegate void UDF_BOXRowChangeEventHandler(object sender, UDF_BOXRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TRUCKDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTRUCK_ID;
            
            private global::System.Data.DataColumn columnCONTAINER_ID;
            
            private global::System.Data.DataColumn columnSEAL_NUMBER;
            
            private global::System.Data.DataColumn columnSHIP_FROM_ID;
            
            private global::System.Data.DataColumn columnSHIP_FROM_NAME;
            
            private global::System.Data.DataColumn columnSHIP_FROM_NAME_2;
            
            private global::System.Data.DataColumn columnSHIP_FROM_NAME_3;
            
            private global::System.Data.DataColumn columnSHIP_FROM_STREET;
            
            private global::System.Data.DataColumn columnSHIP_FROM_STREET_2;
            
            private global::System.Data.DataColumn columnSHIP_FROM_CITY;
            
            private global::System.Data.DataColumn columnSHIP_FROM_STATE;
            
            private global::System.Data.DataColumn columnSHIP_FROM_ZIP;
            
            private global::System.Data.DataColumn columnSHIP_FROM_COUNTRY_CODE;
            
            private global::System.Data.DataColumn columnSHIP_FROM_COUNTRY_NAME;
            
            private global::System.Data.DataColumn columnSHIP_FROM_CONTACT;
            
            private global::System.Data.DataColumn columnSHIP_FROM_TELEPHONE;
            
            private global::System.Data.DataColumn columnINCOTERM;
            
            private global::System.Data.DataColumn columnACTUAL_SHIPDATE;
            
            private global::System.Data.DataColumn columnODM_REP_NAME;
            
            private global::System.Data.DataColumn columnLSP_REP_NAME;
            
            private global::System.Data.DataColumn columnTRUCK_Id_0;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRUCKDataTable() {
                this.TableName = "TRUCK";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TRUCKDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TRUCKDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRUCK_IDColumn {
                get {
                    return this.columnTRUCK_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONTAINER_IDColumn {
                get {
                    return this.columnCONTAINER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SEAL_NUMBERColumn {
                get {
                    return this.columnSEAL_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIP_FROM_IDColumn {
                get {
                    return this.columnSHIP_FROM_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIP_FROM_NAMEColumn {
                get {
                    return this.columnSHIP_FROM_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIP_FROM_NAME_2Column {
                get {
                    return this.columnSHIP_FROM_NAME_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIP_FROM_NAME_3Column {
                get {
                    return this.columnSHIP_FROM_NAME_3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIP_FROM_STREETColumn {
                get {
                    return this.columnSHIP_FROM_STREET;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIP_FROM_STREET_2Column {
                get {
                    return this.columnSHIP_FROM_STREET_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIP_FROM_CITYColumn {
                get {
                    return this.columnSHIP_FROM_CITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIP_FROM_STATEColumn {
                get {
                    return this.columnSHIP_FROM_STATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIP_FROM_ZIPColumn {
                get {
                    return this.columnSHIP_FROM_ZIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIP_FROM_COUNTRY_CODEColumn {
                get {
                    return this.columnSHIP_FROM_COUNTRY_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIP_FROM_COUNTRY_NAMEColumn {
                get {
                    return this.columnSHIP_FROM_COUNTRY_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIP_FROM_CONTACTColumn {
                get {
                    return this.columnSHIP_FROM_CONTACT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIP_FROM_TELEPHONEColumn {
                get {
                    return this.columnSHIP_FROM_TELEPHONE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INCOTERMColumn {
                get {
                    return this.columnINCOTERM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACTUAL_SHIPDATEColumn {
                get {
                    return this.columnACTUAL_SHIPDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ODM_REP_NAMEColumn {
                get {
                    return this.columnODM_REP_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LSP_REP_NAMEColumn {
                get {
                    return this.columnLSP_REP_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRUCK_Id_0Column {
                get {
                    return this.columnTRUCK_Id_0;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRUCKRow this[int index] {
                get {
                    return ((TRUCKRow)(this.Rows[index]));
                }
            }
            
            public event TRUCKRowChangeEventHandler TRUCKRowChanging;
            
            public event TRUCKRowChangeEventHandler TRUCKRowChanged;
            
            public event TRUCKRowChangeEventHandler TRUCKRowDeleting;
            
            public event TRUCKRowChangeEventHandler TRUCKRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTRUCKRow(TRUCKRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRUCKRow AddTRUCKRow(
                        string TRUCK_ID, 
                        string CONTAINER_ID, 
                        string SEAL_NUMBER, 
                        string SHIP_FROM_ID, 
                        string SHIP_FROM_NAME, 
                        string SHIP_FROM_NAME_2, 
                        string SHIP_FROM_NAME_3, 
                        string SHIP_FROM_STREET, 
                        string SHIP_FROM_STREET_2, 
                        string SHIP_FROM_CITY, 
                        string SHIP_FROM_STATE, 
                        string SHIP_FROM_ZIP, 
                        string SHIP_FROM_COUNTRY_CODE, 
                        string SHIP_FROM_COUNTRY_NAME, 
                        string SHIP_FROM_CONTACT, 
                        string SHIP_FROM_TELEPHONE, 
                        string INCOTERM, 
                        string ACTUAL_SHIPDATE, 
                        string ODM_REP_NAME, 
                        string LSP_REP_NAME) {
                TRUCKRow rowTRUCKRow = ((TRUCKRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TRUCK_ID,
                        CONTAINER_ID,
                        SEAL_NUMBER,
                        SHIP_FROM_ID,
                        SHIP_FROM_NAME,
                        SHIP_FROM_NAME_2,
                        SHIP_FROM_NAME_3,
                        SHIP_FROM_STREET,
                        SHIP_FROM_STREET_2,
                        SHIP_FROM_CITY,
                        SHIP_FROM_STATE,
                        SHIP_FROM_ZIP,
                        SHIP_FROM_COUNTRY_CODE,
                        SHIP_FROM_COUNTRY_NAME,
                        SHIP_FROM_CONTACT,
                        SHIP_FROM_TELEPHONE,
                        INCOTERM,
                        ACTUAL_SHIPDATE,
                        ODM_REP_NAME,
                        LSP_REP_NAME,
                        null};
                rowTRUCKRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTRUCKRow);
                return rowTRUCKRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TRUCKDataTable cln = ((TRUCKDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TRUCKDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTRUCK_ID = base.Columns["TRUCK_ID"];
                this.columnCONTAINER_ID = base.Columns["CONTAINER_ID"];
                this.columnSEAL_NUMBER = base.Columns["SEAL_NUMBER"];
                this.columnSHIP_FROM_ID = base.Columns["SHIP_FROM_ID"];
                this.columnSHIP_FROM_NAME = base.Columns["SHIP_FROM_NAME"];
                this.columnSHIP_FROM_NAME_2 = base.Columns["SHIP_FROM_NAME_2"];
                this.columnSHIP_FROM_NAME_3 = base.Columns["SHIP_FROM_NAME_3"];
                this.columnSHIP_FROM_STREET = base.Columns["SHIP_FROM_STREET"];
                this.columnSHIP_FROM_STREET_2 = base.Columns["SHIP_FROM_STREET_2"];
                this.columnSHIP_FROM_CITY = base.Columns["SHIP_FROM_CITY"];
                this.columnSHIP_FROM_STATE = base.Columns["SHIP_FROM_STATE"];
                this.columnSHIP_FROM_ZIP = base.Columns["SHIP_FROM_ZIP"];
                this.columnSHIP_FROM_COUNTRY_CODE = base.Columns["SHIP_FROM_COUNTRY_CODE"];
                this.columnSHIP_FROM_COUNTRY_NAME = base.Columns["SHIP_FROM_COUNTRY_NAME"];
                this.columnSHIP_FROM_CONTACT = base.Columns["SHIP_FROM_CONTACT"];
                this.columnSHIP_FROM_TELEPHONE = base.Columns["SHIP_FROM_TELEPHONE"];
                this.columnINCOTERM = base.Columns["INCOTERM"];
                this.columnACTUAL_SHIPDATE = base.Columns["ACTUAL_SHIPDATE"];
                this.columnODM_REP_NAME = base.Columns["ODM_REP_NAME"];
                this.columnLSP_REP_NAME = base.Columns["LSP_REP_NAME"];
                this.columnTRUCK_Id_0 = base.Columns["TRUCK_Id_0"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTRUCK_ID = new global::System.Data.DataColumn("TRUCK_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRUCK_ID);
                this.columnCONTAINER_ID = new global::System.Data.DataColumn("CONTAINER_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONTAINER_ID);
                this.columnSEAL_NUMBER = new global::System.Data.DataColumn("SEAL_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSEAL_NUMBER);
                this.columnSHIP_FROM_ID = new global::System.Data.DataColumn("SHIP_FROM_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIP_FROM_ID);
                this.columnSHIP_FROM_NAME = new global::System.Data.DataColumn("SHIP_FROM_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIP_FROM_NAME);
                this.columnSHIP_FROM_NAME_2 = new global::System.Data.DataColumn("SHIP_FROM_NAME_2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIP_FROM_NAME_2);
                this.columnSHIP_FROM_NAME_3 = new global::System.Data.DataColumn("SHIP_FROM_NAME_3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIP_FROM_NAME_3);
                this.columnSHIP_FROM_STREET = new global::System.Data.DataColumn("SHIP_FROM_STREET", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIP_FROM_STREET);
                this.columnSHIP_FROM_STREET_2 = new global::System.Data.DataColumn("SHIP_FROM_STREET_2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIP_FROM_STREET_2);
                this.columnSHIP_FROM_CITY = new global::System.Data.DataColumn("SHIP_FROM_CITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIP_FROM_CITY);
                this.columnSHIP_FROM_STATE = new global::System.Data.DataColumn("SHIP_FROM_STATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIP_FROM_STATE);
                this.columnSHIP_FROM_ZIP = new global::System.Data.DataColumn("SHIP_FROM_ZIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIP_FROM_ZIP);
                this.columnSHIP_FROM_COUNTRY_CODE = new global::System.Data.DataColumn("SHIP_FROM_COUNTRY_CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIP_FROM_COUNTRY_CODE);
                this.columnSHIP_FROM_COUNTRY_NAME = new global::System.Data.DataColumn("SHIP_FROM_COUNTRY_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIP_FROM_COUNTRY_NAME);
                this.columnSHIP_FROM_CONTACT = new global::System.Data.DataColumn("SHIP_FROM_CONTACT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIP_FROM_CONTACT);
                this.columnSHIP_FROM_TELEPHONE = new global::System.Data.DataColumn("SHIP_FROM_TELEPHONE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIP_FROM_TELEPHONE);
                this.columnINCOTERM = new global::System.Data.DataColumn("INCOTERM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINCOTERM);
                this.columnACTUAL_SHIPDATE = new global::System.Data.DataColumn("ACTUAL_SHIPDATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACTUAL_SHIPDATE);
                this.columnODM_REP_NAME = new global::System.Data.DataColumn("ODM_REP_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnODM_REP_NAME);
                this.columnLSP_REP_NAME = new global::System.Data.DataColumn("LSP_REP_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLSP_REP_NAME);
                this.columnTRUCK_Id_0 = new global::System.Data.DataColumn("TRUCK_Id_0", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTRUCK_Id_0);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTRUCK_Id_0}, true));
                this.columnTRUCK_ID.AllowDBNull = false;
                this.columnCONTAINER_ID.AllowDBNull = false;
                this.columnSEAL_NUMBER.AllowDBNull = false;
                this.columnSHIP_FROM_ID.AllowDBNull = false;
                this.columnSHIP_FROM_NAME.AllowDBNull = false;
                this.columnSHIP_FROM_NAME_2.AllowDBNull = false;
                this.columnSHIP_FROM_NAME_3.AllowDBNull = false;
                this.columnSHIP_FROM_STREET.AllowDBNull = false;
                this.columnSHIP_FROM_STREET_2.AllowDBNull = false;
                this.columnSHIP_FROM_CITY.AllowDBNull = false;
                this.columnSHIP_FROM_STATE.AllowDBNull = false;
                this.columnSHIP_FROM_ZIP.AllowDBNull = false;
                this.columnSHIP_FROM_COUNTRY_CODE.AllowDBNull = false;
                this.columnSHIP_FROM_COUNTRY_NAME.AllowDBNull = false;
                this.columnSHIP_FROM_CONTACT.AllowDBNull = false;
                this.columnSHIP_FROM_TELEPHONE.AllowDBNull = false;
                this.columnINCOTERM.AllowDBNull = false;
                this.columnACTUAL_SHIPDATE.AllowDBNull = false;
                this.columnODM_REP_NAME.AllowDBNull = false;
                this.columnLSP_REP_NAME.AllowDBNull = false;
                this.columnTRUCK_Id_0.AutoIncrement = true;
                this.columnTRUCK_Id_0.AllowDBNull = false;
                this.columnTRUCK_Id_0.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRUCKRow NewTRUCKRow() {
                return ((TRUCKRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TRUCKRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TRUCKRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TRUCKRowChanged != null)) {
                    this.TRUCKRowChanged(this, new TRUCKRowChangeEvent(((TRUCKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TRUCKRowChanging != null)) {
                    this.TRUCKRowChanging(this, new TRUCKRowChangeEvent(((TRUCKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TRUCKRowDeleted != null)) {
                    this.TRUCKRowDeleted(this, new TRUCKRowChangeEvent(((TRUCKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TRUCKRowDeleting != null)) {
                    this.TRUCKRowDeleting(this, new TRUCKRowChangeEvent(((TRUCKRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTRUCKRow(TRUCKRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TRUCKDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FORWARDERDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnINTL_CARRIER;
            
            private global::System.Data.DataColumn columnSHIP_MODE;
            
            private global::System.Data.DataColumn columnTRUCK_LSP_PALLET_QTY;
            
            private global::System.Data.DataColumn columnTRUCK_LSP_BOX_QTY;
            
            private global::System.Data.DataColumn columnTRUCK_LSP_UNIT_QTY;
            
            private global::System.Data.DataColumn columnTRUCK_LSP_ACT_WEIGHT;
            
            private global::System.Data.DataColumn columnFORWARDER_Id;
            
            private global::System.Data.DataColumn columnTRUCK_Id_0;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORWARDERDataTable() {
                this.TableName = "FORWARDER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FORWARDERDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FORWARDERDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INTL_CARRIERColumn {
                get {
                    return this.columnINTL_CARRIER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHIP_MODEColumn {
                get {
                    return this.columnSHIP_MODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRUCK_LSP_PALLET_QTYColumn {
                get {
                    return this.columnTRUCK_LSP_PALLET_QTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRUCK_LSP_BOX_QTYColumn {
                get {
                    return this.columnTRUCK_LSP_BOX_QTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRUCK_LSP_UNIT_QTYColumn {
                get {
                    return this.columnTRUCK_LSP_UNIT_QTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRUCK_LSP_ACT_WEIGHTColumn {
                get {
                    return this.columnTRUCK_LSP_ACT_WEIGHT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FORWARDER_IdColumn {
                get {
                    return this.columnFORWARDER_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRUCK_Id_0Column {
                get {
                    return this.columnTRUCK_Id_0;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORWARDERRow this[int index] {
                get {
                    return ((FORWARDERRow)(this.Rows[index]));
                }
            }
            
            public event FORWARDERRowChangeEventHandler FORWARDERRowChanging;
            
            public event FORWARDERRowChangeEventHandler FORWARDERRowChanged;
            
            public event FORWARDERRowChangeEventHandler FORWARDERRowDeleting;
            
            public event FORWARDERRowChangeEventHandler FORWARDERRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFORWARDERRow(FORWARDERRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORWARDERRow AddFORWARDERRow(string INTL_CARRIER, string SHIP_MODE, double TRUCK_LSP_PALLET_QTY, double TRUCK_LSP_BOX_QTY, double TRUCK_LSP_UNIT_QTY, double TRUCK_LSP_ACT_WEIGHT, TRUCKRow parentTRUCKRowByTRUCK_FORWARDER) {
                FORWARDERRow rowFORWARDERRow = ((FORWARDERRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        INTL_CARRIER,
                        SHIP_MODE,
                        TRUCK_LSP_PALLET_QTY,
                        TRUCK_LSP_BOX_QTY,
                        TRUCK_LSP_UNIT_QTY,
                        TRUCK_LSP_ACT_WEIGHT,
                        null,
                        null};
                if ((parentTRUCKRowByTRUCK_FORWARDER != null)) {
                    columnValuesArray[7] = parentTRUCKRowByTRUCK_FORWARDER[20];
                }
                rowFORWARDERRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFORWARDERRow);
                return rowFORWARDERRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FORWARDERDataTable cln = ((FORWARDERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FORWARDERDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnINTL_CARRIER = base.Columns["INTL_CARRIER"];
                this.columnSHIP_MODE = base.Columns["SHIP_MODE"];
                this.columnTRUCK_LSP_PALLET_QTY = base.Columns["TRUCK_LSP_PALLET_QTY"];
                this.columnTRUCK_LSP_BOX_QTY = base.Columns["TRUCK_LSP_BOX_QTY"];
                this.columnTRUCK_LSP_UNIT_QTY = base.Columns["TRUCK_LSP_UNIT_QTY"];
                this.columnTRUCK_LSP_ACT_WEIGHT = base.Columns["TRUCK_LSP_ACT_WEIGHT"];
                this.columnFORWARDER_Id = base.Columns["FORWARDER_Id"];
                this.columnTRUCK_Id_0 = base.Columns["TRUCK_Id_0"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnINTL_CARRIER = new global::System.Data.DataColumn("INTL_CARRIER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINTL_CARRIER);
                this.columnSHIP_MODE = new global::System.Data.DataColumn("SHIP_MODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHIP_MODE);
                this.columnTRUCK_LSP_PALLET_QTY = new global::System.Data.DataColumn("TRUCK_LSP_PALLET_QTY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRUCK_LSP_PALLET_QTY);
                this.columnTRUCK_LSP_BOX_QTY = new global::System.Data.DataColumn("TRUCK_LSP_BOX_QTY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRUCK_LSP_BOX_QTY);
                this.columnTRUCK_LSP_UNIT_QTY = new global::System.Data.DataColumn("TRUCK_LSP_UNIT_QTY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRUCK_LSP_UNIT_QTY);
                this.columnTRUCK_LSP_ACT_WEIGHT = new global::System.Data.DataColumn("TRUCK_LSP_ACT_WEIGHT", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRUCK_LSP_ACT_WEIGHT);
                this.columnFORWARDER_Id = new global::System.Data.DataColumn("FORWARDER_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnFORWARDER_Id);
                this.columnTRUCK_Id_0 = new global::System.Data.DataColumn("TRUCK_Id_0", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnTRUCK_Id_0);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFORWARDER_Id}, true));
                this.columnINTL_CARRIER.AllowDBNull = false;
                this.columnSHIP_MODE.AllowDBNull = false;
                this.columnTRUCK_LSP_PALLET_QTY.AllowDBNull = false;
                this.columnTRUCK_LSP_BOX_QTY.AllowDBNull = false;
                this.columnTRUCK_LSP_UNIT_QTY.AllowDBNull = false;
                this.columnTRUCK_LSP_ACT_WEIGHT.AllowDBNull = false;
                this.columnFORWARDER_Id.AutoIncrement = true;
                this.columnFORWARDER_Id.AllowDBNull = false;
                this.columnFORWARDER_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORWARDERRow NewFORWARDERRow() {
                return ((FORWARDERRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FORWARDERRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FORWARDERRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FORWARDERRowChanged != null)) {
                    this.FORWARDERRowChanged(this, new FORWARDERRowChangeEvent(((FORWARDERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FORWARDERRowChanging != null)) {
                    this.FORWARDERRowChanging(this, new FORWARDERRowChangeEvent(((FORWARDERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FORWARDERRowDeleted != null)) {
                    this.FORWARDERRowDeleted(this, new FORWARDERRowChangeEvent(((FORWARDERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FORWARDERRowDeleting != null)) {
                    this.FORWARDERRowDeleting(this, new FORWARDERRowChangeEvent(((FORWARDERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFORWARDERRow(FORWARDERRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FORWARDERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UDF_HEADERDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnKEY;
            
            private global::System.Data.DataColumn columnVALUE;
            
            private global::System.Data.DataColumn columnFORWARDER_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_HEADERDataTable() {
                this.TableName = "UDF_HEADER";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UDF_HEADERDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UDF_HEADERDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KEYColumn {
                get {
                    return this.columnKEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VALUEColumn {
                get {
                    return this.columnVALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FORWARDER_IdColumn {
                get {
                    return this.columnFORWARDER_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_HEADERRow this[int index] {
                get {
                    return ((UDF_HEADERRow)(this.Rows[index]));
                }
            }
            
            public event UDF_HEADERRowChangeEventHandler UDF_HEADERRowChanging;
            
            public event UDF_HEADERRowChangeEventHandler UDF_HEADERRowChanged;
            
            public event UDF_HEADERRowChangeEventHandler UDF_HEADERRowDeleting;
            
            public event UDF_HEADERRowChangeEventHandler UDF_HEADERRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUDF_HEADERRow(UDF_HEADERRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_HEADERRow AddUDF_HEADERRow(string KEY, string VALUE, FORWARDERRow parentFORWARDERRowByFORWARDER_UDF_HEADER) {
                UDF_HEADERRow rowUDF_HEADERRow = ((UDF_HEADERRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KEY,
                        VALUE,
                        null};
                if ((parentFORWARDERRowByFORWARDER_UDF_HEADER != null)) {
                    columnValuesArray[2] = parentFORWARDERRowByFORWARDER_UDF_HEADER[6];
                }
                rowUDF_HEADERRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUDF_HEADERRow);
                return rowUDF_HEADERRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UDF_HEADERDataTable cln = ((UDF_HEADERDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UDF_HEADERDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKEY = base.Columns["KEY"];
                this.columnVALUE = base.Columns["VALUE"];
                this.columnFORWARDER_Id = base.Columns["FORWARDER_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKEY = new global::System.Data.DataColumn("KEY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKEY);
                this.columnVALUE = new global::System.Data.DataColumn("VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALUE);
                this.columnFORWARDER_Id = new global::System.Data.DataColumn("FORWARDER_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnFORWARDER_Id);
                this.columnKEY.AllowDBNull = false;
                this.columnVALUE.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_HEADERRow NewUDF_HEADERRow() {
                return ((UDF_HEADERRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UDF_HEADERRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UDF_HEADERRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UDF_HEADERRowChanged != null)) {
                    this.UDF_HEADERRowChanged(this, new UDF_HEADERRowChangeEvent(((UDF_HEADERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UDF_HEADERRowChanging != null)) {
                    this.UDF_HEADERRowChanging(this, new UDF_HEADERRowChangeEvent(((UDF_HEADERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UDF_HEADERRowDeleted != null)) {
                    this.UDF_HEADERRowDeleted(this, new UDF_HEADERRowChangeEvent(((UDF_HEADERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UDF_HEADERRowDeleting != null)) {
                    this.UDF_HEADERRowDeleting(this, new UDF_HEADERRowChangeEvent(((UDF_HEADERRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUDF_HEADERRow(UDF_HEADERRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UDF_HEADERDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UDF_DETAILDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnKEY;
            
            private global::System.Data.DataColumn columnVALUE;
            
            private global::System.Data.DataColumn columnFORWARDER_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_DETAILDataTable() {
                this.TableName = "UDF_DETAIL";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UDF_DETAILDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UDF_DETAILDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KEYColumn {
                get {
                    return this.columnKEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VALUEColumn {
                get {
                    return this.columnVALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FORWARDER_IdColumn {
                get {
                    return this.columnFORWARDER_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_DETAILRow this[int index] {
                get {
                    return ((UDF_DETAILRow)(this.Rows[index]));
                }
            }
            
            public event UDF_DETAILRowChangeEventHandler UDF_DETAILRowChanging;
            
            public event UDF_DETAILRowChangeEventHandler UDF_DETAILRowChanged;
            
            public event UDF_DETAILRowChangeEventHandler UDF_DETAILRowDeleting;
            
            public event UDF_DETAILRowChangeEventHandler UDF_DETAILRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUDF_DETAILRow(UDF_DETAILRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_DETAILRow AddUDF_DETAILRow(string KEY, string VALUE, FORWARDERRow parentFORWARDERRowByFORWARDER_UDF_DETAIL) {
                UDF_DETAILRow rowUDF_DETAILRow = ((UDF_DETAILRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KEY,
                        VALUE,
                        null};
                if ((parentFORWARDERRowByFORWARDER_UDF_DETAIL != null)) {
                    columnValuesArray[2] = parentFORWARDERRowByFORWARDER_UDF_DETAIL[6];
                }
                rowUDF_DETAILRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUDF_DETAILRow);
                return rowUDF_DETAILRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UDF_DETAILDataTable cln = ((UDF_DETAILDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UDF_DETAILDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKEY = base.Columns["KEY"];
                this.columnVALUE = base.Columns["VALUE"];
                this.columnFORWARDER_Id = base.Columns["FORWARDER_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKEY = new global::System.Data.DataColumn("KEY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKEY);
                this.columnVALUE = new global::System.Data.DataColumn("VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALUE);
                this.columnFORWARDER_Id = new global::System.Data.DataColumn("FORWARDER_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnFORWARDER_Id);
                this.columnKEY.AllowDBNull = false;
                this.columnVALUE.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_DETAILRow NewUDF_DETAILRow() {
                return ((UDF_DETAILRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UDF_DETAILRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UDF_DETAILRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UDF_DETAILRowChanged != null)) {
                    this.UDF_DETAILRowChanged(this, new UDF_DETAILRowChangeEvent(((UDF_DETAILRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UDF_DETAILRowChanging != null)) {
                    this.UDF_DETAILRowChanging(this, new UDF_DETAILRowChangeEvent(((UDF_DETAILRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UDF_DETAILRowDeleted != null)) {
                    this.UDF_DETAILRowDeleted(this, new UDF_DETAILRowChangeEvent(((UDF_DETAILRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UDF_DETAILRowDeleting != null)) {
                    this.UDF_DETAILRowDeleting(this, new UDF_DETAILRowChangeEvent(((UDF_DETAILRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUDF_DETAILRow(UDF_DETAILRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UDF_DETAILDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PALLETDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnPALLET_ID;
            
            private global::System.Data.DataColumn columnPALLET_BOX_QTY;
            
            private global::System.Data.DataColumn columnPALLET_UNIT_QTY;
            
            private global::System.Data.DataColumn columnPALLET_ACT_WEIGHT;
            
            private global::System.Data.DataColumn columnMASTER_WAYBILL_NUMBER;
            
            private global::System.Data.DataColumn columnWAYBILL_NUMBER;
            
            private global::System.Data.DataColumn columnREGION;
            
            private global::System.Data.DataColumn columnPALLET_Id_0;
            
            private global::System.Data.DataColumn columnFORWARDER_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PALLETDataTable() {
                this.TableName = "PALLET";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PALLETDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PALLETDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PALLET_IDColumn {
                get {
                    return this.columnPALLET_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PALLET_BOX_QTYColumn {
                get {
                    return this.columnPALLET_BOX_QTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PALLET_UNIT_QTYColumn {
                get {
                    return this.columnPALLET_UNIT_QTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PALLET_ACT_WEIGHTColumn {
                get {
                    return this.columnPALLET_ACT_WEIGHT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MASTER_WAYBILL_NUMBERColumn {
                get {
                    return this.columnMASTER_WAYBILL_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WAYBILL_NUMBERColumn {
                get {
                    return this.columnWAYBILL_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REGIONColumn {
                get {
                    return this.columnREGION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PALLET_Id_0Column {
                get {
                    return this.columnPALLET_Id_0;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FORWARDER_IdColumn {
                get {
                    return this.columnFORWARDER_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PALLETRow this[int index] {
                get {
                    return ((PALLETRow)(this.Rows[index]));
                }
            }
            
            public event PALLETRowChangeEventHandler PALLETRowChanging;
            
            public event PALLETRowChangeEventHandler PALLETRowChanged;
            
            public event PALLETRowChangeEventHandler PALLETRowDeleting;
            
            public event PALLETRowChangeEventHandler PALLETRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPALLETRow(PALLETRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PALLETRow AddPALLETRow(string PALLET_ID, double PALLET_BOX_QTY, double PALLET_UNIT_QTY, double PALLET_ACT_WEIGHT, string MASTER_WAYBILL_NUMBER, string WAYBILL_NUMBER, string REGION, FORWARDERRow parentFORWARDERRowByFORWARDER_PALLET) {
                PALLETRow rowPALLETRow = ((PALLETRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PALLET_ID,
                        PALLET_BOX_QTY,
                        PALLET_UNIT_QTY,
                        PALLET_ACT_WEIGHT,
                        MASTER_WAYBILL_NUMBER,
                        WAYBILL_NUMBER,
                        REGION,
                        null,
                        null};
                if ((parentFORWARDERRowByFORWARDER_PALLET != null)) {
                    columnValuesArray[8] = parentFORWARDERRowByFORWARDER_PALLET[6];
                }
                rowPALLETRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPALLETRow);
                return rowPALLETRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PALLETDataTable cln = ((PALLETDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PALLETDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPALLET_ID = base.Columns["PALLET_ID"];
                this.columnPALLET_BOX_QTY = base.Columns["PALLET_BOX_QTY"];
                this.columnPALLET_UNIT_QTY = base.Columns["PALLET_UNIT_QTY"];
                this.columnPALLET_ACT_WEIGHT = base.Columns["PALLET_ACT_WEIGHT"];
                this.columnMASTER_WAYBILL_NUMBER = base.Columns["MASTER_WAYBILL_NUMBER"];
                this.columnWAYBILL_NUMBER = base.Columns["WAYBILL_NUMBER"];
                this.columnREGION = base.Columns["REGION"];
                this.columnPALLET_Id_0 = base.Columns["PALLET_Id_0"];
                this.columnFORWARDER_Id = base.Columns["FORWARDER_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPALLET_ID = new global::System.Data.DataColumn("PALLET_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPALLET_ID);
                this.columnPALLET_BOX_QTY = new global::System.Data.DataColumn("PALLET_BOX_QTY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPALLET_BOX_QTY);
                this.columnPALLET_UNIT_QTY = new global::System.Data.DataColumn("PALLET_UNIT_QTY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPALLET_UNIT_QTY);
                this.columnPALLET_ACT_WEIGHT = new global::System.Data.DataColumn("PALLET_ACT_WEIGHT", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPALLET_ACT_WEIGHT);
                this.columnMASTER_WAYBILL_NUMBER = new global::System.Data.DataColumn("MASTER_WAYBILL_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMASTER_WAYBILL_NUMBER);
                this.columnWAYBILL_NUMBER = new global::System.Data.DataColumn("WAYBILL_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWAYBILL_NUMBER);
                this.columnREGION = new global::System.Data.DataColumn("REGION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREGION);
                this.columnPALLET_Id_0 = new global::System.Data.DataColumn("PALLET_Id_0", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPALLET_Id_0);
                this.columnFORWARDER_Id = new global::System.Data.DataColumn("FORWARDER_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnFORWARDER_Id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPALLET_Id_0}, true));
                this.columnPALLET_ID.AllowDBNull = false;
                this.columnPALLET_BOX_QTY.AllowDBNull = false;
                this.columnPALLET_UNIT_QTY.AllowDBNull = false;
                this.columnPALLET_ACT_WEIGHT.AllowDBNull = false;
                this.columnMASTER_WAYBILL_NUMBER.AllowDBNull = false;
                this.columnWAYBILL_NUMBER.AllowDBNull = false;
                this.columnREGION.AllowDBNull = false;
                this.columnPALLET_Id_0.AutoIncrement = true;
                this.columnPALLET_Id_0.AllowDBNull = false;
                this.columnPALLET_Id_0.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PALLETRow NewPALLETRow() {
                return ((PALLETRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PALLETRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PALLETRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PALLETRowChanged != null)) {
                    this.PALLETRowChanged(this, new PALLETRowChangeEvent(((PALLETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PALLETRowChanging != null)) {
                    this.PALLETRowChanging(this, new PALLETRowChangeEvent(((PALLETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PALLETRowDeleted != null)) {
                    this.PALLETRowDeleted(this, new PALLETRowChangeEvent(((PALLETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PALLETRowDeleting != null)) {
                    this.PALLETRowDeleting(this, new PALLETRowChangeEvent(((PALLETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePALLETRow(PALLETRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PALLETDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UDF_PALLETDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnKEY;
            
            private global::System.Data.DataColumn columnVALUE;
            
            private global::System.Data.DataColumn columnPALLET_Id_0;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_PALLETDataTable() {
                this.TableName = "UDF_PALLET";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UDF_PALLETDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UDF_PALLETDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KEYColumn {
                get {
                    return this.columnKEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VALUEColumn {
                get {
                    return this.columnVALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PALLET_Id_0Column {
                get {
                    return this.columnPALLET_Id_0;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_PALLETRow this[int index] {
                get {
                    return ((UDF_PALLETRow)(this.Rows[index]));
                }
            }
            
            public event UDF_PALLETRowChangeEventHandler UDF_PALLETRowChanging;
            
            public event UDF_PALLETRowChangeEventHandler UDF_PALLETRowChanged;
            
            public event UDF_PALLETRowChangeEventHandler UDF_PALLETRowDeleting;
            
            public event UDF_PALLETRowChangeEventHandler UDF_PALLETRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUDF_PALLETRow(UDF_PALLETRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_PALLETRow AddUDF_PALLETRow(string KEY, string VALUE, PALLETRow parentPALLETRowByPALLET_UDF_PALLET) {
                UDF_PALLETRow rowUDF_PALLETRow = ((UDF_PALLETRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KEY,
                        VALUE,
                        null};
                if ((parentPALLETRowByPALLET_UDF_PALLET != null)) {
                    columnValuesArray[2] = parentPALLETRowByPALLET_UDF_PALLET[7];
                }
                rowUDF_PALLETRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUDF_PALLETRow);
                return rowUDF_PALLETRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UDF_PALLETDataTable cln = ((UDF_PALLETDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UDF_PALLETDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKEY = base.Columns["KEY"];
                this.columnVALUE = base.Columns["VALUE"];
                this.columnPALLET_Id_0 = base.Columns["PALLET_Id_0"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKEY = new global::System.Data.DataColumn("KEY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKEY);
                this.columnVALUE = new global::System.Data.DataColumn("VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALUE);
                this.columnPALLET_Id_0 = new global::System.Data.DataColumn("PALLET_Id_0", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPALLET_Id_0);
                this.columnKEY.AllowDBNull = false;
                this.columnVALUE.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_PALLETRow NewUDF_PALLETRow() {
                return ((UDF_PALLETRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UDF_PALLETRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UDF_PALLETRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UDF_PALLETRowChanged != null)) {
                    this.UDF_PALLETRowChanged(this, new UDF_PALLETRowChangeEvent(((UDF_PALLETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UDF_PALLETRowChanging != null)) {
                    this.UDF_PALLETRowChanging(this, new UDF_PALLETRowChangeEvent(((UDF_PALLETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UDF_PALLETRowDeleted != null)) {
                    this.UDF_PALLETRowDeleted(this, new UDF_PALLETRowChangeEvent(((UDF_PALLETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UDF_PALLETRowDeleting != null)) {
                    this.UDF_PALLETRowDeleting(this, new UDF_PALLETRowChangeEvent(((UDF_PALLETRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUDF_PALLETRow(UDF_PALLETRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UDF_PALLETDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BOXESDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBOX_ID;
            
            private global::System.Data.DataColumn columnBOX_ACT_WEIGHT;
            
            private global::System.Data.DataColumn columnBOXES_Id;
            
            private global::System.Data.DataColumn columnPALLET_Id_0;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BOXESDataTable() {
                this.TableName = "BOXES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BOXESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BOXESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BOX_IDColumn {
                get {
                    return this.columnBOX_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BOX_ACT_WEIGHTColumn {
                get {
                    return this.columnBOX_ACT_WEIGHT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BOXES_IdColumn {
                get {
                    return this.columnBOXES_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PALLET_Id_0Column {
                get {
                    return this.columnPALLET_Id_0;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BOXESRow this[int index] {
                get {
                    return ((BOXESRow)(this.Rows[index]));
                }
            }
            
            public event BOXESRowChangeEventHandler BOXESRowChanging;
            
            public event BOXESRowChangeEventHandler BOXESRowChanged;
            
            public event BOXESRowChangeEventHandler BOXESRowDeleting;
            
            public event BOXESRowChangeEventHandler BOXESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBOXESRow(BOXESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BOXESRow AddBOXESRow(string BOX_ID, double BOX_ACT_WEIGHT, PALLETRow parentPALLETRowByPALLET_BOXES) {
                BOXESRow rowBOXESRow = ((BOXESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        BOX_ID,
                        BOX_ACT_WEIGHT,
                        null,
                        null};
                if ((parentPALLETRowByPALLET_BOXES != null)) {
                    columnValuesArray[3] = parentPALLETRowByPALLET_BOXES[7];
                }
                rowBOXESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBOXESRow);
                return rowBOXESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BOXESDataTable cln = ((BOXESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BOXESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBOX_ID = base.Columns["BOX_ID"];
                this.columnBOX_ACT_WEIGHT = base.Columns["BOX_ACT_WEIGHT"];
                this.columnBOXES_Id = base.Columns["BOXES_Id"];
                this.columnPALLET_Id_0 = base.Columns["PALLET_Id_0"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBOX_ID = new global::System.Data.DataColumn("BOX_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBOX_ID);
                this.columnBOX_ACT_WEIGHT = new global::System.Data.DataColumn("BOX_ACT_WEIGHT", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBOX_ACT_WEIGHT);
                this.columnBOXES_Id = new global::System.Data.DataColumn("BOXES_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnBOXES_Id);
                this.columnPALLET_Id_0 = new global::System.Data.DataColumn("PALLET_Id_0", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnPALLET_Id_0);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnBOXES_Id}, true));
                this.columnBOX_ID.AllowDBNull = false;
                this.columnBOX_ACT_WEIGHT.AllowDBNull = false;
                this.columnBOXES_Id.AutoIncrement = true;
                this.columnBOXES_Id.AllowDBNull = false;
                this.columnBOXES_Id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BOXESRow NewBOXESRow() {
                return ((BOXESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BOXESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BOXESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BOXESRowChanged != null)) {
                    this.BOXESRowChanged(this, new BOXESRowChangeEvent(((BOXESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BOXESRowChanging != null)) {
                    this.BOXESRowChanging(this, new BOXESRowChangeEvent(((BOXESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BOXESRowDeleted != null)) {
                    this.BOXESRowDeleted(this, new BOXESRowChangeEvent(((BOXESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BOXESRowDeleting != null)) {
                    this.BOXESRowDeleting(this, new BOXESRowChangeEvent(((BOXESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBOXESRow(BOXESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BOXESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UDF_BOXDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnKEY;
            
            private global::System.Data.DataColumn columnVALUE;
            
            private global::System.Data.DataColumn columnBOXES_Id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_BOXDataTable() {
                this.TableName = "UDF_BOX";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UDF_BOXDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UDF_BOXDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KEYColumn {
                get {
                    return this.columnKEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VALUEColumn {
                get {
                    return this.columnVALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BOXES_IdColumn {
                get {
                    return this.columnBOXES_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_BOXRow this[int index] {
                get {
                    return ((UDF_BOXRow)(this.Rows[index]));
                }
            }
            
            public event UDF_BOXRowChangeEventHandler UDF_BOXRowChanging;
            
            public event UDF_BOXRowChangeEventHandler UDF_BOXRowChanged;
            
            public event UDF_BOXRowChangeEventHandler UDF_BOXRowDeleting;
            
            public event UDF_BOXRowChangeEventHandler UDF_BOXRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUDF_BOXRow(UDF_BOXRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_BOXRow AddUDF_BOXRow(string KEY, string VALUE, BOXESRow parentBOXESRowByBOXES_UDF_BOX) {
                UDF_BOXRow rowUDF_BOXRow = ((UDF_BOXRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        KEY,
                        VALUE,
                        null};
                if ((parentBOXESRowByBOXES_UDF_BOX != null)) {
                    columnValuesArray[2] = parentBOXESRowByBOXES_UDF_BOX[2];
                }
                rowUDF_BOXRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUDF_BOXRow);
                return rowUDF_BOXRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UDF_BOXDataTable cln = ((UDF_BOXDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UDF_BOXDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnKEY = base.Columns["KEY"];
                this.columnVALUE = base.Columns["VALUE"];
                this.columnBOXES_Id = base.Columns["BOXES_Id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnKEY = new global::System.Data.DataColumn("KEY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKEY);
                this.columnVALUE = new global::System.Data.DataColumn("VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALUE);
                this.columnBOXES_Id = new global::System.Data.DataColumn("BOXES_Id", typeof(int), null, global::System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnBOXES_Id);
                this.columnKEY.AllowDBNull = false;
                this.columnVALUE.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_BOXRow NewUDF_BOXRow() {
                return ((UDF_BOXRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UDF_BOXRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UDF_BOXRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UDF_BOXRowChanged != null)) {
                    this.UDF_BOXRowChanged(this, new UDF_BOXRowChangeEvent(((UDF_BOXRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UDF_BOXRowChanging != null)) {
                    this.UDF_BOXRowChanging(this, new UDF_BOXRowChangeEvent(((UDF_BOXRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UDF_BOXRowDeleted != null)) {
                    this.UDF_BOXRowDeleted(this, new UDF_BOXRowChangeEvent(((UDF_BOXRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UDF_BOXRowDeleting != null)) {
                    this.UDF_BOXRowDeleting(this, new UDF_BOXRowChangeEvent(((UDF_BOXRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUDF_BOXRow(UDF_BOXRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewDataSet ds = new NewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UDF_BOXDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TRUCKRow : global::System.Data.DataRow {
            
            private TRUCKDataTable tableTRUCK;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TRUCKRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTRUCK = ((TRUCKDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TRUCK_ID {
                get {
                    return ((string)(this[this.tableTRUCK.TRUCK_IDColumn]));
                }
                set {
                    this[this.tableTRUCK.TRUCK_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONTAINER_ID {
                get {
                    return ((string)(this[this.tableTRUCK.CONTAINER_IDColumn]));
                }
                set {
                    this[this.tableTRUCK.CONTAINER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SEAL_NUMBER {
                get {
                    return ((string)(this[this.tableTRUCK.SEAL_NUMBERColumn]));
                }
                set {
                    this[this.tableTRUCK.SEAL_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIP_FROM_ID {
                get {
                    return ((string)(this[this.tableTRUCK.SHIP_FROM_IDColumn]));
                }
                set {
                    this[this.tableTRUCK.SHIP_FROM_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIP_FROM_NAME {
                get {
                    return ((string)(this[this.tableTRUCK.SHIP_FROM_NAMEColumn]));
                }
                set {
                    this[this.tableTRUCK.SHIP_FROM_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIP_FROM_NAME_2 {
                get {
                    return ((string)(this[this.tableTRUCK.SHIP_FROM_NAME_2Column]));
                }
                set {
                    this[this.tableTRUCK.SHIP_FROM_NAME_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIP_FROM_NAME_3 {
                get {
                    return ((string)(this[this.tableTRUCK.SHIP_FROM_NAME_3Column]));
                }
                set {
                    this[this.tableTRUCK.SHIP_FROM_NAME_3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIP_FROM_STREET {
                get {
                    return ((string)(this[this.tableTRUCK.SHIP_FROM_STREETColumn]));
                }
                set {
                    this[this.tableTRUCK.SHIP_FROM_STREETColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIP_FROM_STREET_2 {
                get {
                    return ((string)(this[this.tableTRUCK.SHIP_FROM_STREET_2Column]));
                }
                set {
                    this[this.tableTRUCK.SHIP_FROM_STREET_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIP_FROM_CITY {
                get {
                    return ((string)(this[this.tableTRUCK.SHIP_FROM_CITYColumn]));
                }
                set {
                    this[this.tableTRUCK.SHIP_FROM_CITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIP_FROM_STATE {
                get {
                    return ((string)(this[this.tableTRUCK.SHIP_FROM_STATEColumn]));
                }
                set {
                    this[this.tableTRUCK.SHIP_FROM_STATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIP_FROM_ZIP {
                get {
                    return ((string)(this[this.tableTRUCK.SHIP_FROM_ZIPColumn]));
                }
                set {
                    this[this.tableTRUCK.SHIP_FROM_ZIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIP_FROM_COUNTRY_CODE {
                get {
                    return ((string)(this[this.tableTRUCK.SHIP_FROM_COUNTRY_CODEColumn]));
                }
                set {
                    this[this.tableTRUCK.SHIP_FROM_COUNTRY_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIP_FROM_COUNTRY_NAME {
                get {
                    return ((string)(this[this.tableTRUCK.SHIP_FROM_COUNTRY_NAMEColumn]));
                }
                set {
                    this[this.tableTRUCK.SHIP_FROM_COUNTRY_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIP_FROM_CONTACT {
                get {
                    return ((string)(this[this.tableTRUCK.SHIP_FROM_CONTACTColumn]));
                }
                set {
                    this[this.tableTRUCK.SHIP_FROM_CONTACTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIP_FROM_TELEPHONE {
                get {
                    return ((string)(this[this.tableTRUCK.SHIP_FROM_TELEPHONEColumn]));
                }
                set {
                    this[this.tableTRUCK.SHIP_FROM_TELEPHONEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INCOTERM {
                get {
                    return ((string)(this[this.tableTRUCK.INCOTERMColumn]));
                }
                set {
                    this[this.tableTRUCK.INCOTERMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ACTUAL_SHIPDATE {
                get {
                    return ((string)(this[this.tableTRUCK.ACTUAL_SHIPDATEColumn]));
                }
                set {
                    this[this.tableTRUCK.ACTUAL_SHIPDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ODM_REP_NAME {
                get {
                    return ((string)(this[this.tableTRUCK.ODM_REP_NAMEColumn]));
                }
                set {
                    this[this.tableTRUCK.ODM_REP_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LSP_REP_NAME {
                get {
                    return ((string)(this[this.tableTRUCK.LSP_REP_NAMEColumn]));
                }
                set {
                    this[this.tableTRUCK.LSP_REP_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TRUCK_Id_0 {
                get {
                    return ((int)(this[this.tableTRUCK.TRUCK_Id_0Column]));
                }
                set {
                    this[this.tableTRUCK.TRUCK_Id_0Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORWARDERRow[] GetFORWARDERRows() {
                if ((this.Table.ChildRelations["TRUCK_FORWARDER"] == null)) {
                    return new FORWARDERRow[0];
                }
                else {
                    return ((FORWARDERRow[])(base.GetChildRows(this.Table.ChildRelations["TRUCK_FORWARDER"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FORWARDERRow : global::System.Data.DataRow {
            
            private FORWARDERDataTable tableFORWARDER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FORWARDERRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFORWARDER = ((FORWARDERDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INTL_CARRIER {
                get {
                    return ((string)(this[this.tableFORWARDER.INTL_CARRIERColumn]));
                }
                set {
                    this[this.tableFORWARDER.INTL_CARRIERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHIP_MODE {
                get {
                    return ((string)(this[this.tableFORWARDER.SHIP_MODEColumn]));
                }
                set {
                    this[this.tableFORWARDER.SHIP_MODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TRUCK_LSP_PALLET_QTY {
                get {
                    return ((double)(this[this.tableFORWARDER.TRUCK_LSP_PALLET_QTYColumn]));
                }
                set {
                    this[this.tableFORWARDER.TRUCK_LSP_PALLET_QTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TRUCK_LSP_BOX_QTY {
                get {
                    return ((double)(this[this.tableFORWARDER.TRUCK_LSP_BOX_QTYColumn]));
                }
                set {
                    this[this.tableFORWARDER.TRUCK_LSP_BOX_QTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TRUCK_LSP_UNIT_QTY {
                get {
                    return ((double)(this[this.tableFORWARDER.TRUCK_LSP_UNIT_QTYColumn]));
                }
                set {
                    this[this.tableFORWARDER.TRUCK_LSP_UNIT_QTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TRUCK_LSP_ACT_WEIGHT {
                get {
                    return ((double)(this[this.tableFORWARDER.TRUCK_LSP_ACT_WEIGHTColumn]));
                }
                set {
                    this[this.tableFORWARDER.TRUCK_LSP_ACT_WEIGHTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FORWARDER_Id {
                get {
                    return ((int)(this[this.tableFORWARDER.FORWARDER_IdColumn]));
                }
                set {
                    this[this.tableFORWARDER.FORWARDER_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TRUCK_Id_0 {
                get {
                    try {
                        return ((int)(this[this.tableFORWARDER.TRUCK_Id_0Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'FORWARDER\' 中資料行 \'TRUCK_Id_0\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableFORWARDER.TRUCK_Id_0Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRUCKRow TRUCKRow {
                get {
                    return ((TRUCKRow)(this.GetParentRow(this.Table.ParentRelations["TRUCK_FORWARDER"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TRUCK_FORWARDER"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRUCK_Id_0Null() {
                return this.IsNull(this.tableFORWARDER.TRUCK_Id_0Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRUCK_Id_0Null() {
                this[this.tableFORWARDER.TRUCK_Id_0Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_HEADERRow[] GetUDF_HEADERRows() {
                if ((this.Table.ChildRelations["FORWARDER_UDF_HEADER"] == null)) {
                    return new UDF_HEADERRow[0];
                }
                else {
                    return ((UDF_HEADERRow[])(base.GetChildRows(this.Table.ChildRelations["FORWARDER_UDF_HEADER"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_DETAILRow[] GetUDF_DETAILRows() {
                if ((this.Table.ChildRelations["FORWARDER_UDF_DETAIL"] == null)) {
                    return new UDF_DETAILRow[0];
                }
                else {
                    return ((UDF_DETAILRow[])(base.GetChildRows(this.Table.ChildRelations["FORWARDER_UDF_DETAIL"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PALLETRow[] GetPALLETRows() {
                if ((this.Table.ChildRelations["FORWARDER_PALLET"] == null)) {
                    return new PALLETRow[0];
                }
                else {
                    return ((PALLETRow[])(base.GetChildRows(this.Table.ChildRelations["FORWARDER_PALLET"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UDF_HEADERRow : global::System.Data.DataRow {
            
            private UDF_HEADERDataTable tableUDF_HEADER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UDF_HEADERRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUDF_HEADER = ((UDF_HEADERDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KEY {
                get {
                    return ((string)(this[this.tableUDF_HEADER.KEYColumn]));
                }
                set {
                    this[this.tableUDF_HEADER.KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VALUE {
                get {
                    return ((string)(this[this.tableUDF_HEADER.VALUEColumn]));
                }
                set {
                    this[this.tableUDF_HEADER.VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FORWARDER_Id {
                get {
                    try {
                        return ((int)(this[this.tableUDF_HEADER.FORWARDER_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UDF_HEADER\' 中資料行 \'FORWARDER_Id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUDF_HEADER.FORWARDER_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORWARDERRow FORWARDERRow {
                get {
                    return ((FORWARDERRow)(this.GetParentRow(this.Table.ParentRelations["FORWARDER_UDF_HEADER"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FORWARDER_UDF_HEADER"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFORWARDER_IdNull() {
                return this.IsNull(this.tableUDF_HEADER.FORWARDER_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFORWARDER_IdNull() {
                this[this.tableUDF_HEADER.FORWARDER_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UDF_DETAILRow : global::System.Data.DataRow {
            
            private UDF_DETAILDataTable tableUDF_DETAIL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UDF_DETAILRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUDF_DETAIL = ((UDF_DETAILDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KEY {
                get {
                    return ((string)(this[this.tableUDF_DETAIL.KEYColumn]));
                }
                set {
                    this[this.tableUDF_DETAIL.KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VALUE {
                get {
                    return ((string)(this[this.tableUDF_DETAIL.VALUEColumn]));
                }
                set {
                    this[this.tableUDF_DETAIL.VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FORWARDER_Id {
                get {
                    try {
                        return ((int)(this[this.tableUDF_DETAIL.FORWARDER_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UDF_DETAIL\' 中資料行 \'FORWARDER_Id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUDF_DETAIL.FORWARDER_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORWARDERRow FORWARDERRow {
                get {
                    return ((FORWARDERRow)(this.GetParentRow(this.Table.ParentRelations["FORWARDER_UDF_DETAIL"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FORWARDER_UDF_DETAIL"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFORWARDER_IdNull() {
                return this.IsNull(this.tableUDF_DETAIL.FORWARDER_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFORWARDER_IdNull() {
                this[this.tableUDF_DETAIL.FORWARDER_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PALLETRow : global::System.Data.DataRow {
            
            private PALLETDataTable tablePALLET;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PALLETRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePALLET = ((PALLETDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PALLET_ID {
                get {
                    return ((string)(this[this.tablePALLET.PALLET_IDColumn]));
                }
                set {
                    this[this.tablePALLET.PALLET_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PALLET_BOX_QTY {
                get {
                    return ((double)(this[this.tablePALLET.PALLET_BOX_QTYColumn]));
                }
                set {
                    this[this.tablePALLET.PALLET_BOX_QTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PALLET_UNIT_QTY {
                get {
                    return ((double)(this[this.tablePALLET.PALLET_UNIT_QTYColumn]));
                }
                set {
                    this[this.tablePALLET.PALLET_UNIT_QTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PALLET_ACT_WEIGHT {
                get {
                    return ((double)(this[this.tablePALLET.PALLET_ACT_WEIGHTColumn]));
                }
                set {
                    this[this.tablePALLET.PALLET_ACT_WEIGHTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MASTER_WAYBILL_NUMBER {
                get {
                    return ((string)(this[this.tablePALLET.MASTER_WAYBILL_NUMBERColumn]));
                }
                set {
                    this[this.tablePALLET.MASTER_WAYBILL_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WAYBILL_NUMBER {
                get {
                    return ((string)(this[this.tablePALLET.WAYBILL_NUMBERColumn]));
                }
                set {
                    this[this.tablePALLET.WAYBILL_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REGION {
                get {
                    return ((string)(this[this.tablePALLET.REGIONColumn]));
                }
                set {
                    this[this.tablePALLET.REGIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PALLET_Id_0 {
                get {
                    return ((int)(this[this.tablePALLET.PALLET_Id_0Column]));
                }
                set {
                    this[this.tablePALLET.PALLET_Id_0Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FORWARDER_Id {
                get {
                    try {
                        return ((int)(this[this.tablePALLET.FORWARDER_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'PALLET\' 中資料行 \'FORWARDER_Id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePALLET.FORWARDER_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORWARDERRow FORWARDERRow {
                get {
                    return ((FORWARDERRow)(this.GetParentRow(this.Table.ParentRelations["FORWARDER_PALLET"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FORWARDER_PALLET"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFORWARDER_IdNull() {
                return this.IsNull(this.tablePALLET.FORWARDER_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFORWARDER_IdNull() {
                this[this.tablePALLET.FORWARDER_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_PALLETRow[] GetUDF_PALLETRows() {
                if ((this.Table.ChildRelations["PALLET_UDF_PALLET"] == null)) {
                    return new UDF_PALLETRow[0];
                }
                else {
                    return ((UDF_PALLETRow[])(base.GetChildRows(this.Table.ChildRelations["PALLET_UDF_PALLET"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BOXESRow[] GetBOXESRows() {
                if ((this.Table.ChildRelations["PALLET_BOXES"] == null)) {
                    return new BOXESRow[0];
                }
                else {
                    return ((BOXESRow[])(base.GetChildRows(this.Table.ChildRelations["PALLET_BOXES"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UDF_PALLETRow : global::System.Data.DataRow {
            
            private UDF_PALLETDataTable tableUDF_PALLET;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UDF_PALLETRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUDF_PALLET = ((UDF_PALLETDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KEY {
                get {
                    return ((string)(this[this.tableUDF_PALLET.KEYColumn]));
                }
                set {
                    this[this.tableUDF_PALLET.KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VALUE {
                get {
                    return ((string)(this[this.tableUDF_PALLET.VALUEColumn]));
                }
                set {
                    this[this.tableUDF_PALLET.VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PALLET_Id_0 {
                get {
                    try {
                        return ((int)(this[this.tableUDF_PALLET.PALLET_Id_0Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UDF_PALLET\' 中資料行 \'PALLET_Id_0\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUDF_PALLET.PALLET_Id_0Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PALLETRow PALLETRow {
                get {
                    return ((PALLETRow)(this.GetParentRow(this.Table.ParentRelations["PALLET_UDF_PALLET"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PALLET_UDF_PALLET"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPALLET_Id_0Null() {
                return this.IsNull(this.tableUDF_PALLET.PALLET_Id_0Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPALLET_Id_0Null() {
                this[this.tableUDF_PALLET.PALLET_Id_0Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BOXESRow : global::System.Data.DataRow {
            
            private BOXESDataTable tableBOXES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BOXESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBOXES = ((BOXESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BOX_ID {
                get {
                    return ((string)(this[this.tableBOXES.BOX_IDColumn]));
                }
                set {
                    this[this.tableBOXES.BOX_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BOX_ACT_WEIGHT {
                get {
                    return ((double)(this[this.tableBOXES.BOX_ACT_WEIGHTColumn]));
                }
                set {
                    this[this.tableBOXES.BOX_ACT_WEIGHTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BOXES_Id {
                get {
                    return ((int)(this[this.tableBOXES.BOXES_IdColumn]));
                }
                set {
                    this[this.tableBOXES.BOXES_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PALLET_Id_0 {
                get {
                    try {
                        return ((int)(this[this.tableBOXES.PALLET_Id_0Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'BOXES\' 中資料行 \'PALLET_Id_0\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableBOXES.PALLET_Id_0Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PALLETRow PALLETRow {
                get {
                    return ((PALLETRow)(this.GetParentRow(this.Table.ParentRelations["PALLET_BOXES"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PALLET_BOXES"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPALLET_Id_0Null() {
                return this.IsNull(this.tableBOXES.PALLET_Id_0Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPALLET_Id_0Null() {
                this[this.tableBOXES.PALLET_Id_0Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_BOXRow[] GetUDF_BOXRows() {
                if ((this.Table.ChildRelations["BOXES_UDF_BOX"] == null)) {
                    return new UDF_BOXRow[0];
                }
                else {
                    return ((UDF_BOXRow[])(base.GetChildRows(this.Table.ChildRelations["BOXES_UDF_BOX"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UDF_BOXRow : global::System.Data.DataRow {
            
            private UDF_BOXDataTable tableUDF_BOX;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UDF_BOXRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUDF_BOX = ((UDF_BOXDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KEY {
                get {
                    return ((string)(this[this.tableUDF_BOX.KEYColumn]));
                }
                set {
                    this[this.tableUDF_BOX.KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VALUE {
                get {
                    return ((string)(this[this.tableUDF_BOX.VALUEColumn]));
                }
                set {
                    this[this.tableUDF_BOX.VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BOXES_Id {
                get {
                    try {
                        return ((int)(this[this.tableUDF_BOX.BOXES_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("資料表 \'UDF_BOX\' 中資料行 \'BOXES_Id\' 的值是 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUDF_BOX.BOXES_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BOXESRow BOXESRow {
                get {
                    return ((BOXESRow)(this.GetParentRow(this.Table.ParentRelations["BOXES_UDF_BOX"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["BOXES_UDF_BOX"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBOXES_IdNull() {
                return this.IsNull(this.tableUDF_BOX.BOXES_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBOXES_IdNull() {
                this[this.tableUDF_BOX.BOXES_IdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TRUCKRowChangeEvent : global::System.EventArgs {
            
            private TRUCKRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRUCKRowChangeEvent(TRUCKRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRUCKRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FORWARDERRowChangeEvent : global::System.EventArgs {
            
            private FORWARDERRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORWARDERRowChangeEvent(FORWARDERRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FORWARDERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UDF_HEADERRowChangeEvent : global::System.EventArgs {
            
            private UDF_HEADERRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_HEADERRowChangeEvent(UDF_HEADERRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_HEADERRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UDF_DETAILRowChangeEvent : global::System.EventArgs {
            
            private UDF_DETAILRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_DETAILRowChangeEvent(UDF_DETAILRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_DETAILRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PALLETRowChangeEvent : global::System.EventArgs {
            
            private PALLETRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PALLETRowChangeEvent(PALLETRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PALLETRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UDF_PALLETRowChangeEvent : global::System.EventArgs {
            
            private UDF_PALLETRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_PALLETRowChangeEvent(UDF_PALLETRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_PALLETRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BOXESRowChangeEvent : global::System.EventArgs {
            
            private BOXESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BOXESRowChangeEvent(BOXESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BOXESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UDF_BOXRowChangeEvent : global::System.EventArgs {
            
            private UDF_BOXRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_BOXRowChangeEvent(UDF_BOXRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UDF_BOXRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
