using System.Collections.Generic;
using IMES.FisObject.Common.Part;
using IMES.Infrastructure.FisObjectRepositoryFramework;

namespace IMES.FisObject.Common.FisBOM
{
    public class BOMNode : IBOMNode
    {
        #region Link To Other
        private static IMES.FisObject.Common.Part.IPartRepository _prtRepository = null;
        private static IMES.FisObject.Common.Part.IPartRepository PrtRepository
        {
            get
            {
                if (_prtRepository == null)
                    _prtRepository = RepositoryFactory.GetInstance().GetRepository<IMES.FisObject.Common.Part.IPartRepository, IMES.FisObject.Common.Part.IPart>();
                return _prtRepository;
            }
        }
        #endregion

        private readonly IPart _part;
        private readonly int _qty;
        private readonly string _alternativeItemGroup;
        
        private IBOMNode _parent;
        private readonly IList<IBOMNode> _children = new List<IBOMNode>();

        public BOMNode(IPart part, int qty)
        {
            _part = part;
            _qty = qty;
        }

        public BOMNode(IPart part, int qty, string alternativeItemGroup)
            : this(part, qty)
        {
            _alternativeItemGroup = alternativeItemGroup;
        }

        public IPart Part
        {
            get 
            {
                if (_part == null)
                    return _part;
                else
                    return PrtRepository.Find(_part.Key); 
            }
        }

        public int Qty
        {
            get { return _qty; }
        }

        public string AlternativeItemGroup
        {
            get { return _alternativeItemGroup; }
        }

        public IBOMNode Parent
        {
            get { return _parent; }
            set { _parent = value; }
        }

        public IList<IBOMNode> Children
        {
            get { return _children; }
        }

        public IList<IBOMNode> Sibling
        {
            get
            {
                return IsRoot ? null : Parent.Children;
            }
        }

        public int Level
        {
            get 
            {
                int level = 0;
                IBOMNode tmpParent = this;
                while (!tmpParent.IsRoot)
                {
                    level++;
                    tmpParent = tmpParent.Parent;
                }
                return level;
            }
        }

        public bool IsRoot
        {
            get { return _parent == null; }
        }

        public void AddChild(IBOMNode child)
        {
            if (!_children.Contains(child))
            {
                _children.Add(child);
                child.Parent = this;
            }
        }

        public void AddChildren(IList<IBOMNode> children)
        {
            foreach (var child in children)
            {
                AddChild(child);
            }
        }

        public void RemoveChild(IBOMNode child)
        {
            if (Children.Contains(child))
            {
                child.Parent = null;
                Children.Remove(child);
            }
        }
    }
}