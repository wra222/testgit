<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">


<html xmlns="http://www.w3.org/1999/xhtml">
<meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta http-equiv="viewport" content="width=device-width,initial-scale=1.0">
<head id="Head1" runat="server">
    <title>英业达生产效率监控系统（月报）</title>
  <style type="text/css">         

    HTML,BODY,FORM
    {
        height:100%;
    }
  
    </style>
</head>
<body leftMargin="0" topMargin="0" rightMargin="1">
 
        
    <!-- 为ECharts准备一个具备大小（宽高）的Dom -->
    <div id="main"   style="height:100%;width:100%;"></div>
    <!-- ECharts单文件引入 -->
     <script type="text/javascript" src="../../echarts-2.2.7/build/source/echarts.js"></script>
      <script type="text/javascript" src="../../js/jquery-1.11.3.min.js"></script>
      <%--  <script type="text/javascript" src="../../echarts-2.2.7/build/dist/chart/line.js"></script>
            <script type="text/javascript" src="../../echarts-2.2.7/build/dist/chart/bar.js"></script>--%>
    <script type="text/javascript">

        // 路径配置
        // 路径配置

        require.config({
            paths: {
                echarts: '../../echarts-2.2.7/build/dist'
            }
        });

        // 使用
        require(
            [
                'echarts',
                'echarts/chart/line',
                'echarts/chart/bar' // 使用柱状图就加载bar模块，按需加载
            ], DrawEChart
            )
        var myChart;
        function DrawEChart(ec) {
            // 基于准备好的dom，初始化echarts图表
            myChart = ec.init(document.getElementById('main'));

            option = {
                // backgroundColor: 'rgb(16, 16, 16)',


                //renderAsImage: true,
                //  calculable:true,
                title: {

                    text: '生产效率月报',
                    subtext: '数据来自IMES系统（每5分钟整理一次）',
                    x: 'left',   //這個指示位置,單位px

                    textStyle: {
                        // color: '#FFF',
                        fontSize: 12,
                        fontWeight: 'bolder'
                    }, //主标题
                    subtextStyle: { fontSize: 10, fontWeight: 'bolder'}//副标题

                },
                tooltip: {         // Option config. Can be overwrited by series or data
                    trigger: 'axis',
                    //show: true,   //default true
                    showDelay: 0,
                    hideDelay: 50,
                    transitionDuration: 0,
                    backgroundColor: 'rgba(255,0,255,0.7)',
                    borderColor: '#f50',
                    borderRadius: 8,
                    borderWidth: 2,
                    padding: 10,    // [5, 10, 15, 20]
                    position: function(p) {
                        // 位置回调
                        // console.log && console.log(p);
                        return [p[0] + 10, p[1] - 10];
                    },
                    textStyle: {
                        color: 'yellow',
                        decoration: 'none',
                        fontFamily: 'Verdana, sans-serif',
                        fontSize: 15,
                        fontStyle: 'italic',
                        fontWeight: 'bold'
                    },
                    formatter: function(params, ticket, callback) {
                        //  console.log(params)
                        var res = 'Function formatter : <br/>' + params[0].name;
                        for (var i = 0, l = params.length; i < l; i++) {
                            res += '<br/>' + params[i].seriesName + ' : ' + params[i].value;
                        }
                        setTimeout(function() {
                            // 仅为了模拟异步回调
                            callback(ticket, res);
                        }, 1000)
                        return 'loading';
                    }

                },

                legend: {
                    // x: 'center',
                    // y: 'bottom',
                    // orient:'vertical',
                    textStyle: { fontSize: 15 },
                    selected: {},
                    data: []
                },
                toolbox: {
                    y: 0,
                    show: true,
                    feature: {
                        mark: { show: true },
                        dataView: { show: true, readOnly: false },
                        magicType: { show: true, type: ['line', 'bar', 'stack', 'tiled'] },
                        restore: { show: true },
                        saveAsImage: { show: true },
                        dataZoom: {
                            show: true,
                            title: {
                                dataZoom: '区域缩放',
                                dataZoomReset: '区域缩放后退'
                            }
                        }
                    }
                },
                calculable: true,
                grid: [
                    {
                        borderWidth: 10,
                        borderColor: '#ccc'
                    }
                    ],
                    xAxis: [
                                {
                                    type: 'category',
                                    data: []
                                }
                        ],
                    yAxis: [
                            {
                                type: 'value',
                                name: '数量',
                                axisLabel: {
                                    formatter: '{value} pcs'
                                }
                            },
                            {
                                type: 'value',
                                name: '百分比',
                                axisLabel: {
                                    formatter: '{value} %'
                                }
                            }
                        ],
                    series: [
                                         {
                                             name: '产出',
                                             type: 'bar',
                                             stack: 'sum',
                                             itemStyle: {
                                                 normal: {
                                                     color: '#60c0dd',
                                                     label: { show: true, formatter: '{c} pcs', position: 'insideBottom' }

                                                 }
                                             },
                                             data: []
                                         },
                                            {
                                                name: '效率',
                                                type: 'line',
                                                yAxisIndex: 1,
                                                itemStyle: {
                                                    normal: {
                                                        color: '#d7504b',
                                                        label: {
                                                        position: 'bottom',
                                                            show: true, formatter: '{c} %',
                                                            textStyle: {
                                                            //fontWeight: 'bolder',
                                                        }
                                                    }
                                                }
                                            },
                                            data: []
                                        }, {
                                            name: 'UPH',
                                            type: 'line',
                                            yAxisIndex: 1,
                                            itemStyle: {
                                                normal: {
                                                    color: '#551A8B',
                                                    label: {
                                                    position: 'top',  
                                                        show: true, formatter: '{c} %',
                                                        textStyle: {
                                                        //fontWeight: 'bolder',
                                                    }
                                                }
                                            }
                                        },
                                        data: []
                                    },
                                    {
                                        name: '',
                                        type: 'line',
                                        yAxisIndex: 1,
                                        itemStyle: {
                                            normal: {
                                                color: '#0000CD',
                                                label: {
                                                position: 'top',
                                                    show: true, formatter: '{c} %',
                                                    textStyle: {
                                                    //fontWeight: 'bolder',
                                                }
                                            }
                                        }
                                    },
                                    data: []
                                }

                         ]
            };


            // 为echarts对象加载数据
            myChart.showLoading({
                text: "图表数据正在努力加载..."
            });
            myChart.setOption(option);
            GetAjaxChartData();
            setInterval(AutoRefresh, 1000 * 300);
            function AutoRefresh() {
                var options = myChart.getOption();
                myChart.showLoading({
                    text: "图表数据正在努力加载..."
                });
                GetAjaxChartData();
            }

            function GetAjaxChartData() {
                var d = new Date();
                var begtime = d.getFullYear() + "-" + (d.getMonth() + 1) +"-01"
                var endtime = d.getFullYear() + "-" + (d.getMonth() + 1) + "-" + (d.getDate());
                var urlprocess = getUrlParam("Process");
                $.ajax({
                    type: "post",
                    async: false,
                    url: '../../Service/Commn_GetUPHDara.ashx?TYPE=Efficiency_Process_Day_Echart&Process=' + urlprocess + '&BeginTime=' + begtime + '&EndTime=' + endtime + '',
                    dataType: "json",
                    success: inputSucc,
                    error: inputFail
                });
            }

            function inputSucc(GetYieldAnalysis) {
                if (GetYieldAnalysis) {
                    drawseries(option, GetYieldAnalysis)//根据返回的数据自动添加线条
                    myChart.hideLoading();
                    myChart.setOption(option, true);
                }


            }

            function drawseries(option, ChartItem) {
                var seriesArray = new Array();
                var legendlist = new Array(); //图例
                var XValue; //X轴
                var selecteditems = new Array();

                seriesArray = ChartItem;
                option.xAxis[0].data = seriesArray[0].XValue;

                option.series[0].data = seriesArray[0].SeriesValues;
                option.series[0].name = seriesArray[0].Name;
                option.series[1].data = seriesArray[1].SeriesValues;
                option.series[1].name = seriesArray[1].Name;
                option.series[2].data = seriesArray[2].SeriesValues;
                option.series[2].name = seriesArray[2].Name;
                option.series[3].data = seriesArray[3].SeriesValues;
                option.series[3].name = seriesArray[3].Name;
                legendlist.push(seriesArray[0].Name);
                legendlist.push(seriesArray[1].Name);
                legendlist.push(seriesArray[2].Name);
                legendlist.push(seriesArray[3].Name);
                option.legend.data = legendlist;
                option.title.subtext = seriesArray[0].Subtext;


            }
            function inputFail(result) {
                var options = myChart.getOption();
                myChart.showLoading({
                    text: "效率系统服务连接失败..."
                });

            }
            function getUrlParam(name) {
                var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
                var r = window.location.search.substr(1).match(reg);
                if (r != null) return unescape(r[2]); return null;
            }

           


        }


           
            
    </script>
    
     <script type="text/javascript">
         function showPic(obj, Layer1) {
             if (obj.alt == "(No ESOP)") return;
             var x, y;
             x = event.clientX;
             y = event.clientY;
             document.getElementById(Layer1).style.right = 200;
             document.getElementById(Layer1).style.top = 25;
             document.getElementById(Layer1).innerHTML = "<img src=" + obj.src + ">";
             document.getElementById(Layer1).style.display = "block";
         }
         function zoom(id, rate) {
             var t = document.getElementById(id).style;
             var w = Math.floor(parseInt(t.width) * rate);
             var h = Math.floor(parseInt(t.height) * rate);
             if (w > 20 && h > 20) {
                 t.width = w + "px";
                 t.height = h + "px";
             }
         }
     </script>
   
</body>
</html>

