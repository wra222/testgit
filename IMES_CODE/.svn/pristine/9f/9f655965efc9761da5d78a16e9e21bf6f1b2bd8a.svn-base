<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Aspose.Pdf</name>
  </assembly>
  <members>
    <member name="T:Aspose.Pdf.AlignmentType">
      <summary>
            Enumerates the alignment types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.AlignmentType.Left">
      <summary>
            Left alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.AlignmentType.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.AlignmentType.Right">
      <summary>
            Right alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.AlignmentType.Justify">
      <summary>
            Justify alignment. Text will be aligned on both left and right margins.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.AlignmentType.FullJustify">
      <summary>
            Similar to 'Justify' alignment, except that the very last line will only be 
            left-aligned in 'Justify' mode, while in 'FullJustify' mode all lines will be
            left- and right-aligned.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Arc">
      <summary>
            Represents an arc <see cref="T:Aspose.Pdf.Shape" /> in a Graph.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            Section sec1 = pdf1.Sections.Add();
            		
            Graph graph1 = new Graph(sec1,100,400);
            sec1.Paragraphs.Add(graph1);
            Arc arc1 = new Arc(graph1,200,50,30,30,90);
            graph1.Shapes.Add(arc1);
            
            arc1.GraphInfo.Color = new Aspose.Pdf.Color("Red");
            
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim graph1 As Graph = New Graph(sec1, 100, 400)
            sec1.Paragraphs.Add(graph1)
            Dim arc1 As Arc = New Arc(graph1, 200, 50, 30, 30, 90)
            graph1.Shapes.Add(arc1)
            
            arc1.GraphInfo.Color = New Aspose.Pdf.Color("Red")
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Graph Height="100" Width="400"&gt;
            			&lt;Arc CenterPosition="200 50" Radius="30" Alpha="30" 
            			Beta="90" Color="Red"&gt;
            			&lt;/Arc&gt;
            		&lt;/Graph&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Shape">
      <summary>
            Represents a generic shape.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Shape.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Shape" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Shape.GraphInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Shape.GraphInfo" /> object that indicates the graph info,such as color,
            line width,etc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Shape.ID">
      <summary>
            Gets or sets a string that indicates the ID of the shape.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Arc.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Arc" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Arc.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Arc" /> class.
            </summary>
      <param name="xPosition">The x-coordinate of the center point of the arc.</param>
      <param name="yPosition">The y-coordinate of the center point of the arc.</param>
      <param name="radius">The radius value of the arc.</param>
      <param name="alpha">The beginning angle value of the arc.</param>
      <param name="beta">The end angle value of the arc.</param>
    </member>
    <member name="M:Aspose.Pdf.Arc.#ctor(Aspose.Pdf.Graph)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Arc" /> class.		
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Graph" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Graph" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Arc.#ctor(Aspose.Pdf.Graph,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Arc" /> class.		
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Graph" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Graph" /> object.
            </remarks>
      <param name="xPosition">The x-coordinate of the center point of the arc.</param>
      <param name="yPosition">The y-coordinate of the center point of the arc.</param>
      <param name="radius">The radius value of the arc.</param>
      <param name="alpha">The beginning angle value of the arc.</param>
      <param name="beta">The end angle value of the arc.</param>
    </member>
    <member name="P:Aspose.Pdf.Arc.PosX">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the center of the arc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Arc.PosY">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the center of the arc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Arc.Radius">
      <summary>
            Gets or sets a float value that indicates the radius of the arc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Arc.Alpha">
      <summary>
            Gets or sets a float value that indicates the beginning angle degree of the arc.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Arc.Beta">
      <summary>
            Gets or sets a float value that indicates the ending angle degree of the arc.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Attachment">
      <summary>
            Represents an attachment <see cref="T:Aspose.Pdf.Paragraph" /> in a Pdf document. Attachment can be file attachment.
            stream attachment or note annotation.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Attachment fileAttachment = new Attachment();
            sec1.Paragraphs.Add(fileAttachment);
            fileAttachment.AttachmentType = AttachmentType.File;
            fileAttachment.AttachedFileName = "c:/images/ccitt.tif";
            fileAttachment.AttachedFileType = "tif";	
            fileAttachment.FileIconType = FileIconType.Graph;
            fileAttachment.IconColor = new Aspose.Pdf.Color("Brown");
            
            Attachment noteAttachment = new Attachment();
            sec1.Paragraphs.Add(noteAttachment);
            noteAttachment.AttachmentType = AttachmentType.Note;
            noteAttachment.NoteContent = "This is a note.";
            noteAttachment.NoteHeading = "this is a heading";
            noteAttachment.IsNoteOpen = true;	
            
            pdf1.Save("test.pdf");
            
            [Visual Basic] 
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim fileAttachment As Attachment = New Attachment()
            sec1.Paragraphs.Add(fileAttachment)
            fileAttachment.AttachmentType = AttachmentType.File
            fileAttachment.AttachedFileName = "c:/images/ccitt.tif"
            fileAttachment.AttachedFileType = "tif"
            fileAttachment.FileIconType = FileIconType.Graph
            fileAttachment.IconColor = New Aspose.Pdf.Color("Brown")
            
            Dim noteAttachment As Attachment = New Attachment()
            sec1.Paragraphs.Add(noteAttachment)
            noteAttachment.AttachmentType = AttachmentType.Note
            noteAttachment.NoteContent = "This is a note."
            noteAttachment.NoteHeading = "this is a heading"
            noteAttachment.IsNoteOpen = True
            
            pdf1.Save("test.pdf")
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Attachment AttachmentType="File" AttachedFileName="c:/images/flower.jpg"
            			AttachedFileType="jpeg" FileIconType="Graph" IconColor="Brown"&gt;
            		&lt;/Attachment&gt;
            		&lt;Attachment AttachmentType="Note" IsNoteOpen="true" 
            			NoteContent="This is a note."&gt;
            		&lt;/Attachment&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Paragraph">
      <summary>
            Represents a paragraph object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Paragraph.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Paragraph" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Paragraph.Margin">
      <summary>
            Gets or sets <see cref="T:Aspose.Pdf.MarginInfo" /> object that indicates the margin info of the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Paragraph.ID">
      <summary>
            Gets or sets a string that indicates the ID of the paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Paragraph.IsFirstParagraph">
      <summary>
            Gets or sets a bool value that indicates whether the paragraph is the first paragraph of a page.
            If this property is set to true,Aspose.Pdf will start a new page for this paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Paragraph.IsFirstParagraphInColumn">
      <summary>
            Gets or sets a bool value that indicates whether the paragraph be the first paragraph of a column.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Paragraph.IsKeptTogether">
      <summary>
            Gets or sets a bool value that indicates whether all lines 
            in the paragraph are to remain on the same page. Default is false. This property only affects 
            paragraphs in section (but ont in table).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Paragraph.IsKeptWithNext">
      <summary>
            Gets or sets a bool value that indicates whether current paragraph remains in the same page along with next paragraph.
            Default is false. This property only affects paragraphs in section (but ont in table) except FloatingBox, which position 
            is set by manual.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Paragraph.IsDisabled">
      <summary>
            Gets or sets a bool value that indicates whether this paragraph is disabled. The default value is false. 
            If this property is set to true, this paragraph will not be rendered.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Paragraph.IsInList">
      <summary>
            Get or set a bool value that indicates whether this paragraph is used as a list item. The default value is false.
            If this property is set to true, this paragraph will appear in the list when the list is constructed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Paragraph.IsOnOddPage">
      <summary>
            Gets or sets a bool value that indicates whether this paragraph be shown in odd page only. This property 
            used for duplex Printing. If you want to print a paragraph in a new odd page in duplex Printing,you 
            can set "IsFirstParagraph = true" and "IsOnOddPage = true".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Paragraph.Left">
      <summary>
            Gets or sets a float value that indicates the left position of the paragraph. 
            The unit is point.
            <seealso cref="P:Aspose.Pdf.Paragraph.PositioningType" /></summary>
      <remarks>The property is used for custom positioning. You need not use this property if you 
            want the paragraph be auto aligned.</remarks>
    </member>
    <member name="P:Aspose.Pdf.Paragraph.Top">
      <summary>
            Gets or sets a float value that indicates the top position of the paragraph. 
            The unit is point.
            <seealso cref="P:Aspose.Pdf.Paragraph.PositioningType" /></summary>
      <remarks>The property is used for custom positioning. You need not use this property if you 
            want the paragraph be auto aligned.</remarks>
    </member>
    <member name="P:Aspose.Pdf.Paragraph.PositioningType">
      <summary>
            The positioning type for custom positioning. Default value is Auto 
            (don not use custom positioning).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Paragraph.ReferenceParagraphID">
      <summary>
            Gets or sets a string that indicates the reference paragraph when using paragraph relative customer 
            positioning.
            </summary>
      <remarks>The reference paragraph must be ahead of the current paragraph in the document object 
            model. </remarks>
    </member>
    <member name="M:Aspose.Pdf.Attachment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Attachment" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Attachment.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Attachment" /> object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.Pdf.Attachment.AttachmentType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Attachment.AttachmentType" /> that indicates the attachment type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Attachment.AttachedFileName">
      <summary>
            Gets or sets a string that indicates the attach file name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Attachment.AttachedStream">
      <summary>
            Gets or sets a stream attaches to the file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Attachment.AttachedFileType">
      <summary>
            Gets or sets a string that indicates the MIME type of the attached file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Attachment.FileIconType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Attachment.FileIconType" /> that indicates the file attachment icon type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Attachment.NoteWindowPositioningType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Attachment.NoteWindowPositioningType" /> object that indicates the note window's 
            positioning type. Default is Auto.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Attachment.NoteWindowPosition">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.RectangleArea" /> object that indicates the position of the note's 
            popup window.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Attachment.NoteContent">
      <summary>
            Gets or sets a string that indicates the content of the attached note.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Attachment.NoteHeading">
      <summary>
            Gets or sets a string that indicates the heading (title) of the attached note.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Attachment.NoteIconType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Attachment.NoteIconType" /> that indicates the note icon type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Attachment.IsNoteOpen">
      <summary>
            Gets or sets a bool value that indicates whether the note is open or not when the Pdf document is opened.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Attachment.IconColor">
      <summary>
            Represents a <see cref="T:Aspose.Pdf.Color" /> object that indicates the color of the icon.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.AttachmentType">
      <summary>
            Enumerates the attachment types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.AttachmentType.File">
      <summary>
            The attachment is a file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.AttachmentType.Note">
      <summary>
            The attachment is a note.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.AttachmentType.None">
      <summary>
            No attachment.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.BorderInfo">
      <summary>
            Encapsulates the border info for the <see cref="T:Aspose.Pdf.Table" />, <see cref="T:Aspose.Pdf.Row" /> and <see cref="T:Aspose.Pdf.Cell" />.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		 
            Aspose.Pdf.Table table1 = new Aspose.Pdf.Table();
            sec1.Paragraphs.Add(table1);
            table1.ColumnWidths = "70 2cm";
            		
            Row row1 = table1.Rows.Add();
            		
            Cell cell1Row1 = row1.Cells.Add("ColumnsSpan = 2");
            cell1Row1.ColumnsSpan = 2;
            cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            Row row2 = table1.Rows.Add();
            		
            Cell cell1Row2 = row2.Cells.Add("cell1");
            cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F);
            	
            Cell cell2Row2 = row2.Cells.Add("cell2");
            cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new Aspose.Pdf.Color("Red"));
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim table1 As Aspose.Pdf.Table = New Aspose.Pdf.Table()
            sec1.Paragraphs.Add(table1)
            table1.ColumnWidths = "70 2cm"
            
            Dim row1 As Row = table1.Rows.Add()
            
            Dim cell1Row1 As Cell = row1.Cells.Add("ColumnsSpan = 2")
            cell1Row1.ColumnsSpan = 2
            cell1Row1.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            Dim row2 As Row = table1.Rows.Add()
            
            Dim cell1Row2 As Cell = row2.Cells.Add("cell1")
            cell1Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            Dim cell2Row2 As Cell = row2.Cells.Add("cell2")
            cell2Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5, New Aspose.Pdf.Color("Red"))
            
            pdf1.Save(...)
            
            [XML]
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Table ColumnWidths="70 2cm"&gt;
            			&lt;Row&gt;
            				&lt;Cell ColumnsSpan="2"&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            			&lt;/Row&gt;
            			&lt;Row&gt;
            				&lt;Cell&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;cell1&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            				&lt;Cell&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;cell2&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            			&lt;/Row&gt;
            		&lt;/Table&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (int)(BorderSide.Left | BorderSide.Top).</param>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor(System.Int32,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (int)(BorderSide.Left | BorderSide.Top).</param>
      <param name="borderWidth">The width of the border.</param>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor(System.Int32,System.Single,Aspose.Pdf.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (int)(BorderSide.Left | BorderSide.Top).</param>
      <param name="borderWidth">The width of the border.</param>
      <param name="borderColor">The border color.</param>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor(System.Int32,Aspose.Pdf.GraphInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (int)(BorderSide.Left | BorderSide.Top).</param>
      <param name="borderFormat">The border format info.</param>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.#ctor(System.Int32,Aspose.Pdf.Color)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" /> class.
            </summary>
      <param name="borderSide">Indicates the border sides info. For example: (int)(BorderSide.Left | BorderSide.Top).</param>
      <param name="borderColor">The border color.</param>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.Clone">
      <summary>
            Clones a new BorderInfo object.
            </summary>
      <returns>The new BorderInfo object.</returns>
    </member>
    <member name="M:Aspose.Pdf.BorderInfo.SetBorderStyle(System.Int32,Aspose.Pdf.BorderStyle)">
      <summary>
            Sets the style of borders.
            </summary>
      <param name="borderSide">The border sides to be set. For example, 
            (int)(BorderSide.Top | BorderSide.Right).</param>
      <param name="style">The style of the borders.</param>
      <example>
        <code>
            [XML]
            &lt;Text&gt;
            	&lt;TextBorder&gt;
            		&lt;All LineWidth="0.5" BorderStyle="Double" /&gt;
            	&lt;/TextBorder&gt;
            	&lt;Segment&gt;hello world&lt;/Segment&gt;
            &lt;/Text&gt;
            
            [C#]
            Text t = new Text("hello world");
            t.TextInfo.TextBorder = new BorderInfo((int)BorderSide.All,0.5F);
            t.TextInfo.TextBorder.SetBorderStyle((int)BorderSide.All,BorderStyle.Double);
            
            [VB.NET]
            Dim t As Text =  New Text("hello world") 
            t.TextInfo.TextBorder = New BorderInfo(CType(BorderSide.All, Integer),0.5F)
            t.TextInfo.TextBorder.SetBorderStyle(CType(BorderSide.All, Integer),BorderStyle.Double)
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.BorderInfo.Left">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.GraphInfo" /> object that indicates left of the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BorderInfo.Right">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.GraphInfo" /> object that indicates right of the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BorderInfo.Top">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.GraphInfo" /> object that indicates the top border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.BorderInfo.Bottom">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.GraphInfo" /> object that indicates bottom of the border.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.BorderSide">
      <summary>
            Enumerates the border sides.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.None">
      <summary>
            No border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.Left">
      <summary>
            Left border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.Top">
      <summary>
            Top border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.Right">
      <summary>
            Right border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.Bottom">
      <summary>
            Bottom border.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderSide.All">
      <summary>
            All sides borders.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.BorderStyle">
      <summary>
            Enumerates the border styles for page border,text border and table border. Note that dash style is 
            not included in this enum. Dash can be set in <see cref="T:Aspose.Pdf.GraphInfo" />.
            </summary>
      <remarks>More border styles will be supported later.</remarks>
    </member>
    <member name="F:Aspose.Pdf.BorderStyle.Normal">
      <summary>
            Normal border style.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BorderStyle.Double">
      <summary>
            Double border style.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.BoxHorizontalAlignmentType">
      <summary>
            Enumerates the rules for horizontal alignment of floating box.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BoxHorizontalAlignmentType.None">
      <summary>
            No alignment type is used. This means the box is positioned using coordinates.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BoxHorizontalAlignmentType.Left">
      <summary>
            Left alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BoxHorizontalAlignmentType.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BoxHorizontalAlignmentType.Right">
      <summary>
            Right alignment.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.BoxHorizontalPositioningType">
      <summary>
            Enumerates the horizontal positioning types for floating box. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BoxHorizontalPositioningType.Margin">
      <summary>
            The distance is measured from the top page margin.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BoxHorizontalPositioningType.Page">
      <summary>
            The distance is measured from the top edge of the page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BoxHorizontalPositioningType.Column">
      <summary>
            The distance is measured from the left side of the column.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.BoxVerticalAlignmentType">
      <summary>
            Enumerates the rules for vertical alignment of floating box.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BoxVerticalAlignmentType.None">
      <summary>
            No alignment type is used. This means the box is positioned using coordinates.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BoxVerticalAlignmentType.Top">
      <summary>
            Top alignment
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BoxVerticalAlignmentType.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BoxVerticalAlignmentType.Bottom">
      <summary>
            Bottom alignment.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.BoxVerticalPositioningType">
      <summary>
            Enumerates the vertical positioning types for floating box.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BoxVerticalPositioningType.Margin">
      <summary>
            The distance is measured from the left page margin.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BoxVerticalPositioningType.Page">
      <summary>
            The distance is measured from the left edge of the page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.BoxVerticalPositioningType.Paragraph">
      <summary>
            The distance is measured from the top of the paragraph that contains the anchor.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.CcittSubFormat">
      <summary>
            Summary description for CcittSubFormat.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.CcittSubFormat.Group31D">
      <summary>
            CCITT group3 1D format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.CcittSubFormat.Group32D">
      <summary>
            CCITT group3 2D format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.CcittSubFormat.Group4">
      <summary>
            CCITT group4 format
            </summary>
    </member>
    <member name="F:Aspose.Pdf.CcittSubFormat.UnKnown">
      <summary>
      </summary>
    </member>
    <member name="T:Aspose.Pdf.Cell">
      <summary>
            Represents a cell in a <see cref="T:Aspose.Pdf.Table" />.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		 
            Aspose.Pdf.Table table1 = new Aspose.Pdf.Table();
            sec1.Paragraphs.Add(table1);
            table1.ColumnWidths = "70 2cm";
            		
            Row row1 = table1.Rows.Add();
            		
            Cell cell1Row1 = row1.Cells.Add("ColumnsSpan = 2");
            cell1Row1.ColumnsSpan = 2;
            cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            Row row2 = table1.Rows.Add();
            		
            Cell cell1Row2 = row2.Cells.Add("cell1");
            cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F);
            	
            Cell cell2Row2 = row2.Cells.Add("cell2");
            cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new Aspose.Pdf.Color("Red"));
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim table1 As Aspose.Pdf.Table = New Aspose.Pdf.Table()
            sec1.Paragraphs.Add(table1)
            table1.ColumnWidths = "70 2cm"
            
            Dim row1 As Row = table1.Rows.Add()
            
            Dim cell1Row1 As Cell = row1.Cells.Add("ColumnsSpan = 2")
            cell1Row1.ColumnsSpan = 2
            cell1Row1.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            Dim row2 As Row = table1.Rows.Add()
            
            Dim cell1Row2 As Cell = row2.Cells.Add("cell1")
            cell1Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            Dim cell2Row2 As Cell = row2.Cells.Add("cell2")
            cell2Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5, New Aspose.Pdf.Color("Red"))
            
            pdf1.Save(...)
            
            [XML]
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Table ColumnWidths="70 2cm"&gt;
            			&lt;Row&gt;
            				&lt;Cell ColumnsSpan="2"&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            			&lt;/Row&gt;
            			&lt;Row&gt;
            				&lt;Cell&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;cell1&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            				&lt;Cell&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;cell2&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            			&lt;/Row&gt;
            		&lt;/Table&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Cell.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Cell" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Cell.#ctor(Aspose.Pdf.Table)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Cell" /> class in a table.
            </summary>
      <param name="table">The <see cref="P:Aspose.Pdf.Cell.Table" /> object where the cell is in.</param>
      <remarks>Please use Cell(Row row) instead.</remarks>
    </member>
    <member name="M:Aspose.Pdf.Cell.#ctor(Aspose.Pdf.Row)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Cell" /> class in a table.
            </summary>
      <param name="row">The <see cref="P:Aspose.Pdf.Cell.Row" /> object where the cell is in.</param>
    </member>
    <member name="M:Aspose.Pdf.Cell.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Cell" /> object. This method clones only the format but not contents of the cell.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Cell" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Cell.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Cell" /> object. This method clones both format and contents of the cell.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Cell" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Cell.Border">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.BorderInfo" /> object that indicates the cell's border info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.BackgroundColor">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Color" /> object that indicatres the backgorund color of the 
            cell.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.Padding">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.MarginInfo" /> object that indicates the cell's padding.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.FitWidth">
      <summary>
            Obsolete.Please use Table.ColumnWidths instead. 
            Gets or sets a float value that indicates the fit width of the cell.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,FitWidth="2cm" or FitWidth="2inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.Paragraphs">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Cell.Paragraphs" /> collection that indicates all paragraphs in the cell.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.ID">
      <summary>
            Gets or sets a string that indicates the ID of the cell.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.ColumnsSpan">
      <summary>
            Gets or sets an int value that indicates how many columns the cell spans.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.DefaultCellTextInfo">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.TextInfo" /> object that indicates the default cell text format info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.VerticalTextRotationAngle">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.VerticalTextRotationType" /> object that indicates the text rotation 
            angle in floating box or cells.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.VerticalAlignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.VerticalAlignmentType" /> object that indicates the vertical alignment type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.RowSpan">
      <summary>
            Gets or sets a int value that indicates how many rows the cell spans.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cell.Alignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.AlignmentType" /> object that indicates the alignment type of the cell.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Cells">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.Cell" /> objects.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		 
            Aspose.Pdf.Table table1 = new Aspose.Pdf.Table();
            sec1.Paragraphs.Add(table1);
            table1.ColumnWidths = "70 2cm";
            		
            Row row1 = table1.Rows.Add();
            		
            Cell cell1Row1 = row1.Cells.Add("ColumnsSpan = 2");
            cell1Row1.ColumnsSpan = 2;
            cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            Row row2 = table1.Rows.Add();
            		
            Cell cell1Row2 = row2.Cells.Add("cell1");
            cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F);
            	
            Cell cell2Row2 = row2.Cells.Add("cell2");
            cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new Aspose.Pdf.Color("Red"));
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim table1 As Aspose.Pdf.Table = New Aspose.Pdf.Table()
            sec1.Paragraphs.Add(table1)
            table1.ColumnWidths = "70 2cm"
            
            Dim row1 As Row = table1.Rows.Add()
            
            Dim cell1Row1 As Cell = row1.Cells.Add("ColumnsSpan = 2")
            cell1Row1.ColumnsSpan = 2
            cell1Row1.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            Dim row2 As Row = table1.Rows.Add()
            
            Dim cell1Row2 As Cell = row2.Cells.Add("cell1")
            cell1Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            Dim cell2Row2 As Cell = row2.Cells.Add("cell2")
            cell2Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5, New Aspose.Pdf.Color("Red"))
            
            pdf1.Save(...)
            
            [XML]
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Table ColumnWidths="70 2cm"&gt;
            			&lt;Row&gt;
            				&lt;Cell ColumnsSpan="2"&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            			&lt;/Row&gt;
            			&lt;Row&gt;
            				&lt;Cell&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;cell1&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            				&lt;Cell&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;cell2&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            			&lt;/Row&gt;
            		&lt;/Table&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Cells.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Cells" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Cells.Add(Aspose.Pdf.Cell)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Cell" /> object into the collection.
            </summary>
      <param name="cell">The <see cref="T:Aspose.Pdf.Cell" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Cells.Add">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Cell" /> class and add it to the Cells collection.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Cell" /> object</returns>
    </member>
    <member name="M:Aspose.Pdf.Cells.Add(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Cell" /> class,adds a string to the new cell object 
            and then add the Cell object to the Cells collection. 
            </summary>
      <param name="cellString">The string to be added to the cell.</param>
      <returns>The new <see cref="T:Aspose.Pdf.Cell" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Cells.Add(System.String,Aspose.Pdf.TextInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Cell" /> class and add it to the Cells collection. 
            Adds a string with specified text format to the new cell.
            </summary>
      <param name="cellString">The string to be added to the cell.</param>
      <param name="textInfo">The TextInfo object that contains text format information</param>
      <returns>The new <see cref="T:Aspose.Pdf.Cell" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Cells.Insert(System.Int32,Aspose.Pdf.Cell)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Cell" /> object into the collection at specified position.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Aspose.Pdf.Cell" /> object should be inserted.</param>
      <param name="cell">The <see cref="T:Aspose.Pdf.Cell" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Cells.Insert(Aspose.Pdf.Cell,Aspose.Pdf.Cell)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Cell" /> object into the collection after specified Cell object.
            </summary>
      <param name="cellToInsertAfter">The <see cref="T:Aspose.Pdf.Cell" /> object to insert after.</param>
      <param name="newCell">The <see cref="T:Aspose.Pdf.Cell" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Cells.Remove(Aspose.Pdf.Cell)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Cell" /> object from the collection.
            </summary>
      <param name="cellToRemove">The <see cref="T:Aspose.Pdf.Cell" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.Cells.CopyTo(Aspose.Pdf.Cell[],System.Int32)">
      <summary>
            Copies the elements to a cells array, starting at a specified array index.
            </summary>
      <param name="cellArray">The cells array.</param>
      <param name="index">The start index.</param>
    </member>
    <member name="M:Aspose.Pdf.Cells.IndexOf(Aspose.Pdf.Cell)">
      <summary>
            Gets the index of a specified cell in the collection.
            </summary>
      <param name="cell">The specified <see cref="T:Aspose.Pdf.Cell" /> object.</param>
      <returns>The index value.</returns>
    </member>
    <member name="P:Aspose.Pdf.Cells.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Cell" /> object from the collection according to cell index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Cells.Item(System.String)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Cell" /> object from the collection according to cell ID.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Circle">
      <summary>
            Represents a circle <see cref="T:Aspose.Pdf.Shape" /> in a Graph.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Graph graph1 = new Graph(sec1,100,400);
            sec1.Paragraphs.Add(graph1);
            		
            Circle circle1 = new Circle(graph1,200,50,30);
            graph1.Shapes.Add(circle1);
            
            circle1.GraphInfo.Color = new Aspose.Pdf.Color("Red");
            
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim graph1 As Graph = New Graph(sec1, 100, 400)
            sec1.Paragraphs.Add(graph1)
            
            Dim circle1 As Circle = New Circle(graph1, 200, 50, 30)
            graph1.Shapes.Add(circle1)
            
            circle1.GraphInfo.Color = New Aspose.Pdf.Color("Red")
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Graph Height="100" Width="400"&gt;
            			&lt;Circle CenterPosition="200 50" Radius="30" Color="Red"&gt;&lt;/Circle&gt;
            		&lt;/Graph&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Circle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Circle" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Circle.#ctor(System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Circle" /> class.
            </summary>
      <param name="xPosition">The x-coordinate of the center of the circle.</param>
      <param name="yPosition">The y-coordinate of the center of the circle.</param>
      <param name="radius">The radius of the circle.</param>
    </member>
    <member name="M:Aspose.Pdf.Circle.#ctor(Aspose.Pdf.Graph)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Circle" /> class.
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Graph" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Graph" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Circle.#ctor(Aspose.Pdf.Graph,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Circle" /> class.
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Graph" /> object.</param>
      <param name="xPosition">The x-coordinate of the center of the circle.</param>
      <param name="yPosition">The y-coordinate of the center of the circle.</param>
      <param name="radius">The radius of the circle.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Graph" /> object.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Circle.PosX">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the center of the circle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Circle.PosY">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the center of the circle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Circle.Radius">
      <summary>
            Gets or sets a float value that indicates the radius of the circle.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.CmykColorSpace">
      <summary>
            Represents the CMYK colorspace.
            </summary>
      <remarks>
            Note that you can use the <see cref="M:Aspose.Pdf.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)" /> constructor to create 
            a color object with CMYK colorspace and need not use this class directly.
            </remarks>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            	
            Graph graph1 = new Graph(sec1,200,400);
            sec1.Paragraphs.Add(graph1);
            
            float[] posArr = new float[]{100,0,300,0};
            Line l1 = new Line(graph1,posArr);
            l1.GraphInfo.Color = new Aspose.Pdf.Color("Red");
            graph1.Shapes.Add(l1);
            
            posArr = new float[]{100,50,300,50};
            Line l2 = new Line(graph1,posArr);
            l2.GraphInfo.Color = new Aspose.Pdf.Color(0,128,128);
            graph1.Shapes.Add(l2);
            
            posArr = new float[]{100,100,300,100};
            Line l3 = new Line(graph1,posArr);
            l3.GraphInfo.Color = new Aspose.Pdf.Color(0,128,64,0);
            graph1.Shapes.Add(l3);
            
            posArr = new float[]{100,150,300,150};
            Line l4 = new Line(graph1,posArr);
            l4.GraphInfo.Color = new Aspose.Pdf.Color((byte)140);
            graph1.Shapes.Add(l4);
            
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim graph1 As Graph = New Graph(sec1, 200, 400)
            sec1.Paragraphs.Add(graph1)
            
            Dim posArr As Single() = New Single() {100, 0, 300, 0}
            
            Dim l1 As Line = New Line(graph1, posArr)
            l1.GraphInfo.Color = New Aspose.Pdf.Color("Red")
            graph1.Shapes.Add(l1)
            
            posArr = New Single() {100, 50, 300, 50}
            
            Dim l2 As Line = New Line(graph1, posArr)
            l2.GraphInfo.Color = New Aspose.Pdf.Color(0, 128, 128)
            graph1.Shapes.Add(l2)
            
            posArr = New Single() {100, 100, 300, 100}
            
            Dim l3 As Line = New Line(graph1, posArr)
            l3.GraphInfo.Color = New Aspose.Pdf.Color(0, 128, 64, 0)
            graph1.Shapes.Add(l3)
            
            posArr = New Single() {100, 150, 300, 150}
            
            Dim l4 As Line = New Line(graph1, posArr)
            l4.GraphInfo.Color = New Aspose.Pdf.Color(CType(140,Byte))
            graph1.Shapes.Add(l4)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Graph Height="200" Width="400"&gt;
            			&lt;Line Color="Red" Position="100 0 300 0" /&gt;
            			&lt;Line Color="rgb 0 128 128" Position="100 50 300 50" /&gt;
            			&lt;Line Color="cmyk 0 128 64 0" Position="100 100 300 100" /&gt;
            			&lt;Line Color="gray 140" Position="100 150 300 150" /&gt;
            		&lt;/Graph&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.CmykColorSpace.#ctor">
      <summary>
      </summary>
    </member>
    <member name="P:Aspose.Pdf.CmykColorSpace.C">
      <summary>
            Represents a <see cref="T:System.Byte" /> value (0-255) that indicates the cyan component of the CMYK colorspace. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.CmykColorSpace.M">
      <summary>
            Represents a <see cref="T:System.Byte" /> value (0-255) that indicates the magenta component of the CMYK colorspace. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.CmykColorSpace.Y">
      <summary>
            Represents a <see cref="T:System.Byte" /> value (0-255) that indicates the yellow component of the CMYK colorspace. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.CmykColorSpace.K">
      <summary>
            Represents a <see cref="T:System.Byte" /> value (0-255) that indicates the black component of the CMYK colorspace. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Color">
      <summary>
            Represents the colorspaces used in Aspose.Pdf including <see cref="P:Aspose.Pdf.Color.RgbColorSpace" />, <see cref="P:Aspose.Pdf.Color.CmykColorSpace" /> and <see cref="P:Aspose.Pdf.Color.GrayColorSpace" />.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            	
            Graph graph1 = new Graph(sec1,200,400);
            sec1.Paragraphs.Add(graph1);
            
            float[] posArr = new float[]{100,0,300,0};
            Line l1 = new Line(graph1,posArr);
            l1.GraphInfo.Color = new Aspose.Pdf.Color("Red");
            graph1.Shapes.Add(l1);
            
            posArr = new float[]{100,50,300,50};
            Line l2 = new Line(graph1,posArr);
            l2.GraphInfo.Color = new Aspose.Pdf.Color(0,128,128);
            graph1.Shapes.Add(l2);
            
            posArr = new float[]{100,100,300,100};
            Line l3 = new Line(graph1,posArr);
            l3.GraphInfo.Color = new Aspose.Pdf.Color(0,128,64,0);
            graph1.Shapes.Add(l3);
            
            posArr = new float[]{100,150,300,150};
            Line l4 = new Line(graph1,posArr);
            l4.GraphInfo.Color = new Aspose.Pdf.Color((byte)140);
            graph1.Shapes.Add(l4);
            
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim graph1 As Graph = New Graph(sec1, 200, 400)
            sec1.Paragraphs.Add(graph1)
            
            Dim posArr As Single() = New Single() {100, 0, 300, 0}
            
            Dim l1 As Line = New Line(graph1, posArr)
            l1.GraphInfo.Color = New Aspose.Pdf.Color("Red")
            graph1.Shapes.Add(l1)
            
            posArr = New Single() {100, 50, 300, 50}
            
            Dim l2 As Line = New Line(graph1, posArr)
            l2.GraphInfo.Color = New Aspose.Pdf.Color(0, 128, 128)
            graph1.Shapes.Add(l2)
            
            posArr = New Single() {100, 100, 300, 100}
            
            Dim l3 As Line = New Line(graph1, posArr)
            l3.GraphInfo.Color = New Aspose.Pdf.Color(0, 128, 64, 0)
            graph1.Shapes.Add(l3)
            
            posArr = New Single() {100, 150, 300, 150}
            
            Dim l4 As Line = New Line(graph1, posArr)
            l4.GraphInfo.Color = New Aspose.Pdf.Color(CType(140,Byte))
            graph1.Shapes.Add(l4)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Graph Height="200" Width="400"&gt;
            			&lt;Line Color="Red" Position="100 0 300 0" /&gt;
            			&lt;Line Color="rgb 0 128 128" Position="100 50 300 50" /&gt;
            			&lt;Line Color="cmyk 0 128 64 0" Position="100 100 300 100" /&gt;
            			&lt;Line Color="gray 140" Position="100 150 300 150" /&gt;
            		&lt;/Graph&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Color.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Color" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Color.#ctor(System.Byte)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Color" /> class with <see cref="P:Aspose.Pdf.Color.GrayColorSpace" />.
            </summary>
      <param name="grayValue">The gray value of the gray colorspace.</param>
    </member>
    <member name="M:Aspose.Pdf.Color.#ctor(System.Byte,System.Byte,System.Byte)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Color" /> class with RgbColorSpace.
            </summary>
      <param name="r">The red color value.</param>
      <param name="g">The green color value.</param>
      <param name="b">The blue color value.</param>
    </member>
    <member name="M:Aspose.Pdf.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Color" /> class with <see cref="P:Aspose.Pdf.Color.CmykColorSpace" />.
            </summary>
      <param name="c">The cyan value.</param>
      <param name="m">The magenta value.</param>
      <param name="y">The yellow value.</param>
      <param name="k">The black value.</param>
    </member>
    <member name="M:Aspose.Pdf.Color.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Color" /> class with RgbColorSpace from specified color name.
            </summary>
      <param name="colorName">The color name. It can be any name in System.Drawing.Color or format like '#0000ff'.</param>
    </member>
    <member name="P:Aspose.Pdf.Color.ColorSpaceType">
      <summary>
            Represents a <see cref="P:Aspose.Pdf.Color.ColorSpaceType" /> object that indicates the colorspace type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Color.RgbColorSpace">
      <summary>
            Represents a <see cref="T:System.Drawing.Color" /> object that indicates the RGB colorspace. The alpha component of the ARGB will be ignored.
            Note that you can use the <see cref="M:Aspose.Pdf.Color.#ctor(System.Byte,System.Byte,System.Byte)" /> constructor to create 
            a color object with RGB colorspace and need not use this class directly.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Color.CmykColorSpace">
      <summary>
            Represents a <see cref="P:Aspose.Pdf.Color.CmykColorSpace" /> object that indicates the CMYK colorspace.
            Note that you can use the <see cref="M:Aspose.Pdf.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)" /> constructor to create 
            a color object with CMYK colorspace and need not use this class directly.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Color.GrayColorSpace">
      <summary>
            Represents a <see cref="P:Aspose.Pdf.Color.GrayColorSpace" /> object that indicates the gray colorspace.
            Note that you can use the <see cref="M:Aspose.Pdf.Color.#ctor(System.Byte)" /> constructor to create 
            a color object with gray colorspace and need not use this class directly.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ColorSpaceType">
      <summary>
            Enumerates the colorspace types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColorSpaceType.Cmyk">
      <summary>
            CMYK colorspace.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColorSpaceType.Gray">
      <summary>
            Gray colorspace.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColorSpaceType.Rgb">
      <summary>
            RGB colorspace.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColorSpaceType.Unknown">
      <summary>
            Unkown colorspace.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ColumnAdjustmentType">
      <summary>
            Enumerates adjustment types for determining the column widths of table.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColumnAdjustmentType.AutoFitToContent">
      <summary>
            AutoFit to content of cell.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColumnAdjustmentType.AutoFitToWindow">
      <summary>
            AutoFit to page width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ColumnAdjustmentType.Customized">
      <summary>
            Specified  by <see cref="P:Aspose.Pdf.Table.ColumnWidths" /> manually.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ColumnInfo">
      <summary>
            Encapsulates info for page columns.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.ColumnInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.ColumnInfo" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ColumnInfo.ColumnCount">
      <summary>
            Gets or sets a int value that indicates the number of columns in each page in the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ColumnInfo.ColumnWidths">
      <summary>
            Gets or sets a string that contains the width of columns in each page in the section. 
            The value of each column should be separated by blank.The default unit is point,
            but cm, inch and percentage of available width are also supported.For example,"120 2.5cm 1.5inch",or "60% 40%". The max column number 
            is 16.
            </summary>
      <remarks>
            If this property is not set, column width will be calculated automatically according to <see cref="P:Aspose.Pdf.ColumnInfo.ColumnCount" /> 
            and <see cref="P:Aspose.Pdf.ColumnInfo.ColumnSpacing" />.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.ColumnInfo.ColumnSpacing">
      <summary>
            Gets or sets a string that contains the spacing between columns in each page in the section. 
            The value of each spacing should be separated by blank. The default unit is point,
            but cm and inch are also supported.For example,"120 2.5cm 1.5inch".
            </summary>
      <remarks>
            If this property is not set, default value 1.25cm will be used for each spacing.
            </remarks>
    </member>
    <member name="T:Aspose.Pdf.Curve">
      <summary>
            Represents a curve <see cref="T:Aspose.Pdf.Shape" /> in a Graph.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Graph graph1 = new Graph(sec1,100,400);
            sec1.Paragraphs.Add(graph1);
            		
            float[] posArr = new float[]{0,0,200,80,300,40,350,90};
            Curve curve1 = new Curve(graph1,posArr);
            graph1.Shapes.Add(curve1);
            
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim graph1 As Graph = New Graph(sec1, 100, 400)
            sec1.Paragraphs.Add(graph1)
            
            Dim posArr() As Single = New Single() {0, 0, 200, 80, 300, 40, 350, 90}
            
            Dim curve1 As Curve = New Curve(graph1, posArr)
            graph1.Shapes.Add(curve1)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Graph Height="100" Width="400"&gt;
            			&lt;Curve Position="0 0 200 80 300 40 350 90" /&gt;
            		&lt;/Graph&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Curve.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Curve" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Curve.#ctor(System.Single[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Curve" /> class.
            </summary>
      <param name="positionArr">The position array of the control points of the curve.There should be four 
            control points,so the length of the array should be eight.</param>
    </member>
    <member name="M:Aspose.Pdf.Curve.#ctor(Aspose.Pdf.Graph)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Curve" /> class.
            </summary>
      <param name="graph">The graph object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Graph" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Curve.#ctor(Aspose.Pdf.Graph,System.Single[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Curve" /> class.
            </summary>
      <param name="graph">The graph object.</param>
      <param name="positionArr">The position array of the control points of the curve.There should be four 
            control points,so the length of the array should be eight.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Graph" /> object.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Curve.Position1X">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the control point 1 of the curve.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Curve.Position1Y">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the control point 1 of the curve.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Curve.Position2X">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the control point 2 of the curve.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Curve.Position2Y">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the control point 2 of the curve.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Curve.Position3X">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the control point 3 of the curve.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Curve.Position3Y">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the control point 3 of the curve.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Curve.Position4X">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the control point 4 of the curve.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Curve.Position4Y">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the control point 4 of the curve.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.DestinationType">
      <summary>
            Enumerates the destination types for internal and external links.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.DestinationType.Retain">
      <summary>
            Retains the original type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.DestinationType.FitPage">
      <summary>
            Fits the page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.DestinationType.FitWidth">
      <summary>
            Fits the width.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.DestinationType.FitHeight">
      <summary>
            Fits the height
            </summary>
    </member>
    <member name="F:Aspose.Pdf.DestinationType.FitBox">
      <summary>
            Fits the box
            </summary>
    </member>
    <member name="T:Aspose.Pdf.DocumentAttachment">
      <summary>
             Represents a set of document level attachment <see cref="T:Aspose.Pdf.Paragraph" /> in a Pdf document. Attachment can be file attachment,
             stream attachment or note annotation.
             </summary>
      <example>
        <code>
             [C#]
             Pdf pdf1 = new Pdf();
             Section sec1 = pdf1.Sections.Add();
             
             FileStream fstream;
             fstream = new FileStream("c:/word.doc", FileMode.Open);
             
             DocumentAttachment DocStreamAttachment = new DocumentAttachment();
             pdf1.DocumentAttachments.Add(DocStreamAttachment);
             DocStreamAttachment.DocumentAttachmentStream = fstream;
             DocStreamAttachment.DocumentAttachmentCotentType = "doc";
             
             DocumentAttachment DocFileAttachment = new DocumentAttachment();
             pdf1.DocumentAttachments.Add(DocFileAttachment);
             DocFileAttachment.DocumentAttachmentFile = @"c:/image.jpg";
             DocFileAttachment.DocumentAttachmentCotentType = "jpeg"; 
             
             Attachment PageFileAttachment = new Attachment();
             sec1.Paragraphs.Add(PageFileAttachment);
             PageFileAttachment.AttachmentType = AttachmentType.File;
             PageFileAttachment.AttachedFileName = "c:/text.txt";
             PageFileAttachment.AttachedFileType = "txt";	
             PageFileAttachment.FileIconType = FileIconType.Graph;
             PageFileAttachment.IconColor = new Aspose.Pdf.Color("Brown");
             
             fstream = new FileStream("c:/readme.txt", FileMode.Open);
             Attachment PageStreamAttachment = new Attachment();
             sec1.Paragraphs.Add(PageStreamAttachment);
             PageStreamAttachment.AttachedStream = fstream;
             PageStreamAttachment.AttachedFileType = "txt";            
             PageStreamAttachment.AttachmentType = AttachmentType.File;
             DocStreamAttachment.FileIconType = FileIconType.PaperClip;                
             
             Attachment PageNoteAttachment = new Attachment();
             sec1.Paragraphs.Add(PageNoteAttachment);
             PageNoteAttachment.AttachmentType = AttachmentType.Note;
             PageNoteAttachment.NoteContent = "This is a note.";
             PageNoteAttachment.IsNoteOpen = true;	
            
            	pdf1.Save("test.pdf");
            
             
             [Visual Basic] 
             Dim pdf1 As Pdf = New Pdf()
             Dim sec1 As Section = pdf1.Sections.Add()
             
             Dim fstream As FileStream = new FileStream("c:/word.doc", FileMode.Open)
             
             Dim DocStreamAttachment As DocumentAttachment = New DocumentAttachment()
             pdf1.DocumentAttachments.Add(DocStreamAttachment)
             DocStreamAttachment.DocumentAttachmentStream = fstream
             DocStreamAttachment.DocumentAttachmentCotentType = "doc"
             
             Dim DocFileAttachment As DocumentAttachment = New DocumentAttachment()
             pdf1.DocumentAttachments.Add(DocFileAttachment)
             DocFileAttachment.DocumentAttachmentFile = @"c:/image.jpg"
             DocFileAttachment.DocumentAttachmentCotentType = "jpeg"
             
             Dim PageFileAttachment As Attachment = New Attachment()
             sec1.Paragraphs.Add(PageFileAttachment)
             PageFileAttachment.AttachmentType = AttachmentType.File
             PageFileAttachment.AttachedFileName = "c:/text.txt"
             PageFileAttachment.AttachedFileType = "txt"	
             PageFileAttachment.FileIconType = FileIconType.Graph
             PageFileAttachment.IconColor = new Aspose.Pdf.Color("Brown")
             
             fstream = new FileStream("c:/readme.txt", FileMode.Open)
             Dim PageStreamAttachment As Attachment = New Attachment()
             sec1.Paragraphs.Add(PageStreamAttachment)
             PageStreamAttachment.AttachedStream = fstream
             PageStreamAttachment.AttachedFileType = "txt"      
             PageStreamAttachment.AttachmentType = AttachmentType.File
             DocStreamAttachment.FileIconType = FileIconType.PaperClip                
             
             Dim PageNoteAttachment As Attachment = New Attachment()
             sec1.Paragraphs.Add(PageNoteAttachment)
             PageNoteAttachment.AttachmentType = AttachmentType.Note
             PageNoteAttachment.NoteContent = "This is a note."
             PageNoteAttachment.IsNoteOpen = true
             pdf1.Save("test.pdf")
             
             
             [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
               &lt;DocumentAttachment DocumentAttachmentFileName="c:/word.doc" 
                   DocumentAttachmentFileType="doc"&gt;
               &lt;/DocumentAttachment&gt;
               &lt;DocumentAttachment DocumentAttachmentFileName="c:/image.jpg" 
                   DocumentAttachmentFileType="jpeg"&gt;
               &lt;/DocumentAttachment&gt;  
               &lt;Section&gt;
                 &lt;Attachment AttachmentType="File" AttachedFileName="c:/text.txt" AttachedFileType="txt" 
                 		FileIconType="Graph" IconColor="Brown"&gt;
                 &lt;/Attachment&gt;
                 &lt;Attachment AttachmentType="File" AttachedFileName="c:/readme.txt" AttachedFileType="txt" 
                 		FileIconType="PaperClip"&gt;
                 &lt;/Attachment&gt;
                 &lt;Attachment AttachmentType="Note" IsNoteOpen="true" 
                 		NoteContent="This is a note."&gt;
                 &lt;/Attachment&gt;
               &lt;/Section&gt;
             &lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.DocumentAttachment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.DocumentAttachment" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentAttachment.DocumentAttachmentFile">
      <summary>
            Gets or sets a string that indicates the DocumentAttachment file name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentAttachment.DocumentAttachmentStream">
      <summary>
            Gets or sets a stream attaches to the document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.DocumentAttachment.DocumentAttachmentCotentType">
      <summary>
            Gets or sets a string that indicates the MIME type of the attached file. When 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.DocumentAttachments">
      <summary>
             Represents a set of document level attachment <see cref="T:Aspose.Pdf.Paragraph" /> in a Pdf document. Attachment can be file attachment,
             stream attachment or note annotation.
             </summary>
      <example>
        <code>
             [C#]
             Pdf pdf1 = new Pdf();
             Section sec1 = pdf1.Sections.Add();
             
             FileStream fstream;
             fstream = new FileStream("c:/word.doc", FileMode.Open);
             
             DocumentAttachment DocStreamAttachment = new DocumentAttachment();
             pdf1.DocumentAttachments.Add(DocStreamAttachment);
             DocStreamAttachment.DocumentAttachmentStream = fstream;
             DocStreamAttachment.DocumentAttachmentCotentType = "doc";
             
             DocumentAttachment DocFileAttachment = new DocumentAttachment();
             pdf1.DocumentAttachments.Add(DocFileAttachment);
             DocFileAttachment.DocumentAttachmentFile = @"c:/image.jpg";
             DocFileAttachment.DocumentAttachmentCotentType = "jpeg"; 
             
             Attachment PageFileAttachment = new Attachment();
             sec1.Paragraphs.Add(PageFileAttachment);
             PageFileAttachment.AttachmentType = AttachmentType.File;
             PageFileAttachment.AttachedFileName = "c:/text.txt";
             PageFileAttachment.AttachedFileType = "txt";	
             PageFileAttachment.FileIconType = FileIconType.Graph;
             PageFileAttachment.IconColor = new Aspose.Pdf.Color("Brown");
             
             fstream = new FileStream("c:/readme.txt", FileMode.Open);
             Attachment PageStreamAttachment = new Attachment();
             sec1.Paragraphs.Add(PageStreamAttachment);
             PageStreamAttachment.AttachedStream = fstream;
             PageStreamAttachment.AttachedFileType = "txt";            
             PageStreamAttachment.AttachmentType = AttachmentType.File;
             DocStreamAttachment.FileIconType = FileIconType.PaperClip;                
             
             Attachment PageNoteAttachment = new Attachment();
             sec1.Paragraphs.Add(PageNoteAttachment);
             PageNoteAttachment.AttachmentType = AttachmentType.Note;
             PageNoteAttachment.NoteContent = "This is a note.";
             PageNoteAttachment.IsNoteOpen = true;	
            
            	pdf1.Save("test.pdf");
            
             
             [Visual Basic] 
             Dim pdf1 As Pdf = New Pdf()
             Dim sec1 As Section = pdf1.Sections.Add()
             
             Dim fstream As FileStream = new FileStream("c:/word.doc", FileMode.Open)
             
             Dim DocStreamAttachment As DocumentAttachment = New DocumentAttachment()
             pdf1.DocumentAttachments.Add(DocStreamAttachment)
             DocStreamAttachment.DocumentAttachmentStream = fstream
             DocStreamAttachment.DocumentAttachmentCotentType = "doc"
             
             Dim DocFileAttachment As DocumentAttachment = New DocumentAttachment()
             pdf1.DocumentAttachments.Add(DocFileAttachment)
             DocFileAttachment.DocumentAttachmentFile = @"c:/image.jpg"
             DocFileAttachment.DocumentAttachmentCotentType = "jpeg"
             
             Dim PageFileAttachment As Attachment = New Attachment()
             sec1.Paragraphs.Add(PageFileAttachment)
             PageFileAttachment.AttachmentType = AttachmentType.File
             PageFileAttachment.AttachedFileName = "c:/text.txt"
             PageFileAttachment.AttachedFileType = "txt"	
             PageFileAttachment.FileIconType = FileIconType.Graph
             PageFileAttachment.IconColor = new Aspose.Pdf.Color("Brown")
             
             fstream = new FileStream("c:/readme.txt", FileMode.Open)
             Dim PageStreamAttachment As Attachment = New Attachment()
             sec1.Paragraphs.Add(PageStreamAttachment)
             PageStreamAttachment.AttachedStream = fstream
             PageStreamAttachment.AttachedFileType = "txt"      
             PageStreamAttachment.AttachmentType = AttachmentType.File
             DocStreamAttachment.FileIconType = FileIconType.PaperClip                
             
             Dim PageNoteAttachment As Attachment = New Attachment()
             sec1.Paragraphs.Add(PageNoteAttachment)
             PageNoteAttachment.AttachmentType = AttachmentType.Note
             PageNoteAttachment.NoteContent = "This is a note."
             PageNoteAttachment.IsNoteOpen = true
             pdf1.Save("test.pdf")
             
             
             [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
             &lt;Pdf xmlns="Aspose.Pdf"&gt;
               &lt;DocumentAttachment DocumentAttachmentFileName="c:/word.doc" 
                   DocumentAttachmentFileType="doc"&gt;
               &lt;/DocumentAttachment&gt;
               &lt;DocumentAttachment DocumentAttachmentFileName="c:/image.jpg" 
                   DocumentAttachmentFileType="jpeg"&gt;
               &lt;/DocumentAttachment&gt;  
               &lt;Section&gt;
                 &lt;Attachment AttachmentType="File" AttachedFileName="c:/text.txt" AttachedFileType="txt" 
                 		FileIconType="Graph" IconColor="Brown"&gt;
                 &lt;/Attachment&gt;
                 &lt;Attachment AttachmentType="File" AttachedFileName="c:/readme.txt" AttachedFileType="txt" 
                 		FileIconType="PaperClip"&gt;
                 &lt;/Attachment&gt;
                 &lt;Attachment AttachmentType="Note" IsNoteOpen="true" 
                 		NoteContent="This is a note."&gt;
                 &lt;/Attachment&gt;
               &lt;/Section&gt;
             &lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.DocumentAttachments.Add(Aspose.Pdf.DocumentAttachment)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.DocumentAttachment" /> object into the collection.
            </summary>
      <param name="docattachment">The <see cref="T:Aspose.Pdf.DocumentAttachment" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.DocumentAttachments.Insert(Aspose.Pdf.DocumentAttachment,Aspose.Pdf.DocumentAttachment)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.DocumentAttachment" /> object into the collection after specified <see cref="T:Aspose.Pdf.DocumentAttachment" /> object.
            </summary>
      <param name="attachmentToInsertAfter">The <see cref="T:Aspose.Pdf.DocumentAttachment" /> object to insert after. 
            If this object is null, the new object will be inserted as the first member.</param>
      <param name="newAttachment">The <see cref="T:Aspose.Pdf.DocumentAttachment" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.DocumentAttachments.Insert(System.Int32,Aspose.Pdf.DocumentAttachment)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.DocumentAttachment" /> object into the collection after specified <see cref="T:Aspose.Pdf.DocumentAttachment" /> object.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Aspose.Pdf.DocumentAttachment" /> object should be inserted.</param>
      <param name="attachment">The <see cref="T:Aspose.Pdf.DocumentAttachment" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.DocumentAttachments.Remove(Aspose.Pdf.DocumentAttachment)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.DocumentAttachment" /> object from the collection.
            </summary>
      <param name="attachmentToRemove">The <see cref="T:Aspose.Pdf.DocumentAttachment" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.DocumentAttachments.Remove(System.Int32)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.DocumentAttachment" /> object from the collection.
            </summary>
      <param name="index">The index of the <see cref="T:Aspose.Pdf.DocumentAttachment" /> object to be romoved.</param>
    </member>
    <member name="P:Aspose.Pdf.DocumentAttachments.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.DocumentAttachment" /> object from the collection according to DocumentAttachment index.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Ellipse">
      <summary>
            Represents a Ellipse <see cref="T:Aspose.Pdf.Shape" /> in a Pdf document.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            
            Section sec1 = pdf1.Sections.Add();
               
            Graph graph1 = new Graph(sec1,400,100);
            sec1.Paragraphs.Add(graph1);
               
            Aspose.Pdf.Ellipse ellipse1 = new Aspose.Pdf.Ellipse(graph1,50,10,100,50);
            graph1.Shapes.Add(ellipse1);
               
            pdf1.Save("d:/test/test.pdf");
            
            [Visual Basic]
            Dim pdf1 As Pdf =  New Pdf() 
            
            Dim sec1 As Section =  pdf1.Sections.Add() 
            
            Dim graph1 As Graph =  New Graph(sec1,400,100) 
            sec1.Paragraphs.Add(graph1)
            
            Dim ellipse1 As Aspose.Pdf.Ellipse =  New Aspose.Pdf.Ellipse(graph1,50,10,100,50) 
            graph1.Shapes.Add(ellipse1)
            
            pdf1.Save("d:/test/test.pdf")
            
            [XML]
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Graph Width="400" Height="100"&gt;
            			&lt;Ellipse Position="50 10 100 50" /&gt;
            		&lt;/Graph&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Ellipse.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Ellipse" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Ellipse.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Ellipse" /> class.
            </summary>
      <param name="left">The left position of the ellipse.</param>
      <param name="bottom">The bottom position of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="width">The width of the ellipse.</param>
    </member>
    <member name="M:Aspose.Pdf.Ellipse.#ctor(Aspose.Pdf.Graph)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Ellipse" /> class.
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Graph" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Graph" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Ellipse.#ctor(Aspose.Pdf.Graph,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Ellipse" /> class.
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Graph" /> object.</param>
      <param name="left">The left position of the ellipse.</param>
      <param name="bottom">The bottom position of the ellipse.</param>
      <param name="height">The height of the ellipse.</param>
      <param name="width">The width of the ellipse.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Graph" /> object.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Ellipse.Left">
      <summary>
            Gets or sets a float value that indicates the left position of the ellipse.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Ellipse.Bottom">
      <summary>
            Gets or sets a float value that indicates the bottom position of the ellipse.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Ellipse.Width">
      <summary>
            Gets or sets a float value that indicates the width of the ellipse.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Ellipse.Height">
      <summary>
            Gets or sets a float value that indicates the height of the ellipse.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.EncryptionType">
      <summary>
            Enumerates the encryption types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.EncryptionType.Encryption40Bits">
      <summary>
            40 bits encryption
            </summary>
    </member>
    <member name="F:Aspose.Pdf.EncryptionType.Encryption128Bits">
      <summary>
            128 bits encryption
            </summary>
    </member>
    <member name="F:Aspose.Pdf.EncryptionType.None">
      <summary>
            No encryption
            </summary>
    </member>
    <member name="T:Aspose.Pdf.EndNote">
      <summary>
            Represents the EndNote of Segment<see cref="T:Aspose.Pdf.Segment" />.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            Segment seg1 = new Segment("dog");
            EndNote endnote1 = new EndNote("dog is an animal");
            seg1.EndNote = endnote1;
            
            Text text1 = new Text();
            text1.Segments.Add(seg1);
            
            sec1.Paragraphs.Add(text1);
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim seg1 As Segment  = new Segment("dog");
            Dim endnote1 As EndNote  = new EndNote("dog is an animal");
            seg1.EndNote = endnote1;
            
            Dim text1 AsText = new Text();
            text1.Segments.Add(seg1);
            
            sec1.Paragraphs.Add(text1)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section PageHeight="1684"&gt;
            		&lt;Text MarginTop="0"&gt;
            			&lt;Segment&gt;dog&lt;/Segment&gt;
            			&lt;Segment&gt;
            				&lt;EndNote fontsize="7"&gt;
            					&lt;Segment&gt;dog is an animal&lt;/Segment&gt;
            				&lt;/EndNote&gt;
            			&lt;/Segment&gt;		
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.FootNote">
      <summary>
            Represents the FootNote of Segment<see cref="T:Aspose.Pdf.Segment" />.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            Segment seg1 = new Segment("dog");
            FootNote footnote1 = new FootNote("dog is an animal");
            seg1.FootNote = footnote1;
            
            Text text1 = new Text();
            text1.Segments.Add(seg1);
            
            sec1.Paragraphs.Add(text1);
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim seg1 As Segment  = new Segment("dog");
            Dim footnote1As FootNote  = new FootNote("dog is an animal");
            seg1.FootNote = footnote1;
            
            Dim text1 AsText = new Text();
            text1.Segments.Add(seg1);
            
            sec1.Paragraphs.Add(text1)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section PageHeight="1684"&gt;
            		&lt;Text MarginTop="0"&gt;
            			&lt;Segment&gt;dog&lt;/Segment&gt;
            			&lt;Segment&gt;
            				&lt;FootNote fontsize="7"&gt;
            					&lt;Segment&gt;dog is an animal&lt;/Segment&gt;
            				&lt;/FootNote&gt;
            			&lt;/Segment&gt;		
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.FootNote.#ctor">
      <summary>
            constructor with no arguments for FootNote class .
            </summary>
    </member>
    <member name="M:Aspose.Pdf.FootNote.#ctor(System.String)">
      <summary>
            constructor with footnote content for FootNote class.The argument note is used for the content of footnote.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FootNote.NumberingFormat">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.NumberingFormatType" /> enumaration value that indicates footnote number format in the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FootNote.NumberingContinuation">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.NumberingContinuationType" /> enumaration value that indicates footnote numbering continuation style£¬such as continuation in pdf or section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FootNote.Segments">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Segment" /> object that indicates the content of footnote.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FootNote.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.FootNote.TextInfo" /> object that indicates the text information of footnote.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.EndNote.#ctor">
      <summary>
            Constructor without content for EndNote object
            </summary>
    </member>
    <member name="M:Aspose.Pdf.EndNote.#ctor(System.String)">
      <summary>
            constructor with content for EndNote object
            </summary>
    </member>
    <member name="P:Aspose.Pdf.EndNote.NumberingContinuation">
      <summary>
            Get or set a NumberingContinuationType value that indicates the continuation type of end note's number.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.EndNote.EndNotePositioning">
      <summary>
            Get or set a NEndNotePositioningType value that indicates the position of the end note.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.EndNotePositioningType">
      <summary>
            Enumerates the positioning types for endnote.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.EndNotePositioningType.EndOfSection">
      <summary>
            The end note will be placed at end of the current section.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.EndNotePositioningType.EndOfDoc">
      <summary>
            The end note will be placed at end of the current Pdf document.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.FileIconType">
      <summary>
            Enumerates file icon types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.FileIconType.Graph">
      <summary>
            Graph type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.FileIconType.PaperClip">
      <summary>
            PaperClip type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.FileIconType.PushPin">
      <summary>
            PushPin type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.FileIconType.Tag">
      <summary>
            Tag type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.FloatingBox">
      <summary>
             Represents a FloatingBox <see cref="T:Aspose.Pdf.Paragraph" /> in a Pdf document. FloatingBox is custom positioned.
             </summary>
      <example>
        <code>
             [C#]
             Pdf pdf1 = new Pdf();
             
             Section sec1 = pdf1.Sections.Add();
             
             FloatingBox box1 = new FloatingBox(108,80);
             sec1.Paragraphs.Add(box1);
            	box1.BoxHorizontalPositioning = BoxHorizontalPositioningType.Margin;
            	box1.BoxHorizontalAlignment = BoxHorizontalAlignmentType.Right;
            	box1.BoxVerticalPositioning = BoxVerticalPositioningType.Page;
            	box1.BoxVerticalAlignment = BoxVerticalAlignmentType.Center;
            	box1.Paragraphs.Add(new Text("This is a test for floating text box."));
            
            	pdf1.Save("d:/test/test.pdf");
            
             [Visual Basic]
            	Dim pdf1 As Pdf =  New Pdf() 
             
            	Dim sec1 As Section =  pdf1.Sections.Add() 
            
            	Dim box1 As FloatingBox =  New FloatingBox(108,80) 
            	sec1.Paragraphs.Add(box1)
            	box1.BoxHorizontalPositioning = BoxHorizontalPositioningType.Margin
            	box1.BoxHorizontalAlignment = BoxHorizontalAlignmentType.Right
            	box1.BoxVerticalPositioning = BoxVerticalPositioningType.Page
            	box1.BoxVerticalAlignment = BoxVerticalAlignmentType.Center
            	box1.Paragraphs.Add(New Text("This is a test for floating text box."))
             
            	pdf1.Save("d:/test/test.pdf")
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            	&lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            	&lt;FloatingBox Width="1.5inch" Height="80" BoxHorizontalPositioning="Margin" 
            	BoxHorizontalAlignment="Right" BoxVerticalPositioning="Page" 
            	BoxVerticalAlignment="Center"&gt;
            	&lt;Text&gt;&lt;Segment&gt;This is a test for floating text box.&lt;/Segment&gt;&lt;/Text&gt;
            	&lt;/FloatingBox&gt;
            	&lt;/Section&gt;
            	&lt;/Pdf&gt;
            	
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.FloatingBox.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.FloatingBox" /> class with specified width and height.
            </summary>
      <param name="width">The width of the box.</param>
      <param name="height">The height of the box.</param>
    </member>
    <member name="M:Aspose.Pdf.FloatingBox.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.FloatingBox" /> object. Paragraphs in the floating box are not cloned.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.FloatingBox" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.FloatingBox.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.FloatingBox" /> object. All members in the FloatingBox are cloned.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.FloatingBox" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.BoxWidth">
      <summary>
            Gets or sets a float value that indicates the width of the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.BoxHeight">
      <summary>
            Gets or sets a float value that indicates the height of the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.Paragraphs">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.FloatingBox.Paragraphs" /> collection that indicates all paragraphs in the cell.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.BoxHorizontalPositioning">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.BoxHorizontalPositioningType" /> object that indicates the horizontal 
            positioning type of the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.BoxVerticalPositioning">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.BoxVerticalPositioningType" /> object that indicates the vertical 
            positioning type of the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.BoxHorizontalAlignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.BoxHorizontalAlignmentType" /> object that indicates the horizontal 
            alignment type of the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.BoxVerticalAlignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.BoxVerticalAlignmentType" /> object that indicates the vertical 
            alignment type of the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.TextVerticalAlignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.VerticalAlignmentType" /> enum that indicates the vertical alignment 
            type of all paragraphs in the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.Border">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.BorderInfo" /> object that indicates the border info of the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.BackgroundColor">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Color" /> object that indicatres the backgorund color of the 
            floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.Padding">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.MarginInfo" /> object that indicates the padding of the floating box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.VerticalTextRotationAngle">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.VerticalTextRotationType" /> object that indicates the text rotation 
            angle in floating box or cells.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FloatingBox.ZIndex">
      <summary>
            Gets or sets a int value that indicates the Z-order of the floating box. A floating box with larger ZIndex 
            will be placed over the floating box with smaller ZIndex. ZIndex can be negative. Floating box with negative 
            ZIndex will be placed behind the text in the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormatArray.Length">
      <summary>
            Represents an int value that indicates the length of the <see cref="T:Aspose.Pdf.ListLevelFormat" /> array. It should be equal to or greater than 1.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormatArray.Item(System.Int32)">
      <summary>
            Gets or sets the specified value in terms of index.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.FormField">
      <summary>
            Represents an formfield <see cref="T:Aspose.Pdf.Paragraph" /> in the Pdf document.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf(); 
            Section sec1 = pdf1.Sections.Add(); 
            FormField combo = new FormField(); 
            combo.FormFieldType = FormFieldType.Combo; 
            combo.FieldName = "ACombo"; 
            combo.ChoiceOptions = new string[]{"Red","Green","Blue"}; 
            combo.FieldValue = "Red"; 
            combo.FormWidth = 80; 
            combo.FormHeight = 20; 
            sec1.Paragraphs.Add(combo); 
            pdf1.Save(...);
            
            [VisualBasic]
            Dim pdf1 As Pdf = New Pdf 
            Dim sec1 As Section = pdf1.Sections.Add() 
            Dim combo As FormField = New FormField 
            combo.FormFieldType = FormFieldType.Combo 
            combo.FieldName = "ACombo" 
            combo.ChoiceOptions = New String() {"Red", "Green", "Blue"} 
            combo.FieldValue = "Red" 
            combo.FormWidth = 80 
            combo.FormHeight = 20 
            sec1.Paragraphs.Add(combo) 
            pdf1.Save(...) 
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
            &lt;Pdf xmlns="Aspose.Pdf"&gt; 
            	&lt;Section&gt; 
            		&lt;FormField FormFieldType="Combo" FieldName="ACombo" FieldValue="Red" ChoiceOptions="Red Green Blue" FormWidth="80" FormHeight="20" /&gt;
            	&lt;/Section&gt; 
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.FormField.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.FormField" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.FormFieldType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.FormField.FormFieldType" /> enumeration that indicates the formfield type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.ComboIsEditable">
      <summary>
            Gets or sets a bool value that indicates whether the combo is editable. Default value is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.ChoiceOptions">
      <summary>
            Gets or sets a string array that indicates the options of combo or list field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.ChoiceSelections">
      <summary>
            Gets or sets a int array that indicates the choice selection indexes.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.TopIndex">
      <summary>
            Gets or sets a int value that indicates the top index (in the options array) of combo or list field. Default is 0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.FieldName">
      <summary>
            Gets or sets a string that indicates the name of the field. Note that each field MUST have a 
            unique name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.FieldValue">
      <summary>
            Gets or sets a string that indicates the value of the field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.FormWidth">
      <summary>
            Gets or sets a float value that indicates the width of the formfield. Default value is 100 points.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.FormHeight">
      <summary>
            Gets or sets a float value that indicates the height of the formfield. Default value is 30 points.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.CheckBoxIsChecked">
      <summary>
            Gets or sets a bool value that indicates whether the checkbox is checked. Default is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.TextFontName">
      <summary>
            Gets or sets a string that indicates the font name of the text field. The core fonts 
            (Courier,Courier-Bold,Courier-BoldOblique,Courier-Oblique,Helvetica,Helvetica-Bold,
            Helvetica-BoldOblique, Helvetica-Oblique,Symbol,Times-Bold,Times-BoldItalic,Times-Italic,
            Times-Roman and ZapfDingbats) and Truetype fonts are supported. When using Truetype font, you 
            should use the font family name. If you want the font be bold or italic, set the font name like 
            "Arial,Bold","Arial,Italic" or "Arial,BoldItalic".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.TextColor">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Color" /> object that indicates the color of the text field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.BackgroundColor">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Color" /> object that indicates the color of the background.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.BorderColor">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Color" /> object that indicates the color of the border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.ButtonColor">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Color" /> object that indicates the color of the button.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.TextFontSize">
      <summary>
            Gets or sets a float value that indicates the font size of the text field. Default is 14 points.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.TextIsMultiLine">
      <summary>
            Gets or sets a bool value that indicate whether the text field can be multiline. Default is 
            false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.TextIsPassword">
      <summary>
            Gets or sets a bool value that indicates whether the text field is password. If set to true, 
            the field is intended for entering a secure password that should not be echoed visibly to 
            the screen. Default value is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.TextMaxLength">
      <summary>
            Gets or sets a int value that indicates the max length of the text can be entered in this field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.IsBordered">
      <summary>
            Gets or sets a bool value that indicates wheter the text field is bordered. Default is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.RadioButtons">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.FormField.RadioButtons" /> collection that indicates the radiobuttons in this field.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.RadioButtonCheckedIndex">
      <summary>
            Gets or sets a int value that indicates the index of the radiobutton that has been checked.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.IsReadOnly">
      <summary>
            Gets or sets a bool value that indicates if the field is readonly.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.FormField.IsMultiSelect">
      <summary>
            Gets or sets a bool value that indicates if multi-selecting is allowed.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.FormFieldType">
      <summary>
            Enumerates the formfield types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.FormFieldType.RadioButton">
      <summary>
            RadioButton formfield type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.FormFieldType.List">
      <summary>
            List formfield type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.FormFieldType.CheckBox">
      <summary>
            CheckBox formfield type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.FormFieldType.Combo">
      <summary>
            Combo formfield type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.FormFieldType.Text">
      <summary>
            Text formfield type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Graph">
      <summary>
            Represents a graph <see cref="T:Aspose.Pdf.Paragraph" />.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Graph graph1 = new Graph(sec1,100,400);
            sec1.Paragraphs.Add(graph1);
            		
            float[] posArr = new float[]{0,0,200,80,300,40,350,90};
            Curve curve1 = new Curve(graph1,posArr);
            graph1.Shapes.Add(curve1);
            
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim graph1 As Graph = New Graph(sec1, 100, 400)
            sec1.Paragraphs.Add(graph1)
            
            Dim posArr() As Single = New Single() {0, 0, 200, 80, 300, 40, 350, 90}
            
            Dim curve1 As Curve = New Curve(graph1, posArr)
            graph1.Shapes.Add(curve1)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Graph Height="100" Width="400"&gt;
            			&lt;Curve Position="0 0 200 80 300 40 350 90" /&gt;
            		&lt;/Graph&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Graph.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Graph" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Graph.#ctor(System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Graph" /> class.
            </summary>
      <param name="width">The width of the graph.</param>
      <param name="height">The height of the graph.</param>
    </member>
    <member name="M:Aspose.Pdf.Graph.#ctor(Aspose.Pdf.Section)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Graph" /> class.
            </summary>
      <param name="section">The specified <see cref="T:Aspose.Pdf.Section" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Section" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Graph.#ctor(Aspose.Pdf.Section,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Graph" /> class.
            </summary>
      <param name="section">The specified <see cref="T:Aspose.Pdf.Section" /> object.</param>
      <param name="width">The width of the graph.</param>
      <param name="height">The height of the graph.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Section" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Graph.#ctor(Aspose.Pdf.HeaderFooter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Graph" /> class.
            </summary>
      <param name="hf">The specified <see cref="T:Aspose.Pdf.HeaderFooter" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.HeaderFooter" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Graph.#ctor(Aspose.Pdf.HeaderFooter,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Graph" /> class.
            </summary>
      <param name="hf">The specified <see cref="T:Aspose.Pdf.HeaderFooter" /> object.</param>
      <param name="width">The width of the graph.</param>
      <param name="height">The height of the graph.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.HeaderFooter" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Graph.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Graph" /> object. Both format and shapes are cloned.
            </summary>
      <returns>The new Cloned <see cref="T:Aspose.Pdf.Graph" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Graph.GraphInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Graph.GraphInfo" /> object that indicates the graph info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Graph.Hyperlink">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Graph.Hyperlink" /> object that indicates the hyper link info of the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Graph.Shapes">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Graph.Shapes" /> collection that indicates all shapes in the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Graph.Alignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.AlignmentType" /> that indicates the paragraph alignment type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Graph.Title">
      <summary>
            Gets or sets a string value that indicates the title of the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Graph.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Graph.TextInfo" /> object that indicates the text info of the graph title.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Graph.GraphNotes">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Graph.GraphNotes" /> collection that indicates all notes in the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Graph.GraphWidth">
      <summary>
            Gets or sets a float value that indicates the graph width.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,GraphWidth="10cm" or GraphWidth="5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Graph.GraphHeight">
      <summary>
            Gets or sets a float value that indicates the graph height.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,GraphHeight="10cm" or GraphHeight="5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Graph.ZIndex">
      <summary>
            Gets or sets a int value that indicates the Z-order of the graph. A graph with larger ZIndex 
            will be placed over the graph with smaller ZIndex. ZIndex can be negative. Graph with negative 
            ZIndex will be placed behind the text in the page.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.GraphInfo">
      <summary>
            Encapsulates info for a <see cref="T:Aspose.Pdf.Graph" /> paragraph.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            
            Section sec1 = pdf1.Sections.Add();
            
            Graph graph1 = new Graph(sec1,100,400);
            sec1.Paragraphs.Add(graph1);
            
            float[] posArr = new float[]{100,0,300,0};
            Line l1 = new Line(graph1,posArr);
            l1.GraphInfo.Color = new Aspose.Pdf.Color("Red");
            l1.GraphInfo.LineWidth = 3;
            l1.GraphInfo.LineCapMode = 1;
            graph1.Shapes.Add(l1);
            
            posArr = new float[]{100,50,300,50};
            Line l2 = new Line(graph1,posArr);
            l2.GraphInfo.Color = new Aspose.Pdf.Color(0,128,128);
            l2.GraphInfo.DashLengthInBlack = 2;
            l2.GraphInfo.DashLengthInWhite = 1;
            graph1.Shapes.Add(l2);
            
            Circle circle1 = new Circle(graph1,200,50,30);
            graph1.Shapes.Add(circle1);
            circle1.GraphInfo.FillColor = new Aspose.Pdf.Color("Green");
            circle1.GraphInfo.IsFilled = true;
            
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim graph1 As Graph = New Graph(sec1, 100, 400)
            sec1.Paragraphs.Add(graph1)
            
            Dim posArr() As Single = New Single() {100, 0, 300, 0}
            
            Dim l1 As Line = New Line(graph1, posArr)
            l1.GraphInfo.Color = New Aspose.Pdf.Color("Red")
            l1.GraphInfo.LineWidth = 3
            l1.GraphInfo.LineCapMode = 1
            graph1.Shapes.Add(l1)
            
            posArr = New Single() {100, 50, 300, 50}
            
            Dim l2 As Line = New Line(graph1, posArr)
            l2.GraphInfo.Color = New Aspose.Pdf.Color(0, 128, 128)
            l2.GraphInfo.DashLengthInBlack = 2
            l2.GraphInfo.DashLengthInWhite = 1
            graph1.Shapes.Add(l2)
            
            Dim circle1 As Circle = New Circle(graph1, 200, 50, 30)
            graph1.Shapes.Add(circle1)
            circle1.GraphInfo.FillColor = New Aspose.Pdf.Color("Green")
            circle1.GraphInfo.IsFilled = True
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Graph Height="100" Width="400"&gt;
            			&lt;Line Color="Red" LineWidth="3" LineCapMode="1" Position="100 0 300 0" /&gt;
            			&lt;Line Color="rgb 0 128 128" Dash="2 1" Position="100 50 300 50" /&gt;
            			&lt;Circle CenterPosition="200 50" Radius="30" FillColor="Green" IsFilled="true" /&gt;
            		&lt;/Graph&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.GraphInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.GraphInfo" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.GraphInfo.Clone">
      <summary>
            Clones a new GraphInfo object.
            </summary>
      <returns>The new object.</returns>
    </member>
    <member name="M:Aspose.Pdf.GraphInfo.SetPolyDash(System.String)">
      <summary>
            Sets poly dash.
            </summary>
      <param name="dash">The string contains dash data array, the length of data array shoule be less than 8, separated by blank. </param>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.LineWidth">
      <summary>
            Gets or sets a float value that indicates the line width of the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.GraphBorder">
      <summary>
            Gets or sets a borderinfo value that indicates the border information of the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.Color">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.GraphInfo.Color" /> object that indicates the color of the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.FillColor">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.GraphInfo.Color" /> object that indicates the fill color of the graph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.DashLengthInBlack">
      <summary>
            Gets or sets a float value that indicates the dash length in black.The unit is point.
            Refer to the programmer's guide for more info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.DashLengthInWhite">
      <summary>
            Gets or sets a float value that indicates the dash length in white.The unit is point.
            Refer to the programmer's guide for more info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.IsFilled">
      <summary>
            Gets or sets a bool value that indicates whether this shape is filled.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.IsAddedArrowAtStart">
      <summary>
            Gets or sets a bool value that indicates whether add arrow at the start of line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.IsAddedArrowAtEnd">
      <summary>
            Gets or sets a bool value that indicates whether add arrow at the end of line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.LineJoinMode">
      <summary>
            Gets or sets an int value between 0 and 2 that indicates the line join mode.
            Refer to the programmer's guide for more info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.LineCapMode">
      <summary>
            Gets or sets an int value between 0 and 2 that indicates the line cap mode.
            Refer to the programmer's guide for more info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.Flatness">
      <summary>
            Gets or sets an positive int value that indicates the flatness.
            Refer to the programmer's guide for more info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.MiterLimit">
      <summary>
            Gets or sets an int value greater than or equal to 1 that indicates the miter limit.
            Refer to the programmer's guide for more info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.NewOriginX">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the new origin when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.NewOriginY">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the new origin when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.RotationAngle">
      <summary>
            Gets or sets a float value that indicates the rotation angle of the coordinate system 
            when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.ScalingRateX">
      <summary>
            Gets or sets a float value that indicates the scaling rate of the x-coordinate when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.ScalingRateY">
      <summary>
            Gets or sets a float value that indicates the scaling rate of the y-coordinate when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.SkewAngleX">
      <summary>
            Gets or sets a float value that indicates the skew angle of the x-coordinate when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.SkewAngleY">
      <summary>
            Gets or sets a float value that indicates the skew angle of the y-coordinate when transforming a coordinate system.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphInfo.FillRule">
      <summary>
            Gets or sets a string that indicates the graph fill rule.It can be "winding" or "evenodd".
            Refer to the programmer's guide for more info.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.GraphNote">
      <summary>
            Represents a note in a <see cref="T:Aspose.Pdf.Graph" />.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Graph graph1 = new Graph(sec1,100,400);
            sec1.Paragraphs.Add(graph1);
            		
            Circle circle1 = new Circle(graph1,200,50,30);
            graph1.Shapes.Add(circle1);
            
            GraphNote note1 = new GraphNote(sec1);
            note1.Content = "This is a circle.";
            note1.PositionX = 160;
            note1.PositionY = 10;
            graph1.GraphNotes.Add(note1);
            
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim graph1 As Graph = New Graph(sec1, 100, 400)
            sec1.Paragraphs.Add(graph1)
            
            Dim circle1 As Circle = New Circle(graph1, 200, 50, 30)
            graph1.Shapes.Add(circle1)
            
            Dim note1 As GraphNote = New GraphNote(sec1)
            note1.Content = "This is a circle."
            note1.PositionX = 160
            note1.PositionY = 10
            graph1.GraphNotes.Add(note1)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Graph Height="100" Width="400"&gt;
            			&lt;Circle CenterPosition="200 50" Radius="30" /&gt;
            			&lt;Note Position="160 10"&gt;This is a circle.&lt;/Note&gt;
            		&lt;/Graph&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.GraphNote.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.GraphNote" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.GraphNote.#ctor(Aspose.Pdf.Section)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.GraphNote" /> class.
            </summary>
      <param name="section">The section object.</param>
    </member>
    <member name="P:Aspose.Pdf.GraphNote.Content">
      <summary>
            Gets or sets a string that indicates the content of the note.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphNote.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.GraphNote.TextInfo" /> object that indicates the text info of the note.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphNote.PositionX">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the beginning position of the note.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.GraphNote.PositionY">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the beginning position of the note.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.GraphNotes">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.GraphNote" /> objects.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Graph graph1 = new Graph(sec1,100,400);
            sec1.Paragraphs.Add(graph1);
            		
            Circle circle1 = new Circle(graph1,200,50,30);
            graph1.Shapes.Add(circle1);
            
            GraphNote note1 = new GraphNote(sec1);
            note1.Content = "This is a circle.";
            note1.PositionX = 160;
            note1.PositionY = 10;
            graph1.GraphNotes.Add(note1);
            
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim graph1 As Graph = New Graph(sec1, 100, 400)
            sec1.Paragraphs.Add(graph1)
            
            Dim circle1 As Circle = New Circle(graph1, 200, 50, 30)
            graph1.Shapes.Add(circle1)
            
            Dim note1 As GraphNote = New GraphNote(sec1)
            note1.Content = "This is a circle."
            note1.PositionX = 160
            note1.PositionY = 10
            graph1.GraphNotes.Add(note1)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Graph Height="100" Width="400"&gt;
            			&lt;Circle CenterPosition="200 50" Radius="30" /&gt;
            			&lt;Note Position="160 10"&gt;This is a circle.&lt;/Note&gt;
            		&lt;/Graph&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.GraphNotes.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.GraphNotes" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.GraphNotes.Add(Aspose.Pdf.GraphNote)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.GraphNote" /> object into the collection.
            </summary>
      <param name="graphNote">The <see cref="T:Aspose.Pdf.GraphNote" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.GraphNotes.Remove(Aspose.Pdf.GraphNote)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.GraphNote" /> object from the collection.
            </summary>
      <param name="noteToRemove">The <see cref="T:Aspose.Pdf.GraphNote" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.GraphNotes.Insert(System.Int32,Aspose.Pdf.GraphNote)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.GraphNote" /> object into the collection at specified position.
            </summary>
      <param name="index">The zero-based index at which new <see cref="T:Aspose.Pdf.GraphNote" /> object should be inserted.</param>
      <param name="graphNote">The <see cref="T:Aspose.Pdf.GraphNote" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.GraphNotes.Insert(Aspose.Pdf.GraphNote,Aspose.Pdf.GraphNote)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.GraphNote" /> object into the collection after specified GraphNote object.
            </summary>
      <param name="noteToInsertAfter">The <see cref="T:Aspose.Pdf.GraphNote" /> object to insert after.</param>
      <param name="newNote">The <see cref="T:Aspose.Pdf.GraphNote" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.GraphNotes.CopyTo(Aspose.Pdf.GraphNote[],System.Int32)">
      <summary>
            Copies the elements to a <see cref="T:Aspose.Pdf.GraphNote" /> object array, starting at a specified array index.
            </summary>
      <param name="graphNoteArray">The <see cref="T:Aspose.Pdf.GraphNote" /> object array.</param>
      <param name="index">The start index.</param>
    </member>
    <member name="P:Aspose.Pdf.GraphNotes.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.GraphNote" /> object from the collection according to GraphNote index.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.GrayColorSpace">
      <summary>
            Encapsulates the Gray colorspace.
            </summary>
      <remarks>
            Note that you can use the <see cref="M:Aspose.Pdf.Color.#ctor(System.Byte)" /> constructor to create 
            a color object with gray colorspace and need not use this class directly.
            </remarks>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            	
            Graph graph1 = new Graph(sec1,200,400);
            sec1.Paragraphs.Add(graph1);
            
            float[] posArr = new float[]{100,0,300,0};
            Line l1 = new Line(graph1,posArr);
            l1.GraphInfo.Color = new Aspose.Pdf.Color("Red");
            graph1.Shapes.Add(l1);
            
            posArr = new float[]{100,50,300,50};
            Line l2 = new Line(graph1,posArr);
            l2.GraphInfo.Color = new Aspose.Pdf.Color(0,128,128);
            graph1.Shapes.Add(l2);
            
            posArr = new float[]{100,100,300,100};
            Line l3 = new Line(graph1,posArr);
            l3.GraphInfo.Color = new Aspose.Pdf.Color(0,128,64,0);
            graph1.Shapes.Add(l3);
            
            posArr = new float[]{100,150,300,150};
            Line l4 = new Line(graph1,posArr);
            l4.GraphInfo.Color = new Aspose.Pdf.Color((byte)140);
            graph1.Shapes.Add(l4);
            
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim graph1 As Graph = New Graph(sec1, 200, 400)
            sec1.Paragraphs.Add(graph1)
            
            Dim posArr As Single() = New Single() {100, 0, 300, 0}
            
            Dim l1 As Line = New Line(graph1, posArr)
            l1.GraphInfo.Color = New Aspose.Pdf.Color("Red")
            graph1.Shapes.Add(l1)
            
            posArr = New Single() {100, 50, 300, 50}
            
            Dim l2 As Line = New Line(graph1, posArr)
            l2.GraphInfo.Color = New Aspose.Pdf.Color(0, 128, 128)
            graph1.Shapes.Add(l2)
            
            posArr = New Single() {100, 100, 300, 100}
            
            Dim l3 As Line = New Line(graph1, posArr)
            l3.GraphInfo.Color = New Aspose.Pdf.Color(0, 128, 64, 0)
            graph1.Shapes.Add(l3)
            
            posArr = New Single() {100, 150, 300, 150}
            
            Dim l4 As Line = New Line(graph1, posArr)
            l4.GraphInfo.Color = New Aspose.Pdf.Color(CType(140,Byte))
            graph1.Shapes.Add(l4)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Graph Height="200" Width="400"&gt;
            			&lt;Line Color="Red" Position="100 0 300 0" /&gt;
            			&lt;Line Color="rgb 0 128 128" Position="100 50 300 50" /&gt;
            			&lt;Line Color="cmyk 0 128 64 0" Position="100 100 300 100" /&gt;
            			&lt;Line Color="gray 140" Position="100 150 300 150" /&gt;
            		&lt;/Graph&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.GrayColorSpace.GrayValue">
      <summary>
            Represents a <see cref="T:System.Byte" /> value(0-255) that indicates the gray scale.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HeaderFooter">
      <summary>
            Represents a header or footer of a page in a Pdf document.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            	
            Section section = new Section(pdf);
            pdf.Sections.Add(section);
            		
            HeaderFooter hf1 = new HeaderFooter(section);
            section.OddHeader = section.EvenHeader = hf1;
            hf1.IsFirstPageOnly = true;
            		
            Text text = new Text(hf1);
            hf1.Paragraphs.Add(text);
            Segment segment = new Segment(text);
            text.Segments.Add(segment);
            segment.Content = "header for first page";
            
            HeaderFooter hf2 = new HeaderFooter(section);
            section.AdditionalOddHeader = hf2;
            hf2.IsSubsequentPagesOnly = true;
            		
            text = new Text(hf2);
            hf2.Paragraphs.Add(text);
            segment = new Segment(text);
            text.Segments.Add(segment);
            segment.Content = "odd header for subsequent pages";
            
            HeaderFooter hf3 = new HeaderFooter(section);
            section.AdditionalEvenHeader = hf3;
            hf3.IsSubsequentPagesOnly = true;
            		
            text = new Text(hf3);
            hf3.Paragraphs.Add(text);
            segment = new Segment(text);
            text.Segments.Add(segment);
            segment.Content = "even header for subsequent pages";
            
            for(int i = 1; i &lt;= 6; i++)
            {
            	Text text1 = new Text(section);
            	text1.IsFirstParagraph = true;
            	section.Paragraphs.Add(text1);
            	Segment segment1 = new Segment(text1);
            	text1.Segments.Add(segment1);
            	segment1.Content = "page " + i.ToString();
            }
            
            pdf.Save(...);
            
            [Visual Basic]
            Dim pdf As Pdf = New Pdf()
            
            Dim section As Section = New Section(pdf)
            pdf.Sections.Add(section)
            
            Dim hf1 As HeaderFooter = New HeaderFooter(section)
            section.OddHeader = hf1
            section.EvenHeader = hf1
            hf1.IsFirstPageOnly = True
            
            Dim text As Text = New Text(hf1)
            hf1.Paragraphs.Add(text)
            Dim segment As Segment = New Segment(text)
            text.Segments.Add(segment)
            segment.Content = "header for first page"
            
            Dim hf2 As HeaderFooter = New HeaderFooter(section)
            section.AdditionalOddHeader = hf2
            hf2.IsSubsequentPagesOnly = True
            
            text = New Text(hf2)
            hf2.Paragraphs.Add(text)
            segment = New Segment(text)
            text.Segments.Add(segment)
            segment.Content = "odd header for subsequent pages"
            
            Dim hf3 As HeaderFooter = New HeaderFooter(section)
            section.AdditionalEvenHeader = hf3
            hf3.IsSubsequentPagesOnly = True
            
            text = New Text(hf3)
            hf3.Paragraphs.Add(text)
            segment = New Segment(text)
            text.Segments.Add(segment)
            segment.Content = "even header for subsequent pages"
            
            Dim i As Integer
            For i = 1 To 6 Step i + 1
            Dim text1 As Text = New Text(section)
            text1.IsFirstParagraph = True
            section.Paragraphs.Add(text1)
            Dim segment1 As Segment = New Segment(text1)
            text1.Segments.Add(segment1)
            segment1.Content = "page " + i.ToString()
            Next
            
            pdf.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            &lt;Section &gt;
            &lt;Header IsFirstPageOnly="true"&gt;
            &lt;Text&gt;
            &lt;Segment&gt;header for first page&lt;/Segment&gt;
            &lt;/Text&gt;
            &lt;/Header&gt;
            &lt;Header Type="odd" IsSubsequentPagesOnly="true"&gt;
            &lt;Text&gt;
            &lt;Segment&gt;odd header for subsequent pages&lt;/Segment&gt;
            &lt;/Text&gt;
            &lt;/Header&gt;
            &lt;Header Type="even" IsSubsequentPagesOnly="true"&gt;
            &lt;Text&gt;
            &lt;Segment&gt;even header for subsequent pages&lt;/Segment&gt;
            &lt;/Text&gt;
            &lt;/Header&gt;
            &lt;Text IsFirstParagraph="true"&gt; 
            &lt;Segment&gt;page1&lt;/Segment&gt; 
            &lt;/Text&gt;	
            &lt;Text IsFirstParagraph="true"&gt; 
            &lt;Segment&gt;page2&lt;/Segment&gt; 
            &lt;/Text&gt;	
            &lt;Text IsFirstParagraph="true"&gt; 
            &lt;Segment&gt;page3&lt;/Segment&gt; 
            &lt;/Text&gt;	
            &lt;Text IsFirstParagraph="true"&gt; 
            &lt;Segment&gt;page4&lt;/Segment&gt; 
            &lt;/Text&gt;	
            &lt;Text IsFirstParagraph="true"&gt; 
            &lt;Segment&gt;page5&lt;/Segment&gt; 
            &lt;/Text&gt;	
            &lt;Text IsFirstParagraph="true"&gt; 
            &lt;Segment&gt;page6&lt;/Segment&gt; 
            &lt;/Text&gt;	
            &lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.HeaderFooter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.HeaderFooter" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.HeaderFooter.#ctor(Aspose.Pdf.Section)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.HeaderFooter" /> class.
            </summary>
      <param name="section">The section object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Section" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.HeaderFooter.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.HeaderFooter" /> object. Both format and conent is cloned. 
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.HeaderFooter" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.HeaderFooter.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.HeaderFooter.TextInfo" /> object that indicates the text info of 
            the header or footer.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HeaderFooter.GraphInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.HeaderFooter.GraphInfo" /> object that indicates the graph info 
            of the header or footer.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HeaderFooter.Paragraphs">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.HeaderFooter.Paragraphs" /> collection that indicates all paragraphs in 
            the header or footer. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HeaderFooter.Margin">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.MarginInfo" /> object that indicates the margin info of the 
            header or footer.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HeaderFooter.DistanceFromEdge">
      <summary>
            Gets or sets a float value that indicates the Header or Footer's distance from 
            the edge of the page.The unit is point. In XML,the default unit is point,but cm 
            and inch are also supported. For example,"10cm" or "5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HeaderFooter.IsFirstPageOnly">
      <summary>
            Gets or sets a bool value that indicates whether the header or footer be printed on first page only. 
            The default value is false.If this property is set to true, the <see cref="P:Aspose.Pdf.HeaderFooter.IsSubsequentPagesOnly" /> should be false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HeaderFooter.IsLastPageOnly">
      <summary>
            Gets or sets a bool value that indicates whether the header or footer be printed on last page only. 
            The default value is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HeaderFooter.IsSubsequentPagesOnly">
      <summary>
            Gets or sets a bool value that indicates whether the header or footer be printed not on first page but 
            on subsequent pages only. The default value is false. If this property is set to true, the <see cref="P:Aspose.Pdf.HeaderFooter.IsFirstPageOnly" /> should be false.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HeaderFooterType">
      <summary>
            Enumerates all header or footer types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HeaderFooterType.Both">
      <summary>
            Displays header or footer in both odd and even pages.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HeaderFooterType.Even">
      <summary>
            Displays header or footer in even pages.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HeaderFooterType.Odd">
      <summary>
            Displays header or footer in odd pages. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Heading">
      <summary>
            Represents a heading in Pdf document.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Heading heading1 = new Heading(pdf1,sec1,1);
            		
            Segment segment1 = new Segment(heading1);
            heading1.Segments.Add(segment1);
            heading1.IsAutoSequence = true;
            segment1.Content = "this is heading of level 1";
            sec1.Paragraphs.Add(heading1); //please make sure all properties are set before Add
            
            Heading heading2 = new Heading(pdf1,sec1,2);
            		
            Segment segment2 = new Segment(heading2);
            heading2.Segments.Add(segment2);
            heading2.IsAutoSequence = true;
            segment2.Content = "this is heading of level 2";
            sec1.Paragraphs.Add(heading2); //please make sure all properties are set before Add
            
            Heading heading3 = new Heading(pdf1,sec1,1);
            		
            Segment segment3 = new Segment(heading3);
            heading3.Segments.Add(segment3);
            heading3.IsAutoSequence = false;
            heading3.LabelWidth = 60;
            heading3.UserLabel = "bullet1";
            segment3.Content = "this is bullet style 1";
            sec1.Paragraphs.Add(heading3); //please make sure all properties are set before Add
            			
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim heading1 As Heading = New Heading(pdf1, sec1, 1)
            
            Dim segment1 As Segment = New Segment(heading1)
            heading1.Segments.Add(segment1)
            heading1.IsAutoSequence = True
            segment1.Content = "this is heading of level 1"
            sec1.Paragraphs.Add(heading1) 'please make sure all properties are set before Add
            
            Dim heading2 As Heading = New Heading(pdf1, sec1, 2)
            
            Dim segment2 As Segment = New Segment(heading2)
            heading2.Segments.Add(segment2)
            heading2.IsAutoSequence = True
            segment2.Content = "this is heading of level 2"
            sec1.Paragraphs.Add(heading2) 'please make sure all properties are set before Add
            
            Dim heading3 As Heading = New Heading(pdf1, sec1, 1)
            
            Dim segment3 As Segment = New Segment(heading3)
            heading3.Segments.Add(segment3)
            heading3.IsAutoSequence = False
            heading3.LabelWidth = 60
            heading3.UserLabel = "bullet1"
            segment3.Content = "this is bullet style 1"
            sec1.Paragraphs.Add(heading3) 'please make sure all properties are set before Add
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Heading Level="1" IsAutoSequence="true"&gt;
            			&lt;Segment&gt;this is heading of level 1&lt;/Segment&gt;
            		&lt;/Heading&gt;
            		&lt;Heading Level="2" IsAutoSequence="true"&gt;
            			&lt;Segment&gt;this is heading of level 2&lt;/Segment&gt;
            		&lt;/Heading&gt;
            		&lt;Heading Level="1" IsAutoSequence="false" LabelWidth="60" UserLabel="bullet1"&gt;
            			&lt;Segment&gt;this is bullet style 1&lt;/Segment&gt;
            		&lt;/Heading&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Text">
      <summary>
            Represents a text <see cref="T:Aspose.Pdf.Paragraph" /> in a Pdf document.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            
            pdf1.PageSetup.PageHeight = PageSize.A2Height;
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Text text1 = new Text(sec1,"this is text content");
            text1.Margin.Top = 30;
            sec1.Paragraphs.Add(text1);
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            pdf1.PageSetup.PageHeight = PageSize.A2Height
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim text1 As Text = New Text(sec1, "this is text content")
            text1.Margin.Top = 30
            sec1.Paragraphs.Add(text1)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section PageHeight="1684"&gt;
            		&lt;Text MarginTop="30"&gt;
            			&lt;Segment&gt;this is text content&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Text.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Text.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text" /> class.
            </summary>
      <param name="content">The content of the first segment of the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.#ctor(System.String,Aspose.Pdf.TextInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text" /> class.
            </summary>
      <param name="content">The content of the first segment of the text.</param>
      <param name="info">The text format info of the first segment of the text.</param>
    </member>
    <member name="M:Aspose.Pdf.Text.#ctor(Aspose.Pdf.Section)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text" /> class.
            </summary>
      <param name="section">The specified <see cref="T:Aspose.Pdf.Section" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Section" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Text.#ctor(Aspose.Pdf.Section,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text" /> class.
            </summary>
      <param name="section">The specified <see cref="T:Aspose.Pdf.Section" /> object.</param>
      <param name="content">The content of the first segment of the text.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Section" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Text.#ctor(Aspose.Pdf.HeaderFooter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text" /> class.
            </summary>
      <param name="hf">The specified <see cref="T:Aspose.Pdf.HeaderFooter" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.HeaderFooter" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Text.#ctor(Aspose.Pdf.HeaderFooter,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Text" /> class.
            </summary>
      <param name="hf">The specified <see cref="T:Aspose.Pdf.HeaderFooter" /> object.</param>
      <param name="content">The content of the first segment of the text.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.HeaderFooter" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Text.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Text" /> object. both format info and content of the text is cloned.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Text" /> object</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Text" /> object. Only format info of the text is cloned.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Text" /> object</returns>
    </member>
    <member name="M:Aspose.Pdf.Text.GetTextHeight(Aspose.Pdf.Pdf,System.Single)">
      <summary>
            Get the height of a text paragraph.
            </summary>
      <param name="doc">The <see cref="T:Aspose.Pdf.Pdf" /> object.</param>
      <param name="width">The width of the text paragraph.</param>
      <returns>The height of the text.</returns>
      <remarks>If encryption is used, Pdf.Security should be set before this method.</remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Text.TextInfo" /> object that indicates the text info of the text paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TabStops">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Text.TabStops" /> that indicates the tab stop positions in the 
            text paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.Segments">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Text.Segments" /> collection that indicates all segments in the text paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.FirstLineIndent">
      <summary>
            Gets or sets an float value that indicates the indent of the first line in a text paragraph.The unit 
            is point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.IsSpaced">
      <summary>
            Gets or sets a bool value that indicates whether the spaces at the begin of the text and returns in 
            the text be shown. For the following XML:
            <code>
            &lt;Text&gt;
            	&lt;Segment&gt;The first line,
            	The second line.&lt;/Segment&gt;
            &lt;/Text&gt;
            </code>
            If IsSpaced is false, the result will be:
            <code>
            The first line,The second line.
            </code>
            If IsSpaced is true, the result will be:
            <code>
            The first line,
            	The second line.
            </code></summary>
    </member>
    <member name="P:Aspose.Pdf.Text.IsAlignedByWord">
      <summary>
            Gets or sets a bool value that indicates whether the text is aligned by word. 
            This property should be set to false when using asian language such as chinese.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.TextWidth">
      <summary>
            Gets or sets a float value that indicates the width paragraph.The unit is point.
            </summary>
      <remarks>The property is used for custom positioning. You need not use this property if you 
            want the paragraph be auto aligned.</remarks>
    </member>
    <member name="P:Aspose.Pdf.Text.RotatingAngle">
      <summary>
            Gets or sets a float value that indicates the number of degrees by which the text should be 
            rotated anticlockwise when displayed or printed. Default value is 0.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            
            Text t1 = new Text("Hello world");
            t1.PositioningType = PositioningType.PageRelative;
            t1.Top = 200;
            t1.Left = 100;
            t1.RotatingAngle = 30;
            
            sec1.Paragraphs.Add(t1);
            
            pdf1.Save("e:/temp/test.pdf");
            
            [VisualBasic]
            Dim pdf1 As Pdf =  New Pdf() 
            
            Dim sec1 As Section =  pdf1.Sections.Add() 
            
            Dim t1 As Text =  New Text("Hello world") 
            t1.PositioningType = PositioningType.PageRelative
            t1.Top = 200
            t1.Left = 100
            t1.RotatingAngle = 30
            
            sec1.Paragraphs.Add(t1)
            
            pdf1.Save("e:/temp/test.pdf")
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
            &lt;Pdf xmlns="Aspose.Pdf" CompressionLevel="0"&gt; 
            	&lt;Section&gt; 
            		&lt;Text RotatingAngle="30" Left="100" Top="200" PositioningType="PageRelative"&gt;
            			&lt;Segment&gt;Hello world&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt; 
            &lt;/Pdf&gt; 
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Text.IsHtmlTagSupported">
      <summary>
            Gets or sets a bool value that indicates whether the HTML tags in text is supported. Default is 
            false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.InlineRadioButtonFieldName">
      <summary>
            Gets or sets a string that indicates the name of inlineRadioButton's the field. Note that each field 
            MUST have a unique name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.InlineRadioButtonCheckedIndex">
      <summary>
            Gets or sets a int value that indicates the index of the inlineRadioButton that has been checked.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.InlineRadioButtonBackgroundColor">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Color" /> object that indicates the color of the inlineRadiobutton's background.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Text.InlineRadioButtonColor">
      <summary>
            Gets or sets a <see cref="T:System.Drawing.Color" /> object that indicates the color of the inline radio button.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Heading.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Heading" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Heading.#ctor(Aspose.Pdf.Pdf,Aspose.Pdf.Section,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Heading" /> class.
            </summary>
      <param name="pdf">The specified <see cref="P:Aspose.Pdf.Heading.Pdf" /> object.</param>
      <param name="section">The specified <see cref="T:Aspose.Pdf.Section" /> object.</param>
      <param name="level">The heading level.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Section" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Heading.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Heading" /> object. Only format info of the Heading is cloned.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Heading" /> object</returns>
    </member>
    <member name="M:Aspose.Pdf.Heading.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Heading" /> object. both format info and content of the Heading is cloned.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Heading" /> object</returns>
    </member>
    <member name="P:Aspose.Pdf.Heading.Level">
      <summary>
            Gets or sets an int value that indicates the level of the heading.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.LabelWidth">
      <summary>
            Gets or sets a float value that indicates the width of the label of the heading. 
            Default value is 30 points.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.BulletAlignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.AlignmentType" /> value that indicates the alignment type of Bullet/Label.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.BulletColor">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Color" />value that indicates the color of the bullet/label.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.IsLabelBold">
      <summary>
            Gets or sets a bool value that indicates whether the number of the heading is bold.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.IsLabelUnderline">
      <summary>
            Gets or sets a bool value that indicates whether the number of the heading is underline.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.LabelFontName">
      <summary>
            Gets or sets a string value that indicates the font name of lable.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.LabelFontSize">
      <summary>
            Gets or sets a float value that indicates the font size of lable.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.IsAutoSequence">
      <summary>
            Gets or sets a bool value that indicates whether the number of the heading is in an automatical sequence.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.HeadingType">
      <summary>
            Gets or sets the <see cref="T:Aspose.Pdf.HeadingType" /> of this heading.		
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.UserLabel">
      <summary>
            Gets or sets a string that indicates the caption label. For example, UserLabel="1.3.5". 
            Set this property to 'bullet1','bullet2'...'bullet7' to use system-defined bullet. To use user defined lebel, 
            Set the <see cref="P:Aspose.Pdf.Heading.BulletFontName" /> to "Symbol" and "ZapfDingbats" and set this property to the 
            char value of the bullt symbol. For example,UserLable="44" and  BulletFontName="ZapfDingbats".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.ImageLabel">
      <summary>
            Gets or sets the an Image that is used as label.If ImageLabel is not null, the ImageLabel substitutes for number heading.
            The size of the ImageLabel will be adjusted following the Segment.TextInfo.FontSize.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.LabelPattern">
      <summary>
            Gets or sets the heading pattern in the "ch(s)%ch(s)" form, ch(s) can be none ,an ASCII or a combination of ASCIIs, % stands for
            the heading number.  For example, "(%)" means "(1.1)" if here % equals 1.1.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.BulletFontName">
      <summary>
            Gets or sets a string that indicates the font name for bullet. "Symbol" and "ZapfDingbats" 
            are supported.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.IsBulletUnicode">
      <summary>
            Gets or sets a bool value that indicates whether the bullet uses a unicode character.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.BulletTTFFile">
      <summary>
            Gets or sets a string that indicates the truetype font file name for the bullet. This property is only 
            needed when using truetype font with unicode. If your truetype font has been installed in your 
            system, you can use truetype font with unicode without this property. But using this property will 
            greatly improve the performance.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.StartNumber">
      <summary>
            Gets or sets a int number that indicates the start number of this heading when using auto numbering.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Heading.IsPrefixed">
      <summary>
            Gets or sets a bool value that indicates if the prefix of the number is shown when using 
            auto sequence. For example,for a label "1.2.5", if this property is set to false, the label will be 
            "5".
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HeadingType">
      <summary>
            Enumerates the heading types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HeadingType.Arab">
      <summary>
            Arab type,for example, 1,1.1,...
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HeadingType.RomanUpper">
      <summary>
            Roman upper type, for example, I,I.II, ...
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HeadingType.RomanLower">
      <summary>
            Roman lower type, for example, i,i.ii, ...
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HeadingType.EnglishUpper">
      <summary>
            English upper type, for example, A,A.B, ...
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HeadingType.EnglishLower">
      <summary>
            English lower type, for example, a,a.b, ...
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Hyperlink">
      <summary>
            Represents a link in a Pdf document.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Text text1 = new Text(sec1);
            sec1.Paragraphs.Add(text1);
            					
            Segment segment1 = text1.Segments.Add("this is a local file link");
            segment1.Hyperlink = new Hyperlink();
            segment1.Hyperlink.LinkFile = "c:/images/apple.jpg";
            segment1.Hyperlink.LinkType = HyperlinkType.File;
            
            Text text2 = new Text(sec1);
            sec1.Paragraphs.Add(text2);
            					
            Segment segment2 = text2.Segments.Add("this is a web link");
            segment2.Hyperlink = new Hyperlink();
            segment2.Hyperlink.Url = "http://localhost/popup.htm";
            segment2.Hyperlink.LinkType = HyperlinkType.Web;
            
            text1 = new Text(sec1);
            sec1.Paragraphs.Add(text1);
            		
            segment1 = text1.Segments.Add("this is a local link");
            segment1.TextInfo.IsUnderline = true;
            segment1.Hyperlink.LinkType = HyperlinkType.Local;
            segment1.Hyperlink.TargetID = "product1";
            
            Text text3 = new Text(sec1,"product 1 info ...");
            sec1.Paragraphs.Add(text3);
            text3.IsFirstParagraph = true;
            text3.ID = "product1";
            
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim text1 As Text = New Text(sec1)
            sec1.Paragraphs.Add(text1)
            
            Dim segment1 As Segment = text1.Segments.Add("this is a local file link")
            segment1.Hyperlink = New Hyperlink()
            segment1.Hyperlink.LinkFile = "c:/images/apple.jpg"
            segment1.Hyperlink.LinkType = HyperlinkType.File
            
            Dim text2 As Text = New Text(sec1)
            sec1.Paragraphs.Add(text2)
            
            Dim segment2 As Segment = text2.Segments.Add("this is a web link")
            segment2.Hyperlink = New Hyperlink()
            segment2.Hyperlink.Url = "http://localhost/popup.htm"
            segment2.Hyperlink.LinkType = HyperlinkType.Web
            
            text1 = New Text(sec1)
            sec1.Paragraphs.Add(text1)
            
            segment1 = text1.Segments.Add("this is a local link")
            segment1.TextInfo.IsUnderline = True
            segment1.Hyperlink.LinkType = HyperlinkType.Local
            segment1.Hyperlink.TargetID = "product1"
            
            Dim text3 As Text = New Text(sec1, "product 1 info ...")
            sec1.Paragraphs.Add(text3)
            text3.IsFirstParagraph = True
            text3.ID = "product1"
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Text&gt;
            			&lt;Segment LinkFile="c:/Images/apple.jpg" LinkType="File"&gt;
            				this is a local file link
            			&lt;/Segment&gt;
            		&lt;/Text&gt;
            		&lt;Text&gt;
            			&lt;Segment Url="http://localhost/popup.htm" LinkType="Web"&gt;
            				this is a web link
            			&lt;/Segment&gt;
            		&lt;/Text&gt;
            		&lt;Text&gt;
            			&lt;Segment TargetID="product1" LinkType="Local" IsUnderline="true"&gt;
            				this is a local link
            			&lt;/Segment&gt;
            		&lt;/Text&gt;
            		&lt;Text IsFirstParagraph="true" ID="product1"&gt;
            			&lt;Segment&gt;
            				product 1 info ...
            			&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Hyperlink.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Hyperlink" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Hyperlink.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Hyperlink" /> object.
            </summary>
      <returns>The new created <see cref="T:Aspose.Pdf.Hyperlink" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Hyperlink.LinkType">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.HyperlinkType" /> object that indicates the link type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Hyperlink.TargetID">
      <summary>
            Gets or sets a string that indicates the link target ID.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Hyperlink.DestinationType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Hyperlink.DestinationType" /> that indicates the destination type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Hyperlink.LinkFile">
      <summary>
            Gets or sets a string that indicates the link file name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Hyperlink.LinkPageNumber">
      <summary>
            Gets or sets an int value that indicates the page number of the link page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Hyperlink.Url">
      <summary>
            Gets or sets a string that indicates the link url.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.HyperlinkType">
      <summary>
            Enumerates the link types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HyperlinkType.File">
      <summary>
            Links to another file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HyperlinkType.Local">
      <summary>
            Links to a page in local Pdf document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HyperlinkType.Pdf">
      <summary>
            Links to a page in another Pdf document.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HyperlinkType.Web">
      <summary>
            Links to a web page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.HyperlinkType.None">
      <summary>
            No links.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Image">
      <summary>
            Represents an image <see cref="T:Aspose.Pdf.Paragraph" /> in a Pdf document.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Aspose.Pdf.Image image1 = new Aspose.Pdf.Image(sec1);
            sec1.Paragraphs.Add(image1);
            			
            image1.ImageInfo.File = "C:/Images/Apple.jpg";
            image1.ImageInfo.ImageFileType = ImageFileType.Jpeg;
            GraphNote note1 = new GraphNote(sec1);
            note1.Content = "this is note1";
            note1.PosX = 50;
            note1.PosY = 100;
            image1.ImageNotes.Add(note1);
            
            Aspose.Pdf.Image image2 = new Aspose.Pdf.Image(sec1);
            sec1.Paragraphs.Add(image2);
            			
            image2.ImageInfo.File = "C:/Images/Flower.fax";
            image2.ImageInfo.ImageFileType = ImageFileType.Ccitt;
            image2.ImageInfo.CcittSubFormat = CcittSubFormat.Group31D;
            image2.ImageInfo.CcittImageWidth = 350;
            image2.ImageInfo.CcittImageHeight = 400;
            
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim image1 As Aspose.Pdf.Image = New Aspose.Pdf.Image(sec1)
            sec1.Paragraphs.Add(image1)
            
            image1.ImageInfo.File = "C:/Images/Apple.jpg"
            image1.ImageInfo.ImageFileType = ImageFileType.Jpeg
            Dim note1 As GraphNote = New GraphNote(sec1)
            note1.Content = "this is note1"
            note1.PosX = 50
            note1.PosY = 100
            image1.ImageNotes.Add(note1)
            
            Dim image2 As Aspose.Pdf.Image = New Aspose.Pdf.Image(sec1)
            sec1.Paragraphs.Add(image2)
            
            image2.ImageInfo.File = "C:/Images/Flower.fax"
            image2.ImageInfo.ImageFileType = ImageFileType.Ccitt
            image2.ImageInfo.CcittSubFormat = CcittSubFormat.Group31D
            image2.ImageInfo.CcittImageWidth = 350
            image2.ImageInfo.CcittImageHeight = 400
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Image File="C:/Images/Flower.jpg" Type="jpeg"&gt;
            			&lt;Note Position="50 100"&gt;this is note1&lt;/Note&gt;
            		&lt;/Image&gt;
            		&lt;Image File="C:/Images/Flower.fax" Type="ccitt" CcittImageWidth="350" 
            		CcittImageHeight="400" CcittSubFormat="Group31D"&gt;
            		&lt;/Image&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Image.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Image" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Image.#ctor(Aspose.Pdf.Section)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Image" /> class.
            </summary>
      <param name="section">The section object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Section" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Image.#ctor(Aspose.Pdf.HeaderFooter)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Image" /> class.
            </summary>
      <param name="hf">The HeaderFooter object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.HeaderFooter" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Image.FromSystemImage(System.Drawing.Image)">
      <summary>
            Creates a <see cref="T:Aspose.Pdf.Image" /> object from a <see cref="T:System.Drawing.Image" /> object.
            </summary>
      <param name="systemImage">The <see cref="T:System.Drawing.Image" /> object.</param>
      <returns>The <see cref="T:Aspose.Pdf.Image" /> object.</returns>
      <example>
        <code>
            [C#]
            System.Drawing.Image sysimg = System.Drawing.Image.FromFile("test.jpg");
            Pdf pdf1 = new Pdf();
            Section sec1 = pdf1.Sections.Add();
            
            Aspose.Pdf.Image img1 = Aspose.Pdf.Image.FromSystemImage(sysimg);
            sec1.Paragraphs.Add(img1);
            pdf1.Save("test.pdf");
            sysimg.Dispose();
            
            [VB.NET]
            Dim sysimg As System.Drawing.Image =  System.Drawing.Image.FromFile("test.jpg") 
            Dim pdf1 As Pdf =  New Pdf() 
            Dim sec1 As Section =  pdf1.Sections.Add() 
            
            Dim img1 As Aspose.Pdf.Image =  Aspose.Pdf.Image.FromSystemImage(sysimg) 
            sec1.Paragraphs.Add(img1)
            pdf1.Save("test.pdf")
            sysimg.Dispose()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Image.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Image" /> object.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Aspose.Pdf.Image.ImageInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Image.ImageInfo" /> object that indicates the common image info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.ImageNotes">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.GraphNotes" /> collection that indicates all notes in the image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.ImageWidth">
      <summary>
             Gets or sets a float value that indicates the image width. This property is not used to control 
             the image width but used to spefity the image width when there is no width info in image,e.g., 
             CCITT fax image or image on the web.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             Web image can be supported by setting the URL in Image.ImageInfo.File.You need not set 
             this property any more. For CCITT image, please use ImageInfo.CcittImageWidth instead. 
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.Image.ImageHeight">
      <summary>
             Gets or sets a float value that indicates the image height.This property is not used to control 
             the image height but used to spefity the image width when there is no height info in image,e.g., 
             CCITT fax image or image on the web.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             Web image can be supported by setting the URL in Image.ImageInfo.File.You need not set 
             this property any more. For CCITT image, please use ImageInfo.CcittImageHeight instead. 
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.Image.ImageScale">
      <summary>
            Gets or sets a float value that indicates the scale rate of the image when 
            placed into pdf file.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.Opacity">
      <summary>
            Gets or sets a float value between 0.0 and 1.0 that indicates the opacity of the image. The default value is 1.0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.Hyperlink">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Image.Hyperlink" /> object that indicates the hyper link info of the image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.ZIndex">
      <summary>
            Gets or sets a int value that indicates the Z-order of the image. A image with larger ZIndex 
            will be placed over the image with smaller ZIndex. ZIndex can be negative. Image with negative 
            ZIndex will be placed behind the text in the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Image.RotatingAngle">
      <summary>
            Gets or sets a float value between -90 and 90 that indicates the number of degrees by which the image should be 
            rotated anticlockwise when displayed or printed. Default value is 0.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ImageFileType">
      <summary>
            Enumerates the image file types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageFileType.Ccitt">
      <summary>
            Ccitt type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageFileType.Gif">
      <summary>
            Gif type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageFileType.Jpeg">
      <summary>
            Jpeg type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageFileType.Png">
      <summary>
            Png type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageFileType.Tiff">
      <summary>
            Tiff type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageFileType.Bmp">
      <summary>
            Bmp type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageFileType.Emf">
      <summary>
            Emf type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageFileType.Exif">
      <summary>
            Exif type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageFileType.Icon">
      <summary>
            Icon type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageFileType.Wmf">
      <summary>
            Wmf type
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageFileType.MemoryBmp">
      <summary>
             MemoryBmp type
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This enum member is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             Momory image can be supported by Image.ImageInfo.ImageStream. If BMP is used, just set the type 
             to Bmp.
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="F:Aspose.Pdf.ImageFileType.Unknown">
      <summary>
            Unknown type
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ImageInfo">
      <summary>
            Encapsulates info for an <see cref="T:Aspose.Pdf.Image" /> paragraph.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Aspose.Pdf.Image image1 = new Aspose.Pdf.Image(sec1);
            sec1.Paragraphs.Add(image1);
            			
            image1.ImageInfo.File = "C:/Images/Apple.jpg";
            image1.ImageInfo.ImageFileType = ImageFileType.Jpeg;
            image1.ImageInfo.Title = "JPEG image";
            	
            Aspose.Pdf.Image image2 = new Aspose.Pdf.Image(sec1);
            sec1.Paragraphs.Add(image2);
            			
            image2.ImageInfo.File = "C:/Images/Flower.fax";
            image2.ImageInfo.ImageFileType = ImageFileType.Ccitt;
            image2.ImageInfo.CcittSubFormat = CcittSubFormat.Group31D;
            image2.ImageInfo.Title = "CCITT fax image";
            image2.ImageWidth = 350;
            image2.ImageHeight = 400;
            
            Aspose.Pdf.Image image3 = new Aspose.Pdf.Image(sec1);
            sec1.Paragraphs.Add(image3);
            			
            image3.ImageInfo.File = "http://localhost/Images/SeaFood.jpg";
            image3.ImageInfo.ImageFileType = ImageFileType.Jpeg;
            image3.ImageInfo.OpenType = ImageOpenType.Url;
            image3.ImageInfo.Title = "jpeg image with url";
            image3.ImageWidth = 154;
            image3.ImageHeight = 112;
            image3.ImageInfo.BitsPerComponent = 8;
            image3.ImageInfo.ComponentNumber = 3;
            
            pdf1.Save("d:\\temp\\test.pdf");
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim image1 As Aspose.Pdf.Image = New Aspose.Pdf.Image(sec1)
            sec1.Paragraphs.Add(image1)
            
            image1.ImageInfo.File = "C:/Images/Apple.jpg"
            image1.ImageInfo.ImageFileType = ImageFileType.Jpeg
            image1.ImageInfo.Title = "JPEG image"
            
            Dim image2 As Aspose.Pdf.Image = New Aspose.Pdf.Image(sec1)
            sec1.Paragraphs.Add(image2)
            
            image2.ImageInfo.File = "C:/Images/Flower.fax"
            image2.ImageInfo.ImageFileType = ImageFileType.Ccitt
            image2.ImageInfo.CcittSubFormat = CcittSubFormat.Group31D
            image2.ImageInfo.Title = "CCITT fax image"
            image2.ImageWidth = 350
            image2.ImageHeight = 400
            
            Dim image3 As Aspose.Pdf.Image = New Aspose.Pdf.Image(sec1)
            sec1.Paragraphs.Add(image3)
            
            image3.ImageInfo.File = "http://localhost/Images/SeaFood.jpg"
            image3.ImageInfo.ImageFileType = ImageFileType.Jpeg
            image3.ImageInfo.OpenType = ImageOpenType.Url
            image3.ImageInfo.Title = "jpeg image with url"
            image3.ImageWidth = 154
            image3.ImageHeight = 112
            image3.ImageInfo.BitsPerComponent = 8
            image3.ImageInfo.ComponentNumber = 3
            
            pdf1.Save("d:\\temp\\test.pdf")
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Image File="C:/Images/Apple.jpg" Type="jpeg"&gt;
            			&lt;Title&gt;JPEG image&lt;/Title&gt;
            		&lt;/Image&gt;
            		&lt;Image File="C:/Images/Flower.fax" Type="ccitt" CcittSubFormat="Group31D" Width="350" Height="400"&gt;
            			&lt;Title&gt;CCITT fax image&lt;/Title&gt;
            		&lt;/Image&gt;
            		&lt;Image File="http://localhost/Images/SeaFood.jpg" OpenType="url" Type="jpeg"
            			Width="154" Height="112" BitsPerComponent="8" ComponentNumber="3"&gt;
            		&lt;/Image&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.ImageInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.ImageInfo" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.Alignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.AlignmentType" /> object that indicates the image alignment type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.Title">
      <summary>
            Gets or sets a string value that indicates the title of the image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.ImageInfo.TextInfo" /> object that indicates the text info of the image <see cref="P:Aspose.Pdf.ImageInfo.Title" />.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.OpenType">
      <summary>
             Gets or sets a <see cref="T:Aspose.Pdf.ImageOpenType" /> that indicates the image open type.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             URL is supported in Image.ImageInfo.File. Momory image can is supported by Image.ImageInfo.ImageStream. 
             You need not set OpenType any more.
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.ImageFileType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.ImageInfo.ImageFileType" /> object that indicates the image type. If this property 
            is not set, the image type will be get from the file name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.ImageBorder">
      <summary>
            Gets or sets a borderinfo value that indicates the border information of the image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.File">
      <summary>
            Gets or sets a string that indicates the image file name and its path.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.ImageStream">
      <summary>
            Gets or sets a stream that indicates the image stream.
            </summary>
      <example>
        <code>
            [C#]
            System.IO.FileStream fs = new System.IO.FileStream("c:/images/logo.jpg",System.IO.FileMode.Open);
            
            Pdf pdf = new Pdf();
            
            Section sec = pdf.Sections.Add();
            Image img = new Image();
            img.ImageInfo.ImageFileType = ImageFileType.Jpeg;
            img.ImageInfo.ImageStream = fs;
            
            sec.Paragraphs.Add(img);
            
            pdf.Save("d:/test/test.pdf");
            fs.Close();
            
            [VB.NET]
            Dim fs As System.IO.FileStream =  New System.IO.FileStream("c:/images/logo.jpg",System.IO.FileMode.Open) 
            
            Dim pdf As Pdf =  New Pdf() 
            
            Dim sec As Section =  pdf.Sections.Add() 
            
            Dim img As Image =  New Image() 
            img.ImageInfo.ImageFileType = ImageFileType.Jpeg
            img.ImageInfo.ImageStream = fs
            sec.Paragraphs.Add(img)
            
            pdf.Save("d:/test/test.pdf")
            fs.Close()
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.SystemImage">
      <summary>
            Gets or sets a system <see cref="T:System.Drawing.Image" /> object which is used to create a Aspose <see cref="T:Aspose.Pdf.Image" /> object.
            </summary>
      <example>
        <code>
            [C#]
            System.Drawing.Image sysimg = System.Drawing.Image.FromFile("test.jpg");
            Pdf pdf1 = new Pdf();
            Section sec1 = pdf1.Sections.Add();
            
            Aspose.Pdf.Image img1 = new Aspose.Pdf.Image();
            img1.ImageInfo.SystemImage = sysimg;
            sec1.Paragraphs.Add(img1);
            pdf1.Save("test.pdf");
            sysimg.Dispose();
            
            [VB.NET]
            Dim sysimg As System.Drawing.Image =  System.Drawing.Image.FromFile("test.jpg") 
            Dim pdf1 As Pdf =  New Pdf() 
            Dim sec1 As Section =  pdf1.Sections.Add() 
            
            Dim img1 As Aspose.Pdf.Image =  New Aspose.Pdf.Image() 
            img1.ImageInfo.SystemImage = sysimg 
            sec1.Paragraphs.Add(img1)
            pdf1.Save("test.pdf")
            sysimg.Dispose()
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.DefaultFile">
      <summary>
            Gets or sets a string that indicates the default image file name. If this name is not null, Aspose.Pdf will use this image file when the image specified in 
            <see cref="P:Aspose.Pdf.ImageInfo.File" /> is not found. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.IsImageNotFoundErrorIgnored">
      <summary>
            Gets or sets a bool value that indicates whether the "image not found" error be ignored or not.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.MemoryData">
      <summary>
             Gets or sets a byte array that indicates the image data in memory.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             Please use <see cref="P:Aspose.Pdf.ImageInfo.ImageStream" /> instead.
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.IsBlack1">
      <summary>
            Gets or sets a bool value that indicates whether black is considered as 1 in an image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.ComponentNumber">
      <summary>
             Gets or sets an int value that indicates the color component number of the image.
             This property is need only when using web image.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             Web image can be supported by setting the URL in Image.ImageInfo.File.You need not set 
             this property any more.
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.BitsPerComponent">
      <summary>
             Gets or sets an int value that indicates the color bits per component of the image.
             This property is need only when using web image.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             Web image can be supported by setting the URL in Image.ImageInfo.File.You need not set 
             this property any more.
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.CcittSubFormat">
      <summary>
            Gets or sets the <see cref="P:Aspose.Pdf.ImageInfo.CcittSubFormat" />. Used for CCITT image type only.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.TiffFrame">
      <summary>
            Gets or sets an int value that indicates the valid frame of the TIFF image. The default value is 0.
            Used for TIFF image only. If this property is set to -1, all frames of the tiff images will be added 
            into the PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.FixWidth">
      <summary>
            Gets or sets a float value that indicates the fixed width of the image. If this property is set, 
            the image will be scaled to the fixed width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.FixHeight">
      <summary>
            Gets or sets a float value that indicates the fixed height of the image. If this property is set, 
            the image will be scaled to the fixed height.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.IsBlackWhite">
      <summary>
            Gets or sets a bool value that indicates whether the image is forced to be black-and-white. If TIFF 
            image of CCITT subformat is used, this property must be set to true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.CcittImageWidth">
      <summary>
            Gets or sets a float value that indicates the CCITT image width. CCITT image does not contain size 
            information so the width and height must be set by user.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.CcittImageHeight">
      <summary>
            Gets or sets a float value that indicates the CCITT image height. CCITT image does not contain size 
            information so the width and height must be set by user.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ImageInfo.IsAllFramesInNewPage">
      <summary>
            Gets or sets a bool value that indicates if all frames in TIFF images be rendered in new page.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ImageOpenType">
      <summary>
             Enumerates the image open types.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This enum is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             URL is supported in Image.ImageInfo.File. Momory image can be supported by Image.ImageInfo.ImageStream. 
             You need not set ImageOpenType any more.
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="F:Aspose.Pdf.ImageOpenType.File">
      <summary>
            Opens the image from a file.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageOpenType.Memory">
      <summary>
            Opens the image from memory directly. Only JPEG and CCITT image are supported.You can also use 
            ImageFileType.MemoryBmp which supports all image type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ImageOpenType.Url">
      <summary>
            Opens the image from a url directly. Only JPEG and CCITT image are supported. You can also use 
            URL as file name in File open type which supports all image type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.JavaScript">
      <summary>
            Represents a JavaScript in Pdf document.
            </summary>
      <example>
        <code>
            [c#]
            Pdf pdf = new Pdf();
            
            pdf.JavaScripts = new JavaScripts();
            pdf.JavaScripts.Add("this.print(true);");
            pdf.JavaScripts.Add("app.alert(\"hello world\");");
            
            pdf.Save(@"d:\test\test.pdf");
            
            [VB.Net]
            Dim pdf As Pdf =  New Pdf() 
            
            pdf.JavaScripts = New JavaScripts()
            pdf.JavaScripts.Add("this.print(true);")
            pdf.JavaScripts.Add("app.alert(\"hello world\");")
            
            pdf.Save("d:\test\test.pdf")
            
            [XML]
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            &lt;JavaScript ID="js1"&gt;this.print(true);&lt;/JavaScript&gt;
            &lt;JavaScript&gt;app.alert("hello world");&lt;/JavaScript&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.JavaScript.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.JavaScript" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.JavaScript.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.JavaScript" /> class from a script string.
            </summary>
      <param name="script">The script string.</param>
    </member>
    <member name="P:Aspose.Pdf.JavaScript.ScriptContent">
      <summary>
            Gets or sets a string that indicates the JavaScript.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.JavaScript.ID">
      <summary>
            Gets or sets a string that indicates the ID of the JavaScript.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.JavaScripts">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.JavaScript" /> objects.
            </summary>
      <example>
        <code>
            [c#]
            Pdf pdf = new Pdf();
            
            pdf.JavaScripts = new JavaScripts();
            pdf.JavaScripts.Add("this.print(true);");
            pdf.JavaScripts.Add("app.alert(\"hello world\");");
            
            pdf.Save(@"d:\test\test.pdf");
            
            [VB.Net]
            Dim pdf As Pdf =  New Pdf() 
            
            pdf.JavaScripts = New JavaScripts()
            pdf.JavaScripts.Add("this.print(true);")
            pdf.JavaScripts.Add("app.alert(\"hello world\");")
            
            pdf.Save("d:\test\test.pdf")
            
            [XML]
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            &lt;JavaScript ID="js1"&gt;this.print(true);&lt;/JavaScript&gt;
            &lt;JavaScript&gt;app.alert("hello world");&lt;/JavaScript&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.JavaScripts.Add">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.JavaScript" /> class and add 
            it to the JavaScripts collection.
            </summary>
      <returns>The <see cref="T:Aspose.Pdf.JavaScript" /> object that is created.</returns>
    </member>
    <member name="M:Aspose.Pdf.JavaScripts.Add(Aspose.Pdf.JavaScript)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.JavaScript" /> object into the collection.
            </summary>
      <param name="script">The <see cref="T:Aspose.Pdf.JavaScript" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.JavaScripts.Add(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.JavaScript" /> class and add 
            it to the JavaScripts collection.
            </summary>
      <param name="script">The content of the script.</param>
      <returns>The <see cref="T:Aspose.Pdf.JavaScript" /> object that is created.</returns>
    </member>
    <member name="M:Aspose.Pdf.JavaScripts.Insert(System.Int32,Aspose.Pdf.JavaScript)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.JavaScript" /> object into the collection at specified position.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Aspose.Pdf.JavaScript" /> object should be 
            inserted.</param>
      <param name="js">The <see cref="T:Aspose.Pdf.JavaScript" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.JavaScripts.Remove(Aspose.Pdf.Cell)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.JavaScript" /> object from the collection.
            </summary>
      <param name="jsToRemove">The <see cref="T:Aspose.Pdf.JavaScript" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.JavaScripts.IndexOf(Aspose.Pdf.JavaScript)">
      <summary>
            Gets the index of a specified JavaScript in the collection.
            </summary>
      <param name="js">The specified <see cref="T:Aspose.Pdf.JavaScript" /> object.</param>
      <returns>The index value.</returns>
    </member>
    <member name="P:Aspose.Pdf.JavaScripts.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.JavaScript" /> object from the collection according to JavaScript index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.JavaScripts.Item(System.String)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.JavaScript" /> object from the collection according to JavaScript ID.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.License">
      <summary>
            Provides methods to license the component.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.License.#ctor">
      <summary>
            Initializes a new instance of this class.
            </summary>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As license = New license
            License.SetLicense("MyLicense.lic")
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.License.SetLicense(System.String)">
      <summary>
            Licenses the component.
            </summary>
      <remarks>
        <p>Tries to find the license in the following locations:</p>
        <p>1. Explicit path.</p>
        <p>2. The folder of the component assembly.</p>
        <p>3. The folder of the client's calling assembly.</p>
        <p>4. The folder of the entry assembly.</p>
        <p>5. An embedded resource in the client's calling assembly.</p>
        <p>
          <b>Note:</b>On the .NET Compact Framework, tries to find the license only in these locations:</p>
        <p>1. Explicit path.</p>
        <p>2. An embedded resource in the client's calling assembly.</p>
      </remarks>
      <example>
            In this example, an attempt will be made to find a license file named MyLicense.lic
            in the folder that contains 
            
            
            the component, in the folder that contains the calling assembly,
            in the folder of the entry assembly and then in the embedded resources of the calling assembly.
            <code>
            [C#]
            
            License license = new License();
            license.SetLicense("MyLicense.lic");
            
            
            [Visual Basic]
            
            Dim license As License = New License
            license.SetLicense("MyLicense.lic")
            </code><param name="licenseName">Can be a full or short file name or name of an embedded resource.
            Use an empty string to switch to evaluation mode.</param></example>
    </member>
    <member name="M:Aspose.Pdf.License.SetLicense(System.IO.Stream)">
      <summary>
            Licenses the component.
            </summary>
      <param name="stream">A stream that contains the license.</param>
      <remarks>
        <p>Use this method to load a license from a stream.</p>
      </remarks>
      <example>
        <code>
            [C#]
            
            License license = new License();
            license.SetLicense(myStream);
            
            
            [Visual Basic]
            
            Dim license as License = new License
            license.SetLicense(myStream)
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Line">
      <summary>
            Represents a line <see cref="T:Aspose.Pdf.Shape" /> in a Graph.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            	
            Graph graph1 = new Graph(sec1,200,400);
            sec1.Paragraphs.Add(graph1);
            
            float[] posArr = new float[]{100,0,300,0};
            Line l1 = new Line(graph1,posArr);
            l1.GraphInfo.Color = new Aspose.Pdf.Color("Red");
            graph1.Shapes.Add(l1);
            
            posArr = new float[]{100,50,300,50};
            Line l2 = new Line(graph1,posArr);
            l2.GraphInfo.Color = new Aspose.Pdf.Color(0,128,128);
            graph1.Shapes.Add(l2);
            
            posArr = new float[]{100,100,300,100};
            Line l3 = new Line(graph1,posArr);
            l3.GraphInfo.Color = new Aspose.Pdf.Color(0,128,64,0);
            graph1.Shapes.Add(l3);
            
            posArr = new float[]{100,150,300,150};
            Line l4 = new Line(graph1,posArr);
            l4.GraphInfo.Color = new Aspose.Pdf.Color((byte)140);
            graph1.Shapes.Add(l4);
            
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim graph1 As Graph = New Graph(sec1, 200, 400)
            sec1.Paragraphs.Add(graph1)
            
            Dim posArr As Single() = New Single() {100, 0, 300, 0}
            
            Dim l1 As Line = New Line(graph1, posArr)
            l1.GraphInfo.Color = New Aspose.Pdf.Color("Red")
            graph1.Shapes.Add(l1)
            
            posArr = New Single() {100, 50, 300, 50}
            
            Dim l2 As Line = New Line(graph1, posArr)
            l2.GraphInfo.Color = New Aspose.Pdf.Color(0, 128, 128)
            graph1.Shapes.Add(l2)
            
            posArr = New Single() {100, 100, 300, 100}
            
            Dim l3 As Line = New Line(graph1, posArr)
            l3.GraphInfo.Color = New Aspose.Pdf.Color(0, 128, 64, 0)
            graph1.Shapes.Add(l3)
            
            posArr = New Single() {100, 150, 300, 150}
            
            Dim l4 As Line = New Line(graph1, posArr)
            l4.GraphInfo.Color = New Aspose.Pdf.Color(CType(140,Byte))
            graph1.Shapes.Add(l4)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Graph Height="200" Width="400"&gt;
            			&lt;Line Color="Red" Position="100 0 300 0" /&gt;
            			&lt;Line Color="rgb 0 128 128" Position="100 50 300 50" /&gt;
            			&lt;Line Color="cmyk 0 128 64 0" Position="100 100 300 100" /&gt;
            			&lt;Line Color="gray 140" Position="100 150 300 150" /&gt;
            		&lt;/Graph&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Line.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Line" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Line.#ctor(System.Single[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Line" /> class.
            </summary>
      <param name="positionArray">The line position array.</param>
    </member>
    <member name="M:Aspose.Pdf.Line.#ctor(Aspose.Pdf.Graph)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Line" /> class.
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Graph" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Graph" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Line.#ctor(Aspose.Pdf.Graph,System.Single[])">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Line" /> class.
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Graph" /> object.</param>
      <param name="positionArray">The line position array.The array is 
            composed by coordinates of each control point of the line.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Graph" /> object.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Line.PositionArray">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Line.PositionArray" /> object that indicates the position array.The array is 
            composed by coordinates of each control point of the line.Note that you can use the 
            <see cref="M:Aspose.Pdf.Line.#ctor(Aspose.Pdf.Graph,System.Single[])" /> constructor to create a Line object and need not use this class 
            directly.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ListLevelFormat">
      <summary>
            An object to define the format of the list of some level.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ListLevelFormat.TextInfo">
      <summary>
            Get or set the <see cref="P:Aspose.Pdf.ListLevelFormat.TextInfo" /> object of the list of current level.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ListLevelFormat.LeftMargin">
      <summary>
             Gets or sets a float value that indicates the left margin of the list of current level.
             The unit is point. In XML,the default unit is point,but cm and inch are also supported.
             For example,"10cm" or "5inch".   
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This property is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             Please use Margin property instead.
             It will be removed 12 months later since release 3.3.1.0 in January 2007. Aspose apologizes for 
             any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.ListLevelFormat.Margin">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.MarginInfo" /> object that indicates the margin of the list item.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ListLevelFormat.TabLeaderType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.ListLevelFormat.TabLeaderType" /> object that indicates the tab leader type for the 
            list. The default value is "Dot".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ListLevelFormat.SubsequentLinesIndent">
      <summary>
            Gets or sets a int value that indicates how many chars are indented for the subsequent lines 
            in the list item. The default value is 6.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ListSection">
      <summary>
             An object to display different lists.
             </summary>
      <example>
        <code>
             [C#]
             //The ListSection has set a default FormatArray of three levels.
             //The user can use the default three levels' list without the pain of defining the list's format.
             //But if you want to define your own list format, you should define it before using the list like the example.
             pdf = new Pdf();
             
             //Create the Table Of Contents. Add it to the pdf like a common Section.
             ListSection tocSection = new ListSection("Table Of Contents");
             tocSection.ListType = ListType.TableOfContents;
             pdf.Sections.Add(tocSection);
             
             
            	///create the List of Tables. Add it to the pdf like a common Section.
            	ListSection lotSection = new ListSection("List of Tables");
            	lotSection.ListType = ListType.ListOfTables;
            	pdf.Sections.Add(lotSection);
            
            	///create the List of Figures. Add it to the pdf like a common Section.
            	ListSection lofSection = new ListSection("List of Figures");
            	lofSection.ListType = ListType.ListOfFigures;
            	pdf.Sections.Add(lofSection);
            
            	//Define the format of the four levels' list.
            	tocSection.ListFormatArray.Length = 4;
            	tocSection.ListFormatArray[0].LeftMargin = 0;
            	tocSection.ListFormatArray[0].TextInfo.IsTrueTypeFontBold = true;
            	tocSection.ListFormatArray[0].TextInfo.IsTrueTypeFontItalic = true;
            	tocSection.ListFormatArray[1].LeftMargin = 10;
            	tocSection.ListFormatArray[1].TextInfo.IsUnderline = true;
            	tocSection.ListFormatArray[1].TextInfo.FontSize = 10;
            	tocSection.ListFormatArray[2].LeftMargin = 20;
            	tocSection.ListFormatArray[2].TextInfo.IsTrueTypeFontBold = true;			
            	tocSection.ListFormatArray[3].LeftMargin = 30;
            	tocSection.ListFormatArray[3].TextInfo.IsTrueTypeFontBold = true;			
                      
            	//Add four headings.
            	Section sec1 = pdf.Sections.Add();
            	
             for (int Level = 1;Level != 5; Level++)
             {
            		Heading heading2 = new Heading(pdf,sec1,Level);
            	            		
            		Segment segment2 = new Segment(heading2);
            		heading2.Segments.Add(segment2);
            		heading2.IsAutoSequence = true;
            		segment2.Content = "this is heading of level ";
            		segment2.Content += Level.ToString();
            		//Add the heading into Table Of Contents.
            		heading2.IsInList = true;
            		sec1.Paragraphs.Add(heading2);
             }
            			
            			
            	//Add one table to the pdf.
            	Table table1 = new Aspose.Pdf.Table();
            	sec1.Paragraphs.Add(table1);
            	table1.ColumnWidths = "70 2cm";
            	table1.Title = "Table 1";
                        		
            	Row row1 = table1.Rows.Add();
                        		
            	Cell cell1Row1 = row1.Cells.Add("ColumnsSpan = 2");
            	cell1Row1.ColumnsSpan = 2;
            	cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F);
                        
            	Row row2 = table1.Rows.Add();
                        		
            	Cell cell1Row2 = row2.Cells.Add("cell1");
            	cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F);
                        	
            	Cell cell2Row2 = row2.Cells.Add("cell2");
            	cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new Aspose.Pdf.Color("Red"));
            
            	//Add the table to the List of Tables.
            	table1.IsInList = true;
            
            	//Add one Image to the pdf.
            	Aspose.Pdf.Image image1 = new Aspose.Pdf.Image(sec1);
            	sec1.Paragraphs.Add(image1);
                        			
            	image1.ImageInfo.File = "C:/118528527.jpg";
            	image1.ImageInfo.ImageFileType = ImageFileType.Jpeg;
            	GraphNote note1 = new GraphNote(sec1);
            	note1.Content = "this is note1";
            	note1.PosX = 50;
            	note1.PosY = 100;
            	image1.ImageNotes.Add(note1);
            	//Add the Image to the List of Figures.
            	image1.IsInList = true;
                        
            	Graph graph1 = new Graph(sec1,100,400);
            	sec1.Paragraphs.Add(graph1);
                        		
            	float[] posArr = new float[]{0,0,200,80,300,40,350,90};
             Curve curve1 = new Curve(graph1,posArr);
             graph1.Shapes.Add(curve1);
            	//Add the Graph to the List of Figures.
             graph1.IsInList = true;	
            
             pdf.Save("TestTocXml.pdf");
             
             
             [Visual Basic]
             'The ListSection has set a default FormatArray of three levels.
             'The user can use the default three levels' list without the pain of defining the list's format.
             'But if you want to define your own list format, you should define it before using the list like the example.
             Dim pdf As Pdf  = new Pdf()
             
             'Create the Table Of Contents. Add it to the pdf like a common Section.
             Dim tocSection As ListSection = new ListSection("Table Of Contents")
             tocSection.ListType = ListType.TableOfContents
             pdf.Sections.Add(tocSection)
             
             
            	'create the List of Tables. Add it to the pdf like a common Section.
            	Dim lotSection As ListSection  = new ListSection("List of Tables")
            	lotSection.ListType = ListType.ListOfTables
            	pdf.Sections.Add(lotSection)
            
            	'create the List of Tables. Add it to the pdf like a common Section.
            	Dim lotSection As ListSection  = new ListSection("List of Tables")
            	lotSection.ListType = ListType.ListOfTables
            	pdf.Sections.Add(lotSection)
            
            	'create the List of Figures. Add it to the pdf like a common Section.
            	Dim lofSection As ListSection = new ListSection("List of Figures")
            	lofSection.ListType = ListType.ListOfFigures
            	pdf.Sections.Add(lofSection)
            
            	
            	///Define the format of the four levels' list.
            	tocSection.ListFormatArray.Length = 4
            	tocSection.ListFormatArray(0).LeftMargin = 0
            	tocSection.ListFormatArray(0).TextInfo.IsTrueTypeFontBold = true
            	tocSection.ListFormatArray(0).TextInfo.IsTrueTypeFontItalic = true
            	tocSection.ListFormatArray(1).LeftMargin = 10
            	tocSection.ListFormatArray(1).TextInfo.IsUnderline = true
            	tocSection.ListFormatArray(1).TextInfo.FontSize = 10
            	tocSection.ListFormatArray(2).LeftMargin = 20
            	tocSection.ListFormatArray(2).TextInfo.IsTrueTypeFontBold = true			
            	tocSection.ListFormatArray(3).LeftMargin = 30
            	tocSection.ListFormatArray(3).TextInfo.IsTrueTypeFontBold = true			
                      
            	///Add four headings.
            	
            	Dim sec1 As Section  = pdf.Sections.Add()
            	Dim Level As Int;
             for Level=1 To 4 
             	Dim heading2 As Heading= new Heading(pdf,sec1,Level)
            	            		
            		Dim segment2 As Segment  = new Segment(heading2)
            		heading2.Segments.Add(segment2)
            		heading2.IsAutoSequence = true
            		segment2.Content = "this is heading of level "
            		segment2.Content += Level.ToString()
            		//Add the heading into Table Of Contents.
            		heading2.IsInList = true
            		sec1.Paragraphs.Add(heading2)
            	Next Level 
            			
            			
            	///Add one table to the pdf.
            	Dim table1 As Table  = new Aspose.Pdf.Table()
            	sec1.Paragraphs.Add(table1)
            	table1.ColumnWidths = "70 2cm"
            	table1.Title = "Table 1"
                        		
            	Dim row1 As Row  = table1.Rows.Add()
                        		
            	Dim cell1Row1 As Cell  = row1.Cells.Add("ColumnsSpan = 2")
            	cell1Row1.ColumnsSpan = 2
            	cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F)
                        
            	Dim row2 As Row  = table1.Rows.Add()
                        		
            	Dim cell1Row2 As Cell  = row2.Cells.Add("cell1")
            	cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F)
                        	
            	Dim cell2Row2 As Cell  = row2.Cells.Add("cell2")
            	cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new Aspose.Pdf.Color("Red"))
            
            	'Add the table to the List of Tables.
            	table1.IsInList = true
            
            	'Add one Image to the pdf.
            	Dim image1 As Image  = new Aspose.Pdf.Image(sec1)
            	sec1.Paragraphs.Add(image1)
                        			
            	image1.ImageInfo.File = "C:/118528527.jpg"
            	image1.ImageInfo.ImageFileType = ImageFileType.Jpeg
            	Dim note1 As GraphNote  = new GraphNote(sec1)
            	note1.Content = "this is note1"
            	note1.PosX = 50
            	note1.PosY = 100
            	image1.ImageNotes.Add(note1)
            	'Add the Image to the List of Figures.
            	image1.IsInList = true
                        
            	Dim graph1 As Graph  = new Graph(sec1,100,400)
            	sec1.Paragraphs.Add(graph1)
                        		
            	Dim posArr() As Single = New Single() {0, 0, 200, 80, 300, 40, 350, 90}
             Dim curve1 As Curve = New Curve(graph1, posArr)
             graph1.Shapes.Add(curve1)
            	'Add the Graph to the List of Figures.
             graph1.IsInList = true
            
            
             pdf.Save("TestTocXml.pdf")
             
             
             [XML]
             
            &lt;?xml version="1.0" encoding="utf-8"?&gt;
            &lt;Pdf&gt;
            	&lt;ListSection ListType="TableOfContents"&gt;
            		&lt;Title Alignment="Center"&gt;
            			&lt;Segment IsTrueTypeFontBold="true" FontSize="30"&gt; TableOfContents
            			&lt;/Segment&gt;
            		&lt;/Title&gt;
            		&lt;ListLevelFormat Level="1" LeftMargin="0"&gt;
            			&lt;TextInfo IsTrueTypeFontBold="true" IsTrueTypeFontItalic="true"&gt;
            			&lt;/TextInfo&gt;
            		&lt;/ListLevelFormat&gt;
            		&lt;ListLevelFormat Level="2" LeftMargin="10"&gt;
            			&lt;TextInfo IsUnderline="true" FontSize="10"&gt;
            			&lt;/TextInfo&gt;
            		&lt;/ListLevelFormat&gt;
            		&lt;ListLevelFormat Level="3" LeftMargin="20"&gt;
            			&lt;TextInfo IsTrueTypeFontBold="true"&gt;
            			&lt;/TextInfo&gt;
            		&lt;/ListLevelFormat&gt;
            		&lt;ListLevelFormat Level="4" LeftMargin="30"&gt;
            			&lt;TextInfo IsTrueTypeFontBold="true"&gt;
            			&lt;/TextInfo&gt;
            		&lt;/ListLevelFormat&gt;
            	&lt;/ListSection&gt;
            	&lt;ListSection ListType="ListOfTables"&gt;
            		&lt;Title&gt;
            			&lt;Segment IsTrueTypeFontBold="true" FontSize="30"&gt;ListOfTables&lt;/Segment&gt;
            		&lt;/Title&gt;
            	&lt;/ListSection&gt;
            	&lt;ListSection ListType="ListOfFigures"&gt;
            		&lt;Title&gt;
            			&lt;Segment IsTrueTypeFontBold="true" FontSize="30"&gt;ListOfFigures&lt;/Segment&gt;
            		&lt;/Title&gt;
            	&lt;/ListSection&gt;
            	&lt;Section&gt;
            		&lt;Heading level="1" IsAutoSequence="true" IsInList="true"&gt;
            			&lt;Segment&gt;this is heading of level 1&lt;/Segment&gt;
            		&lt;/Heading&gt;
            		&lt;Heading level="2" IsAutoSequence="true" IsInList="true"&gt;
            			&lt;Segment&gt;this is heading of level 2&lt;/Segment&gt;
            		&lt;/Heading&gt;
            		&lt;Heading level="3" IsAutoSequence="true" IsInList="true"&gt;
            			&lt;Segment&gt;this is heading of level 3&lt;/Segment&gt;
            		&lt;/Heading&gt;
            		&lt;Heading level="4" IsAutoSequence="true" IsInList="true"&gt;
            			&lt;Segment&gt;this is heading of level 4&lt;/Segment&gt;
            		&lt;/Heading&gt;
            		&lt;Table ColumnWidths="70 2cm" IsInList="true"&gt;
            			&lt;Row&gt;
            				&lt;Cell ColumnsSpan="2"&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5"/&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            			&lt;/Row&gt;
            			&lt;Row&gt;
            				&lt;Cell&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5"/&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;cell1&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            				&lt;Cell&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5" Color="Red"/&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;cell2&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            			&lt;/Row&gt;
            		&lt;/Table&gt;
            		&lt;Image File="C:/118528527.jpg" Type="jpeg" IsInList="true"&gt;
            			&lt;Note Position="50 100"&gt;this is note1&lt;/Note&gt;
            			&lt;Title&gt;mm picture&lt;/Title&gt;
            		&lt;/Image&gt;
            		&lt;Graph Height="100" Width="400" IsInList="true"&gt;
            			&lt;Curve Position="0 0 200 80 300 40 350 90"/&gt;
            			&lt;Title&gt;one curve&lt;/Title&gt;
            		&lt;/Graph&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
             </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Section">
      <summary>
            Represents a section in a Pdf document.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		 		
            Section section1 = pdf1.Sections.Add();
            		 		
            Text text1 = new Text(section1,"This is text in section1.");
            text1.Margin.Top = 30;
            section1.Paragraphs.Add(text1);
            		 		
            Section section2 = pdf1.Sections.Add();
            section2.IsLandscape = true;
            		
            Text text2 = new Text(section2,"This is text in section2.");
            text2.Margin.Top = 30;
            section2.Paragraphs.Add(text2);
            
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim section1 As Section = pdf1.Sections.Add()
            
            Dim text1 As Text = New Text(section1, "This is text in section1.")
            text1.Margin.Top = 30
            section1.Paragraphs.Add(text1)
            
            Dim section2 As Section = pdf1.Sections.Add()
            section2.IsLandscape = True
            
            Dim text2 As Text = New Text(section2, "This is text in section2.")
            text2.Margin.Top = 30
            section2.Paragraphs.Add(text2)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Text MarginTop="30"&gt;
            			&lt;Segment&gt;
            			This is text in section1.
            			&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            	&lt;Section IsLandscape="true"&gt;
            		&lt;Text MarginTop="30"&gt;
            			&lt;Segment&gt;
            			This is text in section2..
            			&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Section.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Section" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Section.#ctor(Aspose.Pdf.Pdf)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Section" /> class.
            </summary>
      <param name="pdf">The pdf document object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="P:Aspose.Pdf.Section.Pdf" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Section.AddParagraph(Aspose.Pdf.Paragraph)">
      <summary>
            Add a paragraph into the section. This method is used in direct-to-file mode.That means all paragraphs will be rendered into pdf file 
            without being saved in the document object model. Less memory will be consumed in this mode,but you 
            can't access the paragraphs that be added into the document any more, so some of the advanced 
            features such as combination of XML and API,hyperlink to specified paragraph,total page number in 
            footer,etc.,is not available.
            </summary>
      <param name="para">The paragraph to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Section.InsertHeader(Aspose.Pdf.HeaderFooterType)">
      <summary>
            Insert Header of the section.
            </summary>
      <param name="type">The type of the header.
            </param>
      <returns>The newly inserted header.</returns>
    </member>
    <member name="M:Aspose.Pdf.Section.InsertFooter(Aspose.Pdf.HeaderFooterType)">
      <summary>
            Insert footer of the section.
            </summary>
      <param name="type">The type of the header.
            </param>
      <returns>The newly inserted footer.</returns>
    </member>
    <member name="M:Aspose.Pdf.Section.GetObjectByID(System.String)">
      <summary>
            Gets a object with specified ID in the section.
            </summary>
      <param name="ID">The object ID.</param>
      <returns>The object with specified ID. Null if the ID is not found.</returns>
    </member>
    <member name="M:Aspose.Pdf.Section.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Section" /> object. Section format info is cloned but paragraphs are not cloned. 
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Section" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Section.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Section" /> object. Both format and paragraphs are cloned. 
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.Section" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Section.PageInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Section.PageInfo" /> that indicates page info of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Section.TextInfo" /> that indicates text info of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.GraphInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Section.GraphInfo" /> that indicates graph info of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.Paragraphs">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Section.GraphInfo" /> collection that indicates all paragraphs in the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.OddHeader">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.HeaderFooter" /> object that indicates the odd header of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.EvenHeader">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.HeaderFooter" /> object that indicates the even header of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.OddFooter">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.HeaderFooter" /> object that indicates the odd footer of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.EvenFooter">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.HeaderFooter" /> object that indicates the even footer of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.FirstLineIndent">
      <summary>
            Gets or sets an int value that indicates the blank space at the beginning of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.IsSpaced">
      <summary>
            Gets or sets a bool value that indicates whether the spaces at the begin of the text and returns in 
            the text be shown. For the following XML:
            <code>
            &lt;Text&gt;
            	&lt;Segment&gt;The first line,
            	The second line.&lt;/Segment&gt;
            &lt;/Text&gt;
            </code>
            If IsSpaced is false, the result will be:
            <code>
            The first line,The second line.
            </code>
            If IsSpaced is true, the result will be:
            <code>
            The first line,
            	The second line.
            </code></summary>
    </member>
    <member name="P:Aspose.Pdf.Section.ID">
      <summary>
            Gets or sets a string that indicates the ID of the section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.IsDisabled">
      <summary>
            Gets or sets a bool value that indicates whether this section is disabled. The default value is false. 
            If this property is set to true, this section will not be rendered.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.BackgroundImageFile">
      <summary>
            Gets or sets a string that indicates the background image file name.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.BackgroundColor">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Color" /> object that indicatres the backgorund color of the 
            section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.BackgroundImageType">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.ImageFileType" /> enum that indicates the type of the background image.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.IsLandscape">
      <summary>
            Gets or sets a bool value that indicates whether the page orientation is landscape.
            The default is false, portrait.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.AdditionalOddFooter">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.HeaderFooter" /> object that indicates the additional odd footer of the section.
            If the first page needs one footer style, the subsequent pages need another footer style, the additional 
            footer is needed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.AdditionalEvenFooter">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.HeaderFooter" /> object that indicates the additional even footer of the section.
            If the first page needs one footer style, the subsequent pages need another footer style, the additional 
            footer is needed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.AdditionalOddHeader">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.HeaderFooter" /> object that indicates the additional odd header of the section.
            If the first page needs one header style, the subsequent pages need another header style, the additional 
            header is needed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.AdditionalEvenHeader">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.HeaderFooter" /> object that indicates the additional even header of the section.
            If the first page needs one header style, the subsequent pages need another header style, the additional 
            header is needed.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.BackgroundImageFixedWidth">
      <summary>
            Gets or sets a float value that indicates the fixed width of the background image. If this property is not set, the real 
            image size will be used as page size.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.IsBackgroundImageBlackWhite">
      <summary>
            Gets or sets a bool value that indicates whether the image is forced to be black-and-white. If black-and-white TIFF 
            image of CCITT subformat is used, this property must be set to true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.IsNewPage">
      <summary>
            Gets or sets a bool value that indicates whether the section starts a new page.
            The default value is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.PageRotatingAngle">
      <summary>
            Gets or sets the number of degrees by which the page should be rotated clockwise when displayed 
            or printed. The value must be a multiple of 90. Default value is 0.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.HasColumnLine">
      <summary>
            Gets or sets a bool value that indicates the vertical line between columns need to been added
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.ColumnInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Section.ColumnInfo" /> object that indicates the columns info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.IsPageNumberRestarted">
      <summary>
            Gets or sets a bool value that indicates whether the page number be restarted at this section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.IsNewColumn">
      <summary>
            Gets or sets a bool value that indicates whether the section starts at new column.Default is true. 
            If this property is set to false, please make sure the section has the same column setting as the 
            former section.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Section.StartingPageNumber">
      <summary>
            Gets or sets a int value that indicates the starting page number of the section. Default is 1.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ListSection.Title">
      <summary>
            Get or set the <see cref="T:Aspose.Pdf.Text" /> value of the title of <see cref="T:Aspose.Pdf.ListSection" />.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ListSection.IsCaptionLabelNeeded">
      <summary>
            Gets or sets a bool value that indicates whether caption label is needed in TOC.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ListSection.ListFormatArray">
      <summary>
            Get or set the format of the lists of all levels using the <see cref="T:Aspose.Pdf.FormatArray" />.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.ListSection.ListType">
      <summary>
            Get or set the <see cref="P:Aspose.Pdf.ListSection.ListType" /> of the <see cref="T:Aspose.Pdf.ListSection" /> object.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.ListType">
      <summary>
            Enumerates the types of list section.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ListType.TableOfContents">
      <summary>
            Table of contents.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ListType.ListOfTables">
      <summary>
            List of tables.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.ListType.ListOfFigures">
      <summary>
            List of figures.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.MarginInfo">
      <summary>
            Encapsulates margin info.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            
            pdf1.PageSetup.PageHeight = PageSize.A2Height;
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Text text1 = new Text(sec1,"this is text content");
            text1.Margin.Top = 30;
            sec1.Paragraphs.Add(text1);
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            pdf1.PageSetup.PageHeight = PageSize.A2Height
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim text1 As Text = New Text(sec1, "this is text content")
            text1.Margin.Top = 30
            sec1.Paragraphs.Add(text1)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section PageHeight="1684"&gt;
            		&lt;Text MarginTop="30"&gt;
            			&lt;Segment&gt;this is text content&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.MarginInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.MarginInfo" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.MarginInfo.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.MarginInfo" /> object.
            </summary>
      <returns>The new object.</returns>
    </member>
    <member name="P:Aspose.Pdf.MarginInfo.Left">
      <summary>
            Gets or sets a float value that indicates the left margin.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,"10cm" or "5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.MarginInfo.Right">
      <summary>
            Gets or sets a float value that indicates the right margin.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,"10cm" or "5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.MarginInfo.Top">
      <summary>
            Gets or sets a float value that indicates the top margin.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,"10cm" or "5inch".
            </summary>
    </member>
    <member name="P:Aspose.Pdf.MarginInfo.Bottom">
      <summary>
            Gets or sets a float value that indicates the bottom margin.
            The unit is point. In XML,the default unit is point,but cm and inch are also 
            supported. For example,"10cm" or "5inch".
            </summary>
    </member>
    <member name="T:Aspose.Pdf.NoteIconType">
      <summary>
            Enumerates the not icon types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NoteIconType.Comment">
      <summary>
            Comment type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NoteIconType.Insert">
      <summary>
            Insert type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NoteIconType.Paragraph">
      <summary>
            Paragraph type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NoteIconType.Note">
      <summary>
            Note type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NoteIconType.NewParagraph">
      <summary>
            NewParagraph type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NoteIconType.Key">
      <summary>
            Key type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NoteIconType.Help">
      <summary>
            Help type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.NoteWindowPositioningType">
      <summary>
            Enumerates the positioning types for note's popup window.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NoteWindowPositioningType.Auto">
      <summary>
            The popup window of note be positioned automatically.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NoteWindowPositioningType.Absolute">
      <summary>
            The popup window of note be absolute positioned.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NoteWindowPositioningType.NoteRelative">
      <summary>
            The popup window of note be positioned relative to the note's position.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.NumberingContinuationType">
      <summary>
            Enumerates the continuation style of numbering of footnote or endnote
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingContinuationType.ContinuationInDocument">
      <summary>
            All the foot or end notes'numbers in the same pdf document would be continuerable.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingContinuationType.ContinuationInSection">
      <summary>
            All the foot or end notes'numbers in the same section would be continuerable.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingContinuationType.ContinuationInPage">
      <summary>
            All the footnote numbers in the same page would be continuerable.This type is not suitable for end notes
            </summary>
    </member>
    <member name="T:Aspose.Pdf.NumberingFormatType">
      <summary>
            Enumerates the footnote number types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingFormatType.Arab">
      <summary>
            Arab type,for example, 1,1.1,...
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingFormatType.RomanUpper">
      <summary>
            Roman upper type, for example, I,I.II, ...
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingFormatType.RomanLower">
      <summary>
            Roman lower type, for example, i,i.ii, ...
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingFormatType.EnglishUpper">
      <summary>
            English upper type, for example, A,A.B, ...
            </summary>
    </member>
    <member name="F:Aspose.Pdf.NumberingFormatType.EnglishLower">
      <summary>
            English lower type, for example, a,a.b, ...
            </summary>
    </member>
    <member name="T:Aspose.Pdf.OpenType">
      <summary>
            Enumerates the document open types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.OpenType.Auto">
      <summary>
            Opens automatically.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.OpenType.Bookmarks">
      <summary>
            Opens in bookmarks.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.OpenType.Thumbnails">
      <summary>
            Opens in thumbnails.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.OpenType.FullScreen">
      <summary>
            Opens in full screen.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.OpenType.None">
      <summary>
            Opens nothing.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageSetup">
      <summary>
            Encapsulates info for page setup.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            
            pdf1.PageSetup.PageHeight = PageSize.A2Height;
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Text text1 = new Text(sec1,"this is text content");
            text1.Margin.Top = 30;
            sec1.Paragraphs.Add(text1);
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            pdf1.PageSetup.PageHeight = PageSize.A2Height
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim text1 As Text = New Text(sec1, "this is text content")
            text1.Margin.Top = 30
            sec1.Paragraphs.Add(text1)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section PageHeight="1684"&gt;
            		&lt;Text MarginTop="30"&gt;
            			&lt;Segment&gt;this is text content&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.PageSetup.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.PageSetup" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.PageSetup.#ctor(Aspose.Pdf.Section)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.PageSetup" /> class.
            </summary>
      <param name="section">The section in which this PageSetup is used for.</param>
    </member>
    <member name="M:Aspose.Pdf.PageSetup.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.PageSetup" /> object.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.PageSetup" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.PageSetup.Margin">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.MarginInfo" /> object that indicates the page margin info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSetup.PageWidth">
      <summary>
            Gets or sets a float value that indicates the page width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSetup.PageHeight">
      <summary>
            Gets or sets a float value that indicates the page height.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSetup.CropBox">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.RectData" /> object that indicates the crop box of the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSetup.BleedBox">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.RectData" /> object that indicates the bleed box of the page.
            The bleed box (PDF 1.3) defines the region to which the contents of the page 
            should be clipped when output in a production environment. This may include 
            any extra “bleed area” needed to accommodate the physical limitations of cutting,
            folding, and trimming equipment. The actual printed page may include 
            printing marks that fall outside the bleed box.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSetup.ArtBox">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.RectData" /> object that indicates the art box of the page.
            The art box (PDF 1.3) defines the extent of the page’s meaningful content 
            (including potential white space) as intended by the page’s creator.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSetup.TrimBox">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.RectData" /> object that indicates the trim box of the page.
            The trim box (PDF 1.3) defines the intended dimensions of the finished page 
            after trimming. It may be smaller than the media box, to allow for productionrelated 
            content such as printing instructions, cut marks, or color bars.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSetup.PageBorder">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.PageSetup.PageBorder" /> object that indicates the page border.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PageSetup.PageBorderMargin">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.MarginInfo" /> object that indicates the margin between the page border and 
            the page edge. The default value is half of the page margin.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageSize">
      <summary>
            Encapsulates predefined page sizes, including A0, A1, A2, A3, A4, A5, A6, B5, Letter, Legal, Ledger and P11x17.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            
            pdf1.PageSetup.PageHeight = PageSize.A2Height;
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Text text1 = new Text(sec1,"this is text content");
            text1.Margin.Top = 30;
            sec1.Paragraphs.Add(text1);
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            pdf1.PageSetup.PageHeight = PageSize.A2Height
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim text1 As Text = New Text(sec1, "this is text content")
            text1.Margin.Top = 30
            sec1.Paragraphs.Add(text1)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section PageHeight="1684"&gt;
            		&lt;Text MarginTop="30"&gt;
            			&lt;Segment&gt;this is text content&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.PageSize.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.PageSize" /> class.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.A0Width">
      <summary>
            The width of A0.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.A0Height">
      <summary>
            The height of A0.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.A1Width">
      <summary>
            The width of A1.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.A1Height">
      <summary>
            The height of A1.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.A2Width">
      <summary>
            The width of A2.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.A2Height">
      <summary>
            The height of A2.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.A3Width">
      <summary>
            The width of A3.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.A3Height">
      <summary>
            The height of A3.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.A4Width">
      <summary>
            The width of A4.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.A4Height">
      <summary>
            The height of A4.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.A5Width">
      <summary>
            The width of A5.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.A5Height">
      <summary>
            the height of page A5.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.A6Width">
      <summary>
            The width of A6.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.A6Height">
      <summary>
            The height of A6.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.B5Width">
      <summary>
            The width of B5.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.B5Height">
      <summary>
            The height of B5.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.LetterWidth">
      <summary>
            The width of Letter.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.LetterHeight">
      <summary>
            the height of page Letter.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.LegalWidth">
      <summary>
            The width of Legal.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.LegalHeight">
      <summary>
            The height of Legal.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.LedgerWidth">
      <summary>
            The width of Ledger.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.LedgerHeight">
      <summary>
            The height of Ledger.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.P11x17Width">
      <summary>
            The width of P11x17.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageSize.P11x17Height">
      <summary>
            The height of P11x17.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PageTransitionType">
      <summary>
            Enumerates transition types for page transition effects when revealing the new page.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageTransitionType.Split">
      <summary>
            Two lines sweep across the screen.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageTransitionType.Blinds">
      <summary>
            Multiple lines,evenly spaced across the screen,synchronously sweep in the same direction.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageTransitionType.Box">
      <summary>
            A rectangular box sweeps inward from the edges of the page or outward from the center.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageTransitionType.Wipe">
      <summary>
            A single line sweeps across the screen from one edge to the other.		
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageTransitionType.Dissolve">
      <summary>
            The old page dissolves gradually.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageTransitionType.Glitter">
      <summary>
            Similar to Dissolve except that the effect sweeps across the page in a wide band moving from one side of the screen to the other.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageTransitionType.Replace">
      <summary>
            The new page simply replaces the old one with no special transition effect.		
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PageTransitionType.None">
      <summary>
            No transition.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Paragraphs">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.Paragraph" /> objects.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            		
            pdf.Security = new Security();
            pdf.Security.IsCopyingAllowed = false;
            
            pdf.PageSetup.PageHeight = PageSize.A2Height;
            
            Section section = new Section(pdf);
            pdf.Sections.Add(section);
            		
            Text text1 = new Text(section);
            text1.Margin.Top = 30;
            section.Paragraphs.Add(text1);
            		
            Segment segment1 = new Segment(text1);
            text1.Segments.Add(segment1);
            segment1.Content = "this is text content";
            		
            pdf.Save(Response);
            Response.End();
            
            [Visual Basic]
            Dim pdf As Pdf = New Pdf()
            
            pdf.Security = New Security()
            pdf.Security.IsCopyingAllowed = False
            
            pdf.PageSetup.PageHeight = PageSize.A2Height
            
            Dim section As Section = New Section(pdf)
            pdf.Sections.Add(section)
            
            Dim text1 As Text = New Text(section)
            text1.Margin.Top = 30
            section.Paragraphs.Add(text1)
            
            Dim segment1 As Segment = New Segment(text1)
            text1.Segments.Add(segment1)
            segment1.Content = "this is text content"
            
            pdf.Save(Response)
            Response.End()
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf" IsCopyingAllowed="false"&gt;
            	&lt;Section PageHeight="1684"&gt;
            		&lt;Text MarginTop="30"&gt;
            			&lt;Segment&gt;this is text content&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Paragraphs" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.Add(Aspose.Pdf.Paragraph)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Paragraph" /> object into the collection.
            </summary>
      <param name="paragraph">The <see cref="T:Aspose.Pdf.Paragraph" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.IndexOf(Aspose.Pdf.Paragraph)">
      <summary>
            Gets the index of a specified <see cref="T:Aspose.Pdf.Paragraph" /> object in the collection.
            </summary>
      <param name="paragraph">The specified paragraph.</param>
      <returns>The index value.</returns>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.Insert(Aspose.Pdf.Paragraph,Aspose.Pdf.Paragraph)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Paragraph" /> object into the collection after specified Cell object.
            </summary>
      <param name="paragraphToInsertAfter">The <see cref="T:Aspose.Pdf.Paragraph" /> object to insert after. 
            If this object is null, the new object will be inserted as the first member.</param>
      <param name="newParagraph">The <see cref="T:Aspose.Pdf.Paragraph" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.Remove(Aspose.Pdf.Paragraph)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Paragraph" /> object from the collection.
            </summary>
      <param name="paragraphToRemove">The <see cref="T:Aspose.Pdf.Paragraph" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.Paragraphs.CopyTo(Aspose.Pdf.Paragraph[],System.Int32)">
      <summary>
            Copies the elements to a <see cref="T:Aspose.Pdf.Paragraph" /> object array, starting at a specified array index.
            </summary>
      <param name="paraArray">The <see cref="T:Aspose.Pdf.Paragraph" /> object array.</param>
      <param name="index">The starting index.</param>
    </member>
    <member name="P:Aspose.Pdf.Paragraphs.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Paragraph" /> object from the collection according to Paragraph index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Paragraphs.Item(System.String)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Paragraph" /> object from the collection according to Paragraph ID.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Pdf">
      <summary>
            Represents the Pdf document.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            
            pdf1.PageSetup.PageHeight = PageSize.A2Height;
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Text text1 = new Text(sec1,"this is text content");
            text1.Margin.Top = 30;
            sec1.Paragraphs.Add(text1);
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            pdf1.PageSetup.PageHeight = PageSize.A2Height
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim text1 As Text = New Text(sec1, "this is text content")
            text1.Margin.Top = 30
            sec1.Paragraphs.Add(text1)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section PageHeight="1684"&gt;
            		&lt;Text MarginTop="30"&gt;
            			&lt;Segment&gt;this is text content&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Pdf.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Pdf" /> class for Evaluation License.
            </summary>
      <remarks>
            It can be used in both Windows Forms applications and Web Forms applications
            when the license type is Evaluation License.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Pdf.#ctor(System.IO.FileStream)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Pdf" /> class for Evaluation License. You can use 
            SetLicense method to set license if you have purchased license.If you use this constructor,the  
            component will work in direct-to-file mode. That means all paragraphs will be rendered into pdf file 
            without being saved in the document object model. Less memory will be consumed in this mode,but you 
            can't access the paragraphs that be added into the document any more, so some of the advanced 
            features such as combination of XML and API,hyperlink to specified paragraph,total page number in 
            footer,etc.,is not available.
            </summary>
      <param name="docStream">The stream to write the document.</param>
    </member>
    <member name="M:Aspose.Pdf.Pdf.Close">
      <summary>
            Close the document. This method is used for direct-to-file mode only.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Pdf.SetLicense(System.String)">
      <summary>
            Obsolete. Licenses this component to use in a Windows application.
            </summary>
      <remarks>
        <p>Use this class for licenses purchased before 2005/01/22. Aspose has upgraded to a new 
            licensing system, please use License.<see cref="M:Aspose.Pdf.License.SetLicense(System.String)" /> for licenses purchased after that date.</p>
      </remarks>
      <param name="licenseFile">The license filename with its path.</param>
    </member>
    <member name="M:Aspose.Pdf.Pdf.SetLicense(System.IO.TextReader)">
      <summary>
            Obsolete. Licenses this component to use in a Windows application.
            </summary>
      <remarks>
        <p>Use this class for licenses purchased before 2005/01/22. Aspose has upgraded to a new 
            licensing system, please use License.<see cref="M:Aspose.Pdf.License.SetLicense(System.String)" /> for licenses purchased after that date.</p>
      </remarks>
      <param name="licenseReader">Where to read the license from. Please create the TextReader with 
            UnicodeEncoding.UTF7.</param>
    </member>
    <member name="M:Aspose.Pdf.Pdf.SetLicense(System.String,System.Web.UI.Page)">
      <summary>
            Obsolete. Licenses this component to use in a Web application.
            </summary>
      <remarks>
        <p>Use this class for licenses purchased before 2005/01/22. Aspose has upgraded to a new 
            licensing system, please use License.<see cref="M:Aspose.Pdf.License.SetLicense(System.String)" /> for licenses purchased after that date.</p>
      </remarks>
      <param name="licenseFile">The license filename with its path.</param>
      <param name="page">The page that requests this object.</param>
    </member>
    <member name="M:Aspose.Pdf.Pdf.SetLicense(System.IO.TextReader,System.Web.UI.Page)">
      <summary>
            Obsolete. Licenses this component to use in a Web application.
            </summary>
      <remarks>
        <p>Use this class for licenses purchased before 2005/01/22. Aspose has upgraded to a new 
            licensing system, please use License.<see cref="M:Aspose.Pdf.License.SetLicense(System.String)" /> for licenses purchased after that date.</p>
      </remarks>
      <param name="licenseReader">Where to read the license from.Please create the TextReader with 
            UnicodeEncoding.UTF7.</param>
      <param name="page">The page that requests this object.</param>
    </member>
    <member name="M:Aspose.Pdf.Pdf.SetLicenseCOM(System.String)">
      <summary>
            Obsolete. Licenses this component to use in a COM application.
            </summary>
      <remarks>
        <p>Use this class for licenses purchased before 2005/01/22. Aspose has upgraded to a new 
            licensing system, please use License.<see cref="M:Aspose.Pdf.License.SetLicense(System.String)" /> for licenses purchased after that date.</p>
      </remarks>
      <example>
        <code>
            Set pdf1 = server.CreateObject("Aspose.Pdf.Pdf")
            pdf1.SetLicenseCOM("e:\projects\CSharp\customer\Aspose.Pdf.lic")
            set sec1 = server.CreateObject("Aspose.Pdf.Section")
            pdf1.Sections.Add(sec1)
            set t1 = server.CreateObject("Aspose.Pdf.Text")
            set s1 = server.CreateObject("Aspose.Pdf.Segment")
            s1.Content = "hello"
            t1.Segments.Add(s1)
            sec1.Paragraphs.Add(t1)
            pdf1.Save("test.Pdf")
            </code>
      </example>
      <param name="licenseFile">The license filename with its path.</param>
    </member>
    <member name="M:Aspose.Pdf.Pdf.Save(System.String)">
      <summary>
            Generates Pdf document and saves it.
            </summary>
      <param name="pdfFile">The file path and name to save the Pdf document.</param>
      <example>
        <code>
            Pdf pdf = new Pdf();
            pdf.BindXML("C:/xml/Test.xml",null);
            pdf.Save(C;/Pdf/Test.pdf);
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Pdf.Save(System.String,Aspose.Pdf.SaveType,System.Web.HttpResponse)">
      <summary>
            Generates Pdf document and sends it to the client browser. 
            </summary>
      <param name="fileName">The name for the document that will appear at the client browser. 
            The name should not contain path. If you use SaveType.OpenInBrowser, the file name is of no use.</param>
      <param name="saveType">Specifies how the document is presented at the client browser.</param>
      <param name="response">The HttpResponse object to put the pdf to.</param>
    </member>
    <member name="M:Aspose.Pdf.Pdf.Save(System.IO.Stream)">
      <summary>
            Generates Pdf document and put it to a <see cref="T:System.IO.Stream" /> object.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> object to which the document writes.</param>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            pdf.BindXML("C:/xml/Test.xml",null);
            Response.ClearContent();
            Response.ClearHeaders();
            Response.ContentType="application/pdf"; 
            pdf.Save(Response.OutputStream);
            Response.End();
            
            [VisualBasic]
            Dim pdf As Pdf =  New Pdf() 
            pdf.BindXML("C:/xml/Test.xml",Nothing)
            Response.ClearContent()
            Response.ClearHeaders()
            Response.ContentType="application/pdf" 
            pdf.Save(Response.OutputStream)
            Response.End()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Pdf.BindHTML(System.String)">
      <summary>
            Bind the pdf document with a html path.You don't need to call BindXML again.
            </summary>
      <param name="path">string path of html file to which the pdf document binds.</param>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            pdf.BindHTML(@"C:/xml/Test.html");
            pdf.Save(@"C:/xml/Test.pdf");
            
            [VisualBasic]
            Dim pdf As Pdf =  New Pdf() 
            pdf.BindHTML("C:/xml/Test.html")
            pdf.Save("C:/xml/Test.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Pdf.BindHTML(System.IO.Stream)">
      <summary>
            Bind the pdf document with a <see cref="T:System.IO.Stream" /> object.
            </summary>
      <param name="htmlStream">The <see cref="T:System.IO.Stream" /> object to which the document binds.</param>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            MemoryStream ms = new MemoryStream();
            ms=...;
            pdf.BindHTML(ms);
            pdf.Save(@"C:/xml/Test.pdf");
            
            [VisualBasic]
            Dim pdf As Pdf =  New Pdf() 
            ms=...;
            pdf.BindHTML("C:/xml/Test.html")
            pdf.Save("C:/xml/Test.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Pdf.BindHTML(System.IO.TextReader)">
      <summary>
            Bind the pdf document with a <see cref="T:System.IO.TextReader" /> object.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> object to which the document binds.</param>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            TextReader tr = new TextReader(htmlFile);
            pdf.BindHTML(tr);
            pdf.Save(@"C:/xml/Test.pdf");
            
            [VisualBasic]
            Dim pdf As Pdf =  New Pdf() 
            Dim tr as TextReader = New TextReader(htmlFile)
            pdf.BindHTML("C:/xml/Test.html")
            pdf.Save("C:/xml/Test.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Pdf.BindHTMLFromUrl(System.String)">
      <summary>
            Bind the pdf document with a html url.You don't need to call BindXML again.
            </summary>
      <param name="url">string url of html file to which the pdf document binds.</param>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            pdf.BindHTMLFromUrl(@"http://www.Aspose.net/Test.html");
            pdf.Save(@"C:/xml/Test.pdf");
            
            [VisualBasic]
            Dim pdf As Pdf =  New Pdf() 
            pdf.BindHTMLFromUrl("http://www.Aspose.net/Test.html")
            pdf.Save("C:/xml/Test.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Pdf.BindHTMLFromUrl(System.String,System.String)">
      <summary>
            Bind the pdf document with a html url.You don't need to call BindXML again.
            </summary>
      <param name="url">string url of html file to which the pdf document binds.</param>
      <param name="method">The HTTP method used to open the connection, such as GET, POST, PUT, or PROPFIND when bind the html file to pdf file </param>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            pdf.BindHTMLFromUrl(@"http://www.Aspose.net/Test.html","GET");
            pdf.Save(@"C:/xml/Test.pdf");
            
            [VisualBasic]
            Dim pdf As Pdf =  New Pdf() 
            pdf.BindHTMLFromUrl("http://www.Aspose.net/Test.html","GET")
            pdf.Save("C:/xml/Test.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Pdf.BindFO(System.String)">
      <summary>
            Binds a FO file into the Pdf instance.
            </summary>
      <param name="fofile">The FO file.</param>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            pdf.BindFO("test.fo");
            pdf.Save("test.pdf");
            
            [VisualBasic]
            Dim pdf As Pdf = New Pdf
            pdf.BindFO("test.fo")
            pdf.Save("test.pdf")
            </code>
      </example>
      <remarks>
            XSL-FO support is a separated part of Aspose.Pdf and it is not compatible with the DOM of 
            Aspose.Pdf. You can't modify the content in XSL-FO through API. And you can't using other 
            features such as security setting of the Pdf class when using XSL-FO.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Pdf.BindFO(System.String,System.String)">
      <summary>
            Binds a FO file and a xslt file into the Pdf instance.
            </summary>
      <param name="fofile">The FO file.</param>
      <param name="xslfile">The xslt file.</param>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            pdf.BindFO("test.fo","test.xsl");
            pdf.Save("test.pdf");
            
            [VisualBasic]
            Dim pdf As Pdf = New Pdf
            pdf.BindFO("test.fo","test.xsl")
            pdf.Save("test.pdf")
            </code>
      </example>
      <remarks>
            XSL-FO support is a separated part of Aspose.Pdf and it is not compatible with the DOM of 
            Aspose.Pdf. You can't modify the content in XSL-FO through API. And you can't using other 
            features such as security setting of the Pdf class when using XSL-FO.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Pdf.BindFO(System.IO.Stream)">
      <summary>
            Binds a FO stream into the Pdf instance.
            </summary>
      <param name="fostream">The FO stream.</param>
      <remarks>
            XSL-FO support is a separated part of Aspose.Pdf and it is not compatible with the DOM of 
            Aspose.Pdf. You can't modify the content in XSL-FO through API. And you can't using other 
            features such as security setting of the Pdf class when using XSL-FO.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Pdf.BindFO(System.Xml.XmlDocument)">
      <summary>
            Binds a FO document into the Pdf instance.
            </summary>
      <param name="fodoc">The FO document.</param>
      <remarks>
            XSL-FO support is a separated part of Aspose.Pdf and it is not compatible with the DOM of 
            Aspose.Pdf. You can't modify the content in XSL-FO through API. And you can't using other 
            features such as security setting of the Pdf class when using XSL-FO.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Pdf.BindFO(System.Xml.XPath.IXPathNavigable,System.String)">
      <summary>
            Binds a xml document and a xslt file into the Pdf instance.
            </summary>
      <param name="xmldoc">The xml document.</param>
      <param name="xsldoc">The xslt file.</param>
      <remarks>
            XSL-FO support is a separated part of Aspose.Pdf and it is not compatible with the DOM of 
            Aspose.Pdf. You can't modify the content in XSL-FO through API. And you can't using other 
            features such as security setting of the Pdf class when using XSL-FO.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Pdf.BindXML(System.Xml.XmlDocument,System.String)">
      <summary>
            Reads info from a xml document.
            </summary>
      <param name="xmlDoc">The xml document.</param>
      <param name="xslFile">The xsl documnet file name if XSLT is used.</param>
    </member>
    <member name="M:Aspose.Pdf.Pdf.BindXML(System.String,System.String)">
      <summary>
            Binds an xml/xsl document to the <see cref="T:Aspose.Pdf.Pdf" /> object.
            </summary>
      <param name="xmlFile">The xml file.</param>
      <param name="xslFile">The xsl file if XSLT is used.</param>
    </member>
    <member name="M:Aspose.Pdf.Pdf.BindXML(System.IO.Stream,System.IO.Stream)">
      <summary>
            Binds an xml/xsl stream to the <see cref="T:Aspose.Pdf.Pdf" /> object.
            </summary>
      <param name="xmlStream">The xml stream.</param>
      <param name="xslStream">The xsl stream. This parameter can be null if no xml is used.</param>
    </member>
    <member name="M:Aspose.Pdf.Pdf.GetBuffer">
      <summary>
            Gets the data buffer used to generate the pdf document in memory.
            </summary>
      <returns>The data buffer.</returns>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            pdf.BindXML("C:/xml/Test.xml",null);
            byte[] buf = pdf.GetBuffer();
            
            [VisualBasic]
            Dim pdf as Pdf = New Pdf
            pdf.BindXML("C:/xml/Test.xml",Nothing)
            Dim buf() As Byte =  pdf.GetBuffer()
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Pdf.GetObjectByID(System.String)">
      <summary>
            Gets a object with specified ID in the document.
            </summary>
      <param name="ID">The object ID.</param>
      <returns>The object with specified ID. Null if the ID is not found.</returns>
    </member>
    <member name="M:Aspose.Pdf.Pdf.CreateTruetypeFontMapStream">
      <summary>
            Creates the TrueType font map stream. The stream can be used to set the "TruetypeFontMapStream" 
            property.
            </summary>
      <returns>The font map stream.</returns>
      <example>
        <code>
            [C#]
            MemoryStream fontMap = Pdf.CreateTruetypeFontMapStream();
            
            Pdf pdf = new Pdf();
            
            pdf.IsTruetypeFontMapCached = true;
            pdf.TruetypeFontMapStream = fontMap;
            ...
            
            [VB.Net]
            Dim fontMap As MemoryStream =  Pdf.CreateTruetypeFontMapStream() 
            Dim pdf As Pdf =  New Pdf() 
            pdf.IsTruetypeFontMapCached = True
            pdf.TruetypeFontMapStream = fontMap
            ...
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Pdf.GetStringWidth(System.String,Aspose.Pdf.TextInfo)">
      <summary>
            Gets the the string width in PDF with specified text formatting.
            </summary>
      <param name="str">The string.</param>
      <param name="info">The text formatting info.</param>
      <returns>The width of the string in PDF. The unit is point.</returns>
      <example>
        <code>
            [C#]
            Pdf p = new Pdf();
            
            TextInfo tf = new TextInfo();
            tf.FontName = "Arial";
            tf.FontSize = 14;
            		
            float width = p.GetStringWidth("hello world",tf);
            
            [VB.NET]
            Dim p As Pdf =  New Pdf() 
            
            Dim tf As TextInfo =  New TextInfo() 
            tf.FontName = "Arial"
            tf.FontSize = 14
            
            Dim width As single =  p.GetStringWidth("hello world",tf)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Pdf.GetXmlFromHtml(System.String)">
      <summary>
            Gets the xml file with Aspose's xml format from HTML. BindHTML method should be called before 
            this method.
            </summary>
      <example>
        <code>
            [c#]
            Pdf p = new Pdf();
            p.BindHTML("Test.htm");
            p.GetXmlFromHtml("html.xml");
            
            [VB.Net]
            Dim p As Pdf =  New Pdf() 
            p.BindHTML("Test.htm")
            p.GetXmlFromHtml("html.xml")
            </code>
      </example>
      <param name="xmlFile">The xml file path.</param>
    </member>
    <member name="M:Aspose.Pdf.Pdf.GetXmlFromHtml(System.IO.Stream)">
      <summary>
            Gets the xml stream with Aspose's xml format from HTML. BindHTML method should be called before 
            this method.
            </summary>
      <example>
        <code>
            [c#]
            Pdf p = new Pdf();
            p.BindHTML("Test.htm");
            MemoryStream mstream = new MemoryStream();
            p.GetXmlFromHtml(mstream);
            
            [VB.Net]
            Dim p As Pdf =  New Pdf() 
            p.BindHTML("Test.htm")
            Dim mstream As MemoryStream =  New MemoryStream() 
            p.GetXmlFromHtml(mstream)
            </code>
      </example>
      <param name="xmlStream">The xml stream.</param>
    </member>
    <member name="M:Aspose.Pdf.Pdf.CreateObjFromXml(System.String,System.String)">
      <summary>
            Create object from an xml/xsl document.
            </summary>
      <param name="xmlFile">The xml file.</param>
      <param name="xslFile">The xsl file if XSLT is used.</param>
      <remarks>
        <see cref="T:Aspose.Pdf.Section" />, <see cref="T:Aspose.Pdf.Text" />, <see cref="T:Aspose.Pdf.Graph" />, <see cref="T:Aspose.Pdf.Image" />, 
            <see cref="T:Aspose.Pdf.Segment" />, <see cref="T:Aspose.Pdf.Table" />, <see cref="T:Aspose.Pdf.Attachment" />, <see cref="T:Aspose.Pdf.FloatingBox" /> 
            objects are supported. </remarks>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            
            Text text = Pdf.CreateObjFromXml("testText.xml", null) as Text;
            Section sec = pdf.Sections.Add();
            sec.Paragraphs.Add(text);
            
            pdf.Save("d:/test/test.pdf");
            
            [VB.Net]
            Dim pdf As Pdf =  New Pdf() 
            
            Dim text As Text =  Pdf.CreateObjFromXml("testText.xml",Nothing)
            Dim sec As Section =  pdf.Sections.Add() 
            sec.Paragraphs.Add(text)
            
            pdf.Save("d:/test/test.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Pdf.CreateObjFromXml(System.IO.Stream,System.IO.Stream)">
      <summary>
            Create object from an xml/xsl stream.
            </summary>
      <param name="xmlStream">The xml stream.</param>
      <param name="xslStream">The xsl stream. This parameter can be null if no xml is used.</param>
      <remarks>
        <see cref="T:Aspose.Pdf.Section" />, <see cref="T:Aspose.Pdf.Text" />, <see cref="T:Aspose.Pdf.Graph" />, <see cref="T:Aspose.Pdf.Image" />, 
            <see cref="T:Aspose.Pdf.Segment" />, <see cref="T:Aspose.Pdf.Table" />, <see cref="T:Aspose.Pdf.Attachment" />, <see cref="T:Aspose.Pdf.FloatingBox" /> 
            objects are supported. </remarks>
      <example>
        <code>
            [c#]
            Pdf pdf = new Pdf();
            
            FileStream fs = new FileStream("testText.xml",FileMode.Open);
            Text text = Pdf.CreateObjFromXml(fs, null) as Text;                     
            Section sec = pdf.Sections.Add();
            sec.Paragraphs.Add(text);
            
            pdf.Save("d:/test/test.pdf");
            
            [VB.Net]
            Dim pdf As Pdf =  New Pdf() 
            
            Dim fs As FileStream =  New FileStream("testText.xml",FileMode.Open) 
            Dim text As Text =  Pdf.CreateObjFromXml(fs,Nothing)
            Dim sec As Section =  pdf.Sections.Add() 
            
            sec.Paragraphs.Add(text)
            pdf.Save("d:/test/test.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Pdf.CreateObjFromXml(System.Xml.XmlDocument,System.Xml.Xsl.XslTransform)">
      <summary>
            Reads object info from a xml document.
            </summary>
      <param name="xmlDoc">The xml document.</param>
      <param name="xsl">The <see cref="T:System.Xml.Xsl.XslTransform" /> object if XSLT is used.</param>
      <remarks>
        <see cref="T:Aspose.Pdf.Section" />, <see cref="T:Aspose.Pdf.Text" />, <see cref="T:Aspose.Pdf.Graph" />, <see cref="T:Aspose.Pdf.Image" />, 
            <see cref="T:Aspose.Pdf.Segment" />, <see cref="T:Aspose.Pdf.Table" />, <see cref="T:Aspose.Pdf.Attachment" />, <see cref="T:Aspose.Pdf.FloatingBox" /> 
            objects are supported. </remarks>
      <example>
        <code>
            [c#]
            Pdf pdf = new Pdf();
            
            XmlDocument xmlDoc = new XmlDocument();
            xmlDoc.Load(@"D:\CSharp\Pdf\Aspose.Pdf.Test\input\testText.xml");
            Text text = Pdf.CreateObjFromXml(xmlDoc, null) as Text;                     
            Section sec = pdf.Sections.Add();
            sec.Paragraphs.Add(text);
            
            pdf.Save("d:/test/test.pdf");
            
            [VB.Net]
            Dim pdf As Pdf = New Pdf
            
            Dim xmlDoc As XmlDocument = New XmlDocument
            xmlDoc.Load("D:\CSharp\Pdf\Aspose.Pdf.Test\input\testText.xml")
            Dim text As Text = pdf.CreateObjFromXml(xmlDoc, Nothing)
            Dim sec As Section = pdf.Sections.Add()
            sec.Paragraphs.Add(text)
            
            pdf.Save("d:/test/test.pdf")
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Pdf.GetPageNumber(System.String)">
      <summary>
            Gets the page number of a paragraph when the PDF is generated. 
            </summary>
      <param name="ID">The ID of the paragraph.</param>
      <returns>The page number of the paragraph. If the paragraph is not found, 0 will be returned.</returns>
    </member>
    <member name="M:Aspose.Pdf.Pdf.SetUnicode">
      <summary>
            Sets all fonts in the document to be unicode. This method should be called just before the Save method.
            </summary>
      <remarks>When converting Word to Pdf, some font is needed to be set to unicode in Aspose.Pdf. 
            This method is used to set all fonts to unicode. The font subset will then we embedded.</remarks>
    </member>
    <member name="P:Aspose.Pdf.Pdf.BackgroundColor">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Color" /> object that indicatres the backgorund color of the 
            pdf.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.FoMetaData">
      <summary>
            Gets or sets a <see cref="T:System.Collections.IDictionary" /> object that indicates the metadata of the 
            document. This property is used for FO only.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf = new Pdf();
            
            System.Collections.IDictionary metadata = new System.Collections.Hashtable();
            metadata.Add("Title",this.title.Text);
            metadata.Add("Author",this.author.Text);
            metadata.Add("Producer",this.producer.Text);
            metadata.Add("Keywords",this.keywords.Text);
            metadata.Add("Subject",this.subject.Text);
            metadata.Add("Creator",this.creator.Text);
            pdf.FoMetaData = metadata;
            
            pdf.BindFO("test.fo");
            pdf.Save("test.pdf");
            
            [VisualBasic]
            Dim pdf As Pdf = New Pdf
            
            Dim metadata As System.Collections.IDictionary = New System.Collections.Hashtable
            metadata.Add("Title", Me.title.Text)
            metadata.Add("Author", Me.author.Text)
            metadata.Add("Producer", Me.producer.Text)
            metadata.Add("Keywords", Me.keywords.Text)
            metadata.Add("Subject", Me.subject.Text)
            metadata.Add("Creator", Me.creator.Text)
            
            pdf.FoMetaData = metadata
            pdf.BindFO("test.fo")
            pdf.Save("test.pdf")
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Pdf.FoImagePath">
      <summary>
            Gets or sets a string that indicates the base directory of images(fo:external-graphic). This property is not essential
            for your normal windows or console application, but if you want to produce a pdf document
            including your local images on the fly, you must set it correctly.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.PageSetup">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Pdf.PageSetup" /> object that indicates the page setup info in the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Pdf.TextInfo" /> object that indicates the text info in the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.GraphInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Pdf.GraphInfo" /> object that indicates the graph info in the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.Sections">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Pdf.Sections" /> collection that indicates all sections in the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.FirstLineIndent">
      <summary>
            Gets or sets an int value that indicates the indent of the first line.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.IsSpaced">
      <summary>
            Gets or sets a bool value that indicates whether the spaces at the begin of the text and returns in 
            the text be shown. For the following XML:
            <code>
            &lt;Text&gt;
            	&lt;Segment&gt;The first line,
            	The second line.&lt;/Segment&gt;
            &lt;/Text&gt;
            </code>
            If IsSpaced is false, the result will be:
            <code>
            The first line,The second line.
            </code>
            If IsSpaced is true, the result will be:
            <code>
            The first line,
            	The second line.
            </code></summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.LabelWidth">
      <summary>
            Gets or sets a float value that indicates the width of the heading label.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.CompressionLevel">
      <summary>
            Gets or sets an int value that indicates the compression level. It can be between 0 (the least compression) and 9 (the most compression) and the default value is 6.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.DestinationType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Pdf.DestinationType" /> value that indicates the document open action.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.OpenType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Pdf.OpenType" /> that indicates the document open type. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.Author">
      <summary>
            Gets or sets a string that indicates the author of the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.Title">
      <summary>
            Gets or sets a string that indicates the title of the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.Creator">
      <summary>
            Gets or sets a string that indicates the creator of the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.Producer">
      <summary>
            Gets or sets a string that indicates the producer of the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.Keywords">
      <summary>
            Gets or sets a string that indicates key words of the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.Subject">
      <summary>
            Gets or sets a string that indicates the subject of the Pdf document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.PageTransitionType">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Pdf.PageTransitionType" /> that indicates the pdf document page transition type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.PageDuration">
      <summary>
            Gets or sets a int value that indicates the duration in seconds for the current page. This property 
            is used when using auto advancing in presentation mode. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.Security">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Security" /> object that indicates the document security information.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.IsImagesInXmlDeleteNeeded">
      <summary>
            Gets or sets a bool value that indicates whether images used in XML be deleted when the PDF 
            document is generated.
            </summary>
      <remarks>
            This property is used when integration with Aspose.Word. When converting Word document to PDF,
            Aspose.Word will save images in Word document as file and add the file name into XML. If this 
            property is set to true,Aspose.Pdf will delete these image files used in XML.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Pdf.IsBuffered">
      <summary>
            Gets or sets a bool value that indicates whether memory buffer is used when generating PDF document.
            The default value is true. If this property is set to false, Aspose.Pdf will write document directly 
            to PDF file and the <see cref="M:Aspose.Pdf.Pdf.GetBuffer" /> method can't be used.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.IsBookmarked">
      <summary>
            Gets or sets a bool value that indicates whether the pdf document is bookmarked when generating PDF document.
            The default value is false. If this property is set to true, Aspose.Pdf will create bookmarks for all the <see cref="T:Aspose.Pdf.Heading" />s 
            in the PDF if the relative property <see cref="P:Aspose.Pdf.Pdf.BookMarkLevel" /> is not set. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.BookMarkLevel">
      <summary>
            Gets or sets a int value that indicates how many levels of <see cref="T:Aspose.Pdf.Heading" /> of the pdf document is to be bookmarked.
            The default value is 0, which means every heading of the PDF is to be taged as a bookmark.
            Only when the relative property <see cref="P:Aspose.Pdf.Pdf.IsBookmarked" /> is set as true, this property is valid.
            If <see cref="P:Aspose.Pdf.Pdf.IsBookmarked" /> is true and this property is set to a non-integer value levelNumber, Aspose.Pdf will create bookmarks 
            for the corresponding <see cref="T:Aspose.Pdf.Heading" />s of level 1 to level levelNumber.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.TabStopPosition">
      <summary>
            Gets or sets the tab stop position. Default value is 36 points (0.5inch).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.HtmlInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Pdf.HtmlInfo" /> object that indicates the necessary info when converting 
            HTML to PDF.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.IsPageNumberRestarted">
      <summary>
            Gets or sets a bool value that indicates whether the page number is restarted in new section. 
            Default is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.IsCoreFontUsed">
      <summary>
            Gets or sets a bool value that indicates whether PDF core fonts are used. Default is true. 
            If this property is set to false, PDF core fonts will be ignored and all font will be used as 
            TrueType font. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.IsPageNumberForDocument">
      <summary>
            Gets or sets a bool value that indicates whether total page number is count for whole document. 
            If this property is set to true, the "$P" symbol will be replaced by the total page number of the 
            document. Otherwise "$P" will be replaced with the total page number of all	sections that were 
            not restarted ("IsPageNumberRestarted" is set to true).
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.IsTruetypeFontMapCached">
      <summary>
            Gets or sets a bool value that indicates whether truetype font map be cached on disk. Truetype 
            font map is a font name to font file name map which is used when using unicode. If unicode is 
            used, setting this property to true can make your application run fast. If this property is set 
            to true and the system's fonts are changed (for example, new fonts are installed), delete the font 
            map file (Aspose.Pdf.TruetypeFontMap.xml) and it will be generated again automatically.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.TruetypeFontMapPath">
      <summary>
            Gets or set a string that indicates the path of the truetype font map file. This property 
            is valid only when the "IsTruetypeFontMapCached" property is set to true.
            <seealso cref="P:Aspose.Pdf.Pdf.IsTruetypeFontMapCached" /></summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.TruetypeFontMapStream">
      <summary>
            Gets or set a memory stream that indicates the TrueType font map stream. This property is valid 
            only when the "IsTruetypeFontMapCached" property is set to true. Normally you should use 
            "TruetypeFontMapPath" instead of this property. But in some server, it is not permitted to 
            create file on disk so you can use TrueType font map stream. You need to create the font map 
            stream only once when you application is runing. 
            </summary>
      <example>
        <code>
            [C#]
            MemoryStream fontMap = Pdf.CreateTruetypeFontMapStream();
            
            Pdf pdf = new Pdf();
            
            pdf.IsTruetypeFontMapCached = true;
            pdf.TruetypeFontMapStream = fontMap;
            ...
            
            [VB.Net]
            Dim fontMap As MemoryStream =  Pdf.CreateTruetypeFontMapStream() 
            Dim pdf As Pdf =  New Pdf() 
            pdf.IsTruetypeFontMapCached = True
            pdf.TruetypeFontMapStream = fontMap
            ...
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Pdf.PageCount">
      <summary>
            Gets a int value that indicates the pages count of the generated PDF. You can only get the value of 
            this property when the <see cref="M:Aspose.Pdf.Pdf.Save(System.String)" /> method is called.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.Watermarks">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Pdf.Watermarks" /> which will be added upon each page of the PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.DocumentAttachments">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Pdf.DocumentAttachments" /> which will be added upon the PDF document.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.IsFontNotFoundExceptionThrown">
      <summary>
            Gets or sets a bool value that indicates whether throw out exception when font is not found.
            The default value is false.In this case,if user specifed font is not found,default font works.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.IsWatermarkOnTop">
      <summary>
            Gets or sets a bool value that indicates if the watermark is on top of the page.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.IsLandscape">
      <summary>
            Gets or sets a bool value that indicates whether the page orientation is landscape.
            The default is false, portrait.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Pdf.JavaScripts">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Pdf.JavaScripts" /> object that indicates the JavaScripts to be added into 
            the PDF.
            </summary>
      <example>
        <code>
            [c#]
            Pdf pdf = new Pdf();
            
            pdf.JavaScripts = new JavaScripts();
            pdf.JavaScripts.Add("this.print(true);");
            pdf.JavaScripts.Add("app.alert(\"hello world\");");
            
            pdf.Save(@"d:\test\test.pdf");
            
            [VB.Net]
            Dim pdf As Pdf =  New Pdf() 
            
            pdf.JavaScripts = New JavaScripts()
            pdf.JavaScripts.Add("this.print(true);")
            pdf.JavaScripts.Add("app.alert(\"hello world\");")
            
            pdf.Save("d:\test\test.pdf")
            
            [XML]
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            &lt;JavaScript ID="js1"&gt;this.print(true);&lt;/JavaScript&gt;
            &lt;JavaScript&gt;app.alert("hello world");&lt;/JavaScript&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Pdf.XmpMetadata">
      <summary>
             Gets or sets a <see cref="P:Aspose.Pdf.Pdf.XmpMetadata" /> Object that indicates the XMP metadata to be added into the PDF document.
             </summary>
      <example>
        <code>
             [C#]
             Pdf pdf = new Pdf();
             	
             Section s = pdf.Sections.Add();
             		
             Text text1 = new Text("This is a test for XMP Metadata");
             s.Paragraphs.Add(text1);
             
             pdf.XmpMetadata = new XmpMetadata();
             					
             //core properties
             pdf.XmpMetadata.AddCreationDate(System.DateTime.Now.ToString());
             						
            	//user properties
            	pdf.XmpMetadata.AddUserProperty("xmlns:dc=\"http://purl.org/dc/elements/1.1/\"","dc:contributor","Aspose");
            					
            	pdf.Save(@"d:\test\test.pdf");
            	
            	[VB.Net]
            	Dim pdf As Pdf = New Pdf
            	
            	Dim s As Section = pdf.Sections.Add()
            	Dim text1 As Text = New Text("This is a test for XMP Metadata")
            	s.Paragraphs.Add(text1)
            	
            	pdf.XmpMetadata = New XmpMetadata
            	
            	'core properties
            	pdf.XmpMetadata.AddCreationDate(System.DateTime.Now.ToString())
            	
            	'user properties
            	pdf.XmpMetadata.AddUserProperty("xmlns:dc='http://purl.org/dc/elements/1.1/'", "dc:contributor", "Aspose")
            	
            	pdf.Save("d:\test\test.pdf")
             
            	[XML]
              &lt;Pdf xmlns="Aspose.Pdf"&gt; 
              &lt;XmpMetadata&gt;
              	&lt;MetadataItem Name="CreationDate" Value="2007-7-15 10:51:55" /&gt;
              		&lt;MetadataItem XmlNamespace="xmlns:dc='http://purl.org/dc/elements/1.1/'" Name="dc:contributor" Value="Aspose" /&gt;
              	&lt;/XmpMetadata&gt;
              	&lt;Section&gt;
              		&lt;Text&gt;&lt;Segment&gt;This is a test for XMP Metadata&lt;/Segment&gt;&lt;/Text&gt;
              	&lt;/Section&gt; 
              &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.PositionArray">
      <summary>
            Encapsulates a position array used in the <see cref="T:Aspose.Pdf.Line" />.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PositionArray.Length">
      <summary>
            Represents an int value that indicates the length of the position array. It should be equal to or greater than 4.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.PositionArray.Item(System.Int32)">
      <summary>
            Gets or sets the specified value in terms of index.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.PositioningType">
      <summary>
            Enumerates the positioning types when using custom positioning. Custom positioning means customer 
            specify the position of paragraph instead of render automatically. 
            </summary>
      <remarks>Please refer to the programmer's guide for detailed info.
            </remarks>
    </member>
    <member name="F:Aspose.Pdf.PositioningType.Auto">
      <summary>
            Positioning the paragraph automatically by page renderer engine. This means customer positioning 
            is not used.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PositioningType.PageRelative">
      <summary>
            The position of paragraph is page relative. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PositioningType.ColumnRelative">
      <summary>
            The position of paragraph is column relative.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.PositioningType.ParagraphRelative">
      <summary>
            The position of paragraph is paragraph relative.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.RadioButton">
      <summary>
            Represents an radiobutton item in a radiobutton field.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.RadioButton.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.RadioButton" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RadioButton.ButtonWidth">
      <summary>
            Gets or sets a float value that indicates the width of the RadioButton. Default value is 100 points.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RadioButton.ButtonHeight">
      <summary>
            Gets or sets a float value that indicates the height of the RadioButton. Default value is 100 points.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.RadioButtons">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.RadioButton" /> objects.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.RadioButtons.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.RadioButtons" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.RadioButtons.Add(Aspose.Pdf.RadioButton)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.RadioButton" /> object into the collection.
            </summary>
      <param name="button">
      </param>
    </member>
    <member name="M:Aspose.Pdf.RadioButtons.Add">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.RadioButton" /> class and add it to the RadioButtons 
            collection.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.RadioButton" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.RadioButtons.Remove(Aspose.Pdf.RadioButton)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.RadioButton" /> object from the collection.
            </summary>
      <param name="button">The <see cref="T:Aspose.Pdf.RadioButton" /> object to be removed.</param>
    </member>
    <member name="M:Aspose.Pdf.RadioButtons.Insert(System.Int32,Aspose.Pdf.RadioButton)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.RadioButton" /> object into the collection at specified position.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Aspose.Pdf.RadioButton" /> object should be 
            inserted.</param>
      <param name="button">The <see cref="T:Aspose.Pdf.RadioButton" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.RadioButtons.Insert(Aspose.Pdf.RadioButton,Aspose.Pdf.RadioButton)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.RadioButton" /> object into the collection after specified RadioButton object.
            </summary>
      <param name="buttonToInsertAfter">The <see cref="T:Aspose.Pdf.RadioButton" /> object to insert after.</param>
      <param name="newButton">The <see cref="T:Aspose.Pdf.RadioButton" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.RadioButtons.IndexOf(Aspose.Pdf.RadioButton)">
      <summary>
            Gets the index of a specified section in the collection.
            </summary>
      <param name="button">The specified section.</param>
      <returns>The index value.</returns>
    </member>
    <member name="P:Aspose.Pdf.RadioButtons.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.RadioButton" /> object from the collection according to RadioButton index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RadioButtons.Item(System.String)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.RadioButton" /> object from the collection according to RadioButton ID.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Rectangle">
      <summary>
            Represents a rectangle <see cref="T:Aspose.Pdf.Shape" /> in a Pdf document.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Graph graph1 = new Graph(sec1,400,100);
            sec1.Paragraphs.Add(graph1);
            		
            Aspose.Pdf.Rectangle rect1 = new Aspose.Pdf.Rectangle(graph1,50,10,100,50);
            graph1.Shapes.Add(rect1);
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim graph1 As Graph = New Graph(sec1, 400, 100)
            sec1.Paragraphs.Add(graph1)
            
            Dim rect1 As Aspose.Pdf.Rectangle = New Aspose.Pdf.Rectangle(graph1, 50, 10, 100, 50)
            graph1.Shapes.Add(rect1)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Graph Width="400" Height="100"&gt;
            			&lt;Rectangle Position="50 10 100 50" /&gt;
            		&lt;/Graph&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Rectangle" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Rectangle" /> class.
            </summary>
      <param name="left">The left position of the rectangle.</param>
      <param name="bottom">The bottom position of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.#ctor(Aspose.Pdf.Graph)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Rectangle" /> class.
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Graph" /> object.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Graph" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Rectangle.#ctor(Aspose.Pdf.Graph,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Rectangle" /> class.
            </summary>
      <param name="graph">The specified <see cref="T:Aspose.Pdf.Graph" /> object.</param>
      <param name="left">The left position of the rectangle.</param>
      <param name="bottom">The bottom position of the rectangle.</param>
      <param name="height">The height of the rectangle.</param>
      <param name="width">The width of the rectangle.</param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Graph" /> object.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.Left">
      <summary>
            Gets or sets a float value that indicates the left position of the rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.Bottom">
      <summary>
            Gets or sets a float value that indicates the bottom position of the rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.Width">
      <summary>
            Gets or sets a float value that indicates the width of the rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.Height">
      <summary>
            Gets or sets a float value that indicates the height of the rectangle.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rectangle.RadiusForRoundCorner">
      <summary>
            Gets or sets a float value that indicates the radius for the round cornor. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.RectangleArea">
      <summary>
            A rectangle area specified with left position,top position,width and height.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.RectangleArea.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.RectangleArea" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.RectangleArea.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.RectangleArea" /> class.
            </summary>
      <param name="left">The left position of the rectangle area.</param>
      <param name="top">The top position of the rectangle area.</param>
      <param name="width">The width of the rectangle area.</param>
      <param name="height">The height of the rectangle area.</param>
    </member>
    <member name="P:Aspose.Pdf.RectangleArea.Left">
      <summary>
            Gets or sets a float value that indicates the left position of the rectangle area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RectangleArea.Top">
      <summary>
            Gets or sets a float value that indicates the top position of the rectangle area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RectangleArea.Width">
      <summary>
            Gets or sets a float value that indicates the width of the rectangle area.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RectangleArea.Height">
      <summary>
            Gets or sets a float value that indicates the height of the rectangle area.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.RectData">
      <summary>
            Represents a rectangle data structure which specifies the low-left and up-right coordinates.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            RectData rect1 = new RectData();
            rect1.LowerLeftX = 100;
            rect1.LowerLeftY = 100;
            rect1.UperRightX = PageSize.A4Width;
            rect1.UperRightY = PageSize.A4Height;
            pdf1.PageSetup.CropBox = rect1;
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Text text1 = new Text(sec1,"this is text content");
            text1.Margin.Top = 30;
            sec1.Paragraphs.Add(text1);
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf =  New Pdf() 
            Dim rect1 As RectData =  New RectData() 
            rect1.LowerLeftX = 100
            rect1.LowerLeftY = 100
            rect1.UperRightX = PageSize.A4Width
            rect1.UperRightY = PageSize.A4Height
            pdf1.PageSetup.CropBox = rect1
            
            Dim sec1 As Section =  pdf1.Sections.Add() 
            
            Dim text1 As Text =  New Text(sec1,"this is text content") 
            text1.Margin.Top = 30
            sec1.Paragraphs.Add(text1)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf" CropBox="100 100 595 842"&gt;
            	&lt;Section&gt;
            		&lt;Text MarginTop="30"&gt;
            			&lt;Segment&gt;this is text content&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.RectData.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.RectData" /> object.
            </summary>
      <returns>The new cloned <see cref="T:Aspose.Pdf.RectData" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.RectData.LowerLeftX">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the lower-left point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RectData.LowerLeftY">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the lower-left point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RectData.UperRightX">
      <summary>
            Gets or sets a float value that indicates the x-coordinate of the upper-right point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.RectData.UperRightY">
      <summary>
            Gets or sets a float value that indicates the y-coordinate of the upper-right point.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.RenderingMode">
      <summary>
            Enumerates text rendering modes.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.RenderingMode.FillText">
      <summary>
            Fill text mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.RenderingMode.StrokeText">
      <summary>
            Stroke text(outline) mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.RenderingMode.FillStrokeText">
      <summary>
            Fill and stroke text mode.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.RenderingMode.InvisibleText">
      <summary>
            Invisible text mode.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Row">
      <summary>
            Repserents a row in a <see cref="T:Aspose.Pdf.Table" />.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		 
            Aspose.Pdf.Table table1 = new Aspose.Pdf.Table();
            sec1.Paragraphs.Add(table1);
            table1.ColumnWidths = "70 2cm";
            		
            Row row1 = table1.Rows.Add();
            		
            Cell cell1Row1 = row1.Cells.Add("ColumnsSpan = 2");
            cell1Row1.ColumnsSpan = 2;
            cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            Row row2 = table1.Rows.Add();
            		
            Cell cell1Row2 = row2.Cells.Add("cell1");
            cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F);
            	
            Cell cell2Row2 = row2.Cells.Add("cell2");
            cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new Aspose.Pdf.Color("Red"));
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim table1 As Aspose.Pdf.Table = New Aspose.Pdf.Table()
            sec1.Paragraphs.Add(table1)
            table1.ColumnWidths = "70 2cm"
            
            Dim row1 As Row = table1.Rows.Add()
            
            Dim cell1Row1 As Cell = row1.Cells.Add("ColumnsSpan = 2")
            cell1Row1.ColumnsSpan = 2
            cell1Row1.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            Dim row2 As Row = table1.Rows.Add()
            
            Dim cell1Row2 As Cell = row2.Cells.Add("cell1")
            cell1Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            Dim cell2Row2 As Cell = row2.Cells.Add("cell2")
            cell2Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5, New Aspose.Pdf.Color("Red"))
            
            pdf1.Save(...)
            
            [XML]
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Table ColumnWidths="70 2cm"&gt;
            			&lt;Row&gt;
            				&lt;Cell ColumnsSpan="2"&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            			&lt;/Row&gt;
            			&lt;Row&gt;
            				&lt;Cell&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;cell1&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            				&lt;Cell&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;cell2&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            			&lt;/Row&gt;
            		&lt;/Table&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Row.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Row" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Row.#ctor(Aspose.Pdf.Table)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Row" /> class in a table.
            </summary>
      <param name="table">The <see cref="P:Aspose.Pdf.Row.Table" /> object where the row is in.</param>
    </member>
    <member name="M:Aspose.Pdf.Row.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Row" /> object. This method clones only the format but not contents of the Row.
            </summary>
      <returns>The new row object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Row.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Row" /> object. This method clones both format and contents of the Row.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Aspose.Pdf.Row.GetHeight(Aspose.Pdf.Pdf)">
      <summary>
            Gets the row height. Note that this method returns correct value only when the <see cref="T:Aspose.Pdf.Row" /> 
            object is added into <see cref="P:Aspose.Pdf.Row.Table" /> object.
            </summary>
      <param name="doc">The <see cref="T:Aspose.Pdf.Pdf" /> object.</param>
      <returns>The row height in points.</returns>
    </member>
    <member name="P:Aspose.Pdf.Row.Border">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.BorderInfo" /> object that indicates the row border info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.Cells">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Row.Cells" /> collection that indicates all cells in the row.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.ID">
      <summary>
            Gets or sets a string that indicates the ID of the cell.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.DefaultCellTextInfo">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.TextInfo" /> object that indicates the text format info of the row. If you 
            want to set text format for all cells that have already been added to the row, please do not set 
            it directly but follow the method in the example.
            </summary>
      <example>
        <code>
            [C#]
            TextInfo info = row.DefaultCellTextInfo.Clone() as TextInfo;
            info.BackgroundColor = new Color("Blue");
            row.DefaultCellTextInfo = info;
            
            [VisualBasic]
            Dim info As TextInfo = row.DefaultCellTextInfo.Clone()
            info.BackgroundColor = new Color("Blue")
            row.DefaultCellTextInfo = info
            </code>
      </example>
    </member>
    <member name="P:Aspose.Pdf.Row.VerticalAlignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.VerticalAlignmentType" /> object that indicates the vertical 
            alignment type of all cells in this row.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.FixedRowHeight">
      <summary>
            Gets or sets a float value that indicates the fixed row height. If the fixed row height is set, the property of IsBroken is disabled 
            unless the real height of the row is out of the margin bound. When the value is too small, it will be enlarged automatically. 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.IsDisabled">
      <summary>
            Gets or sets a bool value that indicates whether this row is disabled. The default value is false. 
            If this property is set to true, this row will not be rendered.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.IsInNewPage">
      <summary>
            Gets or sets a bool value that indicates whether to split the table from this row and display the subsequent rows on the next page.
            The property doesn't support nested table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.BackgroundColor">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Color" /> object that indicatres the backgorund color of the 
            row.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Row.IsBroken">
      <summary>
            Gets or sets a bool value that indicates whether the row can be broken or not when the row spans two pages. Default value is true. 
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Rows">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.Row" /> objects.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		 
            Aspose.Pdf.Table table1 = new Aspose.Pdf.Table();
            sec1.Paragraphs.Add(table1);
            table1.ColumnWidths = "70 2cm";
            		
            Row row1 = table1.Rows.Add();
            		
            Cell cell1Row1 = row1.Cells.Add("ColumnsSpan = 2");
            cell1Row1.ColumnsSpan = 2;
            cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            Row row2 = table1.Rows.Add();
            		
            Cell cell1Row2 = row2.Cells.Add("cell1");
            cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F);
            	
            Cell cell2Row2 = row2.Cells.Add("cell2");
            cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new Aspose.Pdf.Color("Red"));
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim table1 As Aspose.Pdf.Table = New Aspose.Pdf.Table()
            sec1.Paragraphs.Add(table1)
            table1.ColumnWidths = "70 2cm"
            
            Dim row1 As Row = table1.Rows.Add()
            
            Dim cell1Row1 As Cell = row1.Cells.Add("ColumnsSpan = 2")
            cell1Row1.ColumnsSpan = 2
            cell1Row1.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            Dim row2 As Row = table1.Rows.Add()
            
            Dim cell1Row2 As Cell = row2.Cells.Add("cell1")
            cell1Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            Dim cell2Row2 As Cell = row2.Cells.Add("cell2")
            cell2Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5, New Aspose.Pdf.Color("Red"))
            
            pdf1.Save(...)
            
            [XML]
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Table ColumnWidths="70 2cm"&gt;
            			&lt;Row&gt;
            				&lt;Cell ColumnsSpan="2"&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            			&lt;/Row&gt;
            			&lt;Row&gt;
            				&lt;Cell&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;cell1&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            				&lt;Cell&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;cell2&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            			&lt;/Row&gt;
            		&lt;/Table&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Rows.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Rows" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Rows.Add(Aspose.Pdf.Row)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Row" /> object into the collection.
            </summary>
      <param name="row">The <see cref="T:Aspose.Pdf.Row" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Rows.Add">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Row" /> class and add it to the Rows collection.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Row" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Rows.Insert(System.Int32,Aspose.Pdf.Row)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Row" /> object into the collection at specified position.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Aspose.Pdf.Row" /> object should be inserted.</param>
      <param name="row">The <see cref="T:Aspose.Pdf.Row" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Rows.Insert(Aspose.Pdf.Row,Aspose.Pdf.Row)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Row" /> object into the collection after specified Cell object.
            </summary>
      <param name="rowToInsertAfter">The <see cref="T:Aspose.Pdf.Row" /> object to insert after.</param>
      <param name="newRow">The <see cref="T:Aspose.Pdf.Row" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Rows.IndexOf(Aspose.Pdf.Row)">
      <summary>
            Gets the index of a specified row in the collection.
            </summary>
      <param name="row">The specified row.</param>
      <returns>The index value.</returns>
    </member>
    <member name="M:Aspose.Pdf.Rows.Remove(Aspose.Pdf.Row)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Row" /> object from the collection.
            </summary>
      <param name="rowToRemove">The <see cref="T:Aspose.Pdf.Row" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.Rows.CopyTo(Aspose.Pdf.Row[],System.Int32)">
      <summary>
            Copies the elements to a <see cref="T:Aspose.Pdf.Row" /> object array, starting at a specified array index.
            </summary>
      <param name="rowArray">The <see cref="T:Aspose.Pdf.Row" /> object array.</param>
      <param name="index">The start index.</param>
    </member>
    <member name="P:Aspose.Pdf.Rows.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Row" /> object from the collection according to Row index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Rows.Item(System.String)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Row" /> object from the collection according to Row ID.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.SaveType">
      <summary>
            Enumerates different ways of presenting the document at the client browser. 
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveType.OpenInAcrobat">
      <summary>
            Send the document to the browser and present an option to save the
            document to disk or open in an application associated with .pdf extension.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.SaveType.OpenInBrowser">
      <summary>
            Open the document directly in browser.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Sections">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.Section" /> objects.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		 		
            Section section1 = pdf1.Sections.Add();
            		 		
            Text text1 = new Text(section1,"This is text in section1.");
            text1.Margin.Top = 30;
            section1.Paragraphs.Add(text1);
            		 		
            Section section2 = pdf1.Sections.Add();
            section2.IsLandscape = true;
            		
            Text text2 = new Text(section2,"This is text in section2.");
            text2.Margin.Top = 30;
            section2.Paragraphs.Add(text2);
            
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim section1 As Section = pdf1.Sections.Add()
            
            Dim text1 As Text = New Text(section1, "This is text in section1.")
            text1.Margin.Top = 30
            section1.Paragraphs.Add(text1)
            
            Dim section2 As Section = pdf1.Sections.Add()
            section2.IsLandscape = True
            
            Dim text2 As Text = New Text(section2, "This is text in section2.")
            text2.Margin.Top = 30
            section2.Paragraphs.Add(text2)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Text MarginTop="30"&gt;
            			&lt;Segment&gt;
            			This is text in section1.
            			&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            	&lt;Section IsLandscape="true"&gt;
            		&lt;Text MarginTop="30"&gt;
            			&lt;Segment&gt;
            			This is text in section2..
            			&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Sections.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Sections" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Sections.Add(Aspose.Pdf.Section)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Section" /> object into the collection.
            </summary>
      <param name="section">The <see cref="T:Aspose.Pdf.Section" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Sections.Add">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Section" /> class and add it to the Sections collection
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Section" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Sections.Insert(System.Int32,Aspose.Pdf.Section)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Section" /> object into the collection at specified position.
            </summary>
      <param name="index">The zero-based index at which <see cref="T:Aspose.Pdf.Section" /> object should be inserted.</param>
      <param name="section">The <see cref="T:Aspose.Pdf.Section" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Sections.Insert(Aspose.Pdf.Section,Aspose.Pdf.Section)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Section" /> object into the collection after specified Section object.
            </summary>
      <param name="sectionToInsertAfter">The <see cref="T:Aspose.Pdf.Section" /> object to insert after.</param>
      <param name="newSection">The <see cref="T:Aspose.Pdf.Section" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Sections.Remove(Aspose.Pdf.Section)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Section" /> object from the collection.
            </summary>
      <param name="sectionToRemove">The <see cref="T:Aspose.Pdf.Section" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.Sections.CopyTo(Aspose.Pdf.Section[],System.Int32)">
      <summary>
            Copies the elements to a <see cref="T:Aspose.Pdf.Section" /> object array, starting at a specified array index.
            </summary>
      <param name="secArray">The <see cref="T:Aspose.Pdf.Section" /> object array.</param>
      <param name="index">The start index.</param>
    </member>
    <member name="M:Aspose.Pdf.Sections.IndexOf(Aspose.Pdf.Section)">
      <summary>
            Gets the index of a specified section in the collection.
            </summary>
      <param name="section">The specified section.</param>
      <returns>The index value.</returns>
    </member>
    <member name="P:Aspose.Pdf.Sections.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Section" /> object from the collection according to Section index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Sections.Item(System.String)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Section" /> object from the collection according to Section ID.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Security">
      <summary>
            Encapsulates information used in pdf Security.
            </summary>
      <example>
        <code>
            
            [C#]
            Pdf pdf1 = new Pdf();
            
            pdf1.Security = new Security();
            pdf1.Security.IsCopyingAllowed = false;
            
            pdf1.PageSetup.PageHeight = PageSize.A2Height;
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Text text1 = new Text(sec1,"this is text content");
            text1.Margin.Top = 30;
            sec1.Paragraphs.Add(text1);
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            pdf1.Security = New Security()
            pdf1.Security.IsCopyingAllowed = False
            
            pdf1.PageSetup.PageHeight = PageSize.A2Height
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim text1 As Text = New Text(sec1, "this is text content")
            text1.Margin.Top = 30
            sec1.Paragraphs.Add(text1)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf" IsCopyingAllowed="false"&gt;
            	&lt;Section PageHeight="1684"&gt;
            		&lt;Text MarginTop="30"&gt;
            			&lt;Segment&gt;this is text content&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Security.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Security" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Security.Is128BitsEncrypted">
      <summary>
            Gets or sets a bool value that indicates whether the Pdf documents will be 128 bits or 40 bits encrypted. Default is false, 40 bits encrypted.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Security.UserPassword">
      <summary>
            Gets or sets a string that indicates the user password used in pdf encryption.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Security.MasterPassword">
      <summary>
             Gets or sets a string that indicates the master password used in pdf encryption.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Security.IsPrintingAllowed">
      <summary>
            Gets or sets a bool value that indicates whether printing is allowed. Default is true.
            </summary>
      <remarks>
            To fully disable Pdf documents to be printable both <see cref="P:Aspose.Pdf.Security.IsPrintingAllowed" /> and <see cref="P:Aspose.Pdf.Security.IsDegradedPrintingAllowed" /> should be false.  
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Security.IsContentsModifyingAllowed">
      <summary>
            Gets or sets a bool value that indicates whether modifying contents is allowed. 
            Default is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Security.IsCopyingAllowed">
      <summary>
            Gets or sets a bool value that indicates whether copying or otherwise extracting 
            text and graphics from the document is allowed. Default is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Security.IsAnnotationsModifyingAllowed">
      <summary>
            Gets or sets a bool value that indicates whether adding or modifying text annotations 
            is allowed. Default is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Security.IsFormFillingAllowed">
      <summary>
            Gets or sets a bool value that indicates whether filling in forms and 
            signing the document is allowed. Default is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Security.IsScreenReadersAllowed">
      <summary>
            Gets or sets a bool value that indicates whether screen readers is allowed. 
            Default is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Security.IsDocumentAssemblyingAllowed">
      <summary>
            Gets or sets a bool value that indicates whether assembling the document is allowed. 
            This includes inserting, rotating, or deleting pages and creating
            navigation elements such as bookmarks or thumbnail images. Default is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Security.IsDegradedPrintingAllowed">
      <summary>
            Gets or sets a bool value that indicates whether printing in low resolution is allowed. 
            Default is true.
            </summary>
      <remarks>
            To fully disable Pdf documents to be printable both <see cref="P:Aspose.Pdf.Security.IsPrintingAllowed" /> and <see cref="P:Aspose.Pdf.Security.IsDegradedPrintingAllowed" /> should be false.  
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Security.IsDefaultAllAllowed">
      <summary>
            Gets or sets a bool value that indicates if all permissions are set to allowed as default. 
            Default value is true. If this property is set to false, then all permissions are set to 
            NOT allowed.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Segment">
      <summary>
            Represents a segment in a <see cref="T:Aspose.Pdf.Text" /> paragraph.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            
            Section sec1 = pdf1.Sections.Add();
            		
            Text text1 = new Text(sec1,"seg1 ");
            sec1.Paragraphs.Add(text1);
            
            Segment seg2 = text1.Segments.Add("seg2");
            seg2.TextInfo.Color = new Aspose.Pdf.Color("Red");
            seg2.TextInfo.FontSize = 16;
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf =  New Pdf() 
            
            Dim sec1 As Section =  pdf1.Sections.Add() 
            
            Dim text1 As Text =  New Text(sec1,"seg1 ") 
            sec1.Paragraphs.Add(text1)
            
            Dim seg2 As Segment =  text1.Segments.Add("seg2") 
            seg2.TextInfo.Color = New Aspose.Pdf.Color("Red")
            seg2.TextInfo.FontSize = 16
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Text&gt;
            			&lt;Segment&gt;seg1 &lt;/Segment&gt;
            			&lt;Segment Color="Red" FontSize="16"&gt;seg2 &lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Segment.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Segment" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Segment.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Segment" /> class.
            </summary>
      <param name="content">The content of the segment.</param>
    </member>
    <member name="M:Aspose.Pdf.Segment.#ctor(System.String,Aspose.Pdf.TextInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Segment" /> class.
            </summary>
      <param name="content">The content of the segment.</param>
      <param name="info">The text format info of the segment.</param>
    </member>
    <member name="M:Aspose.Pdf.Segment.#ctor(Aspose.Pdf.Text)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Segment" /> class.
            </summary>
      <param name="text">
      </param>
      <remarks>
            This constructor can inherit common property values from the specified 
            <see cref="T:Aspose.Pdf.Text" /> object.
            </remarks>
    </member>
    <member name="M:Aspose.Pdf.Segment.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Segment" /> object. All members are cloned.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Segment" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.Segment.TextInfo">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Segment.TextInfo" /> object that indicates the text info of the segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Segment.FootNote">
      <summary>
            get or set the FootNote object that indicates the footnote of the current segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Segment.EndNote">
      <summary>
            get or set the EndNote object that indicates the endnote of the current segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Segment.Content">
      <summary>
            Gets or sets a string that indicates the content of the text segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Segment.DateFormat">
      <summary>
            Gets or sets a string that indicates the date format of the replaceable date symbol($D). It's value can be 
            "d", "D", "f", "F","g", "G","m","r","s","t", "T","u", "U","y","dddd, MMMM dd yyyy","ddd, MMM d \"'\"yy","dddd, MMMM dd","M/yy","dd-MM-yy".
            The default value is "d". Please refer to example of DateTime.ToString() in MSDN.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Segment.IsSymbolReplaceable">
      <summary>
            Gets or sets a bool value that indicates whether a symbol like $p is replaceable or not. 
            Default is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Segment.ID">
      <summary>
            Gets or sets a string that indicates the ID of the segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Segment.Hyperlink">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Segment.Hyperlink" /> object that indicates the hyper link info of the segment.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Segment.InlineParagraph">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Paragraph" /> object that indicates the inline paragraph. If this 
            property is set, the segment become the inline paragraph of Text and the <see cref="P:Aspose.Pdf.Segment.Content" /> 
            is disabled. <see cref="T:Aspose.Pdf.Image" />, <see cref="T:Aspose.Pdf.Graph" />, <see cref="T:Aspose.Pdf.FormField" /> and 
            <see cref="T:Aspose.Pdf.Attachment" /> can be used as inline paragraph.
            </summary>
      <example>
        <code>
            [C#]
            Pdf p = new Pdf();
            
            Section sec1 = p.Sections.Add();
            
            Text text1 = new Text();
            sec1.Paragraphs.Add(text1);
            
            text1.Segments.Add("This is a test for inline");
            Segment seg2 = text1.Segments.Add();
            
            Image img1 = new Image();
            img1.ImageInfo.File = "c:/images/logo.gif";
            seg2.InlineParagraph = img1;
            
            p.Save("d:/test/test.pdf");
            
            [VB.NET]
            Dim p As Pdf =  New Pdf() 
            
            Dim sec1 As Section =  p.Sections.Add() 
            
            Dim text1 As Text =  New Text() 
            sec1.Paragraphs.Add(text1)
            
            text1.Segments.Add("This is a test for inline")
            Dim seg2 As Segment =  text1.Segments.Add() 
            
            Dim img1 As Image =  New Image() 
            img1.ImageInfo.File = "c:/images/logo.gif"
            seg2.InlineParagraph = img1
            
            p.Save("d:/test/test.pdf")
            
            [XML]
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Text&gt;
            			&lt;Segment FontSize="16"&gt;This is a inline image: &lt;/Segment&gt;
            			&lt;Segment&gt;
            				&lt;Image File="c:\images\logo.gif" /&gt;
            			&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt; 
            </code>
      </example>
    </member>
    <member name="T:Aspose.Pdf.Segments">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.Segment" /> objects.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            
            Section sec1 = pdf1.Sections.Add();
            		
            Text text1 = new Text(sec1,"seg1 ");
            sec1.Paragraphs.Add(text1);
            
            Segment seg2 = text1.Segments.Add("seg2");
            seg2.TextInfo.Color = new Aspose.Pdf.Color("Red");
            seg2.TextInfo.FontSize = 16;
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf =  New Pdf() 
            
            Dim sec1 As Section =  pdf1.Sections.Add() 
            
            Dim text1 As Text =  New Text(sec1,"seg1 ") 
            sec1.Paragraphs.Add(text1)
            
            Dim seg2 As Segment =  text1.Segments.Add("seg2") 
            seg2.TextInfo.Color = New Aspose.Pdf.Color("Red")
            seg2.TextInfo.FontSize = 16
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Text&gt;
            			&lt;Segment&gt;seg1 &lt;/Segment&gt;
            			&lt;Segment Color="Red" FontSize="16"&gt;seg2 &lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Segments.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Segments" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Segments.Add(Aspose.Pdf.Segment)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Segment" /> object into the collection.
            </summary>
      <param name="segment">The <see cref="T:Aspose.Pdf.Segment" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Segments.Add(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Segment" /> class and add it to the Segments collection
            </summary>
      <param name="segmentString">The string content of the segment.</param>
      <returns>The <see cref="T:Aspose.Pdf.Segment" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Segments.Add">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Segment" /> class and add it to the Segments collection
            </summary>
      <returns>The <see cref="T:Aspose.Pdf.Segment" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Segments.Insert(System.Int32,Aspose.Pdf.Segment)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Segment" /> object into the collection at specified position.
            </summary>
      <param name="index">The zero-based index at which the <see cref="T:Aspose.Pdf.Segment" /> object should be inserted.</param>
      <param name="segment">The <see cref="T:Aspose.Pdf.Segment" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Segments.Insert(Aspose.Pdf.Segment,Aspose.Pdf.Segment)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.Segment" /> object into the collection after specified Segment object.
            </summary>
      <param name="segmentToInsertAfter">The <see cref="T:Aspose.Pdf.Segment" /> object to insert after.</param>
      <param name="newSegment">The <see cref="T:Aspose.Pdf.Segment" /> object to be inserted.</param>
    </member>
    <member name="M:Aspose.Pdf.Segments.Remove(Aspose.Pdf.Segment)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Segment" /> object from the collection.
            </summary>
      <param name="segmentToRemove">The <see cref="T:Aspose.Pdf.Segment" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.Segments.IndexOf(Aspose.Pdf.Segment)">
      <summary>
            Gets the index of a specified <see cref="T:Aspose.Pdf.Segment" /> object in the collection.
            </summary>
      <param name="segment">The specified <see cref="T:Aspose.Pdf.Segment" /> object.</param>
      <returns>The index value.</returns>
    </member>
    <member name="M:Aspose.Pdf.Segments.CopyTo(Aspose.Pdf.Segment[],System.Int32)">
      <summary>
            Copies the elements to a <see cref="T:Aspose.Pdf.Segment" /> object array, starting at a specified array index.
            </summary>
      <param name="segmentArray">The <see cref="T:Aspose.Pdf.Segment" /> object array.</param>
      <param name="index">The start index.</param>
    </member>
    <member name="P:Aspose.Pdf.Segments.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Segment" /> object from the collection according to Segment index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Segments.Item(System.String)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Segment" /> object from the collection according to Segment ID.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Shapes">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.Shape" /> objects.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Graph graph1 = new Graph(sec1,100,400);
            sec1.Paragraphs.Add(graph1);
            		
            float[] posArr = new float[]{0,0,200,80,300,40,350,90};
            Curve curve1 = new Curve(graph1,posArr);
            graph1.Shapes.Add(curve1);
            
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim graph1 As Graph = New Graph(sec1, 100, 400)
            sec1.Paragraphs.Add(graph1)
            
            Dim posArr() As Single = New Single() {0, 0, 200, 80, 300, 40, 350, 90}
            
            Dim curve1 As Curve = New Curve(graph1, posArr)
            graph1.Shapes.Add(curve1)
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Graph Height="100" Width="400"&gt;
            			&lt;Curve Position="0 0 200 80 300 40 350 90" /&gt;
            		&lt;/Graph&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Shapes.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Shapes" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Shapes.Add(Aspose.Pdf.Shape)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.Shape" /> object into the collection.
            </summary>
      <param name="shape">The <see cref="T:Aspose.Pdf.Shape" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Shapes.Remove(Aspose.Pdf.Shape)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.Shape" /> object from the collection.
            </summary>
      <param name="shapeToRemove">The <see cref="T:Aspose.Pdf.Shape" /> object to be romoved.</param>
    </member>
    <member name="M:Aspose.Pdf.Shapes.CopyTo(Aspose.Pdf.Shape[],System.Int32)">
      <summary>
            Copies the elements to a <see cref="T:Aspose.Pdf.Shape" /> object array, starting at a specified array index.
            </summary>
      <param name="shapeArray">The shapes array.</param>
      <param name="index">The start index.</param>
    </member>
    <member name="M:Aspose.Pdf.Shapes.IndexOf(Aspose.Pdf.Shape)">
      <summary>
            Gets the index of a specified <see cref="T:Aspose.Pdf.Shape" /> object in the collection.
            </summary>
      <param name="shape">The specified <see cref="T:Aspose.Pdf.Shape" /> object.</param>
      <returns>The index value.</returns>
    </member>
    <member name="P:Aspose.Pdf.Shapes.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Shape" /> object from the collection according to Shape index.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Shapes.Item(System.String)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Shape" /> object from the collection according to Shape ID.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Table">
      <summary>
            Represents a table <see cref="T:Aspose.Pdf.Paragraph" /> in a Pdf document.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		 
            Aspose.Pdf.Table table1 = new Aspose.Pdf.Table();
            sec1.Paragraphs.Add(table1);
            table1.ColumnWidths = "70 2cm";
            		
            Row row1 = table1.Rows.Add();
            		
            Cell cell1Row1 = row1.Cells.Add("ColumnsSpan = 2");
            cell1Row1.ColumnsSpan = 2;
            cell1Row1.Border = new BorderInfo((int)BorderSide.All,0.5F);
            
            Row row2 = table1.Rows.Add();
            		
            Cell cell1Row2 = row2.Cells.Add("cell1");
            cell1Row2.Border = new BorderInfo((int)BorderSide.All,0.5F);
            	
            Cell cell2Row2 = row2.Cells.Add("cell2");
            cell2Row2.Border = new BorderInfo((int)BorderSide.All,0.5F,new Aspose.Pdf.Color("Red"));
            		
            pdf1.Save(...);
            
            [Visual Basic]
            Dim pdf1 As Pdf = New Pdf()
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim table1 As Aspose.Pdf.Table = New Aspose.Pdf.Table()
            sec1.Paragraphs.Add(table1)
            table1.ColumnWidths = "70 2cm"
            
            Dim row1 As Row = table1.Rows.Add()
            
            Dim cell1Row1 As Cell = row1.Cells.Add("ColumnsSpan = 2")
            cell1Row1.ColumnsSpan = 2
            cell1Row1.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            Dim row2 As Row = table1.Rows.Add()
            
            Dim cell1Row2 As Cell = row2.Cells.Add("cell1")
            cell1Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5)
            
            Dim cell2Row2 As Cell = row2.Cells.Add("cell2")
            cell2Row2.Border = New BorderInfo(CType(BorderSide.All, Integer), 0.5, New Aspose.Pdf.Color("Red"))
            
            pdf1.Save(...)
            
            [XML]
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Table ColumnWidths="70 2cm"&gt;
            			&lt;Row&gt;
            				&lt;Cell ColumnsSpan="2"&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;ColumnsSpan = 2&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            			&lt;/Row&gt;
            			&lt;Row&gt;
            				&lt;Cell&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;cell1&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            				&lt;Cell&gt;
            					&lt;Border&gt;
            						&lt;All LineWidth="0.5" Color="Red"&gt;&lt;/All&gt;
            					&lt;/Border&gt;
            					&lt;Text&gt;
            						&lt;Segment&gt;cell2&lt;/Segment&gt;
            					&lt;/Text&gt;
            				&lt;/Cell&gt;
            			&lt;/Row&gt;
            		&lt;/Table&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Table.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Table" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.Table.#ctor(Aspose.Pdf.Section)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Table" /> class in the <see cref="T:Aspose.Pdf.Section" />.
            </summary>
      <param name="section">The section object where the table is in.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.#ctor(Aspose.Pdf.Cell)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.Table" /> class in the <see cref="T:Aspose.Pdf.Cell" />.
            </summary>
      <param name="cell">The cell object where the table is in.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.ImportArray(System.String[],System.Int32,System.Byte,System.Boolean)">
      <summary>
            Imports an array of string into the table. 
            </summary>
      <param name="stringArray">The string array.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <param name="isLeftColumnsFilled">If the value of this parameter is true,in the below rows of 
            the first import row, columns will be filled at the first column of the table. Otherwise,
            columns in the below rows will be filled at the first import column specified by the firstColumn
            parameter.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.ImportArray(System.Int32[],System.Int32,System.Byte,System.Boolean)">
      <summary>
            Imports an array of integer into the table. 
            </summary>
      <param name="intArray">The integer array.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <param name="isLeftColumnsFilled">If the value of this parameter is true,in the below rows of 
            the first import row, columns will be filled at the first column of the table. Otherwise,
            columns in the below rows will be filled at the first import column specified by the firstColumn
            parameter.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.ImportArray(System.Double[],System.Int32,System.Byte,System.Boolean)">
      <summary>
            Imports an array of double number into the table. 
            </summary>
      <param name="doubleArray">The double number array.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <param name="isLeftColumnsFilled">If the value of this parameter is true,in the below rows of 
            the first import row, columns will be filled at the first column of the table. Otherwise,
            columns in the below rows will be filled at the first import column specified by the firstColumn
            parameter.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.ImportArray(System.Object[],System.Int32,System.Byte,System.Boolean)">
      <summary>
            Imports an array of object(any data type) into the table. 
            </summary>
      <param name="objArray">The object array.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <param name="isLeftColumnsFilled">If the value of this parameter is true,in the below rows of 
            the first import row, columns will be filled at the first column of the table. Otherwise,
            columns in the below rows will be filled at the first import column specified by the firstColumn
            parameter.</param>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();
            
            Section sec1 = pdf1.Sections.Add();
            
            Aspose.Pdf.Table tab1 = new Aspose.Pdf.Table();
            sec1.Paragraphs.Add(tab1);
            tab1.ColumnWidths = "60 100 100";
            tab1.DefaultCellBorder = new BorderInfo((int)BorderSide.All,0.1F);
            tab1.DefaultCellTextInfo.Color = new Aspose.Pdf.Color("Red");
            
            double[] darr = new Double[]{1.5,3.1415926,100000,20,4000,30.4512,45.67};
            tab1.ImportArray(darr,1,1,true);
            
            Aspose.Pdf.Table tab2 = new Aspose.Pdf.Table();
            sec1.Paragraphs.Add(tab2);
            tab2.ColumnWidths = "60 60 60 2cm 100";
            tab2.DefaultCellBorder = new BorderInfo((int)BorderSide.All,0.1F);
            tab2.DefaultCellTextInfo.FontSize = 8;
            
            Row row1 = tab2.Rows.Add();
            for(int i=1;i&lt;=5;i++)
            	row1.Cells.Add(i.ToString());
            for(int j=2;j&lt;5;j++)
            {
            	row1 = tab2.Rows.Add();
            	row1.Cells.Add(j.ToString());
            }
            
            tab2.ImportArray(darr,1,2,false);
            
            pdf1.Save(...);
            
            [VisualBasic]
            
            Dim pdf1 As Pdf = New Pdf("e:\projects\CSharp\customer\Aspose.Pdf.lic")
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim tab1 As Aspose.Pdf.Table = New Aspose.Pdf.Table()
            sec1.Paragraphs.Add(tab1)
            tab1.ColumnWidths = "60 100 100"
            tab1.DefaultCellBorder = New BorderInfo(CType(BorderSide.All, Integer), 0.1F)
            tab1.DefaultCellTextInfo.Color = New Aspose.Pdf.Color("Red")
            
            Dim darr() As Double = New Double() {1.5, 3.1415926, 100000, 20, 4000, 30.4512, 45.67}
            
            tab1.ImportArray(darr, 1, 1, True)
            
            Dim tab2 As Aspose.Pdf.Table = New Aspose.Pdf.Table()
            sec1.Paragraphs.Add(tab2)
            tab2.ColumnWidths = "60 60 60 2cm 100"
            tab2.DefaultCellBorder = New BorderInfo(CType(BorderSide.All, Integer), 0.1F)
            tab2.DefaultCellTextInfo.FontSize = 8
            
            Dim row1 As Row = tab2.Rows.Add()
            Dim i As Integer
            For i = 1 To 5 Step i + 1
            	row1.Cells.Add(i.ToString())
            Next
            Dim j As Integer
            For j = 2 To 5 - 1 Step j + 1
            	row1 = tab2.Rows.Add()
            	row1.Cells.Add(j.ToString())
            Next
            
            tab2.ImportArray(darr, 1, 2, False)
            
            pdf1.Save(...)
            
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Table.ImportDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Byte)">
      <summary>
            Imports a <see cref="T:System.Data.DataTable" /> object into the table.
            </summary>
      <param name="dataTable">The <see cref="T:System.Data.DataTable" /> object to be imported.</param>
      <param name="isFieldNameShown">Indicates whether the field name of the datatable will be 
            imported to the first row.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <example>
        <code>
            [C#]
            DataTable dt = new DataTable("Employee");
            dt.Columns.Add("Employee_ID",typeof(Int32));
            dt.Columns.Add("Employee_Name",typeof(string));
            dt.Columns.Add("Gender",typeof(string));
            DataRow dr = dt.NewRow();
            dr[0] = 1;
            dr[1] = "John Smith";
            dr[2] = "Male";
            dt.Rows.Add(dr);
            dr = dt.NewRow();
            dr[0] = 2;
            dr[1] = "Mary Miller";
            dr[2] = "Female";
            dt.Rows.Add(dr);
            
            Pdf pdf1 = new Pdf();
            
            Section sec1 = pdf1.Sections.Add();
            
            Aspose.Pdf.Table tab1 = new Aspose.Pdf.Table();
            sec1.Paragraphs.Add(tab1);
            tab1.ColumnWidths = "40 100 100 100";
            tab1.DefaultCellBorder = new BorderInfo((int)BorderSide.All,0.1F);
            
            tab1.ImportDataTable(dt,true,0,1,3,3);
            
            Row row1 = tab1.Rows[0];
            foreach(Cell curCell in row1.Cells)
            curCell.BackgroundColor = new Aspose.Pdf.Color("Blue");
            
            pdf1.Save(...);
            
            [VisualBasic]
            
            Dim dt As DataTable = New DataTable("Employee")
            dt.Columns.Add("Employee_ID", System.Type.GetType("System.Int32"))
            dt.Columns.Add("Employee_Name", System.Type.GetType("System.String"))
            dt.Columns.Add("Gender", System.Type.GetType("System.String"))
            Dim dr As DataRow = dt.NewRow()
            dr(0) = 1
            dr(1) = "John Smith"
            dr(2) = "Male"
            dt.Rows.Add(dr)
            dr = dt.NewRow()
            dr(0) = 2
            dr(1) = "Mary Miller"
            dr(2) = "Female"
            dt.Rows.Add(dr)
            
            Dim pdf1 As Pdf = New Pdf("e:\projects\CSharp\customer\Aspose.Pdf.lic")
            
            Dim sec1 As Section = pdf1.Sections.Add()
            
            Dim tab1 As Aspose.Pdf.Table = New Aspose.Pdf.Table()
            sec1.Paragraphs.Add(tab1)
            tab1.ColumnWidths = "40 100 100 100"
            tab1.DefaultCellBorder = New BorderInfo(CType(BorderSide.All, Integer), 0.1F)
            
            tab1.ImportDataTable(dt, True, 0, 1, 3, 3)
            
            Dim row1 As Row = tab1.Rows(0)
            Dim curCell As Cell
            For Each curCell In row1.Cells
            	curCell.BackgroundColor = New Aspose.Pdf.Color("Blue")
            Next
            
            pdf1.Save(...)
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Table.ImportDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Byte,System.Int32,System.Int32)">
      <summary>
            Imports a <see cref="T:System.Data.DataTable" /> object into the table.
            </summary>
      <param name="dataTable">The <see cref="T:System.Data.DataTable" /> object to be imported.</param>
      <param name="isFieldNameShown">Indicates whether the field name of the datatable will be 
            imported to the first row.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <param name="maxRows">Maximum rows to be imported.</param>
      <param name="maxColumns">Maximum columns to be imported,no more than 128.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.ImportDataTable(System.Data.DataTable,System.Boolean,System.Int32,System.Byte,System.Int32[],System.Int32[])">
      <summary>
            Imports a <see cref="T:System.Data.DataTable" /> object with given rows and columns into the table.
            </summary>
      <param name="dataTable">The <see cref="T:System.Data.DataTable" /> object to be imported.</param>
      <param name="isFieldNameShown">Indicates whether the field name of the datatable will be 
            imported to the first row.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <param name="dataRowIndex">The index of rows in <see cref="T:System.Data.DataTable" /> object.</param>
      <param name="dataColumnIndex">The index of columns in <see cref="T:System.Data.DataTable" /> object.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.ImportDataGrid(System.Web.UI.WebControls.DataGrid,System.Int32,System.Byte)">
      <summary>
            Imports a <see cref="T:System.Web.UI.WebControls.DataGrid" /> object with given rows and columns into the table.
            </summary>
      <param name="dataGrid">The <see cref="T:System.Web.UI.WebControls.DataGrid" /> object to be imported.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.ImportDataGrid(System.Web.UI.WebControls.DataGrid,System.Int32,System.Byte,System.Int32,System.Int32)">
      <summary>
            Imports a <see cref="T:System.Web.UI.WebControls.DataGrid" /> object with given rows and columns into the table.
            </summary>
      <param name="dataGrid">The <see cref="T:System.Web.UI.WebControls.DataGrid" /> object to be imported.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <param name="maxRows">Maximum rows to be imported.</param>
      <param name="maxColumns">Maximum Columns to be imported.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.ImportDataView(System.Data.DataView,System.Boolean,System.Int32,System.Byte,System.Int32,System.Int32)">
      <summary>
            Imports a <see cref="T:System.Data.DataView" /> object into the table.
            </summary>
      <param name="dataView">The <see cref="T:System.Data.DataView" /> object to be imported.</param>
      <param name="isFieldNameShown">Indicates whether the field name of the datatable will be 
            imported to the first row.</param>
      <param name="firstRow">The zero oriented row number of the first cell to import in.</param>
      <param name="firstColumn">The zero oriented column number of the first cell to import in.</param>
      <param name="maxRows">Maximum rows to be imported.</param>
      <param name="maxColumns">Maximum columns to be imported,no more than 128.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Table" /> object. Table properties are cloned but rows in table is not cloned.
            </summary>
      <returns>The new table</returns>
    </member>
    <member name="M:Aspose.Pdf.Table.CompleteClone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.Table" /> object. All members in the table are cloned.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.Table" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.Table.SetColumnTextInfo(System.Int32,Aspose.Pdf.TextInfo)">
      <summary>
            Sets the text format info of specified column.
            </summary>
      <param name="columnNumber">The number of the column to be set.</param>
      <param name="textInfo">The text info object to set.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.GetMinColumnWidth(System.Int32)">
      <summary>
             Gets the minimum column width at which no hyphenation needs for all cells in the column.
             Note that you can only use this method to get the minimum width for text paragraphs in the column.
             Other paragraph such as image will be ignored.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This member is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             You should use GetMinColumnWidth(Pdf pdf,int columnNumber) which has better performance. 
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for any inconvenience you may have experienced.</BLOCKQUOTE></summary>
      <param name="columnNumber">The column number which begins at 0.</param>
      <returns>The minimum with for the column.</returns>
      <example>
        <code>
             [C#]
             ...
             tab1.ImportArray(darr,0,0,true);
             tab1.SetColumnWidth(2,tab1.GetMinColumnWidth(2));
             ...
             
             [VisualBasic]
             tab1.ImportArray(darr,0,0,true)
             tab1.SetColumnWidth(2,tab1.GetMinColumnWidth(2))
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Table.GetMinColumnWidth(Aspose.Pdf.Pdf,System.Int32)">
      <summary>
            Gets the minimum column width at which no hyphenation needs for all cells in the column.
            Note that you can only use this method to get the minimum width for text paragraphs in the column.
            Other paragraph such as image will be ignored.
            </summary>
      <param name="pdf">The <see cref="T:Aspose.Pdf.Pdf" /> object that indicates the PDF document.</param>
      <param name="columnNumber">The column number which begins at 0.</param>
      <returns>The minimum with for the column.</returns>
      <example>
        <code>
            [C#]
            ...
            tab1.ImportArray(darr,0,0,true);
            tab1.SetColumnWidth(2,tab1.GetMinColumnWidth(pdf,2));
            ...
            
            [VisualBasic]
            tab1.ImportArray(darr,0,0,true)
            tab1.SetColumnWidth(2,tab1.GetMinColumnWidth(pdf,2))
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Table.GetMaxColumnWidth(System.Int32)">
      <summary>
             Gets the maximum column width which allows text in all cells in the column be shown in one line. 
             For example,if the text is "Thank you for considering Aspose",<see cref="M:Aspose.Pdf.Table.GetMinColumnWidth(System.Int32)" /> 
             will return the width of "considering",and this method will return the width of 
             "Thank you for considering Aspose".
             Note that you can only use this method to get the maximum width for text paragraphs in the column.
             Other paragraph such as image will be ignored.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This member is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             You should use GetMinColumnWidth(Pdf pdf,int columnNumber) which has better performance. 
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for any inconvenience you may have experienced.</BLOCKQUOTE></summary>
      <param name="columnNumber">The column number which begins at 0.</param>
      <returns>The maximum with for the column.</returns>
      <example>
        <code>
             [C#]
             ...
             tab1.ImportArray(darr,0,0,true);
             tab1.SetColumnWidth(2,tab1.GetMaxColumnWidth(2));
             ...
             
             [VisualBasic]
             tab1.ImportArray(darr,0,0,true)
             tab1.SetColumnWidth(2,tab1.GetMaxColumnWidth(2))
             </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Table.GetMaxColumnWidth(Aspose.Pdf.Pdf,System.Int32)">
      <summary>
            Gets the maximum column width which allows text in all cells in the column be shown in one line. 
            For example,if the text is "Thank you for considering Aspose",<see cref="M:Aspose.Pdf.Table.GetMinColumnWidth(System.Int32)" /> 
            will return the width of "considering",and this method will return the width of 
            "Thank you for considering Aspose".
            Note that you can only use this method to get the maximum width for text paragraphs in the column.
            Other paragraph such as image will be ignored.
            </summary>
      <param name="pdf">The <see cref="T:Aspose.Pdf.Pdf" /> object that indicates the PDF document.</param>
      <param name="columnNumber">The column number which begins at 0.</param>
      <returns>The maximum with for the column.</returns>
      <example>
        <code>
            [C#]
            ...
            tab1.ImportArray(darr,0,0,true);
            tab1.SetColumnWidth(2,tab1.GetMaxColumnWidth(pdf,2));
            ...
            
            [VisualBasic]
            tab1.ImportArray(darr,0,0,true)
            tab1.SetColumnWidth(2,tab1.GetMaxColumnWidth(pdf,2))
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Table.SetColumnWidth(System.Int32,System.Single)">
      <summary>
            Sets the width of specidied column. This method is used to adjust column width after all cells have 
            been added to table. Please see example of <see cref="M:Aspose.Pdf.Table.GetMinColumnWidth(System.Int32)" />.
            </summary>
      <param name="columnNumber">The column number which begins at 0.</param>
      <param name="width">The width to be set.</param>
    </member>
    <member name="M:Aspose.Pdf.Table.GetCell(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Gets a cell according to it's row and column index. In the object model of table, rows and cells 
            are represented by collections. When row span or column span is used, it is difficult to get cell 
            from the collections according to it's row and column index. This method is used to get the cell 
            when row span or column span is used.
            </summary>
      <param name="row">The 0-based row index.</param>
      <param name="column">The 0-based column index.</param>
      <param name="isTableChanged">If the table is changed after the last calling of this method 
            on the same table.</param>
      <returns>The cell at specified row and column.</returns>
    </member>
    <member name="M:Aspose.Pdf.Table.GetHeight(Aspose.Pdf.Pdf)">
      <summary>
            Gets the table height.
            </summary>
      <param name="doc">The <see cref="T:Aspose.Pdf.Pdf" /> object.</param>
      <returns>The row height in points.</returns>
    </member>
    <member name="P:Aspose.Pdf.Table.ColumnWidths">
      <summary>
            Gets or sets a string that contains the width of each columns in this table. 
            The value of each column should be separated by blank.The default unit is point,
            but cm,inch and percentage of available width are also supported.For example,"120 2.5cm 1.5inch",
            or "60% 40%", The max column number is 1024,  
            </summary>
      <remarks>
            If this property is set, the FitWidth property of the <see cref="T:Aspose.Pdf.Cell" /> object needs not set. 
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.Table.IsRowBroken">
      <summary>
            Gets or sets a bool value that indicates whether the row can be broken or not when its table 
            is broken. Default value is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.IsBroken">
      <summary>
            Gets or sets a bool value that indicates whether the table is allowed to be broken or not when 
            crossing pages.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.IsVerticalBroken">
      <summary>
            Gets or sets a bool value that indicates whether the table is broken vertically as the table
            is printed out of the right page margin.The sub-table will be placed in the next page after the original table.
            The default value is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.IsFirstRowRepeated">
      <summary>
            Gets or sets a bool value that indicates whether the first row is repeated when its table is broken.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.RepeatingRows">
      <summary>
            Gets or sets a int value that indicates how many rows from the first row will be repeated when 
            the table is broken across pages.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.Border">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.BorderInfo" /> object that indicates the table border info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.Title">
      <summary>
            Gets or sets a string value that indicates the title of the table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.Rows">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.Table.Rows" /> collection that indicates all rows in the table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.FixedWidth">
      <summary>
             Gets or sets a float value that indicates the fixed width of the table.
            <BLOCKQUOTE class="dtBlock"><Font color="red">NOTE: This member is now obsolete.</Font></BLOCKQUOTE><BLOCKQUOTE class="dtBlock"> 
             You should use <see cref="P:Aspose.Pdf.Table.ColumnWidths" /> to set the column width of the table. 
             It will be removed 12 months later since release 3.0.0.0 in April 2006. Aspose apologizes for any inconvenience you may have experienced.</BLOCKQUOTE></summary>
    </member>
    <member name="P:Aspose.Pdf.Table.Alignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.AlignmentType" /> that indicates the paragraph alignment type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.ColumnAdjustment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.ColumnAdjustmentType" /> that indicates how to determine the width of columns.Default is Customized which means the column widthed are specified by manual.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.DefaultCellBorder">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.BorderInfo" /> object that indicates the default border style for all cells 
            in this table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.DefaultCellTextInfo">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.TextInfo" /> object that indicates the default cell text format info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.VerticalAlignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.VerticalAlignmentType" /> object that indicates the vertical 
            alignment type of all cells in the table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.DefaultCellPadding">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.MarginInfo" /> object that indicates the default cell padding in the table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.IsSingleHeaderShown">
      <summary>
            A bool value that indicates whether table with only a header(IsFirstRowRepeated=true and Rows.Count=1) 
            be shown. The default value is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.BackgroundColor">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.Color" /> object that indicates the background color of the table.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.Table.IsEmptyRowAtBottomShown">
      <summary>
            Gets or sets a bool value that indicates if the empty row at the bottom of the table be shown 
            in the PDF. When a table is larger and can't be display in one page, the table will be splited 
            into more tables. Sometimes the broken table has a empty row at the bottom. This property is 
            used to control the displaying of the empty row. The default value is false.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.TabLeaderType">
      <summary>
            Enumerates the tab leader types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TabLeaderType.Solid">
      <summary>
            Solid tab leader.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TabLeaderType.Dash">
      <summary>
            Dash tab leader.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TabLeaderType.Dot">
      <summary>
            Dot tab leader.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TabLeaderType.None">
      <summary>
            No tab leader.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.TabStop">
      <summary>
            Represents an custom Tab stop position in a paragraph.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.TabStop.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.TabStop" /> class.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TabStop.Position">
      <summary>
            Gets or sets a float value that indicates the tab stop position.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TabStop.LeaderType">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.TabLeaderType" /> enum that indicates the tab leader type.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TabStop.AlignmentType">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.TabAlignmentType" /> enumeration that indicates the custom tab 
            stop position alignment type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.TabStops">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.TabStop" /> objects.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.TabStops.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.TabStops" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.TabStops.Add">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.TabStop" /> class and add it to the 
            TabStops collection.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.TabStop" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.TabStops.Add(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.TabStop" /> class with specified position and 
            add it to the TabStops collection.
            </summary>
      <param name="position">The position of the tab stop.</param>
      <returns>The new <see cref="T:Aspose.Pdf.TabStop" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.TabStops.Add(System.Single,Aspose.Pdf.TabLeaderType)">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.TabStop" /> class with specified position and leader 
            type and add it to the TabStops collection.
            </summary>
      <param name="position">The position of the tab stop.</param>
      <param name="leaderType">The leader type of the tab stop.</param>
      <returns>The new <see cref="T:Aspose.Pdf.TabStop" /> object.</returns>
    </member>
    <member name="M:Aspose.Pdf.TabStops.Remove(Aspose.Pdf.TabStop)">
      <summary>
            Removes a <see cref="T:Aspose.Pdf.TabStop" /> object from the collection.
            </summary>
      <param name="stop">
      </param>
    </member>
    <member name="M:Aspose.Pdf.TabStops.Clone">
      <summary>
            Clones a new <see cref="T:Aspose.Pdf.TabStops" /> objects.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.TabStops" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.TabStops.Item(System.Int32)">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.TabStop" /> object from the collection according to TabStop index.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.TextInfo">
      <summary>
            Encapsulates info for a <see cref="T:Aspose.Pdf.Text" /> paragraph.
            </summary>
      <example>
        <b>Note</b>: The custom PostScript font used in the example is from Jonathan Paterson's <a href="http://www.mlink.net/~paterson/piped-ps.zip">Pipe-Dream font</a>. 
            <code>
            [C#]
            Pdf pdf1 = new Pdf();
            		
            Section sec1 = pdf1.Sections.Add();
            		
            Text text1 = new Text(sec1);
            text1.Margin.Top = 30;
            text1.TextInfo.BackgroundColor = new Aspose.Pdf.Color("Beige");
            sec1.Paragraphs.Add(text1);
            		
            Segment segment1 = text1.Segments.Add("this is text content");
            segment1.TextInfo.Alignment = AlignmentType.Center;
            segment1.TextInfo.Color = new Aspose.Pdf.Color("Red");
            segment1.TextInfo.FontSize = 16;
            segment1.TextInfo.IsUnderline = true;
            
            //TrueType font example
            Text text2 = new Text(sec1);
            text2.Margin.Top = 30;
            sec1.Paragraphs.Add(text2);
            		
            Segment segment2 = text2.Segments.Add("This is TrueType font 'Arial Narrow Bold Italic'.");
            segment2.TextInfo.FontSize = 20;
            segment2.TextInfo.FontName = "Arial Narrow";
            segment2.TextInfo.IsTrueTypeFontBold = true;
            segment2.TextInfo.IsTrueTypeFontItalic = true;
            
            //Embeded custom postscript font example
            Text text3 = new Text(sec1);
            text3.Margin.Top = 30;
            sec1.Paragraphs.Add(text3);
            		
            Segment segment3 = text3.Segments.Add("CUSTOM PIPE DREAM FONT");
            segment3.TextInfo.FontSize = 20;
            segment3.TextInfo.FontName = "Pipe-Dream";
            segment3.TextInfo.FontAfmFile = "E:/Projects/CSharp/Pdf-bak/fonts/PIPED___.AFM";
            segment3.TextInfo.FontOutlineFile = "E:/Projects/CSharp/Pdf-bak/fonts/PIPED___.PFB";
            segment3.TextInfo.FontEncodingFile = "E:/Projects/CSharp/Pdf-bak/fonts/cp1250.txt";
            segment3.TextInfo.FontEncoding = "cp1250";
            segment3.TextInfo.IsFontEmbedded = true;
            
            pdf1.Save(...);
            
            [Visual Basic] 
            Dim pdf1 As Pdf =  New Pdf() 
            
            Dim sec1 As Section =  pdf1.Sections.Add() 
            
            Dim text1 As Text =  New Text(sec1) 
            text1.Margin.Top = 30
            text1.TextInfo.BackgroundColor = New Aspose.Pdf.Color("Beige")
            sec1.Paragraphs.Add(text1)
            
            Dim segment1 As Segment =  text1.Segments.Add("this is text content") 
            segment1.TextInfo.Alignment = AlignmentType.Center
            segment1.TextInfo.Color = New Aspose.Pdf.Color("Red")
            segment1.TextInfo.FontSize = 16
            segment1.TextInfo.IsUnderline = True
            
            'TrueType font example
            Dim text2 As Text =  New Text(sec1) 
            text2.Margin.Top = 30
            sec1.Paragraphs.Add(text2)
            
            Dim segment2 As Segment =  text2.Segments.Add("This is TrueType font 'Arial Narrow Bold Italic'.") 
            segment2.TextInfo.FontSize = 20
            segment2.TextInfo.FontName = "Arial Narrow"
            segment2.TextInfo.IsTrueTypeFontBold = True
            segment2.TextInfo.IsTrueTypeFontItalic = True
            
            'Embeded custom postscript font example
            Dim text3 As Text =  New Text(sec1) 
            text3.Margin.Top = 30
            sec1.Paragraphs.Add(text3)
            
            Dim segment3 As Segment =  text3.Segments.Add("CUSTOM PIPE DREAM FONT") 
            segment3.TextInfo.FontSize = 20
            segment3.TextInfo.FontName = "Pipe-Dream"
            segment3.TextInfo.FontAfmFile = "E:/Projects/CSharp/Pdf-bak/fonts/PIPED___.AFM"
            segment3.TextInfo.FontOutlineFile = "E:/Projects/CSharp/Pdf-bak/fonts/PIPED___.PFB"
            segment3.TextInfo.FontEncodingFile = "E:/Projects/CSharp/Pdf-bak/fonts/cp1250.txt"
            segment3.TextInfo.FontEncoding = "cp1250"
            segment3.TextInfo.IsFontEmbedded = True
            
            pdf1.Save(...)
            
            [XML]
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;Pdf xmlns="Aspose.Pdf"&gt;
            	&lt;Section&gt;
            		&lt;Text MarginTop="30" BackgroundColor="Beige"&gt;
            			&lt;Segment Alignment="center" Color="Red" FontSize="16"&gt;
            			this is text content
            			&lt;/Segment&gt;
            		&lt;/Text&gt;
            		&lt;Text MarginTop="30"&gt;
            			&lt;Segment FontSize="20" FontName="Arial Narrow"
            				IsTrueTypeFontBold="true" IsTrueTypeFontItalic="true"&gt;
            			This is TrueType font 'Arial Narrow Bold Italic'.
            			&lt;/Segment&gt;
            		&lt;/Text&gt;
            		&lt;Text MarginTop="30"&gt;
            			&lt;Segment FontSize="20" FontName="Pipe-Dream" FontEncoding="cp1250" 
            				IsFontEmbedded="true" FontAfmFile="E:/Projects/CSharp/Pdf-bak/fonts/PIPED___.AFM" 
            				FontOutlineFile="E:/Projects/CSharp/Pdf-bak/fonts/PIPED___.PFB" 
            				FontEncodingFile="E:/Projects/CSharp/Pdf-bak/fonts/cp1250.txt"&gt;
            			CUSTOM PIPE DREAM FONT
            			&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            &lt;/Pdf&gt;
            
            </code></example>
    </member>
    <member name="M:Aspose.Pdf.TextInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Aspose.Pdf.TextInfo" /> class.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.TextInfo.Clone">
      <summary>
            Clone a new <see cref="T:Aspose.Pdf.TextInfo" /> object.
            </summary>
      <returns>The new <see cref="T:Aspose.Pdf.TextInfo" /> object.</returns>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.FontName">
      <summary>
            Gets or sets a string that indicates the text font name. Default is Times-Roman.
            </summary>
      <remarks>
            In Aspose.Pdf,three types of fonts is supported. The first type is base 14 font which are 
            Courier,Courier-Bold,Courier-BoldOblique,Courier-Oblique,Helvetica,Helvetica-Bold,Helvetica-BoldOblique,
            Helvetica-Oblique,Symbol,Times-Bold,Times-BoldItalic,Times-Italic,Times-Roman and ZapfDingbats. Only 
            font name are needed when using these fonts. The second type is postscript font. User should set the 
            FontAfmFile or FontPfmFile,FontEncodingFile and FontOutlineFile if want to embed font. The last type 
            is truetype font. User need to install the truetype font if it is not installed in the system. Truetype 
            font with unicode is supported. TruetypeFontFileName should be set when unicode is used. We recommend 
            that you use truetype font instead of postscript font becouse some type of postscript fonts are not supported.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.FontEncoding">
      <summary>
            Gets or sets a string that indicates the font encoding name. For 8-bit fonts, encoding 
            should be "builtin"(Original encoding used by non-text or non-Latin text fonts) , or 
            "winansi"(Windows code page 1252), or the name of an external encoding("cp1251" for example). 
            The default value is "winansi". 
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.IsUnicode">
      <summary>
            Gets or sets a bool value that indicates whether unicode is used.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.IsFontEmbedded">
      <summary>
            Gets or sets a bool value that indicates if the font is embedded. Default is false.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.FontSize">
      <summary>
            Gets or sets a float number that indicates the size of font. Unit is point. Default is 12.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.IsTrueTypeFontBold">
      <summary>
            Gets or sets a bool value that indicates whether the TrueType font is bold. 		
            </summary>
      <remarks>
            Valid for TrueType fonts only.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.IsTrueTypeFontItalic">
      <summary>
            Gets or sets a bool value that indicates whether the TrueType font is italic.		
            </summary>
      <remarks>
            Valid for TrueType fonts only.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.FontAfmFile">
      <summary>
            Gets or sets a string that indicates the name of custom AFM font file. 
            </summary>
      <remarks>
            Valid for custom PostScript fonts only.
            You need to assign either <see cref="P:Aspose.Pdf.TextInfo.FontAfmFile" /> or <see cref="P:Aspose.Pdf.TextInfo.FontPfmFile" />. 
            If both are assigned <see cref="P:Aspose.Pdf.TextInfo.FontAfmFile" /> will be evaluated first.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.FontPfmFile">
      <summary>
            Gets or sets a string that indicates the name of custom PFM font file.
            </summary>
      <remarks>
            Valid for custom PostScript fonts only.
            You need to assign either <see cref="P:Aspose.Pdf.TextInfo.FontAfmFile" /> or <see cref="P:Aspose.Pdf.TextInfo.FontPfmFile" />. 
            If both are assigned <see cref="P:Aspose.Pdf.TextInfo.FontAfmFile" /> will be evaluated first.
            </remarks>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.FontOutlineFile">
      <summary>
            Gets or sets a string that indicates the name of custom font outline file. 
            This property is needed when embedding custom PostScript font into PDF files.
            </summary>
      <remarks>
        <b>Valid for custom PostScript fonts only.</b>
      </remarks>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.FontEncodingFile">
      <summary>
            Gets or sets a string that indicates the name of font encoding file. 		
            Font encoding files are available at <a href="http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/">http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/</a> 
            and <a href="http://www.unicode.org/Public/MAPPINGS/ISO8859/">http://www.unicode.org/Public/MAPPINGS/ISO8859/</a>.The font encoding name 
            is same as the encoding file name. For example, the encoding file is 'cp1250.txt' and the encoding name is 
            'cp1250';the encoding file is '8859-1.TXT' and the encoding name is '8859-1'.
            </summary>
      <remarks>
        <b>Valid for custom PostScript fonts only.</b>
      </remarks>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.IsBaseline">
      <summary>
            Gets or sets a bool value that indicates whether the text is baseline. Default is true.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.Alignment">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.AlignmentType" /> that indicates the text alignment mode. This property 
            should be set for the Text object but not Segment object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.IsUnderline">
      <summary>
            Gets or sets a bool value that indicates whether the text is with underline.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.IsOverline">
      <summary>
            Gets or sets a bool value that indicates whether the text is with overline.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.IsStrikeOut">
      <summary>
            Gets or sets a bool value that indicates whether the text is with strikeout.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.CharSpace">
      <summary>
            Gets or sets a float value that indicates space between charcters.The unit is point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.WordSpace">
      <summary>
            Gets or sets a float value that indicates space between words.The unit is point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.RenderingMode">
      <summary>
            Gets or sets an <see cref="P:Aspose.Pdf.TextInfo.RenderingMode" /> object that indicates the rendering mode of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.Color">
      <summary>
            Gets or sets a <see cref="P:Aspose.Pdf.TextInfo.Color" /> object that indicates the color of the text.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.BackgroundColor">
      <summary>
            Gets or sets the background color of the text paragraph.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.LineSpacing">
      <summary>
            Gets or sets a float value that indicates the spacing between two text lines.The unit is point.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.TruetypeFontFileName">
      <summary>
            Gets or sets a string that indicates the truetype font file name. This property is only 
            needed when using truetype font with unicode. If your truetype font has been installed in your 
            system, you can use truetype font with unicode without this property. But using this property will 
            greatly improve the performance.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.TextBorder">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.BorderInfo" /> object that indicates the text border. This property should be set 
            to Text object but not segment object.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.IsRightToLeft">
      <summary>
            Gets or sets a bool value that indicates whether the text is right-to-left aligned. This property 
            is used for right-to-left aligned language such as Arabic and Hebrew.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.IsRoman">
      <summary>
            Gets or sets a bool value that indicates whether Roman number is used. The default value is false 
            which means Arabic number.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.TextInfo.IsCapRoman">
      <summary>
            Gets or sets a bool value that indicates the Roman page number is Capital or lowercase, 
            the default value is false which means lowercase.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.VerticalAlignmentType">
      <summary>
            Enumerates the vertiacl alignment types.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.VerticalAlignmentType.Top">
      <summary>
            Top alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.VerticalAlignmentType.Center">
      <summary>
            Center alignment type.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.VerticalAlignmentType.Bottom">
      <summary>
            Bottom alignment type.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.VerticalTextRotationType">
      <summary>
            Enumerates the rotation type for vertical text in cells or floating box
            </summary>
    </member>
    <member name="F:Aspose.Pdf.VerticalTextRotationType.None">
      <summary>
            No rotation type is used. This means rotation angle is 0.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.VerticalTextRotationType.ClockWise">
      <summary>
            90.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.VerticalTextRotationType.AntiClockWise">
      <summary>
            -90.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.Watermarks">
      <summary>
            Represents a collection of <see cref="T:Aspose.Pdf.FloatingBox" />,which lay upon other content for the identification purpose as watermark, 
            Only <see cref="T:Aspose.Pdf.Image" />,<see cref="T:Aspose.Pdf.Graph" /> and <see cref="T:Aspose.Pdf.Text" /> are allowed in <see cref="T:Aspose.Pdf.FloatingBox" />.
            are added on each page.
            </summary>
      <example>
        <code>
            [C#]
            Pdf pdf1 = new Pdf();			 			
            Aspose.Pdf.Section sec1 = pdf1.Sections.Add();
            Aspose.Pdf.Text text1 = new Text(sec1,"This is text in section1.");
            text1.Left = 30;
            text1.Top = 100;
            sec1.Paragraphs.Add(text1);
            Aspose.Pdf.Section sec2 = pdf1.Sections.Add();						
            Aspose.Pdf.Text text2 = new Text(sec2,"This is text in section2.");
            text2.Left = 30;
            text2.Top = 100;
            sec2.Paragraphs.Add(text2);
            		
            //image watermark
            Aspose.Pdf.Image image1 = new Aspose.Pdf.Image();			 				
            image1.ImageInfo.File = "world.jpg";
            image1.ImageInfo.ImageFileType = ImageFileType.Jpeg; 
            image1.ImageScale = 0.1f;	
            FloatingBox watermark1 = new FloatingBox(200,100);
            watermark1.BoxHorizontalPositioning = BoxHorizontalPositioningType.Page;
            watermark1.BoxHorizontalAlignment = BoxHorizontalAlignmentType.Center;
            watermark1.BoxVerticalPositioning = BoxVerticalPositioningType.Page;
            watermark1.BoxVerticalAlignment = BoxVerticalAlignmentType.Center;
            watermark1.Paragraphs.Add(image1);
            
            //graph watermark
            Graph graph1 = new Graph(400,100);					
            float[] posArr = new float[]{0,0,200,80,300,40,350,90};
            Curve curve1 = new Curve(graph1,posArr);
            graph1.Shapes.Add(curve1);
            FloatingBox watermark2 = new FloatingBox(400,100);
            watermark2.Paragraphs.Add(graph1);
            		
            //text watermark
            Text text3 = new Text("Text Watermark");		
            FloatingBox watermark3 = new FloatingBox(100,100);
            watermark3.Left = 50;
            watermark3.Top = 500;
            watermark3.Paragraphs.Add(text3);
            
            pdf1.Watermarks.Add(watermark1);
            pdf1.Watermarks.Add(watermark2);
            pdf1.Watermarks.Add(watermark3);			
            pdf1.Save("WatermarkExample.pdf");
            
            [Visual Basic]
            Dim pdf1 As Pdf =  New Pdf() 
            Dim sec1 As Aspose.Pdf.Section =  pdf1.Sections.Add() 
            Dim text1 As Aspose.Pdf.Text =  New Text(sec1,"This is text in section1.") 
            text1.Left = 30
            text1.Top = 100
            sec1.Paragraphs.Add(text1)
            Dim sec2 As Aspose.Pdf.Section =  pdf1.Sections.Add() 
            Dim text2 As Aspose.Pdf.Text =  New Text(sec2,"This is text in section2.") 
            text2.Left = 30
            text2.Top = 100
            sec2.Paragraphs.Add(text2)
            
            'image watermark
            Dim image1 As Aspose.Pdf.Image =  New Aspose.Pdf.Image() 
            image1.ImageInfo.File = "world.jpg"
            image1.ImageInfo.ImageFileType = ImageFileType.Jpeg 
            image1.ImageScale = 0.1f	
            Dim watermark1 As FloatingBox =  New FloatingBox(200,100) 
            watermark1.BoxHorizontalPositioning = BoxHorizontalPositioningType.Page
            watermark1.BoxHorizontalAlignment = BoxHorizontalAlignmentType.Center
            watermark1.BoxVerticalPositioning = BoxVerticalPositioningType.Page
            watermark1.BoxVerticalAlignment = BoxVerticalAlignmentType.Center
            watermark1.Paragraphs.Add(image1)
            
            'graph watermark
            Dim graph1 As Graph =  New Graph(400,100) 
            Dim posArr() As single =  New single() {0,0,200,80,300,40,350,90}
            Dim curve1 As Curve =  New Curve(graph1,posArr) 
            graph1.Shapes.Add(curve1)
            Dim watermark2 As FloatingBox =  New FloatingBox(400,100) 
            watermark2.Paragraphs.Add(graph1)
            
            'text watermark
            Dim text3 As Text =  New Text("Text Watermark") 
            Dim watermark3 As FloatingBox =  New FloatingBox(100,100) 
            watermark3.Left = 50
            watermark3.Top = 500
            watermark3.Paragraphs.Add(text3)
            
            pdf1.Watermarks.Add(watermark1)
            pdf1.Watermarks.Add(watermark2)
            pdf1.Watermarks.Add(watermark3)			
            pdf1.Save("WatermarkExample.pdf")
            
            [XML]
            &lt;Pdf xmlns="Aspose.Pdf" &gt;
            	&lt;Section ID="section1"&gt;
            		&lt;Text Left="30" Top="100"&gt;
            			&lt;Segment&gt;This is text in section1.&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            	&lt;Section ID="section2"&gt;
            		&lt;Text Left="30" Top="100"&gt;
            			&lt;Segment&gt;"This is text in section2."&lt;/Segment&gt;
            		&lt;/Text&gt;
            	&lt;/Section&gt;
            	&lt;Watermark Width="200" Height="100" BoxHorizontalPositioning="Page" BoxHorizontalAlignment="Center" BoxVerticalPositioning="Page" BoxVerticalAlignment="Center"&gt;
            		&lt;Image File="world.jpg" Type="jpeg" ImageScale="0.1" /&gt;
            	&lt;/Watermark&gt;
            	&lt;Watermark Width="400" Height="100"&gt;
            		&lt;Graph  Width="400" Height="100"&gt;
            			&lt;Curve Position="0 0 200 80 300 40 350 90" /&gt;
            		&lt;/Graph&gt; 
            	&lt;/Watermark&gt;
            	&lt;Watermark Width="100" Height="100" Left ="50" Top="500"&gt;
            		&lt;Text &gt;
            			&lt;Segment  IsUnicode="true" FontSize="12"&gt;Text Watermark&lt;/Segment&gt;       
            		&lt;/Text&gt;
            	&lt;/Watermark&gt;
            &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.Watermarks.Add(Aspose.Pdf.FloatingBox)">
      <summary>
            Adds a new <see cref="T:Aspose.Pdf.FloatingBox" /> object into the collection.
            </summary>
      <param name="watermark">The <see cref="T:Aspose.Pdf.FloatingBox" /> object to be added.</param>
    </member>
    <member name="M:Aspose.Pdf.Watermarks.Insert(Aspose.Pdf.FloatingBox,Aspose.Pdf.FloatingBox)">
      <summary>
            Inserts a new <see cref="T:Aspose.Pdf.FloatingBox" /> object into the collection after specified <see cref="T:Aspose.Pdf.FloatingBox" /> object.
            </summary>
      <param name="watermarkToInsertAfter">The <see cref="T:Aspose.Pdf.FloatingBox" /> object to insert after. 
            If this object is null, the new object will be inserted as the first member.</param>
      <param name="newWatermark">The <see cref="T:Aspose.Pdf.FloatingBox" /> object to be inserted.</param>
    </member>
    <member name="T:Aspose.Pdf.XmpMetadata">
      <summary>
             Represents the XmpMetadata of a pdf document.
             </summary>
      <example>
        <code>
             [C#]
             Pdf pdf = new Pdf();
             	
             Section s = pdf.Sections.Add();
             		
             Text text1 = new Text("This is a test for XMP Metadata");
             s.Paragraphs.Add(text1);
             
             pdf.XmpMetadata = new XmpMetadata();
             					
             //core properties
             pdf.XmpMetadata.AddCreationDate(System.DateTime.Now.ToString());
             						
            	//user properties
            	pdf.XmpMetadata.AddUserProperty("xmlns:dc=\"http://purl.org/dc/elements/1.1/\"","dc:contributor","Aspose");
            					
            	pdf.Save(@"d:\test\test.pdf");
            	
            	[VB.Net]
            	Dim pdf As Pdf = New Pdf
            	
            	Dim s As Section = pdf.Sections.Add()
            	Dim text1 As Text = New Text("This is a test for XMP Metadata")
            	s.Paragraphs.Add(text1)
            	
            	pdf.XmpMetadata = New XmpMetadata
            	
            	'core properties
            	pdf.XmpMetadata.AddCreationDate(System.DateTime.Now.ToString())
            	
            	'user properties
            	pdf.XmpMetadata.AddUserProperty("xmlns:dc='http://purl.org/dc/elements/1.1/'", "dc:contributor", "Aspose")
            	
            	pdf.Save("d:\test\test.pdf")
             
            	[XML]
              &lt;Pdf xmlns="Aspose.Pdf"&gt; 
              &lt;XmpMetadata&gt;
              	&lt;MetadataItem Name="CreationDate" Value="2007-7-15 10:51:55" /&gt;
              		&lt;MetadataItem XmlNamespace="xmlns:dc='http://purl.org/dc/elements/1.1/'" Name="dc:contributor" Value="Aspose" /&gt;
              	&lt;/XmpMetadata&gt;
              	&lt;Section&gt;
              		&lt;Text&gt;&lt;Segment&gt;This is a test for XMP Metadata&lt;/Segment&gt;&lt;/Text&gt;
              	&lt;/Section&gt; 
              &lt;/Pdf&gt;
            </code>
      </example>
    </member>
    <member name="M:Aspose.Pdf.XmpMetadata.#ctor">
      <summary>
            Represents a constructor of the XmpMetadata object.
            </summary>
    </member>
    <member name="M:Aspose.Pdf.XmpMetadata.AddCreationDate(System.String)">
      <summary>
            Adds the CreationDate property. It will be added into "xmlns:xap='http://ns.adobe.com/xap/1.0/'" namespace.
            </summary>
      <param name="date">The value of the property.</param>
    </member>
    <member name="M:Aspose.Pdf.XmpMetadata.AddCreatorTool(System.String)">
      <summary>
            Adds the CreatorTool property. It will be added into "xmlns:xap='http://ns.adobe.com/xap/1.0/'" namespace.
            </summary>
      <param name="tool">The value of the property.</param>
    </member>
    <member name="M:Aspose.Pdf.XmpMetadata.AddModifyDate(System.String)">
      <summary>
            Adds the ModifyDate property. It will be added into "xmlns:xap='http://ns.adobe.com/xap/1.0/'" namespace.
            </summary>
      <param name="date">The value of the property.</param>
    </member>
    <member name="M:Aspose.Pdf.XmpMetadata.AddMetaDataDate(System.String)">
      <summary>
            Adds the MetaDataDate property. It will be added into "xmlns:xap='http://ns.adobe.com/xap/1.0/'" namespace.
            </summary>
      <param name="date">The value of the property.</param>
    </member>
    <member name="M:Aspose.Pdf.XmpMetadata.AddUserProperty(System.String,System.String,System.String)">
      <summary>
            Adds a user defined property.
            </summary>
      <param name="xmlns">The xml namespace.</param>
      <param name="name">The name of the property.</param>
      <param name="val">The value of the property.</param>
    </member>
    <member name="T:Aspose.Pdf.HtmlInfo">
      <summary>
            Encapsulates info for HTML when inporting HTML.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlInfo.IsLandScape">
      <summary>
            Gets or sets a bool value that indicates whether the page orientation is landscape. 
            The default is false, portrait.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlInfo.PageWidth">
      <summary>
            Gets or sets a float value that indicates the page width of the PDF document when converting 
            HTML to PDF. Default is A4 width.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlInfo.PageHeight">
      <summary>
            Gets or sets a float value that indicates the page height of the PDF document when converting 
            HTML to PDF. Default is A4 height.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlInfo.Margin">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.MarginInfo" /> object that indicates the page margin info.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlInfo.ImgUrl">
      <summary>
            Gets or sets a string value that indicates the image url as from the database when converting 
            HTML to PDF.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlInfo.TdPadding">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.MarginInfo" /> object that indicates the cell's padding.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlInfo.TdTextMargin">
      <summary>
            Gets or sets a <see cref="T:Aspose.Pdf.MarginInfo" /> object that indicates the cell text's margin.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlInfo.ListLabelWidth">
      <summary>
            Gets or sets a float value that indicates the width of the label in HTML list. 
            Default value is 30 points.
            </summary>
    </member>
    <member name="P:Aspose.Pdf.HtmlInfo.TimeOut">
      <summary>
            Gets or sets an int value that indicates the maximum time for a Http request to get response.
            Default value is Timeout.Infinite.
            Once you set the value in your code, you must also handle the WebException. Otherwise there will be an error in your program when your HttpWebRequest expires.
            </summary>
    </member>
    <member name="T:Aspose.Pdf.TabAlignmentType">
      <summary>
            Enumerates the alignment types of custom tab stops.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TabAlignmentType.Left">
      <summary>
            Left alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TabAlignmentType.Center">
      <summary>
            Center alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TabAlignmentType.Right">
      <summary>
            Right alignment.
            </summary>
    </member>
    <member name="F:Aspose.Pdf.TabAlignmentType.Decimal">
      <summary>
            Decimal alignment.
            </summary>
    </member>
  </members>
</doc>