<?xml version="1.0"?>
<doc>
  <assembly>
    <name>TallComponents.PDF.Layout</name>
  </assembly>
  <members>
    <member name="T:TallComponents.PDF.Layout.Brushes.AxialGradientBrush">
      <summary>
            A brush that paints a gradient fill that changes from one color to another along a straight line.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Brushes.GradientBrush">
      <summary>
            An abstract base class for AxialGradientBrush and RadialGradientBrush that holds 
            common properties for these classes.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Brushes.Brush">
      <summary>
            When a path is drawn, enclosed areas are filled using a brush. 
            Brush is an abstract base class for all brushes.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Object">
      <summary>
            Base class of all objects that can be read from XML.
            </summary>
      <remarks>
        <see cref="T:TallComponents.PDF.Layout.Object" /> features most of the logic used to load
            object declarations from XML. You can use this feature in your own classes 
            by deriving from this class. 
            <para>Derived classes must have a public parameterless constructor, otherwise it cannot be instatiated.</para><para>The XML processor can handle all public properties if:</para><list type="bullet"><item><description>of type System.String.</description></item><item><description>that have a 'public static [type] Parse( string )' method
              (this includes many value-types such as double, bool, etc.</description></item><item><description>that have public static get-properties that return 
              instances of that type.</description></item><item><description>enumeration members</description></item></list>
            The attribute name should match (case-insensitive) the name of the public property.
            <see cref="T:TallComponents.PDF.Layout.Object" /> will use <see cref="M:TallComponents.PDF.Layout.Unit.Parse(System.String)">Unit.Parse</see> to process doubles.
            <para>Use the type attribute to specify derived classes using their fully qualified type name.</para><para>To implement custom XML reading, create a class with a public parameterless constructor and
            add a <code>void Read(XmlReader)</code> method. The XML reader will invoke the Read method right
            after construction. Note that if you use this approach, you are completely on your own in processing the XML.
            Make sure that, when the method finishes processing the XML, the XmlReader is positioned at the first
            node after the end element.</para></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Object.Read(System.Xml.XmlElement)">
      <summary>
            Read from XML element.
            </summary>
      <param name="element">The element that holds the data from which this layout object is read.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Object.Read(System.String)">
      <summary>
            Read from XML file.
            </summary>
      <param name="path">The path of the XML file that holds the data from which this layout object is read.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Object.Read(System.Xml.XmlReader)">
      <summary>
            Read from XML reader.
            </summary>
      <remarks>
            Override this method to implement custom XML reading. When called, the reader is positioned on the
            start element associated with the type. When the method finishes, the reader must be positioned
            on the first XML node after the end element (i.e. make sure you consume the end element).
            </remarks>
      <param name="reader">The XML reader that holds the data from which this layout object is read.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Brushes.Brush.Clone">
      <summary>
            Clones a Brush.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Brushes.GradientBrush.Clone">
      <summary>
            Clones a Brush.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Brushes.GradientBrush.StartColor">
      <summary>
            The start color of the gradient fill.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Brushes.GradientBrush.EndColor">
      <summary>
            The end color of the gradient fill.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Brushes.AxialGradientBrush.#ctor">
      <summary>
            Create a new AxialGradientBrush.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Brushes.AxialGradientBrush.#ctor(TallComponents.PDF.Layout.Colors.Color,TallComponents.PDF.Layout.Colors.Color,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new AxialGradientBrush with given start and endpoint.
            </summary>
      <param name="startColor">The start color of the gradient fill.</param>
      <param name="endColor">The end color of the gradient fill.</param>
      <param name="startX">The horizontal position of the starting point of the gradient fill.</param>
      <param name="startY">The vertical position of the starting point of the gradient fill.</param>
      <param name="endX">The horizontal position of the ending point of the gradient fill.</param>
      <param name="endY">The vertical position of the ending point of the gradient fill.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Brushes.AxialGradientBrush.StartX">
      <summary>
            The horizontal position of the starting point of the gradient fill.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Brushes.AxialGradientBrush.StartY">
      <summary>
            The vertical position of the starting point of the gradient fill.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Brushes.AxialGradientBrush.EndX">
      <summary>
            The horizontal position of the ending point of the gradient fill.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Brushes.AxialGradientBrush.EndY">
      <summary>
            The vertical position of the ending point of the gradient fill.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Brushes.RadialGradientBrush">
      <summary>
            A brush that paints a gradient fill that changes from one color to another between an inner and an outer circle.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Brushes.RadialGradientBrush.#ctor">
      <summary>
            Create a new RadialGradientBrush.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Brushes.RadialGradientBrush.#ctor(TallComponents.PDF.Layout.Colors.Color,TallComponents.PDF.Layout.Colors.Color,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new RadialGradientBrush with given centerpoint and radius of both circles.
            </summary>
      <param name="startColor">The start color of the gradient fill.</param>
      <param name="endColor">The end color of the gradient fill.</param>
      <param name="x">The horizontal position of the center point of both circles.</param>
      <param name="y">The vertical position of the center point of both circles.</param>
      <param name="innerRadius">The radius of the inner circle.</param>
      <param name="outerRadius">The radius of the outer circle.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Brushes.RadialGradientBrush.X">
      <summary>
            The horizontal position of the center point of both circles.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Brushes.RadialGradientBrush.Y">
      <summary>
            The vertical position of the center point of both circles.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Brushes.RadialGradientBrush.R0">
      <summary>
            The radius of the inner circle.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Brushes.RadialGradientBrush.R1">
      <summary>
            The radius of the outer circle.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Brushes.SolidBrush">
      <summary>
            Solid brush. Used to control how a path is filled.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Brushes.SolidBrush.#ctor">
      <summary>
            Create a solid black brush.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Brushes.SolidBrush.#ctor(TallComponents.PDF.Layout.Colors.Color)">
      <summary>
            Create a solid brush with specified RGB color.
            </summary>
      <param name="color">Color of this SolidBrush.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Brushes.SolidBrush.Clone">
      <summary>
            Clones a Brush.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Brushes.SolidBrush.Color">
      <summary>
            Color of this brush.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Brushes.TilingBrush">
      <summary>
            A brush that paints a pattern cell that is repeated from right to left, from top to bottom.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Brushes.TilingBrush.#ctor">
      <summary>
            Creates a new TilingBrush with an empty pattern.
            </summary>
      <remarks>
            Add shapes to the <see cref="P:TallComponents.PDF.Layout.Brushes.TilingBrush.Pattern">Pattern</see>. The pattern is repeated across the area that is filled.
            <example>
            XML
            <code><![CDATA[
            	<paragraph type="textparagraph">
            		<border>
            			<background type="tilingbrush">
            				<pattern width="50" height="50">
            					<shape type="rectangleshape" x="0" y="0" width="25" height="25">
            						<pen color="green" width="1"/>
            					</shape>
            				</pattern>
            			</background>
            		</border>
            		<fragment font="helvetica" fontsize="24">
            			Tiling brush in XML
            		</fragment>
               </paragraph>
            ]]></code></example></remarks>
      <seealso cref="T:TallComponents.PDF.Layout.Brushes.Brush" />
      <seealso cref="T:TallComponents.PDF.Layout.Pens.Pen" />
      <seealso cref="N:TallComponents.PDF.Layout.Shapes" />
      <seealso cref="T:TallComponents.PDF.Layout.Shapes.Shape" />
    </member>
    <member name="M:TallComponents.PDF.Layout.Brushes.TilingBrush.Clone">
      <summary>
            Clones a Brush.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Brushes.TilingBrush.Pattern">
      <summary>
            The shapes that are repeated from right to left, from top to bottom. 
            </summary>
      <remarks>
            The appearance of each cell in the pattern is determined by the shapes added to this property.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Colors.CmykColor">
      <summary>
            CMYK color.
            </summary>
      <remarks>
            A color specified with 4 components: Cyan, Magenta, Yellow and Black.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Colors.Color">
      <summary>
            Base class for all derived color classes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Colors.Color.Convert(System.Drawing.Color)">
      <summary>
            Convert a GDI color to a PDF color.
            </summary>
      <param name="gdiColor">
      </param>
      <returns>
            A Color or <see langword="null" /> if the gdi color is Empty.
            </returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Colors.Color.Convert">
      <summary>
            Convert this color to a GDI color.
            </summary>
      <returns>The converted color.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Colors.Color.op_Implicit(System.Drawing.Color)~TallComponents.PDF.Layout.Colors.Color">
      <summary>
            Provides implicit conversion from System.Drawing.Color.
            </summary>
      <param name="systemColor">The system color that will be implicitly casted.</param>
      <returns>A PDF.Colors.Color that has the same value as the System.Drawing.Color.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Colors.Color.Clone">
      <summary>
            Clones a Color.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Colors.Color.Parse(System.String)">
      <summary>
            Parse a string to extract a color.
            </summary>
      <remarks>
            The string representation of a color can be on of the following:
            <list type="table"><listheader><term>Format</term><description>Description</description></listheader><item><term>#RRGGBB</term><description>
                    Web color. Each component is a 2-digit hexadecimal number (00 - FF).
                    For example: <c>#9963FA</c></description></item><item><term>gray</term><description>
                    Gray color. <c>gray</c> is a value in the range 0 - 255.
                    For example: <c>128</c></description></item><item><term>r,g,b</term><description>
                    RGB color. Each component is a value in the range 0 - 255.
                    For example: <c>128,5,233</c></description></item><item><term>c,m,y,k</term><description>
                    CMYK color. Each component is a value in the range 0 - 255.
                    For example: <c>12,255,6,128</c></description></item><item><term>ColorName</term><description>
                    A named color. Currently supported are all named colors available in
                    System.Drawing.Color.
                    For example: <c>SkyBlue</c></description></item></list>
            Instead of the fixed values (0-255) also a relative value (0%-100%) is allowed. This
            is converted to 0-255.
            </remarks>
      <param name="color">A string describing a color.</param>
      <returns>A Color.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Colors.Color.Equals(System.Object)">
      <summary>
            Compares two colors.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Colors.Color.GetHashCode">
      <summary>
            Provides a hashcode.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.Color.Name">
      <summary>
            The name of the color. This can be a string describing the color
            or an actual name like Orange or Green.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.Color.ParsableName">
      <summary>
            Get the name of the color as it can be parsed again.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.Color.Transparent">
      <summary>
            The color Transparent is a special instance of color.
            It is completely transparent and has no components.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Colors.CmykColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
            Create a new Cmyk color from it's components.
            </summary>
      <param name="c">Cyan component [0-255]</param>
      <param name="m">Magenta component [0-255]</param>
      <param name="y">Yellow component [0-255]</param>
      <param name="k">Black component [0-255]</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Colors.CmykColor.Convert">
      <summary>
            Convert this color to a System.Drawing.Color.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.White">
      <summary>
            White (all component 0%)
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Black">
      <summary>
            Process Black (100% black)
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Cyan">
      <summary>
            Process Cyan (100% Cyan)
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Magenta">
      <summary>
            Process Magenta (100% Magenta)
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Yellow">
      <summary>
            Process Yellow (100% Yellow)
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Red">
      <summary>
            CMYK Red
            </summary>
      <remarks>
            100% Magenta, 100% Yellow.
            </remarks>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Orange">
      <summary>
            CMYK Orange
            </summary>
      <remarks>
            50% Magenta, 100% Yellow.
            </remarks>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Green">
      <summary>
            CMYK Green
            </summary>
      <remarks>
            80% Cyan, 100% Yellow.
            </remarks>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Blue">
      <summary>
            CMYK Blue
            </summary>
      <remarks>
            100% Cyan, 10% Magenta, 10% Black.
            </remarks>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Purple">
      <summary>
            CMYK Purple
            </summary>
      <remarks>
            100% Cyan, 10% Magenta, 10% Black.
            </remarks>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Pink">
      <summary>
            CMYK Pink
            </summary>
      <remarks>
            25% Magenta
            </remarks>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.Gray">
      <summary>
            CMYK Gray
            </summary>
      <remarks>
            60% Black
            </remarks>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.CmykColor.LightGray">
      <summary>
            CMYK Light Gray
            </summary>
      <remarks>
            30% Black
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.CmykColor.C">
      <summary>
            The Cyan color component [0-255].
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.CmykColor.M">
      <summary>
            The Magenta color component [0-255].
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.CmykColor.Y">
      <summary>
            The Yellow color component [0-255].
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.CmykColor.K">
      <summary>
            The Black color component [0-255].
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.CmykColor.Name">
      <summary>
            The name of the CMYK color.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.CmykColor.ParsableName">
      <summary>
            Get the name of the color as it can be parsed again.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Colors.GrayColor">
      <summary>
            Gray color.
            </summary>
      <remarks>
            A color specified with only 1 component: The grayscale value.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Colors.GrayColor.#ctor(System.Byte)">
      <summary>
            Create a new GrayColor from it's single color component.
            </summary>
      <param name="colorValue">Grayscale value [0 - 255].</param>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.GrayColor.White">
      <summary>
            Grey white
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.GrayColor.Black">
      <summary>
            Grey Black
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Colors.GrayColor.Convert">
      <summary>
            Convert to a System.Drawing.Color.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.GrayColor.Value">
      <summary>
            The grayscale value [0 - 255].
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.GrayColor.Name">
      <summary>
            The name of the color.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.GrayColor.ParsableName">
      <summary>
            Get the name of the color as it can be parsed again.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Colors.RgbColor">
      <summary>
            Rgb color.
            </summary>
      <remarks>
            A color specified with 3 components: Red, Gree ans Blue.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Colors.RgbColor.#ctor(System.Byte,System.Byte,System.Byte)">
      <summary>
            Create a new RgbColor from it's color components.
            </summary>
      <param name="r">Red color component [0-255]</param>
      <param name="g">Green color component [0-255]</param>
      <param name="b">Blue color component [0-255]</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Colors.RgbColor.#ctor(System.Drawing.Color)">
      <summary>
            Create a new RgbColor from a GDI+ color.
            </summary>
      <param name="color">GDI+ color</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Colors.RgbColor.Convert">
      <summary>
            Comvert this color to a System.Drawing.Color.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.RgbColor.White">
      <summary>
            RGB white
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.RgbColor.Black">
      <summary>
            RGB Black
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.RgbColor.Red">
      <summary>
            RGB Red
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.RgbColor.Green">
      <summary>
            RGB Green
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Colors.RgbColor.Blue">
      <summary>
            RGB Blue
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.RgbColor.R">
      <summary>
            Red color component [0-255]
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.RgbColor.G">
      <summary>
            Green color component [0-255]
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.RgbColor.B">
      <summary>
            Blue color component [0-255]
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.RgbColor.Name">
      <summary>
            The name of the color.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.RgbColor.ParsableName">
      <summary>
            Get the name of the color as it can be parsed again.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Colors.TransparentColor">
      <summary>
            Transparent color.
            </summary>
      <remarks>
            This class can be used to specify no color.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Colors.TransparentColor.Convert">
      <summary>
            Convert this color to a GDI color.
            </summary>
      <returns>The converted color.</returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.TransparentColor.Name">
      <summary>
            The name of the color.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Colors.TransparentColor.ParsableName">
      <summary>
            Get the name of the color as it can be parsed again.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Css.CssStyleSheet">
      <summary>
            Holds the style sheet definition and allows querying.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.#ctor">
      <summary>
            Creates a new instance of the CssStyleSheet class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.#ctor(TallComponents.PDF.Layout.Css.CssStyleSheet)">
      <summary>
            Creates a new instance of the CssStyleSheet class.
            </summary>
      <param name="parent">The stylesheet that has to be assigned as the parent of this new style sheet.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.#ctor(System.String)">
      <summary>
            Creates a new instance of the CssStyleSheet class.
            </summary>
      <param name="path">The (relative) (web)path to the stylesheet to load.</param>
      <remarks>
            This 'wrapper' tries to resolve the loaction of the stylesheet by checking various 
            types. The first matching is evaluated:
            <para>- path is a complete url</para><para>- path is a local file (relative to current working folder)</para><para>- the application is running in a web context: the web path are resolved locally.</para></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance of the CssStyleSheet class.
            </summary>
      <remarks>
            This 'wrapper' tries to resolve the loaction of the stylesheet by checking various 
            types. The first matching is evaluated:
            <para>- path is already a complete url</para><para>- basepath is a url, appends the stylesheetName</para><para>- path is a local file (relative to current working folder)</para><para>- path is a local file (relative to given basepath)</para><para>- the application is running in a web context: the web paths are resolved locally.</para></remarks>
      <param name="path">The (relative) (web)path to the stylesheet to load.</param>
      <param name="basepath">The basepath for included pa</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.#ctor(System.IO.Stream)">
      <summary>
            Creates a new instance of the CssStyleSheet class.
            </summary>
      <param name="stream">The stream that holds the stylesheet to load.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.Read(System.Xml.XmlReader)">
      <summary>
            Read the stylesheet from XML.
            </summary>
      <param name="reader">The reader to read from.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.Parse(System.String)">
      <summary>
            Used by XML processor to load a css style sheet from a path.
            </summary>
      <param name="path">Path to load the stylesheet from.</param>
      <returns>The CssStyleSheet holding the loaded and parsed stylesheet.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Css.CssStyleSheet.Clone">
      <summary>
            Clones a CssStyleSheet.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Fields.BorderStyle">
      <summary>
            Different styles for the border of a form field.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Fields.BorderStyle.Solid">
      <summary>
            A Solid rectangle around the field.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Fields.BorderStyle.Dashed">
      <summary>
            A Dashed rectangle surrounding the field.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Fields.BorderStyle.Beveled">
      <summary>
            A simulated embossed rectangle that appears to be raised above the surface of the page.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Fields.BorderStyle.Inset">
      <summary>
            A simulated engraved rectangle that appears to be recessed below the surface of the page.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Fields.BorderStyle.Underline">
      <summary>
            A single line along the bottom of the field's bounding box.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Compression">
      <summary>
            Compression types for Image and ImageShape.
            </summary>
      <remarks>
            Note that not all compressions are supported for all image formats. 
            If this is the case, the image will be written in it's native format
            or compressed using Zip if it's an uncompressed image format.
            </remarks>
    </member>
    <member name="F:TallComponents.PDF.Layout.Compression.Zip">
      <summary>
            Lossless compression.
            </summary>
      <remarks>
            This compression is also known as flate.
            </remarks>
    </member>
    <member name="F:TallComponents.PDF.Layout.Compression.Jpeg">
      <summary>
            Lossy compression.
            </summary>
      <remarks>
            This compression is also known as DCT.
            </remarks>
    </member>
    <member name="F:TallComponents.PDF.Layout.Compression.Auto">
      <summary>
            Use source image compression or Zip if uncompressed.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.FragmentReadDirection">
      <summary>
            Different read directions for text.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Paragraphs.FragmentReadDirection.LeftToRight">
      <summary>
            Text is read from left to right.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Paragraphs.FragmentReadDirection.RightToLeft">
      <summary>
            Text is read from right to left (e.g. Arabic).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Paragraphs.FragmentReadDirection.InheritFromParent">
      <summary>
            The direction of the parent is used.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.HorizontalAlignment">
      <summary>
            Horizontal alignment of text lines.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.HorizontalAlignment.Left">
      <summary>
            Left aligned
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.HorizontalAlignment.Center">
      <summary>
            Center aligned
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.HorizontalAlignment.Right">
      <summary>
            Right aligned
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Fields.Orientation">
      <summary>
            Orientations of various objects.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Fields.Orientation.Rotate0">
      <summary>
            No rotation.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Fields.Orientation.Rotate90">
      <summary>
            90 degrees rotation, counter-clockwise.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Fields.Orientation.Rotate180">
      <summary>
            180 degrees rotation.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Fields.Orientation.Rotate270">
      <summary>
            270 degrees rotation, counter-clockwise.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.PageBoundary">
      <summary>
            The box which should be used as outline for the page.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.PageBoundary.Default">
      <summary>
            The dimensions of the intersection of the media box and the crop box. 
            If the crop box is not present, the visible box is set to the media box.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.PageBoundary.MediaBox">
      <summary>
            The boundaries of the physical medium on which the page is intended to be displayed or printed.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.PageBoundary.CropBox">
      <summary>
            The visible region. When the page is displayed or printed, its contents are to be clipped (cropped).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.PageBoundary.BleedBox">
      <summary>
            The region to which the contents of the page should be clipped when output in a production environment.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.PageBoundary.TrimBox">
      <summary>
            The intended dimensions of the finished page after trimming.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.PageBoundary.ArtBox">
      <summary>
            The extent of the page’s meaningful content (including potential white space) as intended by the page’s creator.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.PageOrientation">
      <summary>
            Orientations used by the Section to rotate the page in the viewer.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.PageOrientation.Rotate0">
      <summary>
            No rotation.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.PageOrientation.Rotate90">
      <summary>
            90 degrees rotation, counter-clockwise.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.PageOrientation.Rotate180">
      <summary>
            180 degrees rotation.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.PageOrientation.Rotate270">
      <summary>
            270 degrees rotation, counter-clockwise.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.ReadDirection">
      <summary>
            Different read directions for text.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.ReadDirection.LeftToRight">
      <summary>
            Text is read from left to right.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.ReadDirection.RightToLeft">
      <summary>
            Text is read from right to left (e.g. Arabic).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.VerticalAlignment">
      <summary>
            Vertical alignment of text lines.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.VerticalAlignment.Top">
      <summary>
            Top aligned
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.VerticalAlignment.Middle">
      <summary>
            Middle aligned
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.VerticalAlignment.Bottom">
      <summary>
            Bottom aligned
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.PdfException">
      <summary>
            Base class for all exceptions thrown from TallComponents components.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.PdfException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.PdfException.Source">
      <summary>
            Get or set the name of the application or the object that causes the error.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.PdfException.StackTrace">
      <summary>
            Get a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.InvalidImageException">
      <summary>
            The exception that is thrown when an invalid or corrupt image is encountered.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.InvalidPdfException">
      <summary>
            The exception that is thrown when the PDF document is invalid.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.NoPagesException">
      <summary>
            The exception that is thrown when a document without any page is written.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.TextFlowException">
      <summary>
            The exception that is thrown when a text flow constraint can not be satisfied.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.UnsupportedImageException">
      <summary>
            The exception that is thrown when an unsupported or unrecognised image format is encountered.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.WrongPasswordException">
      <summary>
            The exception that is thrown when a wrong password is specified or no password is specified where it is required.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Fonts.Font">
      <summary>
            A font is used to typeset text. 
            </summary>
      <remarks>
            There are 14 standard fonts available in PDF or you can load a TrueType font (Professional edition only).
            <example>
            C#
            <code>
            // Internal fonts
            myFragment.Font = Font.Helvetica;
              
            // TrueType fonts
            Font arialBold = Font.TrueType( @"c:\windows\fonts\ARIALBD.TTF" );
            myFragment.Font = arialBold;
            
            // TrueType fonts can also be constructed through the Path property
            Font arialBold = new Font();
            arialBold.Path = @"c:\windows\fonts\ARIALBD.TTF";
            myFragment.Font = arialBold;
            </code>
            XML
            <code><![CDATA[
            <paragraph type="textparagraph">
              <fragment font="Helvetica">Helvetica is a built-in PDF Font.</fragment>
              <fragment font="c:\windows\fonts\ARIALBD.TTF">Arial is a TrueType Font.</fragment>
            </paragraph>]]></code></example></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Fonts.Font.#ctor">
      <summary>
            Creates a new font object.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Fonts.Font.AddToSubset(System.Char[])">
      <summary>
            Add characters to the embedded subset.
            </summary>
      <param name="subset">Add these characters to the subset.</param>
      <remarks>
        <para>It is only valid to call this method if the EmbedMode of this font is Subset.</para>
      </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Fonts.Font.CalculateLength(System.String)">
      <summary>
            Calculate the length of given text. Multiply the result with the font size to
            get the length in points.
            </summary>
      <param name="text">Calculate the length of this text.</param>
      <returns>Length in points. Multiply this with the font size to
            get the length in points.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Fonts.Font.Parse(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="path">For internal use only.</param>
      <returns>For internal use only.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Fonts.Font.TrueType(System.String)">
      <summary>
            Get a TrueType font from file.
            </summary>
      <param name="path">Relative or absolute path to TrueType file.</param>
      <returns>
      </returns>
      <remarks>To specifiy a TrueType font in XML use the font attribute and assign a value equal to the TrueType path.</remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Fonts.Font.TrueType(System.IO.Stream)">
      <summary>
            Get a TrueType font from a stream. 
            </summary>
      <remarks>
        <para>The <paramref name="stream" /> may be closed when the constructor completes.
            It is the responsibility of the client to close the stream.</para>
            Note that this functionality is available in the Professional edition only.
            </remarks>
      <param name="stream">Stream containing TrueType font data.</param>
      <returns>The created font.</returns>
      <remarks>To specifiy a TrueType font in XML use the font attribute and assign a value equal to the TrueType path.</remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Fonts.Font.TrueType(System.String,System.String)">
      <summary>
            Get a TrueType font from a TrueType collection (.TTC) file.
            </summary>
      <param name="path">Relative or absolute path to TrueType collection file.</param>
      <param name="fontName">Name (case-insensitive) of the TrueType font inside the collection.</param>
      <returns>
      </returns>
      <remarks>To specifiy a TrueType font in XML use the font attribute and assign a value equal to the concatenation of the TrueType collection path and the font name, separated by a question mark.</remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Fonts.Font.TrueType(System.IO.Stream,System.String)">
      <summary>
            Get a TrueType font from a TrueType collection stream. 
            </summary>
      <param name="stream">Stream containing TrueType collection font data.</param>
      <param name="fontName">Name (case-insensitive) of the TrueType font inside the collection.</param>
      <returns>The created font.</returns>
      <remarks>
            To specifiy a TrueType font in XML use the font attribute and assign a value equal to the concatenation 
            of the TrueType collection path and the font name, separated by a question mark.
            <para>The <paramref name="stream" /> may be closed when the constructor completes.
            It is the responsibility of the client to close the stream.</para>
            Note that this functionality is available in the Professional edition only.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Fonts.Font.GetTrueTypeFontNames(System.String)">
      <summary>
            Retrieve the names of all TrueType files inside a TrueType collection file.
            </summary>
      <param name="path">Relative, absolute or virtual path to TrueType collection (.TTC) file.</param>
      <returns>Array of TrueType font names. These names can be passed to the TrueType overload that creates a TrueType font from a TrueType collection file.</returns>
      <remarks>
            When this method is performed on a TTF file, an empty string array is returned.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.Path">
      <summary>
            The path of the TrueType file of this font. 
            </summary>
      <remarks>
            Note that this functionality is available in the Professional edition only.
            <para>When using TrueType collection fonts, you can specify the name of the font like this: <code>"c:\windows\fonts\myfont.ttf?MyFontBold"</code>
            Within a web application a relative path will be mapped relative to the web application root using MapPath.</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.Height">
      <summary>
            The height of this font at a font size of 1 pt. Multiply the height with the font size to
            get the height in points.
            </summary>
      <returns>Height of this font at 1 pt.</returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.Name">
      <summary>
            The name of the font.
            </summary>
      <remarks>
            Returns <see langword="null" /> is no name can be found.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.Helvetica">
      <summary>
            Get standard PDF font Helvetica.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.HelveticaBold">
      <summary>
            Get standard PDF font Helvetica bold.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.HelveticaOblique">
      <summary>
            Get standard PDF font Helvetica oblique.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.HelveticaBoldOblique">
      <summary>
            Get standard PDF font Helvetica bold oblique.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.Courier">
      <summary>
            Get standard PDF font Courier.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.CourierBold">
      <summary>
            Get standard PDF font Courier bold.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.CourierOblique">
      <summary>
            Get standard PDF font Courier oblique.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.CourierBoldOblique">
      <summary>
            Get standard PDF font Courier bold oblique.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.TimesRoman">
      <summary>
            Get standard PDF font TimesRoman.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.TimesBold">
      <summary>
            Get standard PDF font TimesRoman bold.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.TimesItalic">
      <summary>
            Get standard PDF font TimesRoman italic.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.TimesBoldItalic">
      <summary>
            Get standard PDF font TimesRoman bold italic.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.Symbol">
      <summary>
            Get standard PDF font Symbol.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Fonts.Font.ZapfDingbats">
      <summary>
            Get standard PDF font ZapfDingbats.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.InvalidXhtmlException">
      <summary>
            Thrown when invalid XHTML is encountered.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Border">
      <summary>
            Specifies the border for objects.
            </summary>
      <remarks>
            A border is a rectangle that can be applied to a table, 
            row and cell. The appearance of a border is defined by the four pens with which
            the left, right, top en bottom edges are drawn and the brush with which the
            background is filled. The size and position of a border is determined by the enclosed content.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Border.#ctor">
      <summary>
            Initialize a new instance of the Border class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Border.#ctor(TallComponents.PDF.Layout.Colors.Color,System.Double)">
      <summary>
            Initialize a new instance of the Border class with the given color and width.
            </summary>
      <remarks>
            Create a new border with given pen color and fractional width.
            </remarks>
      <param name="color">Color of pen.</param>
      <param name="width">Width of pen.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Border.#ctor(TallComponents.PDF.Layout.Brushes.Brush)">
      <summary>
            Initialize a new instance of the Border class with the given brush.
            </summary>
      <remarks>
            Create a new border with given background brush.
            </remarks>
      <param name="background">Background is painted with this brush.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Border.#ctor(TallComponents.PDF.Layout.Colors.Color,System.Double,TallComponents.PDF.Layout.Brushes.Brush)">
      <summary>
            Initialize a new instance of the Border class with the given color, width and brush.
            </summary>
      <remarks>
            Create a new border with given pen color and fractional width and background brush.
            </remarks>
      <param name="color">Color of pen.</param>
      <param name="width">Fractional width of pen.</param>
      <param name="background">Background is painted with this brush.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Border.#ctor(TallComponents.PDF.Layout.Pens.Pen,TallComponents.PDF.Layout.Brushes.Brush)">
      <summary>
            Initialize a new instance of the Border class with given pen and brush.
            </summary>
      <remarks>
            Create a new border with given pen and background brush.
            </remarks>
      <param name="pen">The pen that is used to draw the the edges. Must not be <see langword="null" />.</param>
      <param name="background">Background is painted with this brush.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Border.#ctor(TallComponents.PDF.Layout.Colors.Color,System.Double,TallComponents.PDF.Layout.Pens.DashPattern,TallComponents.PDF.Layout.Brushes.Brush)">
      <summary>
            Initialize a new instance of the Border class with given color, width, patern and brush.
            </summary>
      <remarks>
            Create a new border with given pen color, fractional width, pattern and background brush.
            </remarks>
      <param name="color">Color of pen.</param>
      <param name="width">Width of pen, must be a valid, non-negative number.</param>
      <param name="pattern">Pattern of pen.</param>
      <param name="background">Background is painted with this brush.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown when width is negative or invalid (NaN or Infinity).</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when color or pattern is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Border.CopyFrom(TallComponents.PDF.Layout.Border)">
      <summary>
            Copy the values for left, right, top and bottom and Background from another Border object.
            </summary>
      <param name="other">The object to copy values from.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Border.Clone">
      <summary>
            Clones a Bordered.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Border.Left">
      <summary>
            Get or set the pen that is used to draw the left edge.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Border.Right">
      <summary>
            Get or set the pen that is used to draw the right edge.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Border.Top">
      <summary>
            Get or set the pen that is used to draw the top edge.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Border.Bottom">
      <summary>
            Get or set the pen that is used to draw the bottom edge.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Border.Background">
      <summary>
            Get or set the brush that is used to fill the background.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Spacing">
      <summary>
            Spacing is used to define Margin and Padding.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Spacing.#ctor">
      <summary>
            Initializes a new instance of the Fragment class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Spacing.#ctor(System.Double)">
      <summary>
            Initializes a new empty instance of the Fragment class with the given spacing.
            </summary>
      <param name="val">The spacing in points to be assigned to all sides.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Spacing.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new empty instance of the Fragment class with the given spacing.
            </summary>
      <param name="top">The spacing in points to be assigned to the top.</param>
      <param name="left">The spacing in points to be assigned to the left.</param>
      <param name="right">The spacing in points to be assigned to the right.</param>
      <param name="bottom">The spacing in points to be assigned to the bottom.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Spacing.op_Implicit(System.Double)~TallComponents.PDF.Layout.Spacing">
      <summary>
            Set the Left, Right, Top and Bottom values to the same value.
            </summary>
      <param name="val">The value to assign.</param>
      <returns>A new Spacing instance.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Spacing.op_Implicit(TallComponents.PDF.Layout.Unit)~TallComponents.PDF.Layout.Spacing">
      <summary>
            Set the Left, Right, Top and Bottom values to the same value.
            </summary>
      <param name="val">The value to assign.</param>
      <returns>A new Spacing instance.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Spacing.Clone">
      <summary>
            Clones a Bordered.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Spacing.CopyFrom(TallComponents.PDF.Layout.Spacing)">
      <summary>
            Copy the values for left, right, top and bottom from another Spacing object.
            </summary>
      <remarks>Using this method is preferred above assigning the object.</remarks>
      <param name="other">The object to copy values from.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Spacing.Left">
      <summary>
            Spacing on the left side
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Spacing.Right">
      <summary>
            Spacing on the right side
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Spacing.Top">
      <summary>
            Spacing above.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Spacing.Bottom">
      <summary>
            Spacing below.
            </summary>
    </member>
    <member name="T:TallComponents.Licensing.LicenseAttribute">
      <summary>
            Base class for product specific license attributes that let you enter
            the redistribution license key as an attribute of the entry assembly.
            </summary>
      <remarks>
            Each product implements it's own specialized LicenseAttribute. Please review the license attribute
            for the component you are using for instructions on using LicensingAttributes.
            </remarks>
    </member>
    <member name="M:TallComponents.Licensing.LicenseAttribute.AddLicense(System.String,System.String)">
      <summary>
            Add a license programmatically.
            </summary>
      <param name="licenseKey">The type of license key.</param>
      <param name="licenseKeyValue">The license key value.</param>
    </member>
    <member name="P:TallComponents.Licensing.LicenseAttribute.Key">
      <summary>
            The type of license key.
            </summary>
    </member>
    <member name="P:TallComponents.Licensing.LicenseAttribute.Value">
      <summary>
            The license key value.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Metadata.MetadataSchema">
      <summary>
            Base class for Metadata schemas.
            </summary>
      <remarks>
            The XMP metadata can not be specified from XML.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchema.Add(System.String,System.String)">
      <summary>
            Add a simple value to the schema.
            </summary>
      <remarks>
            Currently only simple values are supported for XMP schemas. Collections such as Bag, Alt and Seq are not supported.
            <para>
            The XMP metadata can not be specified from XML.
            </para></remarks>
      <param name="name">The name of this value.</param>
      <param name="value">The value.</param>
      <exception cref="T:System.InvalidOperationException">Thrown when this <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema" /> has been removed from its <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection" /></exception>
      <exception cref="T:System.ArgumentException">Thrown when a value with the same name is already set.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchema.Clear">
      <summary>
            Clear all the values from this schema.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Metadata.MetadataSchema.Item(System.String)">
      <summary>
            Get or set data by name.
            </summary>
      <param name="name">The name of the value.</param>
      <returns>The <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataValue" /> associated with the given key, or <see langword="null" /> if not found.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown when this <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema" /> has been removed from its <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection" /></exception>
    </member>
    <member name="P:TallComponents.PDF.Layout.Metadata.MetadataSchema.Names">
      <summary>
            The names of all values in this metadata schema.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown when this <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema" /> has been removed from its <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection" /></exception>
    </member>
    <member name="P:TallComponents.PDF.Layout.Metadata.MetadataSchema.Prefix">
      <summary>
            The prefix associated to the namespace uri.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown when this <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema" /> has been removed from its <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection" /></exception>
    </member>
    <member name="P:TallComponents.PDF.Layout.Metadata.MetadataSchema.NamespaceUri">
      <summary>
            The namespace URI.
            </summary>
      <exception cref="T:System.InvalidOperationException">Thrown when this <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema" /> has been removed from its <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection" /></exception>
    </member>
    <member name="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection">
      <summary>
            The XMP Metadata Schema collection.
            </summary>
      <remarks>
            The XMP metadata can not be specified from XML.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.#ctor">
      <summary>
            Create a new <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection">MetadataSchemaCollection</see>.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.Add(System.String,System.String)">
      <summary>
            Create and add a new MetadataSchema to this collection.
            </summary>
      <param name="prefix">The prefix of the new schema.</param>
      <param name="namespaceUri">The namespace URI of the new schema.</param>
      <returns>The new schema.</returns>
      <remarks>
        <para>A schema must have a unique prefix.</para>
        <para>
            The XMP metadata can not be specified from XML.
            </para>
      </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.Contains(System.String)">
      <summary>
            Determine whether the <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema" /> with gicen prefix is in the <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection" />.
            </summary>
      <param name="prefix">The <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema" /> to look for.</param>
      <returns>True if the prefix is found in this <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection" />, false otherwise.</returns>
      <remarks>
            The <paramref name="prefix" /> does not accept <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="prefix" /> is <see langword="null" />.</exception>
      <example>
            C#
            <code> 
            Document doc = new Document();
            doc.Metadata.Create( "tc", "http://www.tallcomponents.com/xmp/schema/v1.0/" );
            bool found = doc.Metadata.<b>Contains</b>( "tc" ); //found = true
            found = doc.Metadata.<b>Contains</b>( "anotherPrefix" ); //found = false
            </code>
            VB.NET
            <code>
            Dim doc as Document = new Document()
            doc.Metadata.Create( "tc", "http://www.tallcomponents.com/xmp/schema/v1.0/" )
            Dim found as Boolean
            found = doc.Metadata.<b>Contains</b>( "tc" ) 'found = True
            found = doc.Metadata.<b>Contains</b>( "anotherPrefix" ) 'found = False
            </code></example>
    </member>
    <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.Remove(System.String)">
      <summary>
            Remove a <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema" /> from this <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection" />.
            </summary>
      <remarks>
            The schema is remove from the <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection" /> and all properties are cleared.
            The <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema" /> is no longer valid and can not be used anymore.
            </remarks>
      <param name="prefix">The prefix of the <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema" /> to remove.</param>
      <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="prefix" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.GetEnumerator">
      <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.
            </summary>
      <returns>Returns an enumerator that can iterate through the <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection" />.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.Clone">
      <summary>
            Clones a MetadataSchemaCollection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.Item(System.String)">
      <summary>
            Retrieve an <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema" /> by its prefix from the <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection" />. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection.Count">
      <summary>
            Get the number of <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema" />s actually contained in the <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchemaCollection" /></summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Metadata.MetadataString">
      <summary>
            A string value for a <see cref="T:TallComponents.PDF.Layout.Metadata.MetadataSchema">MetadataSchema</see>.
            </summary>
      <remarks>
            The XMP metadata can not be specified from XML.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Metadata.MetadataValue">
      <summary>
            Abstact base class for Metadata values
            </summary>
      <remarks>
            The XMP metadata can not be specified from XML.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Metadata.MetadataString.Value">
      <summary>
            Gets or sets the value for a XMP Metadata entry.
            </summary>
      <remarks>
            The XMP metadata can not be specified from XML.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.Fragment">
      <summary>
            The fragment class represents a piece of text.
            </summary>
      <remarks>
            The fragment is a part of a multiline text shape or a text paragraph. 
            All text of a fragment is typeset equally. 
            Fragments allow to contain pieces of text with different <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Font">font</see>, <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.TextColor">color</see> or 
            have a different decoration (bold, italic, underlined,...). 
            <para>
            A fragment may refer to a paragraph throug a <see cref="T:Actions.GoToAction" />. In this case the text may contain <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Text">fields</see> 
            that will be replaced by properties of the referenced paragraph.
            </para></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.#ctor">
      <summary>
            Initializes a new empty instance of the Fragment class.
            </summary>
      <remarks>
            Create a new empty fragment with default properties.
            The default font is Helvetica at 12pt.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.#ctor(System.String)">
      <summary>
            Initialize a new instance of the Fragment class with given content.
            </summary>
      <remarks>
            Create a new fragment with given text.
            The default font is Helvetica at 12pt.
            </remarks>
      <param name="text">Content.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.#ctor(System.String,TallComponents.PDF.Layout.Fonts.Font)">
      <summary>
            Initialize a new instance of the Fragment class with given content and font.
            </summary>
      <remarks>
            Create a fragment with given text and font.
            The default font size is 12pt.
            </remarks>
      <param name="text">Content.</param>
      <param name="font">Font.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.#ctor(System.String,System.Double)">
      <summary>
            Initialize a new instance of the Fragment class with given content and fontsize.
            </summary>
      <remarks>
            Create a fragment with given text and fractional font size.
            The default font is Helvetica.
            </remarks>
      <param name="text">Content.</param>
      <param name="fontSize">Font size.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.#ctor(System.String,TallComponents.PDF.Layout.Fonts.Font,System.Double)">
      <summary>
            Initialize a new instance of the Fragment class with given content, font and fontsize.
            </summary>
      <remarks>
            Create a fragment with given text, font and fractional font size.
            </remarks>
      <param name="text">Content.</param>
      <param name="font">Font.</param>
      <param name="fontSize">Font size.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Fragment.Clone">
      <summary>
            Clones a Fragment.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Text">
      <summary>
            The content of this fragment.
            </summary>
      <remarks>
        <para>By default all whitespace characters (tabs, spaces and newlines) will be removed. 
            To render pre-formatted text set <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.PreserveWhiteSpace">PreserveWhiteSpace</see> to true.
            </para>
        <para>
            Use <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.SuppressSpaceBefore">SuppressSpaceBefore</see> to prevent a space from being inserted before this fragment.
            </para>
        <para>
            Fragments may contain context fields. These fields will be resolved to values when <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.HasContextFields" /> is true. 
            </para>
            The following fields are related to page numbering:
            <list type="table"><listheader><term>Field</term><description>Description</description></listheader><item><term>#p</term><description>Current page number (starting at 1).</description></item><item><term>#P</term><description>Total number of pages in the document.</description></item><item><term>#Q</term><description>Total number of pages in this set. A page set starts when <see>Section.RestartPageNumber</see> is set.</description></item></list>
            The following fields are restricted to header and footer fragments:
            <list type="table"><listheader><term>Field</term><description>Description</description></listheader><item><term>#c&lt;i&gt;</term><description>&lt;i&gt; ranges from 0 to 9. The caption of the last i-level heading.</description></item><item><term>#l&lt;i&gt;</term><description>&lt;i&gt; ranges from 0 to 9. The label of the last heading at level i.</description></item><item><term>#&lt;i&gt;</term><description>&lt;i&gt; ranges from 0 to 9. The last heading number at level i (1, 2, etc.).</description></item><item><term>#a&lt;i&gt;</term><description>&lt;i&gt; ranges from 0 to 9. The last heading number at level i (1, 2, etc.). Formatted alphabetically, lowercase.</description></item><item><term>#A&lt;i&gt;</term><description>&lt;i&gt; ranges from 0 to 9. The last heading number at level i (1, 2, etc.). Formatted alphabetically, uppercase.</description></item><item><term>#i&lt;i&gt;</term><description>&lt;i&gt; ranges from 0 to 9. The last heading number at level i (1, 2, etc.). Formatted as roman numerals, lowercase.</description></item><item><term>#I&lt;i&gt;</term><description>&lt;i&gt; ranges from 0 to 9. The last heading number at level i (1, 2, etc.). Formatted as roman numerals, uppercase.</description></item></list></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Bold">
      <summary>
            Get or set if the text appears bold. 
            </summary>
      <remarks>Note that the boldness is simulated by using a thicker stroke.
            It is preferrable to use a bold font if possible. E.g. use arialbd.ttf for bold Arial and arial.ttf for
            regular Arial. This property is ignored if applied to a Bold font.
            <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Italic" /></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Italic">
      <summary>
            Get or set if the text appears italic. 
            </summary>
      <remarks>
            Note that the italicness is simulated by skewing the text slightly.
            It is preferrable to use an italic font if possible. E.g. use ariali.ttf for italic Arial and arial.ttf for
            regular Arial. This property is ignored if applied to an Italic font.
            <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Bold" /></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.ReadDirection">
      <summary>
            Get or set the direction of the text fragment.
            </summary>
      <remarks>
            If the read direction is set to "InheritFromParagraph" the read direction of the 
            paragraph is used. The default value of the read direction is "InheritFromParent"
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.KeepWithNext">
      <summary>
            Get or set if the next fragment is started on the same line as this fragment.
            </summary>
      <remarks>
            Make sure this fragment always appears on the same line as the 
            next fragment.
            A fragment that has keep with next set will not break across lines.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.FontSize">
      <summary>
            Font size in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Font">
      <summary>
            The font for this fragment. You can use one of the 14 standard PDF fonts or a TrueType font.
            Note that the TrueType functionality is available in the Professional edition only.
            </summary>
      <example>
            C#
            <code>
              myFragment.Font = Font.Helvetica;
            </code>
            XML
            <code>
              &lt;paragraph type="textparagraph" &gt;
                 &lt;fragment font="helvetica" fontsize="10"&gt;
                    This text is in 10pt Helvetica
                 &lt;/fragment&gt;
              &lt;/paragraph&gt;
            </code></example>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.PreserveWhiteSpace">
      <summary>
            Preserve spaces, tabs (\t), carriage returns (\r) and line feeds (\n). 
            Set this property to true to include preformatted text like code fragments.
            </summary>
      <remarks>
        <para>
            Fragments that have PreserveWhiteSpace set to true cannot be Justified because justification 
            modifies the whitespace between words.
            </para>
        <para>
            Use <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.TabSize">TabSize</see> to set the width of tabs in spaces.
            </para>
      </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.TabSize">
      <summary>
            If PreserveWhiteSpace is true, each tab character (\t) is replaced by 
            TabSize number of spaces. Default is 3.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.HasContextFields">
      <summary>
            If set the text property is scanned for
            fields and these are substituted during PDF generation. 
            If <see cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Reference">Reference</see> is not <see langword="null" />, this property is ignored.
            </summary>
      <remarks>
            Context fields are not supported on fragments within a MultilineTextShape.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.SuppressSpaceBefore">
      <summary>
            Suppress the insertion of an extra space between two successive fragments.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.StrikeOut">
      <summary>
            Get or set if the fragment is rendered striked out.
            </summary>
      <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.DoubleUnderline" />
      <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Underline" />
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Underline">
      <summary>
            Get or set if the fragment is rendered with an underline.
            </summary>
      <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.DoubleUnderline" />
      <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.StrikeOut" />
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.DoubleUnderline">
      <summary>
            Get or set if the fragment is rendered with a double underline.
            </summary>
      <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Underline" />
      <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.StrikeOut" />
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Outline">
      <summary>
            Get or set if the fragment is rendered as an outline.
            </summary>
      <remarks>
            If the outline is set the characters will only draw the outline edges and
            the area will not be filled.</remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Note">
      <summary>
            Get or set the note to be inserted.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.TextColor">
      <summary>
            Get or set the color of the text and decoration.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Superscript">
      <summary>
            Get or set if the fragment is rendered as superscript.
            </summary>
      <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Subscript" />
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Subscript">
      <summary>
            Get or set if the fragment is rendered as subscript.
            </summary>
      <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Superscript" />
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.Actions">
      <summary>
            The actions that the PDF reader will execute when this link is clicked.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Fragment.ShowLinkBorder">
      <summary>
            If true a black 1pt outline is drawn around the clickable area of the link.
            </summary>
      <remarks>Default value is false.</remarks>
      <example>
            XML
            <code>
              &lt;paragraph type="textparagraph"&gt;
                 &lt;fragment textcolor="blue" showlinkborder="true"&gt;
                    &lt;action type="uriaction" uri="http://www.tallcomponents.com"/ &gt;
                    Visit TallComponents online.
                 &lt;/fragment&gt;
              &lt;/paragraph&gt;
            </code></example>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.FragmentCollection">
      <summary>
            Collection of fragment objects.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.#ctor">
      <summary>
            Create a new empty collection of fragments.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Add">
      <summary>
            Add a fragment to this collection.
            </summary>
      <remarks>
            Creates a new fragment, adds it to the collection and returns the created fragment.
            </remarks>
      <returns>New fragment.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Add(TallComponents.PDF.Layout.Paragraphs.Fragment)">
      <summary>
            Add an existing fragment to this collection.
            </summary>
      <param name="fragment">Add this fragment.</param>
      <exception cref="T:System.ArgumentNullException">A given <paramref name="action" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.FragmentCollection)">
      <summary>
            Adds the elements of a FragmentCollection to the end of this collection.
            </summary>
      <param name="fragments">The FragmentCollection whose elements should be added to 
            the end of the collection.
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para></param>
      <exception cref="T:System.ArgumentNullException">The given FragmentCollection is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.Fragment[])">
      <summary>
            Adds the elements of an array of fragments to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="fragments">The array of fragments whose elements should be added to 
            the end of the collection.</param>
      <exception cref="T:System.ArgumentNullException">The given array is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Clear">
      <summary>
            Removes all fragments from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Contains(TallComponents.PDF.Layout.Paragraphs.Fragment)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment">Fragment</see> is in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.FragmentCollection">FragmentCollection</see>.
            </summary>
      <param name="fragment">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment" /> is found in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.FragmentCollection" />, false otherwise.</returns>
      <remarks>
            The <paramref name="fragment" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="fragment" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.IndexOf(TallComponents.PDF.Layout.Paragraphs.Fragment)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment">Fragment</see> in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.FragmentCollection">FragmentCollection</see>.
            </summary>
      <param name="fragment">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment" /> to locate in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.FragmentCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Insert(System.Int32,TallComponents.PDF.Layout.Paragraphs.Fragment)">
      <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment" /> on a specific place in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.FragmentCollection" />.
            </summary>
      <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment" /> should be inserted.</param>
      <param name="fragment">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment" /> to be insert.</param>
      <remarks>
            The <paramref name="fragment" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="fragment" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Remove(TallComponents.PDF.Layout.Paragraphs.Fragment)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment">Fragment</see> from this <see cref="T:TallComponents.PDF.Layout.Paragraphs.FragmentCollection">FragmentCollection</see>.
            </summary>
      <param name="fragment">The fragment to remove.</param>
      <remarks>
            The <paramref name="fragment" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="fragment" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment">Fragment</see> from the <see cref="T:TallComponents.PDF.Layout.Paragraphs.FragmentCollection">FragmentCollection</see> at the specified index.
            </summary>
      <param name="index">The zero-based index from the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment" /> to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.GetEnumerator">
      <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator">GetEnumerator</see>.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Clone">
      <summary>
            Clones a FragmentCollection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Count">
      <summary>
            Number of fragment objects in this collecion.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.Item(System.Int32)">
      <summary>
            0-based indexer that returns the fragments at the specified position. 
            Returns <see langword="null" /> if index is invalid.
            </summary>
    </member>
    <member name="E:TallComponents.PDF.Layout.Paragraphs.FragmentCollection.LineBreak">
      <summary>
            Will be fired when a word has to be broken.
            </summary>
      <remarks>Events have to be set (forwarded) in the owning object (TextParagraph, ML-TextShape)</remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.LineBreakEventArgs">
      <summary>
            Class containing data for LineBreak events.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.LineBreakEventArgs.Word">
      <summary>
            Get the word that has to be broken into part.
            </summary>
      <remarks>The remainder part will be placed on the next line.</remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.LineBreakEventArgs.BreakAt">
      <summary>
            The 0-based position at which the word will be broken into parts.
            </summary>
      <remarks>
            By default this value will be set the the default behavior.
            <para>Example: BreakAt=4 on 'WordBreak' results in 'Word'-'Break'.</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.LineBreakEventArgs.BreakBefore">
      <summary>
            The position before which the word has to be broken.
            </summary>
      <remarks>
        <para>The value returned will depend if a hyphen has to be inserted.</para>
        <para>The BreakAt must be set before or at this value.</para>
      </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.LineBreakEventArgs.InsertHyphen">
      <summary>
            Get or set if a hyphen has to be inserted.
            </summary>
      <remarks>If the current breaking position has become invalid, it will be re-positioned 
            to the initial position.</remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.LineBreakEventArgs.HyphenChar">
      <summary>
            Get or set the character to insert on the breaking position.
            </summary>
      <remarks>The hyphen will only be inserted if <seealso cref="P:TallComponents.PDF.Layout.Paragraphs.LineBreakEventArgs.InsertHyphen" /> has been set to true.</remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.LineBreakEventHandler">
      <summary>
            Represents the method that handles LineBreak events.
            </summary>
      <param name="sender">The fragment the word has to be broken for.</param>
      <param name="args">The LineBreak event arguments.</param>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.LineBreakFragment">
      <summary>
            Insert this fragment to force a line break.
            </summary>
      <remarks>
            Any text added to this fragment is ignored.
            </remarks>
      <example>
            XML
            <code>
            &lt;paragraph type="TextParagraph"&gt;
              &lt;fragment&gt;First Line&lt;/fragment&gt;
              &lt;fragment type="LineBreakFragment" /&gt;
              &lt;fragment&gt;Second Line&lt;/fragment&gt;
            &lt;/paragraph&gt;
            </code></example>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.LineBreakFragment.#ctor">
      <summary>
            Create a new line break fragment.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.TabStop">
      <summary>
            A tab stop defines a point at which text continues after a tab character.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TabStop.#ctor">
      <summary>
            Create a new tab stop. Position is 0.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TabStop.#ctor(System.Double)">
      <summary>
            Create a new tab stop.
            </summary>
      <param name="position">The position of this tab stop.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.TabStop.Position">
      <summary>
            The position of this tab stop measured from the left edge in points.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.TabStopCollection">
      <summary>
            Collection of tab stops.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TabStopCollection.Add(TallComponents.PDF.Layout.Paragraphs.TabStop)">
      <summary>
            Add a new tab stop.
            </summary>
      <param name="tabStop">Add this tab stop.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TabStopCollection.Add(System.Double)">
      <summary>
            Add a new tab stop.
            </summary>
      <param name="position">Position of new tab stop.</param>
      <returns>New tab stop.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TabStopCollection.Clear">
      <summary>
            Clear this collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.TabStopCollection.Count">
      <summary>
            Number of tab stops.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.TabStopCollection.Item(System.Int32)">
      <summary>
            Get a tabstop by 0-based index.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Navigation.PageLayout">
      <summary>
            The page layout of the document in the PDF viewer.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.PageLayout.SinglePage">
      <summary>
            Display one page at a time.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.PageLayout.OneColumn">
      <summary>
            Display pages in one column.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.PageLayout.TwoColumnLeft">
      <summary>
            Display pages in 2 columns; odd page left.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.PageLayout.TwoColumnRight">
      <summary>
            Display pages in 2 column; odd page right.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Navigation.PageMode">
      <summary>
            The page mode of the document in the PDF viewer.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.PageMode.None">
      <summary>
            Display none.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.PageMode.Outlines">
      <summary>
            Display outlines.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.PageMode.Thumbnails">
      <summary>
            Display thumbnails.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.PageMode.FullScreen">
      <summary>
            Display document fullscreen.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Navigation.ViewerPreferences">
      <summary>
            Settings used to control the way the document is displayed in a PDF viewer.
            </summary>
      <remarks>
            If no viewer preferences are set, the user defaults will be used.
            <para>You can override the user defaults for a document by assigning a new instance
            of this class to the <see cref="P:TallComponents.PDF.Layout.Document.ViewerPreferences" /> property.</para></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Navigation.ViewerPreferences.#ctor">
      <summary>
            Creates a new ViewerPreferences object.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Navigation.ViewerPreferences.Clone">
      <summary>
            Clones a ViewerPreferences.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.HideToolbar">
      <summary>
            Hide toolbar.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.HideMenubar">
      <summary>
            Hide menubar.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.HideWindowUI">
      <summary>
            Hides everything except the document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.FitWindow">
      <summary>
            Fits the first page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.CenterWindow">
      <summary>
            Centers document window.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.DisplayDocTitle">
      <summary>
            Displays the document title in the caption bar.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.PageMode">
      <summary>
            Display none, outlines or thumbnails.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.PageLayout">
      <summary>
            How to display pages.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.ZoomFactor">
      <summary>
            The default zoom factor for this document (1 corresponds to 100%).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.ViewerPreferences.ReadDirection">
      <summary>
            The predominant reading order for thext in the document.
            </summary>
      <remarks>
            Default is LeftToRight.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Pens.DashPattern">
      <summary>
            A pattern for a pen (e.g. solid, dotted, dashed, etc.). 
            </summary>
      <remarks>
            A DashPattern is an array of numbers that specify alternating lengths of ink 
            followed by no-ink. The array is applied repeatedly to draw the full length of 
            the path to which the pattern is applied. 
            </remarks>
      <example>
            This sample demonstrates how to declare a DashPattern in XML
            <code>
              &lt;document&gt;
                 &lt;section&gt;
                    &lt;paragraph type="drawing" width="200" height="200"&gt;	
                       &lt;shape type="lineshape" x="0" y="0" x1="200" y1="200"&gt;
                          &lt;pen width="1" color="red"&gt;
                             &lt;pattern phase="2"&gt;1, 1, 5, 5, 20&lt;/pattern&gt;
                          &lt;/pen&gt;
                       &lt;/shape&gt;
                    &lt;/paragraph&gt;
                 &lt;/section&gt;
              &lt;/document&gt;
            </code></example>
    </member>
    <member name="M:TallComponents.PDF.Layout.Pens.DashPattern.#ctor(System.Int32,System.Double[])">
      <summary>
            Create a custom pattern with given phase and pattern.
            </summary>
      <param name="phase">The start phase.</param>
      <param name="pattern">The pattern of widths.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Pens.DashPattern.Read(System.Xml.XmlReader)">
      <summary>
            Reads a dash pattern from XML.
            </summary>
      <param name="reader">The reader to read from.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Pens.DashPattern.Parse(System.String)">
      <summary>
            Create a new DashPattern from a string description of alternating ink lengths..
            </summary>
      <remarks>
        <para>This method is provided to enable <see cref="T:TallComponents.PDF.Layout.Pens.DashPattern" />s to be specified in XML.</para>
        <para>The string must be formatted as a list of comma separated positive integers. 
            Each value is a length of alternating ink or whitespace.</para>
        <para>The phase defaults to 0.</para>
      </remarks>
      <param name="pattern">A comma separated list of positive integers.</param>
      <returns>A new dash pattern.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Pens.DashPattern.Equals(System.Object)">
      <summary>
            Compare two DashPatterns.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Pens.DashPattern.Clone">
      <summary>
            Clones a DashPattern.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Pens.DashPattern.GetHashCode">
      <summary>
            Returns base.GetHashCode().
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.Pens.DashPattern.Solid">
      <summary>
            A solid pattern.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Pens.DashPattern.Dashes">
      <summary>
            The pattern of dashes. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Pens.DashPattern.Phase">
      <summary>
            The phase of the pattern. 
            </summary>
      <remarks>
            The phase determines the index within the pattern at which the line starts drawing.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Pens.LineCapStyle">
      <summary>
            Different styles for line caps (end-points).
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Pens.LineCapStyle.Butt">
      <summary>
            Flat end. Ends exactly at end point.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Pens.LineCapStyle.Round">
      <summary>
            Rounded end. Center lies exactly at end point.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Pens.LineCapStyle.ProjectingSquare">
      <summary>
            Flat end. The end is drawn half the width of the pen beyond the end point.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Pens.LineJoinStyle">
      <summary>
            Different styles for line joints.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Pens.LineJoinStyle.Miter">
      <summary>
            The outer edges of the joining segments are extended until they meet.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Pens.LineJoinStyle.Round">
      <summary>
            A circle is drawn around the point where the centers of the segments meet.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Pens.LineJoinStyle.Bevel">
      <summary>
            The two segments are finished with butt caps.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Pens.Pen">
      <summary>
            A pen defines the characteristics of a line such as
            color and pattern (solid, dashed, etc.).
            </summary>
      <remarks>
            Lines, curves and borders are drawn using a pen. A pen defines how line ends are
            connected (<see cref="P:TallComponents.PDF.Layout.Pens.Pen.JoinStyle" />) and how open ends are drawn (<see cref="P:TallComponents.PDF.Layout.Pens.Pen.CapStyle" />).
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Pens.Pen.#ctor">
      <summary>
            Create a solid black pen that has a width of 1 user space unit. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Pens.Pen.#ctor(TallComponents.PDF.Layout.Colors.Color)">
      <summary>
            Create a solid pen with given color that has a width of 1 user space unit.
            </summary>
      <param name="color">Color of this pen.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Pens.Pen.#ctor(TallComponents.PDF.Layout.Colors.Color,System.Double)">
      <summary>
            Create a solid pen with given color and fractional width.
            </summary>
      <param name="color">Color of this pen.</param>
      <param name="width">Width of this pen.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Pens.Pen.#ctor(TallComponents.PDF.Layout.Colors.Color,System.Double,TallComponents.PDF.Layout.Pens.DashPattern)">
      <summary>
            Create a solid pen with given color, fractional width and <see cref="T:TallComponents.PDF.Layout.Pens.DashPattern">pattern</see>.
            </summary>
      <param name="color">Color of this pen.</param>
      <param name="width">Width of this pen.</param>
      <param name="pattern">Pattern of this pen.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Pens.Pen.Equals(System.Object)">
      <summary>
            Compare two Pens.
            </summary>
      <param name="obj">
      </param>
      <returns>True if the pens are equal.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Pens.Pen.Clone">
      <summary>
            Clones a Pen.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Pens.Pen.GetHashCode">
      <summary>
            Returns base.GetHashCode().
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.Pens.Pen.Width">
      <summary>
            Width of this pen.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when trying to assign a negative or invalid number (e.g. NaN or Infinity).
            </exception>
    </member>
    <member name="P:TallComponents.PDF.Layout.Pens.Pen.Color">
      <summary>
            Color of this pen.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Pens.Pen.Pattern">
      <summary>
            Pattern of this pen.
            </summary>
      <remarks>
            The pattern is an array of integers that specify alternating lengths of ink followed by no-ink. 
            Please see <see cref="T:TallComponents.PDF.Layout.Pens.DashPattern" /> for more information.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Pens.Pen.CapStyle">
      <summary>
            How caps (end-points) are drawn.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Pens.Pen.JoinStyle">
      <summary>
            How joints are drawn.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Security.PasswordSecurity">
      <summary>
            This class encapsulates all security settings of a PDF document.
            You secure a document by assigning a new instance of this class to the 
            Security property of the Document class.
            This class is only available in TallPDF.NET Professional.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Security.Security">
      <summary>
            This class encapsulates all security settings of a PDF document.
            You secure a document by assigning a new instance of this class to the 
            Security property of the Document class.
            This class is only available in TallPDF.NET Professional.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Security.Security.#ctor">
      <summary>
            Creates a new Security object.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Security.Security.Clone">
      <summary>
            Clones a Security.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Security.Security.Print">
      <summary>
            Allow printing.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Security.Security.Change">
      <summary>
            Allow changing the document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Security.Security.CopyExtract">
      <summary>
            Allow content copying or extraction.
            </summary>
      <remarks>
            When CopyExtract is false content can be selected but cannot be copied to the clipboard. 
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Security.Security.AuthorCommentsFormFields">
      <summary>
            Allow authoring comments and form fields.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Security.Security.FormFillSign">
      <summary>
            Allow form field fill-in or signing.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Security.Security.ExtractAccessibilityContents">
      <summary>
            Enable content accessibility.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Security.Security.Assembly">
      <summary>
            Allow document assemble (insert, rotate, or delete pages and bookmarks or thumbnail images).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Security.Security.PrintHighQuality">
      <summary>
            Allow printing at high quality.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Security.PasswordSecurity.#ctor">
      <summary>
            Creates a new password security object.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Security.PasswordSecurity.UserPassword">
      <summary>
            User password. You may set this string to "" to allow viewing by anyone but to 
            restrict privileges such as printing.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Security.PasswordSecurity.OwnerPassword">
      <summary>
            Owner password. The owner has all privilages, including changing the user password.
            </summary>
      <remarks>
            The owner password is required. Setting this to "" (an empty string) is valid but 
            will allow anybody to change the security settings on the document.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Security.PasswordSecurity.Strong">
      <summary>
            Use strong (128-bit key) encryption. Otherwise weak (40-bit key) encryption is used.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Annotations.LinkShape">
      <summary>
            Used to add a clickable area to a page.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Shape">
      <summary>
            Base class for all vector and bitmap graphics objects.
            </summary>
      <remarks>
            Shape derived objects are used to draw vector graphics and bitmaps onto a canvas.
            The most common canvas is the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Drawing" /> paragraph.
            <para>Shapes can be nested using the <see cref="T:TallComponents.PDF.Layout.Shapes.ShapeCollection" />.</para></remarks>
      <seealso cref="T:TallComponents.PDF.Layout.Shapes.PathShape" />
      <seealso cref="N:TallComponents.PDF.Layout.Shapes" />
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Shape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Shape.Dock">
      <summary>
            How this shape is docked.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Shape.X">
      <summary>
            X-position of the lower-left corner, center or start point (depending on shape type).
            </summary>
      <remarks>
            For MultilineTextShape (and derived) it is the top-left corner.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Shape.Y">
      <summary>
            Y-position of the lower-left corner, center or start point (depending on shape type).
            </summary>
      <remarks>
            For MultilineTextShape (and derived) it is the top-left corner.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Shape.LeftMargin">
      <summary>
            Extra space to the left of this shape (only useful in combination with docking).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Shape.RightMargin">
      <summary>
            Extra space to the right of this shape (only useful in combination with docking).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Shape.TopMargin">
      <summary>
            Extra space above this shape (only useful in combination with docking).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Shape.BottomMargin">
      <summary>
            Extra space below this shape (only useful in combination with docking).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Shape.ID">
      <summary>
            This Identifier (ID) can be used to track which shape raise an exception.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Shape.Opacity">
      <summary>
            The opacity (0...255) which must be used for this shape. Default is 255 (fully opaque).
            </summary>
      <remarks>
            0 means not visible (100% transparent), 255 means 100% visible (no transparancy).
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Annotations.LinkShape.#ctor">
      <summary>
            Create a new LinkShape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Annotations.LinkShape.#ctor(System.Double,System.Double)">
      <summary>
            Create a new LinkShape with given extent.
            </summary>
      <param name="width">The width of this shape.</param>
      <param name="height">The height of this shape.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Annotations.LinkShape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.LinkShape.Width">
      <summary>
            Width of this shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.LinkShape.Height">
      <summary>
            Height of this shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.LinkShape.MouseUpActions">
      <summary>
            The actions to be performed when this link is clicked.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.Note">
      <summary>
            Used to add a note to a paragraph/fragment.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Note.#ctor">
      <summary>
            Create a new sticky note.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Note.#ctor(System.String)">
      <summary>
            Create a new sticky note.
            </summary>
      <param name="text">The text for this sticky note.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Note.#ctor(System.String,System.String)">
      <summary>
            Create a new sticky note.
            </summary>
      <param name="subject">The subject for this sticky note.</param>
      <param name="text">The text for this sticky note.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Note.Text">
      <summary>
            The text displayed in the sticky note.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Note.Subject">
      <summary>
            The subject displayed in the sticky note.
            </summary>
      <remarks>Default 'Note'</remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Note.Icon">
      <summary>
            The icon used to display this sticky note.
            </summary>
      <remarks>
            Default = comment.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Note.Open">
      <summary>
            The sticky note should be initially be displayed open (or closed).
            </summary>
      <remarks>
            Default = true (open).
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon">
      <summary>
            Used to add a sticky note to a document.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Checkmark">
      <summary>
            The sticky note is displayed as checkmark.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Circle">
      <summary>
            The sticky note is displayed as circle.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Comment">
      <summary>
            The sticky note is displayed as comment.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Cross">
      <summary>
            The sticky note is displayed as cross.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Help">
      <summary>
            The sticky note is displayed as help.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Insert">
      <summary>
            The sticky note is displayed as insert text.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Key">
      <summary>
            The sticky note is displayed as key.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.NewParagraph">
      <summary>
            The sticky note is displayed as new paragraph.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Note">
      <summary>
            The sticky note is displayed as text note.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Annotations.NoteIcon.Paragraph">
      <summary>
            The sticky note is displayed as paragraph.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape">
      <summary>
            Used to add a sticky note to a document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.#ctor">
      <summary>
            Create a new sticky note shape area.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.#ctor(TallComponents.PDF.Layout.Paragraphs.Note)">
      <summary>
            Create a new sticky note shape area with given extent.
            </summary>
      <param name="note">The text for this sticky note.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
      <summary>
            Create a new sticky note shape area with given extent.
            </summary>
      <param name="xPointer">The X position this sticky note should point to.</param>
      <param name="yPointer">The Y position this sticky note should point to.</param>
      <param name="noteX">The X position where the sticky note should appear.</param>
      <param name="noteY">The Y position where the sticky note should appear.</param>
      <param name="noteWidth">The width for this sticky note.</param>
      <param name="noteHeight">The height for this sticky note.</param>
      <param name="text">The text for this sticky note.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.NoteX">
      <summary>
            The X coordinate the note is placed.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.NoteY">
      <summary>
            The Y coordinate the note is placed.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.NoteWidth">
      <summary>
            Width of this sticky note area.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.NoteHeight">
      <summary>
            Height of this sticky note area.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.Text">
      <summary>
            The text displayed in the sticky note.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.Author">
      <summary>
            The author displayed in the sticky note.
            </summary>
      <remarks>
            Default <see langword="null" />, which means no author.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.Subject">
      <summary>
            The subject displayed in the sticky note.
            </summary>
      <remarks>Default 'Note'</remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.Color">
      <summary>
            The color for this sticky note.
            </summary>
      <remarks>
            Default is <see langword="null" />, wich means the default color. 
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.Icon">
      <summary>
            The icon used to display this sticky note.
            </summary>
      <remarks>
            Default = comment.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Annotations.NoteShape.Open">
      <summary>
            The sticky note should be initially be displayed open (or closed).
            </summary>
      <remarks>
            Default = true (open).
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape">
      <summary>
            Abstract base class of all barcode shapes.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.ContentShape">
      <summary>
            Base type for all non-field and non-annotation shapes.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ContentShape.Rotation">
      <summary>
            Amount of rotation in degrees around the origin of the shape, clockwise.
            </summary>
      <remarks>
            FieldShapes can be rotated 0, 90, 180 or 270 degrees only. 
            Applying an other rotation to field shapes may lead to unexpected results.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ContentShape.RotationOffsetX">
      <summary>
            Get or set the X-component of the offset to rotation center, relative to the origin of the shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ContentShape.RotationOffsetY">
      <summary>
            Get or set the Y-component of the offset to rotation center, relative to the origin of the shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.Read(System.Xml.XmlReader)">
      <summary>
            Read this object from an XmlReader.
            </summary>
      <param name="reader">The XmlReader to read from.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.Data">
      <summary>
            The data that is represented by this barcode.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.Display">
      <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.DataLength">
      <summary>
            Maximum length of data. Default: 12.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.Location">
      <summary>
            If, and how the textual respresentation of the data is displayed. Default: None.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.UseQuiteZone">
      <summary>
            Add a quite zone to the left and to the right of the barcode. Default: false.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.Width">
      <summary>
            The actual width of the barcode. If set to 0 (default), the minimum width will be used.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.Height">
      <summary>
            The actual height of the barcode. If set to 0 (default), the minimum height will be used.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.MinimumHeight">
      <summary>
            The recommended minimum height (in points) of the barcode given the current settings.
            It is possible to set the height smaller than the minimum height but then the content
            will be clipped.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.MinimumWidth">
      <summary>
            The recommended minimum width (in points) of the barcode given the current settings.
            It is possible to set the width smaller than the minimum width but then the content
            will be clipped.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.BarcodeShape.XDimension">
      <summary>
            The x-dimension (narrowest element of a bar code symbol) in mils.
            1 mil = 0.001 inch. E.g. A 7.5 mil x-dimension means that the most narrow
            bar code element measures 0.0075 inches. Default: 13.5.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape">
      <summary>
            Barcode 128 shape.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.OneDimensionalBarcodeShape">
      <summary>
            Base Shape for all 1D barcodes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape.#ctor">
      <summary>
            Create a new Code 128 barcode.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape.#ctor(System.String)">
      <summary>
            Create a new Code 128 barcode.
            </summary>
      <param name="data">The Data. This should not include the start and end codes '*'.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape.Display">
      <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape.QuiteZone">
      <summary>
            The effective width of the quite zone in points. The quite zone is the empty space at 
            both the left and right side of the bar code. Property Width includes the quite zone.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape.CharacterSet">
      <summary>
            The character set this Code 128 barcode will use. (default=B)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape.MinimumWidth">
      <summary>
            The effective width (in points) of the barcode given the current settings.
            Includes the quite zone.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code128BarcodeShape.MinimumHeight">
      <summary>
            The effective height (in points) of the barcode given the current settings.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.Code128CharacterSet">
      <summary>
            The used character set in the code128 barcode.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.Code128CharacterSet.A">
      <summary>
            Use Code 128 - Set A
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.Code128CharacterSet.B">
      <summary>
            Use Code 128 - Set B
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.Code128CharacterSet.C">
      <summary>
            Use Code 128 - Set C
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape">
      <summary>
            Shape for the Interleaved 2 of 5 barcode.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.#ctor">
      <summary>
            Create a new Code 2 of 5 Interleaved bar code.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.#ctor(System.String)">
      <summary>
            Create a new Code 2 of 5 Interleaved bar code.
            </summary>
      <param name="data">The Data. This should not include the start and end codes '*'.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.Display">
      <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.QuiteZone">
      <summary>
            The effective width of the quite zone in points. The quite zone is the empty space at 
            both the left and right side of the bar code. Property Width includes the quite zone.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.Checksum">
      <summary>
            If set, a checksum is appended to the barcode. Default: false.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.MinimumWidth">
      <summary>
            The effective width (in points) of the barcode given the current settings.
            Includes the quite zone.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.MinimumHeight">
      <summary>
            The effective height (in points) of the barcode given the current settings.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.WideNarrowRatio">
      <summary>
            The ration of wide bars/spaces and narrow bars/spaces.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape">
      <summary>
            Barcode 39 (or 3 of 9) shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.#ctor">
      <summary>
            Create a new Code 39 (3 of 9) barcode.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.#ctor(System.String)">
      <summary>
            Create a new Code 39 (3 of 9) barcode.
            </summary>
      <param name="data">The Data. This should not include the start and end codes '*'.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.Display">
      <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.QuiteZone">
      <summary>
            The effective width of the quite zone in points. The quite zone is the empty space at 
            both the left and right side of the bar code. Property Width includes the quite zone.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.Checksum">
      <summary>
            If set, a checksum is appended to the barcode. Default: false.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.MinimumWidth">
      <summary>
            The effective width (in points) of the barcode given the current settings.
            Includes the quite zone.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.MinimumHeight">
      <summary>
            The effective height (in points) of the barcode given the current settings.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Barcodes.Code3of9BarcodeShape.WideNarrowRatio">
      <summary>
            The ration of wide bars/spaces and narrow bars/spaces.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Barcodes.TextLocation">
      <summary>
            The used text location
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.TextLocation.None">
      <summary>
            No text will be displayed
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.TextLocation.Below">
      <summary>
            Below the barcode
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.TextLocation.Above">
      <summary>
            Above the barcode
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.TextLocation.AboveEmbedded">
      <summary>
            In the top region of the barcode
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Barcodes.TextLocation.BelowEmbedded">
      <summary>
            In the botton region of the barcode
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape">
      <summary>
            Used to add a checkbox form field area to a layer.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Fields.FieldShape">
      <summary>
            Used to add a form field area to a layer.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.Width">
      <summary>
            Width of this form field area.
            </summary>
      <remarks>
            Default = 100.
            <para>Checkbox and Radiobutton have a default = 10.</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.Height">
      <summary>
            Height of this form field area.
            </summary>
      <remarks>
            Default = 10.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.FullName">
      <summary>
            Fully qualified name of this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.Tooltip">
      <summary>
            The name of the field as used in the user interface. 
            </summary>
      <remarks>
            May be <see langword="null" />.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.MappingName">
      <summary>
            Used when exporting data from the document.
            </summary>
      <remarks> 
            May be <see langword="null" /></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.Font">
      <summary>
            Returns the font of this form field.
            </summary>
      <remarks>Default Courier will be used.</remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.FontSize">
      <summary>
            Returns the size of the font of this form field.
            </summary>
      <remarks>
            A zero fontsize means that the text is auto-sized. (default 0)
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.TextColor">
      <summary>
            The color of the text in this form field.
            </summary>
      <remarks>
            Default is black.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.BorderColor">
      <summary>
            The color of the border of this form field.
            </summary>
      <remarks>
            The default border color is black. 
            <para>For the SignatureFieldShape the default border color is <see langword="null" /> (transparent).</para><para>This color doesn't have any meaning if the border width is zero.</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.BorderWidth">
      <summary>
            The width in points of the border of this form field.
            </summary>
      <remarks>
            Default = 1.
            <para>Set to zero if you doesn't want a border</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.BackgroundColor">
      <summary>
             The background color of this form field.
             </summary>
      <remarks>Default backgroundcolor = white.
             <para>For the PushButtonFieldShape the default background color is light gray.</para><para>For the SignatureFieldShape the default background color is <see langword="null" /> (transparent).</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.BorderStyle">
      <summary>
            The border style of this form field.
            </summary>
      <remarks>
            The default borderstyle is solid.
            <para>For the pushbutton the default borderstyle = Beveled.</para><para>For the radiobutton the default borderstyle = inset.</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.Orientation">
      <summary>
            Orientation of field in degrees (counter-clockwise).
            </summary>
      <remarks>
        <para> Default is Rotate0.</para>
        <para>Shape.Rotation is not respected for any field shape.</para>
      </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.HorizontalAlignment">
      <summary>
            Justification to be used in displaying the text
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.ReadOnly">
      <summary>
            Read-only state of this field. Default = false.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.Required">
      <summary>
            Field is required. Default = false.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.NoExport">
      <summary>
            This field is not included when the form is submitted. Default = false.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.Hidden">
      <summary>
            This field will not be visible in the pdf-viewer. Default = false. 
            </summary>
      <remarks>
            When hidden is true the Print boolean specifies if this field will not be visible on printout.
            Note that the default Print setting os true.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.FieldShape.Print">
      <summary>
            This field will be visable on a printout. Default = true;
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape.#ctor">
      <summary>
            Create a new checkbox field shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape.#ctor(System.Double,System.Double)">
      <summary>
            Create a new checkbox field shape.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
      <summary>
            Create a new checkbox field shape.
            </summary>
      <param name="left">The left position.</param>
      <param name="bottom">The bottom position.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="fullName">The fully qualified name for this field.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape.Value">
      <summary>
            The value of this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape.DefaultValue">
      <summary>
            The default value of this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape.CheckedValue">
      <summary>
            The checked (export) value.
            </summary>
      <remarks>
            Default value is 'Yes'
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape.UncheckedValue">
      <summary>
            The unchecked (export) value.
            </summary>
      <remarks>
            This value cannot be changed.
            Default value is 'Off'
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxFieldShape.Style">
      <summary>
            The appearance for this field. (default  = square)
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxStyle">
      <summary>
            The style used to display the checkbox or radiobutton.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxStyle.Round">
      <summary>
            Field appears with a round outline. 
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.Fields.CheckBoxStyle.Square">
      <summary>
            Field appears with a square outline. 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape">
      <summary>
            Used to add a drop down list form field area to a layer.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.#ctor">
      <summary>
            Create a new drop down list field shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.#ctor(System.Double,System.Double)">
      <summary>
            Create a new drop down list field shape.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
      <summary>
            Create a new drop down list field shape.
            </summary>
      <param name="left">The left position.</param>
      <param name="bottom">The bottom position.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="fullName">The fully qualified name for this field.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.Value">
      <summary>
            The value of this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.SelectedOption">
      <summary>
            The selected option of this field.
            </summary>
      <remarks>
            Default is <see langword="null" />, meaning no option selected, or if Editable is true any custom value.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.DefaultValue">
      <summary>
            The default value of this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.DefaultOption">
      <summary>
            The default option of this field.
            </summary>
      <remarks>
            Default is <see langword="null" />, meaning no option selected, or if Editable is true any custom value.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.Editable">
      <summary>
            The ComboBox is Editable as well (like the TextBox field). Default = false
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.DropDownListFieldShape.Options">
      <summary>
            The options associated with this combobox.
            </summary>
      <remarks>
            The collection is already created, without any option.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Fields.ListBoxFieldShape">
      <summary>
            Used to add a listbox form field area to a layer.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListBoxFieldShape.#ctor">
      <summary>
            Create a new listbox field shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListBoxFieldShape.#ctor(System.Double,System.Double)">
      <summary>
            Create a new listbox field shape.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListBoxFieldShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
      <summary>
            Create a new listbox field shape.
            </summary>
      <param name="left">The left position.</param>
      <param name="bottom">The bottom position.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="fullName">The fully qualified name for this field.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.ListBoxFieldShape.SelectedOption">
      <summary>
            The value of this field.
            </summary>
      <remarks>
            Default is <see langword="null" />, meaning no option is selected.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.ListBoxFieldShape.DefaultOption">
      <summary>
            The default value of this field.
            </summary>
      <remarks>
            Default is <see langword="null" />, meaning no option is selected.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.ListBoxFieldShape.Options">
      <summary>
            The options associated with this listbox.
            </summary>
      <remarks>
            The collection is already created, without any option.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Fields.PushButtonFieldShape">
      <summary>
            Used to add a push button form field area to a layer.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.PushButtonFieldShape.#ctor">
      <summary>
            Create a new push button field shape.
            </summary>
      <remarks>
      </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.PushButtonFieldShape.#ctor(System.Double,System.Double)">
      <summary>
            Create a new push button field shape.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.PushButtonFieldShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
      <summary>
            Create a new push button field shape.
            </summary>
      <param name="left">The left position.</param>
      <param name="bottom">The bottom position.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="fullName">The fully qualified name for this field.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.PushButtonFieldShape.Caption">
      <summary>
            The caption used on the button.
            </summary>
      <remarks>
            Default value is <see langword="null" />.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.PushButtonFieldShape.Bitmap">
      <summary>
            The image used on the button.
            </summary>
      <remarks>
        <para>
            Default value is <see langword="null" />.
            </para>
        <para>
            The client code must dispose the bitmap. You can dispose the bitmap after this call is finished.
            </para>
      </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.PushButtonFieldShape.MouseUpActions">
      <summary>
            The mouse up actions for this button.
            </summary>
             /// <remarks>
            The collection is already created, without any action.
            </remarks></member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape">
      <summary>
            Used to add a radio button form field area to a layer.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape.#ctor">
      <summary>
            Create a new radio button field shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape.#ctor(System.Double,System.Double)">
      <summary>
            Create a new radio button field shape.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
      <summary>
            Create a new radio button field shape.
            </summary>
      <param name="left">The left position.</param>
      <param name="bottom">The bottom position.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="fullName">The fully qualified name for this field.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape.Value">
      <summary>
            The value of this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape.DefaultValue">
      <summary>
            The default value of this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape.CheckedValue">
      <summary>
            The checked (export) value
            </summary>
      <remarks>
            Default value is 'Yes'
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape.UncheckedValue">
      <summary>
            The unchecked (export) value.
            </summary>
      <remarks>
            This value cannot be changed.
            Default value is 'Off'
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.RadioButtonFieldShape.Style">
      <summary>
            The style for this field. (default = round)
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Fields.SignatureFieldShape">
      <summary>
            Used to add a signature form field area to a layer.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.SignatureFieldShape.#ctor">
      <summary>
            Create a new signature field shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.SignatureFieldShape.#ctor(System.Double,System.Double)">
      <summary>
            Create a new signature field shape.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.SignatureFieldShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
      <summary>
            Create a new signature field shape.
            </summary>
      <param name="left">The left position.</param>
      <param name="bottom">The bottom position.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="fullName">The fully qualified name for this field.</param>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape">
      <summary>
            Used to add a text form field area to a layer.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape.#ctor">
      <summary>
            Create a new text field shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape.#ctor(System.Double,System.Double)">
      <summary>
            Create a new text field shape.
            </summary>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
      <summary>
            Create a new text field shape.
            </summary>
      <param name="left">The left position.</param>
      <param name="bottom">The bottom position.</param>
      <param name="width">The width.</param>
      <param name="height">The height.</param>
      <param name="fullName">The fully qualified name for this field.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape.Value">
      <summary>
            The value of this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape.DefaultValue">
      <summary>
            The default value of this field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape.MaxLength">
      <summary>
            The maximum length of the field's text in characters. -1 means no maximum length is specified. Default = -1
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape.Multiline">
      <summary>
            Text is multiline. Default = false
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.TextFieldShape.Password">
      <summary>
            Text represents a password. Default = false
            If set, input is echoed as special characters such as asterisks or bullets.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.ArcShape">
      <summary>
            An arc shape is a segment of an ellipse outline. It has a center, a horizontal
            and vertical radi and it has a start and sweep angle.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.PathShape">
      <summary>
            PathShape is the base class for all shapes that have an associated pen or brush.
            Furthermore, PathShape allow you to build an arbitray curve composed of
            straight lines and bezier curves.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PathShape.#ctor">
      <summary>
            Create a new open path shape that starts at (0,0).
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PathShape.#ctor(System.Double,System.Double)">
      <summary>
            Create a new open path shape with given start point.
            </summary>
      <param name="x">Horizontal position of start point.</param>
      <param name="y">Vertical position of start point.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PathShape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.PathShape.Pen">
      <summary>
            Used to draw the curves on this path.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.PathShape.Brush">
      <summary>
            The brush that is used to fill this shape if closed.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.PathShape.Closed">
      <summary>
            Close this path shape by drawing a straight line from the end point to the start point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.PathShape.PathShapes">
      <summary>
            The segments that make up this path shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ArcShape.#ctor">
      <summary>
            Create a new ArcShape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius.
            </summary>
      <param name="x">X-position of the center of the arc.</param>
      <param name="y">Y-position of the center of the arc.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen)">
      <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
      <param name="x">X-position of the center of the arc.</param>
      <param name="y">Y-position of the center of the arc.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the arc.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,TallComponents.PDF.Layout.Brushes.Brush)">
      <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
      <param name="x">X-position of the center of the arc.</param>
      <param name="y">Y-position of the center of the arc.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the arc.</param>
      <param name="brush">The brush that is used to fill this shape if closed.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius, start and sweep angle.
            </summary>
      <param name="x">X-position of the center of the arc.</param>
      <param name="y">Y-position of the center of the arc.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
      <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
      <param name="sweep">Sweep angle, counter-clockwise.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,System.Double,System.Double)">
      <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
      <param name="x">X-position of the center of the arc.</param>
      <param name="y">Y-position of the center of the arc.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the arc.</param>
      <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
      <param name="sweep">Sweep angle, counter-clockwise.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,TallComponents.PDF.Layout.Brushes.Brush,System.Double,System.Double)">
      <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
      <param name="x">X-position of the center of the arc.</param>
      <param name="y">Y-position of the center of the arc.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the arc.</param>
      <param name="brush">The brush that is used to fill this shape if closed.</param>
      <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
      <param name="sweep">Sweep angle, counter-clockwise.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ArcShape.Start">
      <summary>
            Start angle (0 corresponds to 3 o-clock).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ArcShape.Sweep">
      <summary>
            Sweep angle, counter-clockwise.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ArcShape.Rx">
      <summary>
            Horizontal radius.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ArcShape.Ry">
      <summary>
            Vertical radius.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ArcShape.X1">
      <summary>
            Calculated horizontal position of the start point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ArcShape.Y1">
      <summary>
            Calculated vertical position of the start point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ArcShape.X2">
      <summary>
            Calculated horizontal position of the end point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ArcShape.Y2">
      <summary>
            Calculated vertical position of the end point.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.BezierShape">
      <summary>
            A cubic bezier shape. It has a start and an end point and two respective
            control points.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.BezierShape.#ctor">
      <summary>
            Create a new BezierShape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.BezierShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new BezierShape given a start point, start control point, end control point and a end point
            </summary>
      <param name="x">Horizontal position of the start point.</param>
      <param name="y">Vertical position of the start point.</param>
      <param name="x1">Horizontal position of the start control point.</param>
      <param name="y1">Vertical position of the start control point.</param>
      <param name="x2">Horizontal position of the end control point.</param>
      <param name="y2">Vertical position of the end control point.</param>
      <param name="x3">Horizontal position of the end point.</param>
      <param name="y3">Vertical position of the end point.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.BezierShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen)">
      <summary>
            Creates a new BezierShape given a start point, start control point, end control point and a end point
            </summary>
      <param name="x">Horizontal position of the start point.</param>
      <param name="y">Vertical position of the start point.</param>
      <param name="x1">Horizontal position of the start control point.</param>
      <param name="y1">Vertical position of the start control point.</param>
      <param name="x2">Horizontal position of the end control point.</param>
      <param name="y2">Vertical position of the end control point.</param>
      <param name="x3">Horizontal position of the end point.</param>
      <param name="y3">Vertical position of the end point.</param>
      <param name="pen">Used to draw the curves of this bezier.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.BezierShape.X1">
      <summary>
            Horizontal position of the start control point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.BezierShape.Y1">
      <summary>
            Vertical position of the start control point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.BezierShape.X2">
      <summary>
            Horizontal position of the end control point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.BezierShape.Y2">
      <summary>
            Vertical position of the end control point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.BezierShape.X3">
      <summary>
            Horizontal position of the end point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.BezierShape.Y3">
      <summary>
            Vertical position of the end point.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.DockStyle">
      <summary>
            Different ways to dock shapes.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.DockStyle.None">
      <summary>
            The shape is positioned at its exact coordinates.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.DockStyle.Top">
      <summary>
            The shape is moved up to the top edge of the container if the first, otherwise to the bottom edge
            of its predecessor.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.DockStyle.Left">
      <summary>
            The shape is moved up to the left edge of the container if the first, otherwise to the right edge
            of its predecessor.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.DockStyle.Bottom">
      <summary>
            The shape is moved up to the bottom edge of the container if the first, otherwise to the top edge
            of its predecessor.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.DockStyle.Right">
      <summary>
            The shape is moved up to the right edge of the container if the first, otherwise to the left edge
            of its predecessor.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Shapes.DockStyle.Fill">
      <summary>
            The shape fills the entire remaining area.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.EllipseShape">
      <summary>
            An ellipse drawn using a pen and brush. 
            </summary>
      <remarks>
            The center is determined by the X and Y
            properties of base class Shape.
            <example>
            XML
            <code>
              &lt;shape type="ellipseshape" x="40" y="40" rx="8" ry="8"&gt;
                 &lt;brush type="solidbrush" color="orange"/&gt;
            	&lt;pen color="black" width="1"/&gt;
              &lt;/shape&gt;
            </code></example></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.EllipseShape.#ctor">
      <summary>
            Create a new EllipseShape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.EllipseShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new EllipseShape with the given startpoint, horizontal and vertical radius.
            </summary>
      <param name="x">X-position of the center of the ellipse.</param>
      <param name="y">Y-position of the center of the ellipse.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.EllipseShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen)">
      <summary>
            Create a new EllipseShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
      <param name="x">X-position of the center of the ellipse.</param>
      <param name="y">Y-position of the center of the ellipse.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the ellipse.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.EllipseShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,TallComponents.PDF.Layout.Brushes.Brush)">
      <summary>
            Create a new EllipseShape with the given startpoint, horizontal and vertical radius, pen and brush.
            </summary>
      <param name="x">X-position of the center of the ellipse.</param>
      <param name="y">Y-position of the center of the ellipse.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the ellipse.</param>
      <param name="brush">The brush that is used to fill this shape if closed.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.EllipseShape.Rx">
      <summary>
            Horizontal radius in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.EllipseShape.Ry">
      <summary>
            Vertical radius in points.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment">
      <summary>
            A cubic bezier segment. It has an end point and two respective
            control points.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.FreeHandSegment">
      <summary>
            The base class for all FreeHandSegment objects.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegment.Clone">
      <summary>
            Clones a FreeHandSegment.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment.#ctor">
      <summary>
            Create a new FreeHandBezierSegment.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new BezierShape given a start control point, end control point and an end point
            </summary>
      <param name="x1">Horizontal position of the start control point.</param>
      <param name="y1">Vertical position of the start control point.</param>
      <param name="x2">Horizontal position of the end control point.</param>
      <param name="y2">Vertical position of the end control point.</param>
      <param name="x3">Horizontal position of the end point.</param>
      <param name="y3">Vertical position of the end point.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment.X1">
      <summary>
            Horizontal position of the start control point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment.Y1">
      <summary>
            Vertical position of the start control point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment.X2">
      <summary>
            Horizontal position of the end control point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment.Y2">
      <summary>
            Vertical position of the end control point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment.X3">
      <summary>
            Horizontal position of the end point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandBezierSegment.Y3">
      <summary>
            Vertical position of the end point.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.FreeHandLineSegment">
      <summary>
            A straight line. It has an end point.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandLineSegment.#ctor">
      <summary>
            Create a new FreeHandLineSegment.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandLineSegment.#ctor(System.Double,System.Double)">
      <summary>
            Creates a new FreeHandLineSegment with given end point.
            </summary>
      <param name="x1">Horizontal position of end point.</param>
      <param name="y1">Vertical position of end point.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandLineSegment.X1">
      <summary>
            Horizontal position of end point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandLineSegment.Y1">
      <summary>
            Vertical position of end point.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection">
      <summary>
            Collection of FreeHandSegment objects.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.#ctor">
      <summary>
            Create a new empty collection of free hand segments.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.Add(TallComponents.PDF.Layout.Shapes.FreeHandSegment)">
      <summary>
            Add an existing free hand segment to this collection.
            </summary>
      <param name="segment">Add this segment.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.AddRange(TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection)">
      <summary>
            Adds the elements of a Free hand segment collection to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="segments">The FreeHandSegmentCollection whose elements should be added to 
            the end of the collection.</param>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="segments" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.AddRange(TallComponents.PDF.Layout.Shapes.FreeHandSegment[])">
      <summary>
            Adds the elements of a FreeHandSegment array to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="segments">The array of segments whose elements should be added to 
            the end of the collection.</param>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="segments" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.Insert(System.Int32,TallComponents.PDF.Layout.Shapes.FreeHandSegment)">
      <summary>
            Insert an existing segment at the specified index.
            </summary>
      <param name="index">The zero-based index of the segment after insertion.</param>
      <param name="segment">Insert this segment.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.RemoveAt(System.Int32)">
      <summary>
            Remove a segment at the specified index.
            </summary>
      <param name="index">The index of the segment to remove.</param>
      <remarks>Removing a segment at a non-existing index is silently ignored.</remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.Remove(TallComponents.PDF.Layout.Shapes.FreeHandSegment)">
      <summary>
            Remove a segment from this collection.
            </summary>
      <param name="segment">Remove this segment.</param>
      <remarks>Removing a non-existing segment is silently ignored.</remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.Clear">
      <summary>
            Remove all segments from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.IndexOf(TallComponents.PDF.Layout.Shapes.FreeHandSegment)">
      <summary>
            Returns the index of the specified segment.
            </summary>
      <param name="segment">The segment to locate in this collection.</param>
      <returns>The zero-based index of the segment found in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.GetEnumerator">
      <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator">GetEnumerator</see>.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.Clone">
      <summary>
            Clones a FreeHandSegmentCollection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.Count">
      <summary>
            Number of segments in this collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandSegmentCollection.Item(System.Int32)">
      <summary>
            Get a segment by index (0-based).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.FreeHandStartSegment">
      <summary>
            The start point of the ShapeCollection clip-path.
            </summary>
      <remarks>
            This class must be the first object in the FreeHandSegmentCollection, if it's not available 0,0 will be used.
            <para>
            This class cannot be used in the FreeHandShape, the start point will be the X,Y from that FreeHandShape.
            </para></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandStartSegment.#ctor">
      <summary>
            Create a new FreeHandStartSegment.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.FreeHandStartSegment.#ctor(System.Double,System.Double)">
      <summary>
            Creates a new FreeHandStartSegment with given end point.
            </summary>
      <param name="x">Horizontal position of start point.</param>
      <param name="y">Vertical position of start point.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandStartSegment.X">
      <summary>
            Horizontal position of start point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.FreeHandStartSegment.Y">
      <summary>
            Vertical position of start point.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.ImageShape">
      <summary>
            A shape containing bitmap image.
            </summary>
      <remarks>
            In XML you can specifiy the image data as Base64 encoded data.
            <example>
            You can convert an image file to Base64 using the .NET method <see cref="M:System.Convert.ToBase64String(System.Byte[])" />.
            <para>C#</para><code>
            string base64Data;
            using ( FileStream fs = new FileStream( fileName , FileMode.Open ) )
            {
              byte[] bytes  = new byte[ fs.Length ];
              fs.Read( bytes, 0, bytes.Length );
              base64Data = Convert.ToBase64String( bytes );
            }
            </code></example></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor">
      <summary>
            Creates a new ImageShape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor(System.String)">
      <summary>
            Create a new image shape from a relative or virtual path.
            </summary>
      <param name="path">Relative, absolute or virtual path</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor(System.String,System.Int32)">
      <summary>
            Create a new image shape from a relative, absolute or virtual path.
            </summary>
      <param name="path">Relative, absolute or virtual path</param>
      <param name="frameIndex">Index of frame. Typically used to select a page in a multi-page TIFF.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor(System.Drawing.Bitmap)">
      <summary>
            Create a new ImageShape from a System.Drawing.Bitmap.
            This constructor allows you to draw to a GDI+ surface and pass it to the ImageShape 
            class without intermediate, temporary file.
            </summary>
      <param name="bitmap">In-memory GDI+ bitmap object.</param>
      <remarks>The frame index will be 0, not the current active frame index.
            The referenced bitmap must be disposed by the client (caller) after 
            the pdf document (page with this ImageShape) is written</remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor(System.Drawing.Bitmap,System.Boolean)">
      <summary>
            Create a new ImageShape from a System.Drawing.Bitmap.
            This constructor allows you to draw to a GDI+ surface and pass it to the ImageShape 
            class without intermediate, temporary file.
            </summary>
      <param name="bitmap">In-memory GDI+ bitmap object.</param>
      <param name="disposeBitmap">The bitmap will be disposed by this component (callee)</param>
      <remarks>
            The frame index will be 0, not the current active frame index
            When setting disposeBitmap to true, the bitmap is disposed when this Image class is release 
            from memory. Note that if this instance of the bitmap is used multiple times an error will 
            be thrown if this bitmap is used after this Image class is removed from memory.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor(System.Drawing.Bitmap,System.Int32)">
      <summary>
            Create a new ImageShape from a System.Drawing.Bitmap and select a frame index.
            This constructor allows you to draw to a GDI+ surface and pass it to the ImageShape 
            class without intermediate, temporary file.
            </summary>
      <param name="bitmap">In-memory GDI+ bitmap object.</param>
      <param name="frameIndex">0-based frame index.</param>
      <remarks>
            The referenced bitmap must be disposed by the client (caller) after 
            the pdf document (page with this Image) is written.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor(System.Drawing.Bitmap,System.Int32,System.Boolean)">
      <summary>
            Create a new ImageShape from a System.Drawing.Bitmap and select a frame index.
            This constructor allows you to draw to a GDI+ surface and pass it to the ImageShape 
            class without intermediate, temporary file.
            </summary>
      <param name="bitmap">In-memory GDI+ bitmap object.</param>
      <param name="frameIndex">0-based frame index.</param>
      <param name="disposeBitmap">The bitmap will be disposed by this component (callee)</param>
      <remarks>
            When setting disposeBitmap to true, the bitmap is disposed when this Image class is released 
            from memory. Note that if this instance of the bitmap is used multiple times an error will 
            be thrown if this bitmap is used after this Image class is removed from memory
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor(System.IO.Stream)">
      <summary>
            Create a new ImageShape from a stream of binary data.
            </summary>
      <remarks>
            The stream is not closed when the image is disposed. Make sure it remains open until
            Document.Write is completed. 
            </remarks>
      <param name="stream">The stream containing the binairy image data.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
            Create a new ImageShape from a stream of binary data.
            </summary>
      <remarks>
            When setting disposeStream to true, the stream is disposed when this Image class is released 
            from memory. Note that if this instance of the stream is used multiple times an error will 
            be thrown if the stream is used after this Image class is removed from memory.
            </remarks>
      <param name="stream">The stream containing the binairy image data.</param>
      <param name="frameIndex">0-based frame index.</param>
      <param name="disposeStream">The stream will be disposed by this component.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.GetFrameCount(System.String)">
      <summary>
            Extract the number of frames from the image data.
            </summary>
      <param name="path">The path to the image. May be a file path or a URL.</param>
      <returns>Number of frames in this image.</returns>
      <example>
            VB.NET
            <code>
            ' Get the number of frames
            Dim frameCount As Integer = ImageShape.GetFrameCount( path )
            Dim index As Integer
            
            For index = 0 To frameCount - 1
               ' Load the image for the frame
               Dim image as ImageShape = New ImageShape(path, index)
            
               'Create new page and append to document
               Dim page As New Page(image.Width, image.Height)
               document.Pages.Append(page)
               page.VisualOverlay.Add(image)
            Next index
            </code></example>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.GetFrameCount(System.String,System.Object,TallComponents.PDF.Layout.GetWebCredentialsEventHandler)">
      <summary>
            Extract the number of frames from the image data.
            </summary>
      <param name="path">The path to the image. May be a file path or a URL.</param>
      <param name="sender">The sender for the GetWebCredentials event.</param>
      <param name="getWebCredentials">The event handlers to query for the web credentials.</param>
      <returns>Number of frames in this image.</returns>
      <example>
            VB.NET
            <code>
            ' Get the number of frames
            Dim frameCount As Integer = ImageShape.GetFrameCount( path )
            Dim index As Integer
            
            For index = 0 To frameCount - 1
               ' Load the image for the frame
               Dim image as ImageShape = New ImageShape(path, index)
            
               'Create new page and append to document
               Dim page As New Page(image.Width, image.Height)
               document.Pages.Append(page)
               page.VisualOverlay.Add(image)
            Next index
            </code></example>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.GetFrameCount(System.IO.Stream)">
      <summary>
            Extract the number of frames from the image data.
            </summary>
      <remarks>
            The <paramref name="stream" /> may be closed when the method completes and it is no longer needed.
            It is the responsibility of the client to close the stream.
            </remarks>
      <param name="stream">A stream containing an image file.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.GetFrameCount(System.Drawing.Bitmap)">
      <summary>
            Extract the number of frames from the image data.
            </summary>
      <param name="bitmap">A Bitmap object.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ImageShape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="E:TallComponents.PDF.Layout.Shapes.ImageShape.GetWebCredentials">
      <summary>
            Occurs when a image is loaded from a weblocation to retrieve the credentials.
            </summary>
      <remarks>Set the credentials in the arguments to perform authentication.
            To authenticate using the user running the application or the impersonated
            user (on ASP.NET) supply <i>System.Net.CredentialCache.DefaultCredentials</i>.</remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.Compression">
      <summary>
            The compression to apply to the image data.
            </summary>
      <remarks>
            This is a best-effort setting. Images that are already compressed 
            will in most cases not be recoded to another compression. 
            Uncompressed images will honor the compression setting.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.MaskColor">
      <summary>
            Set the color that will act as the transparent color.
            </summary>
      <remarks>
            Setting this color to any other color than <see langword="null" /> will enable color masking.
            The color that matches this color exactly will become transparent.
            <para>When the mask color is set, alpha transparency is ignored.</para><para>For GIF images, the mask color can be specified in the file. Setting the MaskColor 
            will override the transparent color in the GIF file.</para><para>Color masking for images with lossy compression (JPEG) is not advised.</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.FrameIndex">
      <summary>
            The FrameIndex which will be used to get the actual image data from the Bitmap  
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.FrameCount">
      <summary>
            The number of frames in the image.
            </summary>
      <remarks>
            Most image types hold a single frame. TIFF images can have multiple frames. 
            Use <see cref="P:TallComponents.PDF.Layout.Shapes.ImageShape.FrameIndex" /> to select the frame to show.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.Path">
      <summary>
            Relative or absolute path of image file.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.Width">
      <summary>
            The width of the image. 
            </summary>
      <remarks>
            If KeepAspectRatio is set:
            <pare>If both the height and width are not specified: use PhysicalWidth and PhysicalHeight.</pare><para>Width is specified, no height specified: The height is calculated from the width (and height property is ignored).</para><para>Height is specified, no width specified: The width is calculated from the height (and width property is ignored).</para><para>If both the height and width are specified: fit into area.</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.Height">
      <summary>
            The height of the image. 
            </summary>
      <remarks>
            If KeepAspectRatio is set:
            <pare>If both the height and width are not specified: use PhysicalWidth and PhysicalHeight.</pare><para>Width is specified, no height specified: The height is calculated from the width (and height property is ignored).</para><para>Height is specified, no width specified: The width is calculated from the height (and width property is ignored).</para><para>If both the height and width are specified: fit into area.</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.KeepAspectRatio">
      <summary>
            If KeepAspectRatio is set to true, the height is calculated from the 
            width so that the width/height ratio is equal to the columns/rows ratio
            of the raster of the original image. If set to false, the specified
            width and height are used and the image will in general appear distorted.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ImageShape.IgnoreAlpha">
      <summary>
            Set to true to completely ignore alpha transparency in the image. If no alpha information
            is available this setting is ignored.
            Default value is false.
            </summary>
      <remarks>
            Note that setting a MaskColor will cause all alpha information to be ignored.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.LineShape">
      <summary>
            A straight line. It has a start and an end point.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.LineShape.#ctor">
      <summary>
            Create a new LineShape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.LineShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new LineShape with given start and end point.
            </summary>
      <param name="x1">Horizontal position of start point.</param>
      <param name="y1">Vertical position of start point.</param>
      <param name="x2">Horizontal position of end point.</param>
      <param name="y2">Vertical position of end point.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.LineShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen)">
      <summary>
            Creates a new LineShape with given start and end point and pen.
            </summary>
      <param name="x1">Horizontal position of start point.</param>
      <param name="y1">Vertical position of start point.</param>
      <param name="x2">Horizontal position of end point.</param>
      <param name="y2">Vertical position of end point.</param>
      <param name="pen">Used to draw the line.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.LineShape.X1">
      <summary>
            Horizontal position of end point.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.LineShape.Y1">
      <summary>
            Vertical position of end point.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.MultilineTextShape">
      <summary>
            The MultilineTextShape allows you to stamp text that is wrapped given
            a certain maximum line width. The text is stored in 1 or more fragments.
            You can set layout properties such as alignment and indentation.
            </summary>
      <remarks>
            The origin (X and Y properties) is the top-left position.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.MultilineTextShape.#ctor">
      <summary>
            Create a new empty multiline text shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.MultilineTextShape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="E:TallComponents.PDF.Layout.Shapes.MultilineTextShape.LineBreak">
      <summary>
            Will be fired when a word has to be broken on a line end.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.HorizontalAlignment">
      <summary>
            The horizontal alignment.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.Justified">
      <summary>
            Whether text is justified.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.HangIndentation">
      <summary>
            Indentation of all except first line.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.FirstLineIndentation">
      <summary>
            Indentation of first line.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.LineSpacing">
      <summary>
            Extra spacing between lines in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.Fragments">
      <summary>
            Collection of text fragments. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.Width">
      <summary>
            Width of this MultilineTextShape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.Height">
      <summary>
            Height of this MultilineTextShape, when the contents should be auto-sized. The content will be auto-sized when the following constaints are true: 1) Only one fragment is present; 2) The font-size in that fragment is specified as zero (0).
            </summary>
      <remarks>
            If this MultilineTextShape isn't auto-sized, this height property isn't used at all.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.MeasuredHeight">
      <summary>
            The measured height is the space that will be used when drawing this shape on the page. 
            This height is calculated with the fragments available in the fragments collection, 
            it respects the Width property and font-sizes used in the fragments. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.TabStops">
      <summary>
            Allows you to define points to jump to when a tab character is encountered.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.FlowDirection">
      <summary>
            Flow direction of text elements (fragments).
            </summary>
      <remarks>
            The fragments contained can have a different read direction to allow
            left-to-right reading elements (numbers) in right to left text.
            The text flow direction on a paragraph is the default flow direction for 
            contained children (Fragments)
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.MaxFontSize">
      <summary>
            The maximum font size the auto-sized text will be (default = 100).
            </summary>
      <remarks>
            If this MultilineTextShape isn't auto-sized, this property isn't used at all.
            <seealso cref="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.Height" /></remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.PageShape">
      <summary>
            A page shape is a placeholder for an existing page. 
            It is used to stamp existing pages on an other page, which could be either a new or an existing page.
            </summary>
      <remarks>
            Placing a page using the PageShape removes all interactive features such as links and form fields.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PageShape.#ctor">
      <summary>
            Create a new page shape. Use Path, Password and PageIndex to specify what page to use.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PageShape.#ctor(System.IO.Stream,System.Int32,System.String,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Int32,TallComponents.PDF.Layout.PageBoundary)">
      <summary>
            Create a new page shape. Using the specified page boundary.
            </summary>
      <remarks>
            The <paramref name="stream" /> may be closed when the constructor completes.
            It is the responsibility of the client to close the stream.
            </remarks>
      <param name="stream">The PDF Document.</param>
      <param name="pageIndex">Zero based page index.</param>
      <param name="password">The password needed to open the given PDF.</param>
      <param name="left">The horizontal position of the left edge of this page shape.</param>
      <param name="bottom">The vertical position of the bottom edge of this page shape.</param>
      <param name="width">The width of this page shape.</param>
      <param name="height">The height of this page shape.</param>
      <param name="keepAspectRatio">The width/height ratio is equal to the ratio of the original page.</param>
      <param name="rotate">The rotation the page shape counter-clockwise (360 corresponds to a full circle).</param>
      <param name="pageBoundary">This shape has the contents from the specified page boundary. If the page does not have the specified page boundary, then it will be automatically using the following fallback: ArtBox --&gt; CropBox; TrimBox --&gt; CropBox; BleedBox --&gt; CropBox; CropBox --&gt; MediaBox.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PageShape.#ctor(System.IO.Stream,System.Int32,System.String)">
      <summary>
            Create a new PageShape from a PDF document in a stream with the original size of the page.
            </summary>
      <remarks>
            This constructor uses the Default page boundry to determine the page's size.
            <para>The <paramref name="stream" /> may be closed when the constructor completes.
            It is the responsibility of the client to close the stream.</para></remarks>
      <param name="stream">The PDF Document.</param>
      <param name="pageIndex">Zero based page index.</param>
      <param name="password">The password needed to open the given PDF.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PageShape.#ctor(System.String,System.Int32,System.String,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Int32,TallComponents.PDF.Layout.PageBoundary)">
      <summary>
            Create a new page shape. Using the specified page boundary.
            </summary>
      <remarks>
            Loading PDF documents from a URL is currently not supported. You can use
            relative paths in a web environment (for example <c>~/documents/mydoc.pdf</c>)
            </remarks>
      <param name="path">The PDF Document.</param>
      <param name="pageIndex">Zero based page index.</param>
      <param name="password">The password needed to open the given PDF.</param>
      <param name="left">The horizontal position of the left edge of this page shape.</param>
      <param name="bottom">The vertical position of the bottom edge of this page shape.</param>
      <param name="width">The width of this page shape.</param>
      <param name="height">The height of this page shape.</param>
      <param name="keepAspectRatio">The width/height ratio is equal to the ratio of the original page.</param>
      <param name="rotate">The rotation the page shape counter-clockwise (360 corresponds to a full circle).</param>
      <param name="pageBoundary">This shape has the contents from the specified page boundary. If the page does not have the specified page boundary, then it will be automatically using the following fallback: ArtBox --&gt; CropBox; TrimBox --&gt; CropBox; BleedBox --&gt; CropBox; CropBox --&gt; MediaBox.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PageShape.#ctor(System.String,System.Int32,System.String)">
      <summary>
            Create a new PageShape from a file with the original size of the page.
            </summary>
      <remarks>
            Loading PDF documents from a URL is currently not supported. You can use
            relative paths in a web environment (for example <c>~/documents/mydoc.pdf</c>)
            </remarks>
      <param name="path">The path to the PDF Document.</param>
      <param name="pageIndex">Zero based page index.</param>
      <param name="password">The password needed to open the given PDF.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.Path">
      <summary>
            Path of the PDF file to load.
            </summary>
      <remarks>
            If the PDF file was loaded from a stream this value may be <see langword="null" />.
            Loading PDF from a URL is not supported. When the path is relative, it is
            assumed to be relative to the applications current working folder.
            For web applications, the current working folder is the root folder of the web
            application.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.PageIndex">
      <remarks>
            This property has no effect if the PageShape was constructed using a Page instance.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.Password">
      <summary>
            Set the password used to open the source PDF document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.PageCount">
      <summary>
            The number of pages in the source PDF document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.Width">
      <summary>
            The width of this page shape in points.
            </summary>
      <remarks>
            This must be a positive (non zero) number.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.Height">
      <summary>
            The height of this page shape in points.
            </summary>
      <remarks>
            This must be a positive (non zero) number.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.SkewX">
      <summary>
            Amount of horizontal skew in degrees, clockwise. (default = 0)
            </summary>
      <remarks>
            The y-axis will be skewed by the given angle. 
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.SkewY">
      <summary>
            Amount of vertical skew in degrees, clockwise. (default = 0)
            </summary>
      <remarks>
            The x-axis will be skewed by the given angle. 
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.KeepAspectRatio">
      <summary>
            If KeepAspectRatio is set to true, the size is calculated from the 
            width and height so that the width/height ratio is equal to the ratio
            of the original page. If set to false, the specified.
            width and height are used and the page will in general appear distorted.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.Rotate">
      <summary>
            Number of degrees by which this page shape is rotated counter-clockwise around its lower-left corner.
            </summary>
      <remarks>Please use Rotation instead. 
            Please note that the rotation has changed from counter-clockwise to clockwise!</remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.PageShape.PageBoundary">
      <summary>
            Specifies which page boundary corresponds to this page shape, the space outside the specified boundary will be clipped. 
            </summary>
      <remarks>
            If the page does not have the specified page boundary, then it will be automatically using the following fallback: 
            ArtBox --&gt; Default; 
            TrimBox --&gt; Default; 
            BleedBox --&gt; Default; 
            CropBox --&gt; MediaBox.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.PieShape">
      <summary>
            A pie is an arc shape with the addition of two straight lines drawn
            from the center to the start and end point of the arc. The closed area
            is filled using the specified brush (if any).
            A pie is fully defined by attributes of its base classes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor">
      <summary>
            Create a new, uninitialized PieShape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius.
            </summary>
      <param name="x">X-position of the center of the pie.</param>
      <param name="y">Y-position of the center of the pie.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen)">
      <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
      <param name="x">X-position of the center of the pie.</param>
      <param name="y">Y-position of the center of the pie.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the pie.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,TallComponents.PDF.Layout.Brushes.Brush)">
      <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
      <param name="x">X-position of the center of the pie.</param>
      <param name="y">Y-position of the center of the pie.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the pie.</param>
      <param name="brush">The brush that is used to fill this shape if closed.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius, start and sweep angle.
            </summary>
      <param name="x">X-position of the center of the pie.</param>
      <param name="y">Y-position of the center of the pie.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
      <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
      <param name="sweep">Sweep angle, counter-clockwise.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,System.Double,System.Double)">
      <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
      <param name="x">X-position of the center of the pie.</param>
      <param name="y">Y-position of the center of the pie.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the pie.</param>
      <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
      <param name="sweep">Sweep angle, counter-clockwise.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,TallComponents.PDF.Layout.Brushes.Brush,System.Double,System.Double)">
      <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
      <param name="x">X-position of the center of the pie.</param>
      <param name="y">Y-position of the center of the pie.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the pie.</param>
      <param name="brush">The brush that is used to fill this shape if closed.</param>
      <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
      <param name="sweep">Sweep angle, counter-clockwise.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius, start and sweep angle.
            </summary>
      <param name="x">X-position of the center of the pie.</param>
      <param name="y">Y-position of the center of the pie.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
      <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
      <param name="sweep">Sweep angle, counter-clockwise.</param>
      <param name="closed">Close this path shape by drawing a straight line from the end point to the center and from the center to the start point.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,TallComponents.PDF.Layout.Brushes.Brush,System.Double,System.Double,System.Boolean)">
      <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
      <param name="x">X-position of the center of the pie.</param>
      <param name="y">Y-position of the center of the pie.</param>
      <param name="rx">Horizontal radius.</param>
      <param name="ry">Vertical radius.</param>
      <param name="pen">Used to draw the curves of the pie.</param>
      <param name="brush">The brush that is used to fill this shape if closed.</param>
      <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
      <param name="sweep">Sweep angle, counter-clockwise.</param>
      <param name="closed">Close this path shape by drawing a straight line from the end point to the center and from the center to the start point.</param>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.RectangleShape">
      <summary>
            A rectangle drawn using a pen and brush. 
            </summary>
      <remarks>
            The lower-left corner is defined by the X and Y properties of base class Shape.
            <example><code>
            &lt;shape type="rectangleshape" x="0" y="0" width="25" height="25"&gt;
                &lt;pen color="green" width="1"/&gt;
              &lt;brush type="solidbrush" color="blue"/&gt;
            &lt;/shape&gt;
            </code></example></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.RectangleShape.#ctor">
      <summary>
            Create a new rectangle with zero width and height.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.RectangleShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new RectangleShape with given startpoint, width and height.
            </summary>
      <param name="x">X-position of the lower-left corner.</param>
      <param name="y">Y-position of the lower-left corner.</param>
      <param name="width">Width of this rectangle.</param>
      <param name="height">Height of this rectangle.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.RectangleShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen)">
      <summary>
            Creates a new RectangleShape with given startpoint, width, height and pen.
            </summary>
      <param name="x">X-position of the lower-left corner.</param>
      <param name="y">Y-position of the lower-left corner.</param>
      <param name="width">Width of this rectangle.</param>
      <param name="height">Height of this rectangle.</param>
      <param name="pen">Used to draw the lines on this rectangle.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.RectangleShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Layout.Pens.Pen,TallComponents.PDF.Layout.Brushes.Brush)">
      <summary>
            Creates a new RectangleShape with given startpoint, width, height, pen and brush.
            </summary>
      <param name="x">X-position of the lower-left corner.</param>
      <param name="y">Y-position of the lower-left corner.</param>
      <param name="width">Width of this rectangle.</param>
      <param name="height">Height of this rectangle.</param>
      <param name="pen">Used to draw the lines on this rectangle.</param>
      <param name="brush">The brush that is used to fill the rectangle.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.RectangleShape.Width">
      <summary>
            Width of this rectangle.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.RectangleShape.Height">
      <summary>
            Height of this rectangle.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.ShapeCollection">
      <summary>
            Collection of shape objects. Shapes is a shape itself. This allows recursion.
            A shapes collection can be seen as a canvas. You draw on this canvas by adding
            shapes to it.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.#ctor">
      <summary>
            Create a new empty collection of shapes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.#ctor(System.Double,System.Double)">
      <summary>
            Create a new empty collection of shapes. Positioned at 0,0.
            </summary>
      <param name="width">The width of this shape with respect to parent coordinate system.</param>
      <param name="height">The height of this shape with respect to parent coordinate system.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new empty collection of shapes.
            </summary>
      <param name="x">The X position (left).</param>
      <param name="y">The Y position (bottom).</param>
      <param name="width">The width of this shape with respect to parent coordinate system.</param>
      <param name="height">The height of this shape with respect to parent coordinate system.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new empty collection of shapes.
            </summary>
      <param name="x">The X position (left).</param>
      <param name="y">The Y position (bottom).</param>
      <param name="width">The width of this shape with respect to parent coordinate system.</param>
      <param name="height">The height of this shape with respect to parent coordinate system.</param>
      <param name="virtualWidth">The virtual width of the virtual canvas on which child shapes are positioned. </param>
      <param name="virtualHeight">The virtual height of the virtual canvas on which child shapes are positioned. </param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.Add(TallComponents.PDF.Layout.Shapes.Shape)">
      <summary>
            Add an existing shape to this collection.
            </summary>
      <param name="shape">Add this shape.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.AddRange(TallComponents.PDF.Layout.Shapes.ShapeCollection)">
      <summary>
            Adds the elements of a ShapeCollection to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="shapes">The ShapeCollection whose elements should be added to 
            the end of the collection.</param>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="shapes" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.AddRange(TallComponents.PDF.Layout.Shapes.Shape[])">
      <summary>
            Adds the elements of a Shape array to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="shapes">The array of shapes whose elements should be added to 
            the end of the collection.</param>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="shapes" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.Insert(System.Int32,TallComponents.PDF.Layout.Shapes.Shape)">
      <summary>
            Insert an existing shape at the specified index.
            </summary>
      <param name="index">The index of the shape after insertion.</param>
      <param name="shape">Insert this shape.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.RemoveAt(System.Int32)">
      <summary>
            Remove a shape at the specified index.
            </summary>
      <param name="index">The index of the shape to remove.</param>
      <remarks>Removing a shape at a non-existing index is silently ignored.</remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.Remove(TallComponents.PDF.Layout.Shapes.Shape)">
      <summary>
            Remove a shape from this collection.
            </summary>
      <param name="shape">Remove this shape.</param>
      <remarks>Removing a non-existing shape is silently ignored.</remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.Clear">
      <summary>
            Remove all shapes from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.IndexOf(TallComponents.PDF.Layout.Shapes.Shape)">
      <summary>
            Returns the index of the specified shape.
            </summary>
      <param name="shape">The shape to locate in this collection.</param>
      <returns>The zero-based index of the shape found in the collection; otherwise, -1.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.GetEnumerator">
      <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator">GetEnumerator</see>.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.ShapeCollection.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.Count">
      <summary>
            Number of shapes in this collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.Item(System.Int32)">
      <summary>
            Get a shape by index (0-based).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.Width">
      <summary>
            Width of this shape with respect to parent coordinate system.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.Height">
      <summary>
            Height of this shape with respect to parent coordinate system.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.VirtualWidth">
      <summary>
            The width of the virtual canvas on which child shapes are positioned. 
            This implies a coordinate system transformation.
            </summary>
      <remarks>
            Setting the <see cref="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.VirtualHeight" /> to anything other than <see cref="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.Height" /> will cause the child shapes to scale appropriately.
            <para>Fields cannot be scaled. Using virtual height with fields may lead to unexpected results.</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.VirtualHeight">
      <summary>
            The height of the virtual canvas on which child shapes are positioned. 
            </summary>
      <remarks>
            Setting the <see cref="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.VirtualHeight" /> to anything other than <see cref="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.Height" /> will cause the child shapes to scale appropriately.
            <para>Fields cannot be scaled. Using virtual height with fields may lead to unexpected results.</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.Clip">
      <summary>
            Clip child shapes. Default is true.
            </summary>
      <remarks>
            Clipping does not work on fields.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.ShapeCollection.ClipPath">
      <summary>
            The clip path to use.
            </summary>
      <remarks>
            Will be used if Clip = true, and at least 1 segment is added to the collection.
            Otherwise the clip path will be the rectangle defined by this ShapeCollection.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.ShapeSizeException">
      <summary>
            The exception that is thrown when a shape cannot be placed on a page because 
            the shape has an invalid size.
            </summary>
      <remarks>
            This exception can occur when the width or height of a shape is 0.
            The shape.ID is included into the error description
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.SimpleXhtmlFormatException">
      <summary>
            Thrown when badly formatted Simple Xhtml is encountered.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape">
      <summary>
            Renders one or more lines of text with xhtml markup.
            </summary>
      <remarks>
            Lines will wrap at the specified <see cref="P:TallComponents.PDF.Layout.Shapes.MultilineTextShape.Width" /> of the shape.
            You can set layout properties such as alignment and indentation.
            <para>The origin (X and Y properties) is the top-left position.</para></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.Read(System.Xml.XmlReader)">
      <summary>
            Reads this <see cref="T:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape">SimpleXhtmlShape</see> from XML.
            </summary>
      <param name="reader">An XML reader.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.Text">
      <summary>
            The rich text string to display formatted as xhtml.
            </summary>
      <remarks>
            Supported tags include: strong, b, em, i,  span, p and a wide variety of CSS styles like
            font, font-family, font-size, color, text-decoration etc.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.DefaultFont">
      <summary>
            The default font. (default Arial)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.DefaultFontSize">
      <summary>
            The default font size. (default 12)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.DefaultBold">
      <summary>
            If the text is default bold. (default = false)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.DefaultItalic">
      <summary>
            If the text is default italic. (default = false)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.DefaultUnderline">
      <summary>
            If the text is default underlined. (default = false)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.DefaultStrikeOut">
      <summary>
            If the text is default striked through. (default = false)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.DefaultColor">
      <summary>
            The default text color (default = black)
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.SimpleXhtmlShape.Multiline">
      <summary>
            Specifies whether the text may span multiple lines. (default true)
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.TextShape">
      <summary>
            Used to add a single-line text to a layer.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.TextShape.#ctor">
      <summary>
            Create an empty text shape.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.TextShape.#ctor(System.Double,System.Double,System.String,TallComponents.PDF.Layout.Fonts.Font,System.Double)">
      <summary>
            Create a text shape with given properties.
            </summary>
      <param name="x">Horizontal position of left edge.</param>
      <param name="y">Vertical position of bottom edge.</param>
      <param name="text">Content.</param>
      <param name="font">Font.</param>
      <param name="fontSize">Size of the font in points.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.TextShape.#ctor(System.Double,System.Double,System.String,TallComponents.PDF.Layout.Fonts.Font,System.Double,TallComponents.PDF.Layout.Colors.Color)">
      <summary>
            Create a text shape with given properties.
            </summary>
      <param name="x">Horizontal position of left edge.</param>
      <param name="y">Vertical position of bottom edge.</param>
      <param name="text">Content.</param>
      <param name="font">Font.</param>
      <param name="fontSize">Size of the font in points.</param>
      <param name="textColor">Forecolor of the text.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.TextShape.Clone">
      <summary>
            Clones a Shape.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Bold">
      <summary>
            If set, the text appears bold. Note that the boldness is simulated by using a thicker stroke.
            It is preferrable to use a bold font if possible. E.g. use arialbd.ttf for bold Arial and arial.ttf for
            regular Arial. This property is ignored if applied to a Bold font.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Italic">
      <summary>
            If set, the text appears italic. Note that the italicness is simulated by skewing the text slightly.
            It is preferrable to use an italic font if possible. E.g. use ariali.ttf for italic Arial and arial.ttf for
            regular Arial. This property is ignored if applied to an Italic font.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Width">
      <summary>
            The measured width is the space that will be used when drawing this shape on the page. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Height">
      <summary>
            The measured height is the space that will be used when drawing this shape on the page. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Font">
      <summary>
            Text is typeset using this font.
            </summary>
      <remarks>
            The default font is Helvetica at 12pt.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.FontSize">
      <summary>
            Size of font in points.
            </summary>
      <remarks>
            The default font is Helvetica at 12pt.
            </remarks>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown when trying to assign an invalid number (NaN or Infinity).</exception>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.TextColor">
      <summary>
            Forecolor of text. Default is black.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Text">
      <summary>
            Display this text.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.Direction">
      <summary>
            Read direction of this text (left-to-right or right-to-left).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.TextShape.BoundingBox">
      <summary>
            The size of the textshape after rotation is applied.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.DocumentInfo">
      <summary>
            Document Info for the document like Author, Title and Subject.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.DocumentInfo.Author">
      <summary>
            The person who authored this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.DocumentInfo.Title">
      <summary>
            Title of this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.DocumentInfo.Subject">
      <summary>
            Subject of this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.DocumentInfo.Keywords">
      <summary>
            Keywords of this document.
            </summary>
      <remarks>
            Semicolons can be used to seperate multiple keywords.  
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.DocumentInfo.Creator">
      <summary>
            The application that created this document before it was converted to PDF (this is your application).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.DocumentInfo.Producer">
      <summary>
            The component or application that created this document (this component after it is written).
            </summary>
      <remarks>
        <para>
            You can read the existing producer if was an existing document.
            </para>
        <para>
            This property is readonly.
            </para>
      </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.DocumentInfo.CreationDate">
      <summary>
            The date this PDF was originally created.
            </summary>
      <remarks>
            This property is readonly.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.GetWebCredentialsEventArgs">
      <summary>
            Class containing data for the GetWebCredentials event.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.GetWebCredentialsEventArgs.Url">
      <summary>
            The url to get the credentials for.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.GetWebCredentialsEventArgs.Credentials">
      <summary>
            The credentials for the url.
            </summary>
      <remarks>
            This value can be updated to set the credentials.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.GetWebCredentialsEventHandler">
      <summary>
            Represents the method that handles the GetWebCredentials event.
            </summary>
      <remarks>Set the credentials in the arguments to perform authentication.
            To authenticate using the user running the application or the impersonated
            user (on ASP.NET) supply <i>System.Net.CredentialCache.DefaultCredentials</i>.</remarks>
      <param name="sender">The sender.</param>
      <param name="e">The GetWebCredentials event arguments.</param>
    </member>
    <member name="T:TallComponents.PDF.Layout.PageSize">
      <summary>
            Encapsulates the width and height of a page and provides standard page sizes. 
            </summary>
      <remarks>
        <example>
            Specify a custom page size in XML:
            &lt;section&gt;
            &lt;!-- A4 Landscape --&gt;
              &lt;pagesize width="297mm" height="210mm" /&gt;
            &lt;!-- Section content goes here --&gt;
            &lt;/section&gt;
            </example>
      </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.PageSize.#ctor">
      <summary>
            Create a new page size with default size (Letter).
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.PageSize.#ctor(System.Double,System.Double)">
      <summary>
            Create a new page size with given width and height both in in points.
            </summary>
      <param name="width">Width in points.</param>
      <param name="height">Height in points.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.PageSize.Letter">
      <summary>
            8.5 x 11 inch
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.PageSize.Tabloid">
      <summary>
            11 x 17 inch
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.PageSize.Ledger">
      <summary>
            17 x 11 inch
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.PageSize.Legal">
      <summary>
            8.5 x 14 inch
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.PageSize.Statement">
      <summary>
            5.5 x 8.5 inch
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.PageSize.Executive">
      <summary>
            7.25 x 10.5 inch
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.PageSize.Folio">
      <summary>
            8.5 x 13 inch
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.PageSize.A3">
            297 x 420 mm
        </member>
    <member name="P:TallComponents.PDF.Layout.PageSize.A4">
      <summary>
            210 x 297 mm
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.PageSize.A5">
      <summary>
            148.5 X 210 mm
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.PageSize.A6">
      <summary>
            105 X 148.5 mm
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.PageSize.B5">
      <summary>
            182 x 257 mm
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.PageSize.Width">
      <summary>
            Width in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.PageSize.Height">
      <summary>
            Height in points.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Rectangle">
      <summary>
            A rectangle represents an area on the page.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Rectangle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
             For serializing purposes only.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Rectangle.#ctor">
      <summary>
            Creates a new instance of the Rectangle class with (0,0,0,0) 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Rectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Create a new rectangle.
            </summary>
      <param name="left">The left position in points.</param>
      <param name="bottom">The bottom position in points.</param>
      <param name="width">The rectangle width in points.</param>
      <param name="height">The rectangle height in points.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Rectangle.Left">
      <summary>
            The left position in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Rectangle.Bottom">
      <summary>
            The bottom position in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Rectangle.Width">
      <summary>
            The rectangle width in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Rectangle.Height">
      <summary>
            The rectangle height in points.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Unit">
      <summary>
            Unit is used to convert a wide variety of units to points, which is the
            unit used in PDF.
            </summary>
      <remarks>
            A point in PDF is exactly 1/72 inch. This is also known as a PostScript point.
            This class converts all units to PostScript points.
            </remarks>
      <example>
        <para>C#</para>
        <code>
                 myTable.PreferredWidth = Unit.Parse("50mm");
              </code>
        <code>
                 myFragment.FontSize = Unit.Parse("0.5in");
              </code>
        <para>VB.NET</para>
        <code>
                 myTable.PreferredWidth = Unit.Parse("50mm")
              </code>
        <code>
                 myFragment.FontSize = Unit.Parse("0.5in")
              </code>
      </example>
    </member>
    <member name="M:TallComponents.PDF.Layout.Unit.#ctor(System.Double)">
      <summary>
            Create a Unit from a value. The value is assumed to be in Points.
            </summary>
      <param name="val">
      </param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Unit.#ctor(System.Double,TallComponents.PDF.Layout.UnitType)">
      <summary>
            Create a Unit from a value and a UnitType
            </summary>
      <param name="val">The value of the Unit object expressed in the unit specified by type.</param>
      <param name="type">The unit of val, for example Inch.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Unit.op_Equality(TallComponents.PDF.Layout.Unit,TallComponents.PDF.Layout.Unit)">
      <summary>
            Compares two Unit objects for equality.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Unit.op_Inequality(TallComponents.PDF.Layout.Unit,TallComponents.PDF.Layout.Unit)">
      <summary>
            Compares two Unit objects for inequality.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Unit.Equals(System.Object)">
      <summary>
            Determines whether two Object instances are equal.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Unit.GetHashCode">
      <summary>
            Calculates a hash for this type.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Unit.Parse(System.String)">
      <summary>
            Create a unit from a string.
            </summary>
      <remarks>
        <list type="table">
          <listheader>
            <term>Unit</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>pt</term>
            <description>Point, 1/72 Inch</description>
          </item>
          <item>
            <term>pica</term>
            <description>Pica, 1/12 Point</description>
          </item>
          <item>
            <term>px</term>
            <description>Pixel, assumes a resolution of 72dpi.</description>
          </item>
          <item>
            <term>m</term>
            <description>Meter</description>
          </item>
          <item>
            <term>cm</term>
            <description>Centimeter, 2.54cm is 1 Inch</description>
          </item>
          <item>
            <term>mm</term>
            <description>Millimeter</description>
          </item>
          <item>
            <term>um</term>
            <description>Micrometer</description>
          </item>
          <item>
            <term>in</term>
            <description>Inch</description>
          </item>
          <item>
            <term>ft</term>
            <description>Foot, 12 inch is 1 foot</description>
          </item>
          <item>
            <term>yd</term>
            <description>Yard, 36 inch is 1 yard</description>
          </item>
          <item>
            <term>%</term>
            <description>Percentage. Values of this type are converted into a fraction. (e.g. 50% is 0.5 )</description>
          </item>
        </list>
      </remarks>
      <param name="unitString">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Unit.FromPixels(System.Int32,System.Double)">
      <summary>
            Create a unit from pixels and a resolution. Useful for
            working with images.
            </summary>
      <remarks>
            Default resolution for screen display is normally 72dpi, though 96dpi is used by GDI+.
            </remarks>
      <param name="pixels">Length in pixels</param>
      <param name="dpi">Resolution in dpi (Dots Per Inch)</param>
      <returns>
      </returns>
      <example>
        <code>
                 ImageShape image = new ImageShape( "image.jpg" );
                 image.KeepAspectRatio = true;
                 // Calculate width at resolution of 300dpi
                 image.Width = Unit.FromPixels( bitmap.Width, 300 );
              </code>
      </example>
    </member>
    <member name="M:TallComponents.PDF.Layout.Unit.ToPoint(System.String)">
      <summary>
            Convert a unit string to points
            </summary>
      <param name="unitString">A unit string.</param>
      <returns>The value in points</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Unit.ToString">
      <summary>
            Returns the value of the Unit as a formatted string in points.
            </summary>
      <returns>
      </returns>
      <example>
        <code>
                 Unit.Parse("1 in").ToString()
              </code>
              Returns the string "72pt".
            </example>
    </member>
    <member name="M:TallComponents.PDF.Layout.Unit.op_Implicit(TallComponents.PDF.Layout.Unit)~System.Double">
      <summary>
            Implicit conversion to double. The value is expressed in points.
            </summary>
      <param name="unit">Instance to convert.</param>
      <returns>Value of the unit in points.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Unit.op_Implicit(System.Double)~TallComponents.PDF.Layout.Unit">
      <summary>
            Implicit conversion from double. This allows you to assign a double 
            to any variable or property of type Unit without constructors or casting.
            </summary>
      <param name="val">The value in points</param>
      <returns>A Unit with the value val and UnitType Points</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Unit.op_Implicit(System.String)~TallComponents.PDF.Layout.Unit">
      <summary>
            Implicit conversion from string. This allows you to assign a sized string 
            to any variable or property of type Unit without constructors or casting.
            </summary>
      <param name="val">The value in a format that can be parsed</param>
      <returns>A Unit with the value val and UnitType found.</returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.Unit.IsRelative">
      <summary>
            This Unit is a relative value. True if this Unit is a percentage.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Unit.Points">
      <summary>
            Return the value of this Unit in points.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.UnitType">
      <summary>
            Known units handled by the <see cref="T:TallComponents.PDF.Layout.Unit">Unit</see> class.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.UnitType.Micrometer">
      <summary>
            Unit of length. 1/1000.0000 meter.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.UnitType.Millimeter">
      <summary>
            Unit of length. 1/1000 meter.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.UnitType.Centimeter">
      <summary>
            Unit of length. 1/100 meter.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.UnitType.Meter">
      <summary>
            Unit of length.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.UnitType.Pica">
      <summary>
            Unit of length. 1/12 point
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.UnitType.Point">
      <summary>
            Unit of length. 1/72 inch. Point is the base unit used in PDF documents.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.UnitType.Pixel">
      <summary>
            Unit of length. Usually 1/96 inch.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.UnitType.Inch">
      <summary>
            Unit of length. 1 inch is 2.54 cm.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.UnitType.Foot">
      <summary>
            Unit of length. 12 inch is 1 foot.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.UnitType.Yard">
      <summary>
            Unit of length. 36 inch is 1 yard.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.UnitType.Percentage">
      <summary>
            Relative unit, represented as a fraction. 100% is 1.0, 50% is 0.5.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Actions.Action">
      <summary>
            Abstract base class of all action classes.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.Action.Clone">
      <summary>
            Clone this action
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Actions.ActionCollection">
      <summary>
            An action collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.Add(TallComponents.PDF.Layout.Actions.Action)">
      <summary>
            Adds an <see cref="T:TallComponents.PDF.Layout.Actions.Action">Action</see> to the end of the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see>.
            </summary>
      <param name="action">The <see cref="T:TallComponents.PDF.Layout.Actions.Action" /> to be addded to the end of the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection" />.</param>
      <returns>
            The <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection" /> index at which the <see cref="T:TallComponents.PDF.Layout.Actions.Action" /> has been added.
            </returns>
      <remarks>
        <para>
          <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection" /> does not accept a <see langword="null" /> as a valid value. 
            </para>
        <para>
          <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection" /> does not accept duplicate elements.
            </para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="action" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">The given <paramref name="action" /> is already in this <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection" />. (Duplicate <paramref name="action" />)</exception>
      <example>
            C#
            <code> 
            ActionCollection actions = new ActionCollection();
            actions.<b>Add</b>( new GoToAction( page ) );
            </code>
            VB.NET
            <code>
            Dim actions as ActionCollection = new ActionCollection()
            actions.<b>Add</b>( new GoToAction( page ) )
            </code></example>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.AddRange(TallComponents.PDF.Layout.Actions.Action[])">
      <summary>
            Adds the entries in an array of <see cref="T:TallComponents.PDF.Layout.Actions.Action">actions</see> to the end of the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see>.
            </summary>
      <param name="actions">The array of <see cref="T:TallComponents.PDF.Layout.Actions.Action">actions</see> to be added to the end of the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection" />.</param>
      <remarks>
        <para>
          <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection" /> does not accept a <see langword="null" /> as a valid value. 
            </para>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
        <para>
          <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection" /> does not accept duplicate elements.</para>
      </remarks>
      <exception cref="T:System.ArgumentNullException">A given <paramref name="action" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">(At least) one of the entries in the given <paramref name="actions" /> is already in this <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection" />. (Duplicate <paramref name="action" />)</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.Clear">
      <summary>
            Removes all actions from the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see>.
            </summary>
      <example>
            C#
            <code> 
            ActionCollection actions = new ActionCollection();
            actions.Add( new GoToAction( page ) );
            actions.<b>Clear()</b>;
            </code>
            VB.NET
            <code>
            Dim actions as ActionCollection = new ActionCollection()
            actions.Add( new GoToAction( page ) )
            actions.<b>Clear()</b></code></example>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.Contains(TallComponents.PDF.Layout.Actions.Action)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Actions.Action">Action</see> is in the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see>.
            </summary>
      <param name="action">The <see cref="T:TallComponents.PDF.Layout.Actions.Action" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Layout.Actions.Action" /> is found in this <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection" />, false otherwise.</returns>
      <remarks>
            The <paramref name="action" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="action" /> is <see langword="null" />.</exception>
      <example>
            C#
            <code> 
            GoToAction goToAction = new GoToAction( page );
            UriAction uriAction = new UriAction( "http://www.tallcomponents.com" );
            ActionCollection actions = new ActionCollection();
            actions.Add( goToAction );
            bool found = actions.<b>Contains</b>( goToAction ); //found = true
            found = actions.<b>Contains</b>( uriAction ); //found = false
            </code>
            VB.NET
            <code>
            Dim goToAction1 as GoToAction = new GoToAction( page )
            Dim uriAction1 as UriAction = new UriAction( "http://www.tallcomponents.com" )
            Dim actions as ActionCollection = new ActionCollection()
            actions.Add( goToAction1 )
            Dim found as Boolean
            found = actions.<b>Contains</b>( goToAction1 ) 'found = True
            found = actions.<b>Contains</b>( uriAction1 ) 'found = False
            </code></example>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.IndexOf(TallComponents.PDF.Layout.Actions.Action)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Actions.Action">Action</see> in the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see>.
            </summary>
      <param name="action">The <see cref="T:TallComponents.PDF.Layout.Actions.Action" /> to locate in the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Actions.Action" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.Insert(System.Int32,TallComponents.PDF.Layout.Actions.Action)">
      <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Actions.Action" /> on a specific place in this <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection" />.
            </summary>
      <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Actions.Action" /> should be inserted.</param>
      <param name="action">The <see cref="T:TallComponents.PDF.Layout.Actions.Action" /> to be insert.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.Remove(TallComponents.PDF.Layout.Actions.Action)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Actions.Action">Action</see> from this <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see>.
            </summary>
      <param name="action">The action to remove.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Actions.Action">Action</see> from the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see> at the specified index.
            </summary>
      <param name="index">The zero-based index from the <see cref="T:TallComponents.PDF.Layout.Actions.Action" /> to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.ActionCollection.GetEnumerator">
      <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.
            </summary>
      <returns>Returns an enumerator that can iterate through the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection" />.</returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.Actions.ActionCollection.Item(System.Int32)">
      <summary>
            Get an <see cref="T:TallComponents.PDF.Layout.Actions.Action">Action</see> by zero-based index from the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see>. 
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Actions.ActionCollection.Count">
      <summary>
            Get the number of <see cref="T:TallComponents.PDF.Layout.Actions.Action">Action</see>s actually contained in the <see cref="T:TallComponents.PDF.Layout.Actions.ActionCollection">ActionCollection</see></summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Actions.FormAction">
      <summary>
            Form Action.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Actions.GoToAction">
      <summary>
             A go-to action.
            </summary>
      <remarks>
            Instructs the PDF reader application to jump to a different position, determined by the <see cref="P:TallComponents.PDF.Layout.Actions.GoToAction.Destination" />.
            <example>
            C#
            <code>
            Document document = new Document();
            Section section = document.Sections.Add();
            TextParagraph text1 = new TextParagraph();
            text1.Fragments.Add( new Fragment( "Jump to this paragraph" ) );
            section.Add( text1 );
            
            // The second paragraph links to the first using a GoToAction:
            Section section2 = document.Sections.Add();
            TextParagraph text2 = new TextParagraph();
            text2.Fragments.Add( new Fragment( "Click here" ) );
            text2.Actions.Add( new GoToAction( new ParagraphDestination( text1 ) );
            section.Add( text2 );
            </code></example><seealso cref="T:TallComponents.PDF.Layout.Navigation.ParagraphDestination" /><seealso cref="T:TallComponents.PDF.Layout.Navigation.RemoteDestination" /></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.GoToAction.#ctor">
      <summary>
            Create a new GoTo action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.GoToAction.Clone">
      <summary>
            Clone this action.
            </summary>
      <returns>The cloned go-to action.</returns>
      <remarks>
            The cloned goto-action will point to the same Destination.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.GoToAction.#ctor(TallComponents.PDF.Layout.Paragraphs.Paragraph)">
      <summary>
            Create a new GoTo action that points tot the specified paragraph.
            </summary>
      <param name="target">The paragraph to go to.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.GoToAction.#ctor(System.String)">
      <summary>
            Create a new GoTo action that points tot the specified paragraph.
            </summary>
      <param name="targetId">The ID of the paragraph to go to.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.GoToAction.#ctor(System.String,System.Int32)">
      <summary>
            Create a new GoTo action that jumps to the specified document.
            </summary>
      <remarks>
            Uses a <see cref="T:TallComponents.PDF.Layout.Navigation.RemoteDestination" /> to jump to another file. Note that the fileSpecification must be 
            a path to a file, not a URI.
            </remarks>
      <param name="fileSpecification">The name of the file.</param>
      <param name="pageIndex">The 0-based index of the page.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.GoToAction.#ctor(TallComponents.PDF.Layout.Navigation.Destination)">
      <summary>
            Create a new go-to action based on a Destination
            </summary>
      <param name="destination">The destination</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Actions.GoToAction.Destination">
      <summary>
            The destination this go-to action points to.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Actions.HttpMethod">
      <summary>
            The http method specifies how to submit to the server.
            </summary>
      <remarks>
            This property is meaningfull for SubmitFormat: Pdf and Html
            </remarks>
    </member>
    <member name="F:TallComponents.PDF.Layout.Actions.HttpMethod.Post">
      <summary>
            Use Http post request.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Actions.HttpMethod.Get">
      <summary>
            Use Http get.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Actions.JavaScriptAction">
      <summary>
            JavaScript Action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.JavaScriptAction.#ctor">
      <summary>
            Create a new JavaScript action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.JavaScriptAction.#ctor(TallComponents.PDF.Layout.JavaScript.JavaScript)">
      <summary>
            Create a new JavaScript action.
            </summary>
      <param name="javaScript">The JavaScript to embed.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.JavaScriptAction.#ctor(System.String)">
      <summary>
            Create a new JavaScript action.
            </summary>
      <param name="javaScriptCode">The JavaScript code to embed.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.JavaScriptAction.Clone">
      <summary>
            Clone this action.
            </summary>
      <returns>The cloned JavaScript action.</returns>
      <remarks>
            The cloned javascript-action will point to a cloned JavaScript object.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Actions.JavaScriptAction.JavaScript">
      <summary>
            The java script code in this java script action.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Actions.LaunchAction">
      <summary>
            Launch Action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.LaunchAction.#ctor">
      <summary>
            Create a new Launch action.
            </summary>
      <remarks>
            By default the fileName will be ''.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.LaunchAction.#ctor(System.String)">
      <summary>
            Create a new Launch action.
            </summary>
      <param name="path">The complete path of the application to launch.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.LaunchAction.Clone">
      <summary>
            Clone this action.
            </summary>
      <returns>The cloned named action.</returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.Actions.LaunchAction.Path">
      <summary>
            The complete path of the application to launch.
            </summary>
      <remarks>
            You cannot set this property to <see langword="null" />.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Actions.LaunchAction.WindowBehavior">
      <summary>
            Whether to open the destination in a new windows, current one or specified by the user preferences.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Actions.ResetFormAction">
      <summary>
            Reset form Action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.ResetFormAction.#ctor">
      <summary>
            Create a new reset form action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.ResetFormAction.Clone">
      <summary>
            Clone this action.
            </summary>
      <returns>The cloned reset form action.</returns>
    </member>
    <member name="T:TallComponents.PDF.Layout.Actions.SubmitFormAction">
      <summary>
            Submit form Action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.SubmitFormAction.#ctor">
      <summary>
            Create a new submit form action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.SubmitFormAction.Clone">
      <summary>
            Clone this action.
            </summary>
      <returns>The cloned submit form action.</returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.Actions.SubmitFormAction.Url">
      <summary>
            The uniform resource locator (url) for this submit form action.
            </summary>
      <remarks>
            You cannot set this property to <see langword="null" />.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Actions.SubmitFormAction.SubmitFormat">
      <summary>
            The submit format specifies what to submit to the server.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Actions.SubmitFormAction.HttpMethod">
      <summary>
            The http method specifies how to submit to the server.
            </summary>
      <remarks>
            This property is meaningfull for SubmitFormat: Pdf and Html
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Actions.SubmitFormAction.IncludeEmptyFields">
      <summary>
            Fields without a value should be submitted also.
            </summary>
      <remarks>
            This property has no meaning for SubmitFormat: Pdf 
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Actions.SubmitFormAction.ConvertDatesToStandardFormat">
      <summary>
            When submitting all fields which contains a date are converted to a predefined format, 
            otherwise the value is submitted as-is (aka how the user entered the data).
            </summary>
      <remarks>
        <para>This property has no meaning for SubmitFormat: Pdf.</para>
        <para>The predefined format: 'D:yyyymmdd' (without the quotes)</para>
      </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Actions.SubmitFormat">
      <summary>
            The submit format specifies what to submit to the server.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Actions.SubmitFormat.Pdf">
      <summary>
            Complete PDF document.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Actions.SubmitFormat.Html">
      <summary>
            HTML form format.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Actions.SubmitFormat.Xfdf">
      <summary>
            XML Forms Data Format.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Actions.SubmitFormat.Fdf">
      <summary>
            Forms Data Format (saved as .fdf file).
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Actions.UriAction">
      <summary>
            Uri Action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.UriAction.#ctor">
      <summary>
            Create a new Uri action.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.UriAction.#ctor(System.String)">
      <summary>
            Create a new Uri action.
            </summary>
      <param name="uri">The uniform resource identifier (uri) for this Uri action.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.UriAction.#ctor(System.String,System.Boolean)">
      <summary>
            Create a new Uri action.
            </summary>
      <param name="uri">The uniform resource identifier (uri) for this Uri action.</param>
      <param name="isMap">A flag specifying whether to track the mouse position when the Uri is resolved.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Actions.UriAction.Clone">
      <summary>
            Clone this action.
            </summary>
      <returns>The cloned uri action.</returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.Actions.UriAction.Uri">
      <summary>
            The uniform resource identifier (uri) for this Uri action.
            </summary>
      <remarks>
            You cannot set this property to <see langword="null" />.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Actions.UriAction.IsMap">
      <summary>
            A flag specifying whether to track the mouse position when the Uri is resolved.
            </summary>
      <remarks>
            This entry  applies only to actions triggered by the user's clicking annotation; 
            it is ignored for actions associated with a bookmark or with a document's open action.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Fields.Option">
      <summary>
            A PDF form field option. This base class is used for both ListOption and RadioButtonOption.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.Option.ExportName">
      <summary>
            Name as exported. (assign this string to the field's  Value) 
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Fields.ListOption">
      <summary>
            A PDF form field option. 
            </summary>
      <remarks> 
            List options are returned by the Options property of the ListBoxField or DropDownListField class.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOption.#ctor">
      <summary>
            Create a new List option.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOption.Read(System.Xml.XmlReader)">
      <summary>
            Read this ListOption from XML.
            </summary>
      <param name="reader">The XmlReader to read from.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOption.#ctor(System.String)">
      <summary>
            Creates a new List option.
            </summary>
      <param name="name">Both the ExportName and the DisplayName.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.ListOption.#ctor(System.String,System.String)">
      <summary>
            Creates a new List option.
            </summary>
      <param name="exportName">Name as exported.</param>
      <param name="displayName">Name as displayed.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.ListOption.DisplayName">
      <summary>
            Name as displayed.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection">
      <summary>
            Collection of form options. Associated with a ComboBox and ListBox field.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection.Clear">
      <summary>
            Removes all options from the collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection.RemoveAt(System.Int32)">
      <summary>
            Remove an option at the specified zero-based index.
            </summary>
      <param name="index">Zero-based index.</param>
      <remarks>
            An index-out-of-range is silently ignored.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection.Insert(System.Int32,TallComponents.PDF.Layout.Shapes.Fields.Option)">
      <summary>
            Insert an option at the specified zero-based index.
            </summary>
      <param name="index">Zero-based index.</param>
      <param name="option">Insert this option.</param>
      <remarks>
            An index-out-of-range is silently ignored.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection.Add(TallComponents.PDF.Layout.Shapes.Fields.Option)">
      <summary>
            Add an option to the end of the collection.
            </summary>
      <param name="option">The option to add.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection.GetEnumerator">
      <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection.Item(System.Int32)">
      <summary>
            Retrieve an option by 0-based index.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Shapes.Fields.OptionCollection.Count">
      <summary>
            Number of options.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.JavaScript.JavaScript">
      <summary>
            JavaScript Code.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScript.#ctor">
      <summary>
            Create a new JavaScript object, without any code.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScript.#ctor(System.String)">
      <summary>
            Create a new JavaScript object, with the given code.
            </summary>
      <param name="javaScriptCode">The initial javascript code.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.JavaScript.JavaScript.Text">
      <summary>
            The JavaScript Code.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection">
      <summary>
            JavaScript defined at document level. You cannot create an instance of this class. Instead you retrieve an existing JavaScriptCollection object
            from the JavaScript property of the Document class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.Add(TallComponents.PDF.Layout.JavaScript.JavaScript)">
      <summary>
            Adds a (Named)JavaScript to the javascript collection.
            </summary>
      <remarks>If an unnamed javascript is added to the collection, a name will be 
            created with the following format: 
            <para>- Fixed component: TC-JS-AN-</para><para>- Sequential hex-number: xxxx</para>
            (Note: performance can be affected when a lot of unnamed scripts are added.)</remarks>
      <param name="script">The script to add.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.Remove(System.String)">
      <summary>
            Removes the JavaScript object with the given name.
            </summary>
      <param name="name">The name to remove.</param>
      <remarks>
            Nothing happens when the name cannot be found.
            <para>
            The name is case sensitive.
            </para></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.Exists(System.String)">
      <summary>
            Check if the given name exists in the current collection.
            </summary>
      <param name="name">The script name to check.</param>
      <returns>True if found, false otherwise</returns>
      <para>
            The name is case sensitive.
            </para>
    </member>
    <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.GetEnumerator">
      <summary>
            Get an enumerator to iterrate over all items in this collection.
            </summary>
      <returns>An IEnumerator implementation.</returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.Count">
      <summary>
            The number of JavaScript element in this collection
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.ScriptNames">
      <summary>
            The script names in this document.
            </summary>
      <para>
            The script names are case sensitive.
            </para>
    </member>
    <member name="P:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.Item(System.String)">
      <summary>
            The JavaScript associated with the given name.
            </summary>
      <param name="name">The script name.</param>
      <returns>A JavaScript object with the JavaScript code in it, <see langword="null" /> if the name cannot be found.</returns>
      <remarks>
            Setting a JavaScript with an existing name, will override the existing item.
            <para>
            The name is case sensitive, you may use ASCII character only.
            </para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.JavaScript.JavaScriptCollection.Item(System.Int32)">
      <summary>
            The JavaScript associated with the given index.
            </summary>
      <param name="index">The zero-base index.</param>
      <returns>A JavaScript object with the JavaScript code in it.</returns>
    </member>
    <member name="T:TallComponents.PDF.Layout.JavaScript.JavaScriptEnumerator">
      <summary>
            A custom enumerator to iterate over all items in the JavaScript collection. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScriptEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.JavaScript.JavaScriptEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.JavaScript.JavaScriptEnumerator.Current">
      <summary>
            Gets the current element in the JavaScript collection.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.JavaScript.NamedJavaScript">
      <summary>
            Named JavaScript Code.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.JavaScript.NamedJavaScript.#ctor">
      <summary>
            Create a new NamedJavaScript object, without any code.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.JavaScript.NamedJavaScript.#ctor(System.String)">
      <summary>
            Create a new named NamedJavaScript object, without any code.
            </summary>
      <param name="name">The name for this named java script.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.JavaScript.NamedJavaScript.#ctor(System.String,System.String)">
      <summary>
            Create a new named NamedJavaScript object, with defined code.
            </summary>
      <param name="name">The name for this named java script.</param>
      <param name="script">The java script to assign.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.JavaScript.NamedJavaScript.Name">
      <summary>
            Get or set the name of this JavaScript.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Navigation.Destination">
      <summary>
            Base class for classes that describe a location in a PDF document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.Destination.Left">
      <summary>
            The horizontal position (measured from the left in points) of the page that is displayed at the left edge of the page window.
            </summary>
      <remarks>
            double.NaN is used for: use the current value.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.Destination.Right">
      <summary>
            The horizontal position (measured from the left in points) of the page that is displayed at the right edge of the page window.
            </summary>
      <remarks>
            double.NaN is used for: use the current value.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.Destination.Top">
      <summary>
            The vertical position (measured from the bottom in points) of the page that is displayed at the top edge of the page window.
            </summary>
      <remarks>
            double.NaN is used for: use the current value.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.Destination.Bottom">
      <summary>
            The vertical position (measured from the bottom in points) of the page that is displayed at the bottom edge of the page window.
            </summary>
      <remarks>
            double.NaN is used for: use the current value.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.Destination.ZoomFactor">
      <summary>
            The zoom factor to use when displaying the page. 1 means actual size; 2 means magnify twice.
            </summary>
      <remarks>
            double.NaN is used for: use the current value.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.Destination.PageDisplay">
      <summary>
            Specifies how the page is displayed after the bookmark is clicked.
            </summary>
      <remarks>
            Default = PageDisplay.PositionZoom;
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Navigation.InternalPageDestination">
      <summary>
            Describes a location inside this PDF document. 
            </summary>
      <remarks>
            Allows to specify the pagenumber directly. This allows having references in 
            event driven generation mode.
            <para>NOTE: By setting an invalid page (e.g.: page 99 in a 3 page document)
            this will result in a broken link!</para></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Navigation.InternalPageDestination.#ctor">
      <summary>
            Create a new Internal Page Destination.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Navigation.InternalPageDestination.#ctor(System.Int32)">
      <summary>
            Create a new InternalPageDestination.
            </summary>
      <param name="pageIndex">The zero-based index.</param>
      <remarks>
            WindowBehavior.UserPreference will be used.
            PageDisplay.FitEntire will be used. 
            <para>NOTE: There is no check that the page given is valid (existing)!</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.InternalPageDestination.PageIndex">
      <summary>
            The pageIndex this destination points to.
            <para>NOTE: There is no check that the page given is valid (existing)!</para></summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Navigation.PageDisplay">
      <summary>
            Different ways to specifiy how the page is displayed in the viewer.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.PageDisplay.PositionZoom">
      <summary>
            The page is displayed with specified zoom and specified position.
            The top and left positions and the zoom are specified by the Top, Left and Zoom properties of Bookmark.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.PageDisplay.FitEntire">
      <summary>
            Fit the entire page both horizontally and vertically.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.PageDisplay.FitHorizontally">
      <summary>
            Fit the page horizontally.
            The top position is specified by the Top property of Bookmark.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.PageDisplay.FitVertically">
      <summary>
            Fit the page vertically.
            The left position is specified by the Left property of Bookmark.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.PageDisplay.FitRectangle">
      <summary>
            Fit the specified rectangle. 
            The rectangle is specified by the Left, Right, Top and Bottom properties of Bookmark.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.PageDisplay.FitBoundingBox">
      <summary>
            Fit the bounding box of the page contents both horizontally and vertically.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Navigation.ParagraphDestination">
      <summary>
            Describes a location inside a PDF document.
            </summary>
      <remarks>
            The paragraph destination is used to construct <see cref="T:TallComponents.PDF.Layout.Actions.GoToAction">GoTo actions</see> that 
            jump to a location within the same document. Note that the exact location that the action jumps 
            to is determined by the <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph" /> that the destination references.
            Setting the position ( e.g. Left and Top ) has no effect.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Navigation.ParagraphDestination.#ctor">
      <summary>
            Create a new ParagraphDestination.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Navigation.ParagraphDestination.#ctor(TallComponents.PDF.Layout.Paragraphs.Paragraph)">
      <summary>
            Create a new ParagraphDestination that points to a <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph" />.
            </summary>
      <param name="target">The target <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph" />.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Navigation.ParagraphDestination.#ctor(System.String)">
      <summary>
            Create a new ParagraphDestination that points to a <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph" /> identified by it's unique <see cref="M:Paragraph.ID" />.
            </summary>
      <param name="targetId">The <see cref="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.ID" /> of the target <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph" />.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph">
      <summary>
            The <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph" /> that this destination points to.
            </summary>
      <remarks>
            Setting the target <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph" /> explicitly overrides the <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.ParagraphId" />.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.ParagraphId">
      <summary>
            The <see cref="M:Paragraph.ID" /> of the <see cref="P:TallComponents.PDF.Layout.Navigation.ParagraphDestination.Paragraph" /> that this destination points to.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Navigation.RemoteDestination">
      <summary>
            Describes a location inside an other PDF document. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Navigation.RemoteDestination.#ctor">
      <summary>
            Create a new Remote Destination.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Navigation.RemoteDestination.#ctor(System.String,System.Int32)">
      <summary>
            Create a new Remote Destination.
            </summary>
      <param name="path">The uniform resource locator (url) for this remote destination.</param>
      <param name="pageIndex">The zero-based index.</param>
      <remarks>
            WindowBehavior.UserPreference will be used.
            PageDisplay.FitEntire will be used.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Navigation.RemoteDestination.#ctor(System.String,System.Int32,TallComponents.PDF.Layout.Navigation.WindowBehavior)">
      <summary>
            Create a new Remote Destination.
            </summary>
      <param name="path">The uniform resource locator (url) for this remote destination.</param>
      <param name="pageIndex">The zero-based index.</param>
      <param name="windowBehavior">Whether to open the destination in a new windows, current one or specified by the user preferences.</param>
      <remarks>
            PageDisplay.FitEntire will be used.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.RemoteDestination.Path">
      <summary>
            The uniform resource locator (url) for this remote destination.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.RemoteDestination.PageIndex">
      <summary>
            The pageIndex this destination points to.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Navigation.RemoteDestination.WindowBehavior">
      <summary>
            Whether to open the destination in a new windows, current one or specified by the user preferences.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Navigation.WindowBehavior">
      <summary>
             Whether to open the destination in a new windows, current one or specified by the user preferences.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.WindowBehavior.NewWindow">
      <summary>
            Open in a new window.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.WindowBehavior.CurrentWindow">
      <summary>
            Open in the current window.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Navigation.WindowBehavior.UserPreference">
      <summary>
            Use the current user preference.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.ComposeEntryEventArgs">
      <summary>
            Povides data for the <see cref="E:TallComponents.PDF.Layout.CrossreferenceSection.ComposeEntry" /> event of a <see cref="T:TallComponents.PDF.Layout.CrossreferenceSection" />.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.ComposeEntryEventArgs.#ctor(TallComponents.PDF.Layout.Paragraphs.Paragraph)">
      <summary>
            Initialize a new instance of the ComposeEntryEventArgs class.
            </summary>
      <param name="paragraph">The paragraph for which the event was raised.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.ComposeEntryEventArgs.CurrentParagraph">
      <summary>
            Add content to the <see cref="T:TallComponents.PDF.Layout.CrossreferenceSection" /> for this <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" />.
            </summary>
      <remarks>
            Add the content to the <see cref="T:TallComponents.PDF.Layout.CrossreferenceSection" /> that fired the event (the sender in the event handler).
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.ComposeEntryEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.CrossreferenceSection.ComposeEntry" /> event of a <see cref="T:TallComponents.PDF.Layout.CrossreferenceSection" />.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.ComposeSectionEventHandler">
      <summary>
            Represents the method that handles the <see cref="E:TallComponents.PDF.Layout.Section.StartCompose" /> and <see cref="E:TallComponents.PDF.Layout.Section.EndCompose" />event of a <see cref="T:TallComponents.PDF.Layout.Section" />.
            </summary>
      <remarks>
        <seealso cref="M:TallComponents.PDF.Layout.Section.Compose(TallComponents.PDF.Layout.Document)" />
      </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.EndPageEventArgs">
      <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Section.EndPage">EndPage</see> event of a <see cref="T:TallComponents.PDF.Layout.Section">Section</see>.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.EndPageEventArgs.PageNumber">
      <summary>
            Get the page number of this page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.EndPageEventArgs.BackgroundAreas">
      <summary>
            Get the collection of areas to add to the background of this page.
            </summary>
      <remarks>
            These area's will be rendered below the main content of the page (if any).
            <para>Area's added here will be rendered on top of BackgroundAreas previously added either in the main flow or in the StartPage event.</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.EndPageEventArgs.ForegroundAreas">
      <summary>
            Collection of areas to add to the foreground of this page.
            </summary>
      <remarks>
            These area's will be rendered above the main content of the page (if any).
            <para>Area's added here will be rendered on top of ForegroundAreas previously added either in the main flow or in the StartPage event.</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.EndPageEventArgs.Foreground">
      <summary>
            Represents the foreground canvas of this page.
            </summary>
      <remarks>
            Draw on he canvas by adding shapes.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.EndPageEventArgs.Background">
      <summary>
            Represents the background canvas of this page.
            </summary>
      <remarks>
            Draw on he canvas by adding shapes.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.EndPageEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Section.EndPage" /> event of a <see cref="T:TallComponents.PDF.Layout.Section" />.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.QueryPageSettingsEventArgs">
      <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Section.QueryPageSettings" /> event of a <see cref="T:TallComponents.PDF.Layout.Section" />.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.PageSize">
      <summary>
            Get or set the height and width of all pages in this section.
            </summary>
      <remarks>The units mentioned are in user space units.</remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.CropBox">
      <summary>
            Get or set the visual/printed part of the page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.BleedBox">
      <summary>
            Get or set the part of the part available in the production environment.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.Orientation">
      <summary>
            Page orientation (counterclockwise).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.Cancel">
      <summary>
            Get or set if document generaton has to be aborted.
            </summary>
      <remarks>
            Set to true if no more pages must be created.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.FirstPage">
      <summary>
            Get if this is the first page in the section.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.PageIndex">
      <summary>
            Get the index of the page.
            </summary>
      <remarks>
            This is the 1-based index of the page in the document, not the page number.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.Margin">
      <summary>
            Get the margins for this page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.QueryPageSettingsEventArgs.Columns">
      <summary>
            Get or set the collection of columns on the pages of this section.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.QueryPageSettingsEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Section.QueryPageSettings" /> event of a <see cref="T:TallComponents.PDF.Layout.Section" />.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.StartPageEventArgs">
      <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Section.StartPage">Startpage</see> event of a <see cref="T:TallComponents.PDF.Layout.Section">Section</see>.
            </summary>
      <remarks>To change the page properties (Page size, margins) change the value in the <see cref="T:TallComponents.PDF.Layout.QueryPageSettingsEventHandler" /> event.</remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.StartPageEventArgs.PageIndex">
      <summary>
            Get the page index of this page in the document (1-based).
            </summary>
      <remarks>
            This is the absolute page index in the document. This is not the page number 
            (as printed by #p). If you need the page number use <see class="QueryPageSettingsEventArgs.PageNumber">PageNumber</see>.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.StartPageEventArgs.PageNumber">
      <summary>
            Get or set the page number of this page.
            </summary>
      <remarks>
            This is the page number as printed by the #p field. If you need the absolute 
            page index use <see class="QueryPageSettingsEventArgs.PageIndex">PageIndex</see>.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.StartPageEventArgs.BackgroundAreas">
      <summary>
            Get the collection of areas to add to the background of this page.
            </summary>
      <remarks>
            These area's will be rendered below the main content of the page (if any).
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.StartPageEventArgs.ForegroundAreas">
      <summary>
            Get the collection of areas to add to the foreground of this page.
            </summary>
      <remarks>
            These area's will be rendered above the main content of the page (if any).
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.StartPageEventArgs.Foreground">
      <summary>
            Get the foreground canvas of this page as a collection of shapes. 
            </summary>
      <remarks>
            You draw on this canvas by adding shapes to it.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.StartPageEventArgs.Background">
      <summary>
            Get the background canvas of this page as a collection of shapes.
            </summary>
      <remarks>
            You draw on this canvas by adding shapes to it.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.StartPageEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Section.StartPage" /> event of a <see cref="T:TallComponents.PDF.Layout.Section" />.
            </summary>
      <remarks>To change the page properties (Page size, margins) change the value in the <see cref="T:TallComponents.PDF.Layout.QueryPageSettingsEventHandler" /> event.</remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.AttributeNotFoundException">
      <summary>
            The exception that is thrown when an XML attribute does not correspond to a property of the corresponding class.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.ImageSizeException">
      <summary>
            The exception that is thrown when a image cannot be placed within the available space.
            </summary>
      <remarks>
            This can happen when the image is larger than a complete page or area.
            If available the path and Paragraph.ID are included in the error description
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.BreakParagraphEventArgs">
      <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.BreakParagraph" /> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" />.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.BreakParagraphEventArgs.Left">
      <summary>
            Get the left position of paragraph on page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.BreakParagraphEventArgs.Bottom">
      <summary>
            Get the bottom position of paragraph on page before break.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.BreakParagraphEventArgs.Width">
      <summary>
            Get the available width for paragraph on page.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.BreakParagraphEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.BreakParagraph" /> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" />.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.ContinueParagraphEventArgs">
      <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.ContinueParagraph" /> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" />.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.ContinueParagraphEventArgs.Left">
      <summary>
            Get the left position of paragraph on page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.ContinueParagraphEventArgs.Bottom">
      <summary>
            Get the bottom position of continued paragraph on page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.ContinueParagraphEventArgs.Width">
      <summary>
            Get the available width for paragraph on page.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.ContinueParagraphEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.ContinueParagraph" /> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" />.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.EndParagraphEventArgs">
      <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.EndParagraph" /> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" />.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.EndParagraphEventArgs.Left">
      <summary>
            Get the left position of paragraph on page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.EndParagraphEventArgs.Bottom">
      <summary>
            Get the bottom position of paragraph on page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.EndParagraphEventArgs.Width">
      <summary>
            Get the available width for paragraph on page.
            </summary>
      <remarks>
            This width does not account for left or right indentation.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.EndParagraphEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.EndParagraph" /> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" />.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventArgs">
      <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.PrintParagraph" /> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection" />.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventArgs.Paragraph">
      <summary>
            Create a Paragraph and assign it to this property in the event handler.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventArgs.Left">
      <summary>
            The horizontal position of the left edge of this paragraph.
            This position does not account for left indentation.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventArgs.Top">
      <summary>
            The vertical position of the top edge of this paragraph.
            This position does not account for spacing before.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventArgs.Width">
      <summary>
            The available width for this paragraph.
            This width does not account for left or right indentation.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventArgs.Data">
      <summary>
            User-defined data. This member points to the same object
            as the <see cref="P:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Data" /> member. You typically store a reference to a data 
            source such as a SqlDataReader or XmlReader object.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventArgs.MoreContent">
      <summary>
            Set to true if more content is available. 
            </summary>
      <remarks>
            If set to true, the event will fire again so 
            more content can be added. If set to false, the event will not fire again and generation 
            will continue with the next section (if any).
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.PrintParagraphEventHandler">
      <summary>
             Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.PrintParagraph" /> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection" />.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.PrintRowEventArgs">
      <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Paragraphs.RowCollection.PrintRow" /> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection" />.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintRowEventArgs.Data">
      <summary>
            Get the user-defined data, maps to <see cref="P:TallComponents.PDF.Layout.Paragraphs.RowCollection.Data" />.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintRowEventArgs.Row">
      <summary>
            Get or set the row to be printed. 
            </summary>
      <remarks>
            The event handler will set this to a new row. If <see langword="null" /> (default), the PrintRowEvent
            event will not occur again.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintRowEventArgs.PageNumber">
      <summary>
            Get or set the page number of the page where this row starts.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.PrintRowEventArgs.MoreContent">
      <summary>
            Get or set if more content is available. 
            </summary>
      <remarks>
            If set to true, the event will fire again so 
            more content can be added. If set to false, the event will not fire again.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.PrintRowEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Paragraphs.RowCollection.PrintRow" /> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection" />.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.RollbackParagraphEventArgs">
      <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.RollbackParagraph" /> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" />.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.RollbackParagraphEventArgs.Position">
      <summary>
            Get the top position of paragraph on page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.RollbackParagraphEventArgs.Rollback">
      <summary>
            Get or set if the paragraph has to be rolled back / discarded.
            </summary>
      <remarks>
            If true, the paragraph is not printed and will be discarded. You can add
            the paragraph again the next time <see cref="E:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.PrintParagraph" /> event is fired.
            Default value is true.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.RollbackParagraphEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.RollbackParagraph" /> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" />.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.RtfCustomEventArgs">
      <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Paragraphs.RtfParagraph.RtfCustomEvent" /> event on a <see cref="T:TallComponents.PDF.Layout.Paragraphs.RtfParagraph" />.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.RtfCustomEventArgs.Number">
      <summary>
            The event number.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.RtfCustomEventArgs.Text">
      <summary>
            The text for the event.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.RtfCustomEventArgs.Paragraphs">
      <summary>
            Get the paragraphs in this collection.
            </summary>
      <remarks>
            Add paragraphs to this collection in your event handler.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.RtfCustomEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Paragraphs.RtfParagraph.RtfCustomEvent" /> event on a <see cref="T:TallComponents.PDF.Layout.Paragraphs.RtfParagraph" />.
            </summary>
      <param name="sender">The RtfParagraph that triggered the event.</param>
      <param name="e">Event arguments.</param>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.TransformParagraphEventArgs">
      <summary>
            Provides data for the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.TransformParagraph" /> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" />.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.TransformParagraphEventArgs.VerticalOffset">
      <summary>
            Get the amount of vertical translation of this paragraph.
            </summary>
      <remarks>
            The Top and Bottom arguments of the PrintParagraph, BreakParagraph, ContinueParagraph
            and EndParagraph must be increased by the value of this property to determine the final
            position of this paragraph.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.TransformParagraphEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.TransformParagraph" /> event of a <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" />.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.BookmarkParagraph">
      <summary>
            A bookmakt paragraph inserts a bookmark item, but has no content.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.NumberedItem">
      <summary>
            A textparagraph that has a number reference.
            </summary>
      <remarks>
            The NumberedItem class is a specialization of TextParagraph. 
            All members of TextParagraph are members of NumberedItem as well.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.TextParagraph">
      <summary>
            The textparagraph holds text data to be flowed on the page.
            </summary>
      <remarks>
            The text paragraph is a specialization of the paragraph class.
            The text paragraph represents a block of text than spans 1 or more 
            lines. The text is stored in 1 or more fragments.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.Paragraph">
      <summary>
            The paragraph class is the base class for a number of specialized 
            classes.
            </summary>
      <remarks>
            A paragraph is part of exactly one section.
            Specializations are TextParagraph, Table, Image and Drawing. These 
            classes may be further specialized. The following applies to all 
            special paragraphs.
            <para>An empty paragraph will not render anything, not even SpacingBefore and SpacingAfter.</para></remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.Bordered">
      <summary>
            Base class for all classes that have a border.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Bordered.Clone">
      <summary>
            Clones a Bordered.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Bordered.Margin">
      <summary>
            Get or set the margin of a border.
            </summary>
      <remarks>
            Margin is extra spacing outside the border.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Bordered.Padding">
      <summary>
            Get or set the padding of a border.
            </summary>
      <remarks>
            Padding is extra spacing between the border and the content. 
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Bordered.Border">
      <summary>
            Get or set the border around this content element. 
            Default is null, meaning that there is no border.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Paragraph.Clone">
      <summary>
            Clones a Paragraph.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Paragraph.Replace(System.String)">
      <summary>
            For internal use only
            </summary>
      <param name="text">For internal usage only</param>
    </member>
    <member name="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.BreakParagraph">
      <summary>
            Occurs when a paragraph is broken across pages.
            </summary>
    </member>
    <member name="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.RollbackParagraph">
      <summary>
            Occurs when a paragraph is rolled back due to a text flow constraint.
            </summary>
    </member>
    <member name="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.EndParagraph">
      <summary>
            Occurs when a paragraph ends.
            </summary>
    </member>
    <member name="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.ContinueParagraph">
      <summary>
            Occurs when a paragraph continues.
            </summary>
    </member>
    <member name="E:TallComponents.PDF.Layout.Paragraphs.Paragraph.TransformParagraph">
      <summary>
            Occurs when a paragraph is transformed e.g. due to vertical alignment.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.Actions">
      <summary>
            The actions that will be executed when the paragraph is clicked.
            </summary>
      <remarks>
            The actions are executed by the PDF reader application.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.Label">
      <summary>
            Get or set the label for this paragraph.
            </summary>
      <remarks>
            This attribute can be referenced using the #l field.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.Caption">
      <summary>
            This attribute can be referenced using the #c field.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.SpacingBefore">
      <summary>
            Get or set the number of added user space units above the rendered paragraph.
            </summary>
      <remarks>
            If this paragraph is at the top of the page the spacing is omitted.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.SpacingAfter">
      <summary>
            Get or set the number of added user space units below the rendered paragraph. 
            </summary>
      <remarks>
            This spacing may be omitted at the bottom of the page. 
            In other words, it can not cause a page break.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.LeftIndentation">
      <summary>
            Get or set the left side indent for this paragraph.
            </summary>
      <remarks>
            For this paragraph only, the left margin shifts to the
            right by the amount specified. Can be negative (implies left shift).
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.RightIndentation">
      <summary>
            Get or set the right side indent for this paragraph.
            </summary>
      <remarks>
            For this paragraph only, the right margin shifts to the
            left by the amount specified. Can be negative (implies right shift).
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.HorizontalAlignment">
      <summary>
            Get or set the horizontal alignment of the paragraph.
            </summary>
      <remarks>
            How the complete paragraph is horizontally aligned on the page 
            with respect to the left and right page margins.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.Note">
      <summary>
            Get or set the note to be inserted.
            </summary>
      <remarks>The note is inserted in the left margin of the paragraph.</remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.DoNotBreak">
      <summary>
            Get or set if a paragraph may be broken on page edges.
            </summary>
      <remarks>
            If possible, this paragraph will not be broken across two pages.
            If a paragraph can not be rendered entirely on the remaining available
            page space, it will start on the next page leaving some blank space
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.KeepWithNext">
      <summary>
            Get or set if the next paragraph needs start on the same page.
            </summary>
      <remarks>
            If possible, atleast some of this paragraph will be rendered on the same page as 
            atleast some of the next paragraph. Insufficient space causes a TextFlowException.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.StartOnNewPage">
      <summary>
             Get or set if the paragraph needs to start on a new page. 
            </summary>
      <remarks>
             Start this paragraph on a new page (add page break before). Ignored if the paragraph already start on a new page.
             </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.StartOnNewColumn">
      <summary>
             Get or set if the paragraph needs to start on a new column. 
            </summary>
      <remarks>
             Start this paragraph on a new column (add column break before). 
             Ignored if the paragraph already starts on a new column.
             </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.ID">
      <summary>
            Get or set the ID for referencing the paragraph.
            </summary>
      <remarks>
            A fragment can refer to this paragraph by settings its
            ReferenceID property equal to this property. This is an alternative
            for setting the Reference property of a fragment to this paragraph.
            This is primarily relevant for making references in an XML file.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TextParagraph.#ctor">
      <summary>
            Initialize a new instance of the TextParagraph class.
            </summary>
      <remarks>
            Creates a new, empty text paragraph with default properties.
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" /><seealso cref="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.Fragments" /></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TextParagraph.Clone">
      <summary>
            Clones a TextParagraph.
            </summary>
    </member>
    <member name="E:TallComponents.PDF.Layout.Paragraphs.TextParagraph.LineBreak">
      <summary>
            Will be fired when a word has to be broken on a line end.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.TabStops">
      <summary>
            Allows you to define points to jump to when a tab character is encountered.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.Justified">
      <summary>
            Get or set if the text is justified.
            </summary>
      <remarks>
            When a text paragraph is justified, the white space between all words (if any) will 
            be manipulated so that all space between the left and right margin of the 
            page is used. The last line is never justified.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.HangIndentation">
      <summary>
            Get or set the amount of extra LeftIndentation applied to all but the first line.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.FirstLineIndentation">
      <summary>
            Get or set the amount of extra LeftIndentation applied to the first line only.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.LineSpacing">
      <summary>
            Get or set the extra amount of white space between lines.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.FlowDirection">
      <summary>
            Get or set the flow direction of text elements (fragments).
            </summary>
      <remarks>
            The fragments contained can have a different read direction to allow
            left-to-right reading elements (numbers) in right to left text.
            The text flow direction on a paragraph is the default flow direction for 
            contained fragments.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.TextParagraph.Fragments">
      <summary>
            Collection of fragment objects.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.NumberedItem.#ctor">
      <summary>
            Initialize a new instance of the NumberedItem class.
            </summary>
      <remarks>
            Create a new NumberedItem with empty number format and 0 outline level.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.NumberedItem.#ctor(System.String)">
      <summary>
            Initialize a new instance of the NumberedItem class with given number format.
            </summary>
      <param name="numberFormat">Format of number or bullet part.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.NumberedItem.#ctor(System.Int32)">
      <summary>
            Initialize a new instance of the NumberedItem class with given 0-based outline level.
            </summary>
      <param name="level">Outline Level of this numbered item.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.NumberedItem.#ctor(System.Int32,System.String)">
      <summary>
            Initialize a new instance of the NumberedItem class with given 0-based outline level and number format.
            </summary>
      <param name="level">Outline level of this numbered item.</param>
      <param name="numberFormat">Format of number or bullet part.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.NumberedItem.Replace(System.String)">
      <summary>
            For internal use only.
            </summary>
      <param name="text">For internal use only.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.NumberedItem.Clone">
      <summary>
            Clones a NumberedItem.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.NumberAlignment">
      <summary>
            Get or set horizontally alignment of the number part of this item. 
            </summary>
      <remarks>
            The left and right edges against which alignment occurs, is determined
            by the alignment of the item itself and the left and right indentation
            of the number part.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.NumberLeftIndentation">
      <summary>
            Get or set the left indentation of the number part.
            </summary>
      <remarks>
            The indentation respects the left margin of the current section.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.NumberRightIndentation">
      <summary>
            Get or set the right indentation of the number part
            </summary>
      <remarks>
            The indentation respects the left indentation of the body of this item.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.NumberFragments">
      <summary>
            Get the content of the number part of this item. 
            </summary>
      <remarks>
            These fragments may contain fields like #0, #1 and #a0 that will be resolved like 
            heading fragments. The difference between a numbered item and a heading is that a 
            heading appears in the document outline while a numbered item does not.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.Level">
      <summary>
            0-based outline level of this heading. E.g. 0 may be the outline level
            of a chapter.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.RestartNumbering">
      <summary>
            Get or set if the numbering at this level is restarted. 
            </summary>
      <remarks>
            The heading number of this paragraph will be the value assigned to <see cref="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.RestartNumberingAt" />. 
            The default value is 1. Note that the numbers at a lower level are not reset.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.RestartNumberingAt">
      <summary>
            Gets or sets the number to start the numbered item range with.
            </summary>
      <remarks>This value is set when <see cref="P:TallComponents.PDF.Layout.Paragraphs.NumberedItem.RestartNumbering" /> is set to true. The default
            value is 1.</remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.BookmarkParagraph.#ctor">
      <summary>
            Initialize a new instance of the BookmarkParagraph class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.BookmarkParagraph.#ctor(System.Int32,System.String)">
      <summary>
            Initialize a new instance of the BookmarkParagraph class with given level and format.
            </summary>
      <param name="level">0-based bookmark level.</param>
      <param name="numberFormat">Bookmark text. Fields such as #c and #0 are replaced. 
            See also 'Fields' in the 'tutorial' section.
            </param>
      <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment">For the resolved context field definition.</seealso>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.BookmarkParagraph.Bookmark">
      <summary>
            Get or set the bookmark text. 
            </summary>
      <remarks>
            Fields such as #c and #0 are replaced. 
            See also 'Fields' in the 'tutorial' section.
            </remarks>
      <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment">For the resolved context field definition.</seealso>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.Cell">
      <summary>
            A cell is part of a row. A cell has a collection of paragraphs.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Cell.#ctor">
      <summary>
            Initialize a new instance of the Cell class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Cell.Clone">
      <summary>
            Clones a Cell.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Cell.Paragraphs">
      <summary>
            Get all paragraphs in this cell.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Cell.VerticalAlignment">
      <summary>
            Get or set the vertical alignment of the contained Paragraphs collection.
            </summary>
      <remarks>
            Setting or getting this property is equivalen to setting and getting the VAlignment 
            property of the Paragraphs collection. 
            Vertical alignment works within space available in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row" />. 
            Use the Row's <see cref="P:TallComponents.PDF.Layout.Paragraphs.Row.MinHeight" /> to create room for alignment if needed.
            <para>For horizontal alignment, set the <see cref="P:TallComponents.PDF.Layout.Paragraphs.Paragraph.HorizontalAlignment" /> on each Paragraph in the cell.</para><para>This property maps directly to the <see cref="P:TallComponents.PDF.Layout.Paragraphs.Cell.VerticalAlignment" /> property on the Paragraphs collection.
             It is provided because the Paragraphs class is not normally used in XML declarations.</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Cell.PreferredWidth">
      <summary>
            Get or set the cells preferred width.
            </summary>
      <remarks>
            An attempt is made render the cell with this width.
            This property is ignored if FitToContent is true.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Cell.FitToContent">
      <summary>
            Get or set if the width of the cell has to grow with the content.
            </summary>
      <remarks>
            The width of this cell will be set to the minimum value that does
            not break any included paragraph across lines. If the available 
            space does not allow this, the content is broken anyway.
            By default this is turned off (false).
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Cell.Fixed">
      <summary>
            Get or set if the width of the cell is fixed.
            </summary>
      <remarks>
            When it is not possible to respect the preferred width of all cells
            in the table, the preferred width of a Fixed cell will have precedence
            over non-fixed cells.
            By default this is turned off (false).
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Cell.ColSpan">
      <summary>
            Get or set the number of columns that this cell spans.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.CellCollection">
      <summary>
            The collection of all cells in a row.
            </summary>
      <remarks>
            The cells object represents the content of a row. 
            It is obtained through the Cells property of Row.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.#ctor">
      <summary>
            Initialize a new instance of the CellCollection class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.Add">
      <summary>
            Add a new Cell to this collection.
            </summary>
      <returns>The new Cell.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.Add(TallComponents.PDF.Layout.Paragraphs.Cell)">
      <summary>
            Add an existing Cell to this collection.
            </summary>
      <param name="cell">Add this cell.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.CellCollection)">
      <summary>
            Adds the elements of a CellCollection to the end of this collection.
            </summary>
      <param name="cells">The CellCollection whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.Cell[])">
      <summary>
            Adds the elements of an array of cells to the end of this collection.
            </summary>
      <param name="cells">The array of cells whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.Clear">
      <summary>
            Removes all cells from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.Contains(TallComponents.PDF.Layout.Paragraphs.Cell)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell">Cell</see> is in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection">CellCollection</see>.
            </summary>
      <param name="cell">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell" /> is found in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection" />, false otherwise.</returns>
      <remarks>
            The <paramref name="cell" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="cell" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.IndexOf(TallComponents.PDF.Layout.Paragraphs.Cell)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell">Cell</see> in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection">CellCollection</see>.
            </summary>
      <param name="cell">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell" /> to locate in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.Insert(System.Int32,TallComponents.PDF.Layout.Paragraphs.Cell)">
      <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell" /> on a specific place in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection" />.
            </summary>
      <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell" /> should be inserted.</param>
      <param name="cell">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell" /> to be insert.</param>
      <remarks>
            The <paramref name="cell" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="cell" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.Remove(TallComponents.PDF.Layout.Paragraphs.Cell)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell">Cell</see> from this <see cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection">CellCollection</see>.
            </summary>
      <param name="cell">The cell to remove.</param>
      <remarks>
            The <paramref name="cell" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="cell" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell">Cell</see> from the <see cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection">CellCollection</see> at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Cell" /> to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.Clone">
      <summary>
            Clones a Bordered.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.CellCollection.GetEnumerator">
      <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator">GetEnumerator</see>.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.CellCollection.Count">
      <summary>
            Get the number of cells in this collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.CellCollection.Item(System.Int32)">
      <summary>
            Get the Cell by 0-based index.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.Drawing">
      <summary>
            Can hold shapes (Graphical elements).
            </summary>
      <remarks>
            The drawing class is a specialization of paragraph. All members of paragraph 
            are members of drawing as well. Like any paragraph, a drawing can be added to any 
            paragraph collection, e.g.
            section, table cell, header and footer. The drawing has a collection of shapes.
            You draw by adding shapes to this collection.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Drawing.#ctor">
      <summary>
            Initialize a new instance of the Drawing class.
            </summary>
      <remarks>
            Creates a new Drawing instance.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Drawing.#ctor(System.Double,System.Double)">
      <summary>
            Initialize a new instance of the Drawing class with the given width and height.
            </summary>
      <param name="width">Width in points.</param>
      <param name="height">Height in points.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Drawing.Clone">
      <summary>
            Clones a ParagraphCollection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Drawing.Width">
      <summary>
            Get or set the width in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Drawing.Height">
      <summary>
            Get or set the height in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Drawing.Shapes">
      <summary>
            Get or set the collection of shapes.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.FitPolicy">
      <summary>
            Different policies for handling image paragraphs that do not fit the available space.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Paragraphs.FitPolicy.ThrowException">
      <summary>
            If the image width or height exceed the available space, an ImageSizeException is thrown.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Paragraphs.FitPolicy.Shrink">
      <summary>
            If the image width or height exceed the available space, the image shrinks to fit. Depending
            on KeepAspectRatio, it will keep the aspect ratio or not. The image will never grow.
            </summary>
    </member>
    <member name="F:TallComponents.PDF.Layout.Paragraphs.FitPolicy.Clip">
      <summary>
            If the image width or height exceed the avaiable space, the image is clipped. Either the
            right and/or bottom part is clipped.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.Heading">
      <summary>
            Headings are NumberedItems that appear in the table of contents.
            </summary>
      <remarks>
            The Heading class is a specialization of NumberedItem. 
            All members of NumberedItem are members of Heading as well. 
            A heading marks the start of a block of text at a certain outline level.
            Headings appear as an hierarchy of bookmarks in the PDF viewer.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Heading.#ctor">
      <summary>
            Initialize a new instance of the Heading class.
            </summary>
      <remarks>
            Create a new heading with outline level 0.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Heading.#ctor(System.Int32)">
      <summary>
            Initialize a new instance of the Heading class with the given outline level.
            </summary>
      <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment">For the resolved context field definition.</seealso>
      <param name="level">Outline level of new Heading.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Heading.#ctor(System.Int32,System.String)">
      <summary>
            Initialize a new instance of the Heading class with given number or bullet format and outline level.
            </summary>
      <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Fragment">For the resolved context field definition.</seealso>
      <param name="level">Outline level of new Heading.</param>
      <param name="numberFormat">Number format of new Heading.</param>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.HorizontalLine">
      <summary>
            The horizontal line class is a specialization of paragraph. 
            </summary>
      <remarks>
            All members of paragraph 
            are members of horizontal line as well. Like any paragraph, a horizontal line can be added to any 
            paragraph collection, e.g. section, table cell, header and footer. 
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.#ctor">
      <summary>
            Create a new horizontal line.
            </summary>
      <remarks>Draws a black horizontal line with a width of 1 point.</remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.#ctor(TallComponents.PDF.Layout.Unit)">
      <summary>
            Create a new horizontal line with given width and thickness.
            </summary>
      <remarks>The default color for the line is Black.</remarks>
      <param name="width">Width of the line in points or parsable length (eg. 3cm or 40%).</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.#ctor(System.Double)">
      <summary>
            Create a new horizontal line with given thickness.
            </summary>
      <remarks>The default color for the line is Black.</remarks>
      <param name="lineWidth">Thickness of the line in points.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.#ctor(TallComponents.PDF.Layout.Colors.Color)">
      <summary>
            Create a new horizontal line with given wheight.
            </summary>
      <remarks>The default width of the line is 1 point.</remarks>
      <param name="color">The color of the line.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.#ctor(TallComponents.PDF.Layout.Unit,System.Double)">
      <summary>
            Create a new horizontal line with given width and thickness.
            </summary>
      <remarks>The default color for the line is Black.</remarks>
      <param name="width">Width of the line in points or parsable length (eg. 3cm or 40%).</param>
      <param name="lineWidth">Thickness of the line in points.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.#ctor(TallComponents.PDF.Layout.Unit,TallComponents.PDF.Layout.Colors.Color)">
      <summary>
            Create a new horizontal line with given width and color.
            </summary>
      <param name="width">Width of the line in points or parsable length (eg. 3cm or 40%).</param>
      <param name="color">The color of the line.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.#ctor(System.Double,TallComponents.PDF.Layout.Colors.Color)">
      <summary>
            Create a new horizontal line with given width and color.
            </summary>
      <param name="lineWidth">Thickness of the line in points.</param>
      <param name="color">The color of the line.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.#ctor(TallComponents.PDF.Layout.Unit,System.Double,TallComponents.PDF.Layout.Colors.Color)">
      <summary>
            Create a new horizontal line with given width and color.
            </summary>
      <param name="width">Width of the line in points or parsable length (eg. 3cm or 40%).</param>
      <param name="lineWidth">Thickness of the line in points.</param>
      <param name="color">The color of the line.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.Color">
      <summary>
            Gets or sets the color for the horizontal line.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.LineWidth">
      <summary>
            Get or set the width (thickness) of the line in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.HorizontalLine.Width">
      <summary>
            Get or set the (horizontal)width of the line.
            </summary>
      <remarks>The property accepts a double (is width in points) or as string (like 5cm or 50%).</remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.Image">
      <summary>
            A paragraph that holds image (graphical) data.
            </summary>
      <remarks>
            The image class is a specialization of paragraph. Use this class to place a raster 
            image on the page.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.#ctor">
      <summary>
            Initialize a new instance of the image class.
            </summary>
      <remarks>
            Create a new, uninitialized image.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.#ctor(System.String)">
      <summary>
            Initialize a new instance of the image class from an image file.
            </summary>
      <param name="path">Absolute, relative or virtual path.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.#ctor(System.String,System.Int32)">
      <summary>
            Initialize a new instance of the image class from an image file and select the frame index.
            </summary>
      <param name="path">Absolute, relative or virtual path.</param>
      <param name="frameIndex">0-based frame index.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.#ctor(System.Drawing.Bitmap)">
      <summary>
            Initialize a new instance of the image class from a GDI+ bitmap.
            </summary>
      <param name="bitmap">GDI+ bitmap</param>
      <remarks>The frame index will be 0, not the current active frame index.
            The referenced bitmap must be disposed by the client (caller) after 
            the pdf document (page with this Image) is written</remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.#ctor(System.Drawing.Bitmap,System.Boolean)">
      <summary>
            Initialize a new instance of the image class from a GDI+ bitmap.
            </summary>
      <param name="bitmap">GDI+ bitmap</param>
      <param name="disposeBitmap">The bitmap will be disposed by this component (callee)</param>
      <remarks>
            Create a new image from a GDI+ bitmap and specify if the bitmap must be disposed by the callee.
            <para>
            The frame index will be 0, not the current active frame index
            When setting disposeBitmap to true, the bitmap is disposed when this Image class is release 
            from memory. Note that if this instance of the bitmap is used multiple times an error will 
            be thrown if this bitmap is used after this Image class is removed from memory
            </para></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.#ctor(System.Drawing.Bitmap,System.Int32)">
      <summary>
            Initialize a new instance of the image class from a GDI+ bitmap and select the frame index.
            </summary>
      <param name="bitmap">GDI+ bitmap</param>
      <param name="frameIndex">0-based frame index.</param>
      <remarks>
            Create a new image from a GDI+ bitmap and select the frame index.
            <para>The referenced bitmap must be disposed by the client (caller) after 
            the pdf document (page with this Image) is written.
            </para></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.#ctor(System.Drawing.Bitmap,System.Int32,System.Boolean)">
      <summary>
            Initialize a new instance of the image class from a GDI+ bitmap and select the frame index.
            </summary>
      <param name="bitmap">GDI+ bitmap</param>
      <param name="frameIndex">0-based frame index.</param>
      <param name="disposeBitmap">The bitmap will be disposed by this component (callee)</param>
      <remarks>
            Create a new image from a GDI+ bitmap, select the frame index 
            and specify if the bitmap must be disposed by the callee. 
            <para>
            When setting disposeBitmap to true, the bitmap is disposed when this Image class is release 
            from memory. Note that if this instance of the bitmap is used multiple times an error will 
            be thrown if this bitmap is used after this Image class is removed from memory.
            </para></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.#ctor(System.IO.Stream)">
      <summary>
            Initialize a new instance of the image class from a stream of binary data.
            </summary>
      <remarks>
            Create a new Image from a stream of binary data.
            The stream is not closed when the image is disposed. Make sure it remains open until
            Document.Write is completed. 
            </remarks>
      <param name="stream">The stream containing the binairy image data.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <summary>
            Initialize a new instance of the image class from a stream of binary data.
            </summary>
      <remarks>
            Create a new Image from a stream of binary data.
            When setting disposeStream to true, the stream is disposed when this Image class is released 
            from memory. Note that if this instance of the stream is used multiple times an error will 
            be thrown if the stream is used after this Image class is removed from memory.
            </remarks>
      <param name="stream">The stream containing the binairy image data.</param>
      <param name="frameIndex">0-based frame index.</param>
      <param name="disposeStream">The stream will be disposed by this component.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Image.Clone">
      <summary>
            Clones a ParagraphCollection.
            </summary>
    </member>
    <member name="E:TallComponents.PDF.Layout.Paragraphs.Image.GetWebCredentials">
      <summary>
            Occurs when a image is loaded from a weblocation to retrieve the credentials needed.
            </summary>
      <remarks>Set the credentials in the arguments to perform authentication.
            <para>To authenticate using the user running the application or the impersonated
            user (on ASP.NET) supply <i>System.Net.CredentialCache.DefaultCredentials</i>.</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.Path">
      <summary>
            Get or set the absolute, relative or virtual path of the image file.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.MaskColor">
      <summary>
            Get or set the color that will act as the transparent color.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.Compression">
      <summary>
            Get or set the compression applied to the image data inside the PDF document.
            </summary>
      <remarks>
            This is a best-effort setting. Images that are already compressed 
            will in most cases not be recoded to another compression. 
            Uncompressed images will honor the compression setting.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.FrameIndex">
      <summary>
            Get or set the 0-Based index of the frame to display. 
            </summary>
      <remarks>
            Most images contain only 1 frame. TIFF images may contain more than one frame, 
            use this proeprty to select the frame to display in the PDF document.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.FrameCount">
      <summary>
            Get the number of frames in the image.
            </summary>
      <remarks>
            Most images contain 1 frame. Use <see cref="P:TallComponents.PDF.Layout.Paragraphs.Image.FrameIndex" /> to select the frame to display.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.IgnoreAlpha">
      <summary>
            Get or set if the alpha transparancy layer is ignored.
            </summary>
      <remarks>
            Set to true to completely ignore alpha transparency in the image. If no alpha information
            is available this setting is ignored.
            Default value is false.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.FitPolicy">
      <summary>
            Get or set the fit policy of the image
            </summary>
      <remarks>
            What to do if this image does not fit the available space.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.Width">
      <summary>
            Get or set the width of this image in points.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.Height">
      <summary>
            Get or set the height of this image in points. 
            </summary>
      <remarks>
            Only used if KeepAspectRatio is set to false.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Image.KeepAspectRatio">
      <summary>
            Get or set if the aspect ratio is respected when resizing.
            </summary>
      <remarks>
            If set to true, the Height is calculated from the Width to keep the aspect ratio.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection">
      <summary>
            Collection of Paragraph objects.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.#ctor">
      <summary>
            Initialize a new instance of the Paragraphs collection class.
            </summary>
      <remarks>
            Create an empty Paragraphs collection.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Add(TallComponents.PDF.Layout.Paragraphs.Paragraph)">
      <summary>
            Add an existing paragraph.
            </summary>
      <param name="paragraph">
      </param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.ParagraphCollection)">
      <summary>
            Adds the elements of a ParagraphCollection to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="paragraphs">The ParagraphCollection whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.Paragraph[])">
      <summary>
            Adds the elements of an array of paragraphs to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="paragraphs">The array of paragraphs whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Contains(TallComponents.PDF.Layout.Paragraphs.Paragraph)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph">Paragraph</see> is in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection">ParagraphCollection</see>.
            </summary>
      <param name="paragraph">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" /> is found in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection" />, false otherwise.</returns>
      <remarks>
            The <paramref name="paragraph" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="paragraph" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.IndexOf(TallComponents.PDF.Layout.Paragraphs.Paragraph)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph">Paragraph</see> in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection">ParagraphCollection</see>.
            </summary>
      <param name="paragraph">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" /> to locate in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Insert(System.Int32,TallComponents.PDF.Layout.Paragraphs.Paragraph)">
      <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" /> on a specific place in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection" />.
            </summary>
      <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" /> should be inserted.</param>
      <param name="paragraph">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" /> to be insert.</param>
      <remarks>
            The <paramref name="paragraph" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="paragraph" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Remove(TallComponents.PDF.Layout.Paragraphs.Paragraph)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph">Paragraph</see> from this <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection">ParagraphCollection</see>.
            </summary>
      <param name="paragraph">The paragraph to remove.</param>
      <remarks>
            The <paramref name="paragraph" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="paragraph" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph">Paragraph</see> from the <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection">ParagraphCollection</see> at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" /> to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.GetEnumerator">
      <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Clear">
      <summary>
            Removes all paragraphs from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.IndexOf(System.String)">
      <summary>
            Get the index of a Paragraph with a given ID.
            </summary>
      <param name="id">The ID to look for.</param>
      <returns>0-based index of the Paragraph or -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Clone">
      <summary>
            Clones a ParagraphCollection.
            </summary>
    </member>
    <member name="E:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.PrintParagraph">
      <summary>
            Occurs during generation when a new <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" /> is needed.
            </summary>
      <remarks>
            This event occures in Event-Driven mode. Implement a handler if you need to 
            provide content on the fly.
            </remarks>
    </member>
    <member name="E:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.PrintFirstParagraph">
      <summary>
            Occures when the first paragraph is needed.
            </summary>
      <remarks>
            Implement a handler for this event if you need to provide content at the top of each page in the section.
            Note that the paragraph provided by the event handler will be inserted <em>before</em> a 
            broken or rolled-back paragraph from the previous page continues.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Data">
      <summary>
            Get or set the user defined data that will be passed with the PrintParagraph event.
            </summary>
      <remarks>
            It is a good place to store your data source (e.g. a SqlDataReader or an XmlReader).
            Note: If you want to serialize the document the data must be serializable.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Count">
      <summary>
            Get the number of paragraphs in this collection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Item(System.Int32)">
      <summary>
            Get or set a paragraph by 0-based index.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Item(System.String)">
      <summary>
            Get or set a paragraph by it's ID.
            </summary>
      <remarks>
            Setting a paragraph with an ID that is not yet in the collection will throw an ArgumentOutOfRangeException. 
            Use <see cref="M:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.Add(TallComponents.PDF.Layout.Paragraphs.Paragraph)" /> to add a new paragraph.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.VerticalAlignment">
      <summary>
            Get or set the vertical alignment of this paragraphs collection.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.Row">
      <summary>
            A row is part of a table. A row consists of a list of cells.
            </summary>
      <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection" />
      <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection" />
      <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Cell" />
      <seealso cref="T:TallComponents.PDF.Layout.Border" />
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Row.#ctor">
      <summary>
            Initialize a new instance of the row class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Row.Clone">
      <summary>
            Clones a Row.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Row.Cells">
      <summary>
            Get all cells in this row.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Row.DoNotBreak">
      <summary>
            Get or set if the row may break across pages.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Row.MinHeight">
      <summary>
            Get or set the minimum height of this row.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.RowCollection">
      <summary>
            The collection of all rows in a table.
            </summary>
      <remarks>
            The rows object represents the content of a table. 
            It is obtained through the Rows property of <see cref="T:TallComponents.PDF.Layout.Paragraphs.Table" />.
            A row contains a number of cells.
            <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Row" /><seealso cref="T:TallComponents.PDF.Layout.Paragraphs.CellCollection" /><seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Cell" /></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.#ctor">
      <summary>
            Initialize a new instance of the RowCollection class.
            </summary>
      <remarks>
            Creates a new, empty collection of rows.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.Add">
      <summary>
            Add a row to the table.
            </summary>
      <remarks>
            Instantiates a new row and adds the row to the table.
            </remarks>
      <returns>The row that has been added to the table.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.Add(TallComponents.PDF.Layout.Paragraphs.Row)">
      <summary>
            Add an existing row to the table.
            </summary>
      <remarks>
            Adds the given row to the table.
            </remarks>
      <param name="row">Row to add.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.RowCollection)">
      <summary>
            Adds the elements of a RowCollection to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="rows">The RowCollection whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.Row[])">
      <summary>
            Adds the elements of an array of rows to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="rows">The array of rows whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.Clear">
      <summary>
            Removes all rows from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.Contains(TallComponents.PDF.Layout.Paragraphs.Row)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row">Row</see> is in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection">RowCollection</see>.
            </summary>
      <param name="row">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row" /> is found in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection" />, false otherwise.</returns>
      <remarks>
            The <paramref name="row" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="row" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.IndexOf(TallComponents.PDF.Layout.Paragraphs.Row)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row">Row</see> in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection">RowCollection</see>.
            </summary>
      <param name="row">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row" /> to locate in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.Insert(System.Int32,TallComponents.PDF.Layout.Paragraphs.Row)">
      <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row" /> on a specific place in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection" />.
            </summary>
      <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row" /> should be inserted.</param>
      <param name="row">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row" /> to be insert.</param>
      <remarks>
            The <paramref name="row" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="row" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.Remove(TallComponents.PDF.Layout.Paragraphs.Row)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row">Row</see> from this <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection">RowCollection</see>.
            </summary>
      <param name="row">The row to remove.</param>
      <remarks>
            The <paramref name="row" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="row" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row">Row</see> from the <see cref="T:TallComponents.PDF.Layout.Paragraphs.RowCollection">RowCollection</see> at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:TallComponents.PDF.Layout.Paragraphs.Row" /> to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.Clone">
      <summary>
            Clones a Bordered.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.RowCollection.GetEnumerator">
      <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="E:TallComponents.PDF.Layout.Paragraphs.RowCollection.PrintRow">
      <summary>
            Occurs when is a new row is required to continue rendering.
            </summary>
      <remarks>
            This event lets the client specify a new row to add to the current table.
            </remarks>
    </member>
    <member name="E:TallComponents.PDF.Layout.Paragraphs.RowCollection.PrintFirstRow">
      <summary>
            Occurs before the first row at a page is added to a table.
            </summary>
      <remarks>
            This event lets the client specify the top of the current table. Note that
            it is possible to add multiple first rows.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.RowCollection.Count">
      <summary>
            Get the number of rows.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.RowCollection.Item(System.Int32)">
      <summary>
            Get a row by index (0-based).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.RowCollection.Data">
      <summary>
            Get or set user defined data. 
            </summary>
      <remarks>
            The object set is passed to the PrintRow event handler.
            You typically store a reference to a data source such as a SqlDataReader or XmlReader object.
            Note: If you want to serialize the document the data must be serializable.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.RtfParagraph">
      <summary>
            A RTF paragraph can be used to import a RTF document into the PDF object model. 
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.RtfParagraph.#ctor">
      <summary>
            Create a new RtfParagraph
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.RtfParagraph.#ctor(System.IO.Stream)">
      <summary>
            Create a new RtfParagraph from an existing RTF document.
            </summary>
      <param name="stream">The RTF stream to import.</param>
      <remarks>
            After this constructor is executed the stream may be closed.
            Closing the stream is the responsability from the client (caller).
            Note: When using this constuctor you cannot receive events.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.RtfParagraph.#ctor(System.String)">
      <summary>
            Create a new RtfParagraph from an existing RTF document.
            </summary>
      <remarks>
            Note: When using this constuctor you cannot receive events.
            </remarks>
      <param name="rtf">The RTF string to import.</param>
    </member>
    <member name="E:TallComponents.PDF.Layout.Paragraphs.RtfParagraph.RtfCustomEvent">
      <summary>
            Occures when the event keyword is found in the RTF.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.RtfParagraph.Path">
      <summary>
            Get or set the path to read the RTF document from.
            </summary>
      <remarks>This property overrides any values assigned using the stream or text property.</remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.RtfParagraph.Text">
      <summary>
            The RTF to import in this paragraph. This property is also used to specifiy a RtfParagraph in XML.
            </summary>
      <remarks>
            Note that the string is not preserved (no get property), to release memory asap. 
            If this property is called multiple times , only the last rtf will be used.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.RtfParagraph.Stream">
      <summary>
            The RTF to import in this paragraph.
            </summary>
      <remarks>
            Note that the Stream is not needed after the property is set, so you can release memory/close the stream. 
            If this property is called multiple times , only the last rtf will be used.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.Table">
      <summary>
            Table paragraph to hold rows and cells of data.
            </summary>
      <remarks>
            The table class is a specialization of paragraph. All members of paragraph 
            are members of table as well. Like any paragraph, a table can be added to 
            any paragraph collection, e.g. section, table cell, header and footer. 
            A table is build of rows of cells. A cell contains a collection of paragraphs (possibly tables).
            <seealso cref="N:TallComponents.PDF.Layout.Paragraphs" /><seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" /><seealso cref="P:TallComponents.PDF.Layout.Paragraphs.Table.Rows" /><seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Row" /><seealso cref="T:TallComponents.PDF.Layout.Border" /></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Table.#ctor">
      <summary>
            Initialize a new instance of the Table class.
            </summary>
      <remarks>
            Creates a new, empty table.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Table.Clone">
      <summary>
            Clones a Table.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Table.Rows">
      <summary>
            Get all rows of this table.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Table.ColumnDefinitions">
      <summary>
            Get the column definitions for this table.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Table.RepeatFirstRow">
      <summary>
            Get or set if the first row is repeated if the table is broken on pages.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Table.RepeatFirstRows">
      <summary>
            Get or set the number of rows repeated if the table is broken by page edges pages.
            </summary>
      <remarks>
            The rows repeated are the first rows from the table.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Table.PreferredWidth">
      <summary>
            Get or set the preferred width of the table.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Table.ForceWidth">
      <summary>
            Get or set if the table width may vary dependinding on content.
            </summary>
      <remarks>
            If false, the contained rows and cells determine the width of this table, otherwise, 
            the PreferredWidth property is used to set the width of the table.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition">
      <summary>
            Definition for all cells in a column of a table.
            </summary>
      <remarks>
            To be able to simply assign formatting parameters to the cells in a table
            it is possible to assign a TableColumnDefinition.
            <list type="bullet"><listheader>The following cell properties will be overridden by the column definition:</listheader><item>PreferredWidth<br />
            In points, real world measurements (3cm) or relative (10%).</item><item>Fixed<br />
            Gives this cell a higher priority in case the cell width has to be 
            re-adjusted to make the table fit on the page/in the given space.</item><item>FitToContent<br />
            Specifies if the cell has to be adjusted to the contents size (if possible). 
            For a line of text this is when all text is on 1 line.</item></list></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition.#ctor">
      <summary>
            Initialize a new instance of the Column class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition.#ctor(TallComponents.PDF.Layout.Unit)">
      <summary>
            Creates a new instance of the TableColumnDefinition class with the given settings.
            </summary>
      <param name="preferredWidth">The preferred width for all cells in points or parsable format (like 3cm or 40%).</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition.#ctor(TallComponents.PDF.Layout.Unit,System.Boolean,System.Boolean)">
      <summary>
            Creates a new instance of the TableColumnDefinition class with the given settings.
            </summary>
      <param name="preferredWidth">The preferred width for all cells in points or parsable format (like 3cm or 40%).</param>
      <param name="fitToContent">Specifies if the cell has to be resized to fit to the content.</param>
      <param name="isFixed">Specifies if the size of the cell is fixed.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition.PreferredWidth">
      <summary>
            Get or set the preferred width for all cells in this column.
            </summary>
      <remarks>The width may be specified as a fixed value (in points) or a 
            value that can be parsed (like 3cm or 25%).</remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition.Fixed">
      <summary>
            Get or set if the width of the cell/column is fixed.
            </summary>
      <remarks>
            When it is not possible to respect the preferred width of all cells
            in the table, the preferred width of a Fixed cell will have precedence
            over non-fixed cells.
            <para>By default this is turned off (false).</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition.FitToContent">
      <summary>
            Get or set if the width of the cell/column has to grow with the content.
            </summary>
      <remarks>
            The width of this cell will be set to the minimum value that does
            not break any included paragraph across lines. If the available 
            space does not allow this, the content is broken anyway.
            <para>By default this is turned off (false).</para></remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection">
      <summary>
            Contains the cell definitions for all cells in the corresponding table column.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.#ctor">
      <summary>
            Creates a new instance of the TableColumnDefinitionCollection class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.Add(TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition)">
      <summary>
            Add a column definition to the collection.
            </summary>
      <remarks>
            Adds the given column definition to the collection.
            </remarks>
      <param name="column">Add this column definition.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection)">
      <summary>
            Adds the elements of a TableColumnDefinitionCollection to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="columns">The TableColumnDefinitionCollection whose elements should be added to 
            the end of this collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.AddRange(TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition[])">
      <summary>
            Adds the elements of an array of column definitions to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="columns">The array of column definitions whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.Clear">
      <summary>
            Removes all column definitions from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.Contains(TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition">TableColumnDefinition</see> is in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection">TableColumnDefinitionCollection</see>.
            </summary>
      <param name="column">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition" /> is found in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection" />, false otherwise.</returns>
      <remarks>
            The <paramref name="column" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="column" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.IndexOf(TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition">Column</see> in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection">TableColumnDefinitionCollection</see>.
            </summary>
      <param name="column">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition" /> to locate in the <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.Insert(System.Int32,TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition)">
      <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition" /> on a specific place in this <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection" />.
            </summary>
      <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition" /> should be inserted.</param>
      <param name="column">The <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition" /> to be insert.</param>
      <remarks>
            The <paramref name="column" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="column" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.Remove(TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition">TableColumnDefinition</see> from this <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection">TableColumnDefinitionCollection</see>.
            </summary>
      <param name="column">The column to remove.</param>
      <remarks>
            The <paramref name="column" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="column" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition">Column</see> from the <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection">ColumnCollection</see> at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinition" /> to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.GetEnumerator">
      <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.TableColumnDefinitionCollection.Item(System.Int32)">
      <summary>
            Get a TableColumnDefinition by 0-based index.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.Whitespace">
      <summary>
            The whitespace class is a specialization of paragraph. 
            </summary>
      <remarks>
            All members of paragraph 
            are members of whitespace as well. Like any paragraph, a whitespace can be added to any 
            paragraph collection, e.g.
            section, table cell, header and footer. The whitespace class has height only.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Whitespace.#ctor">
      <summary>
            Create a new whitespace with height 0.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.Whitespace.#ctor(System.Double)">
      <summary>
            Create a new whitespace with given wheight.
            </summary>
      <param name="height">Height in points.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.Whitespace.Height">
      <summary>
            Height in points.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph">
      <summary>
            Renders XHTML content as PDF.
            </summary>
      <remarks>
            The XHTML content needs to have a single root tag (like &lt;body&gt; or &lt;html&gt;). 
            Some concepts supported by the browser are not currently supported 
            in TallPDF.NET.
            <list type="bullet"><listheader>Unsupported XHTML concepts</listheader><item>Layers (absolutely positioned or floating &lt;div&gt; tags)</item><item>Javascript and Dynamic content (HTML generated through JavaScript, events etc.)</item><item>Table layout behaves a bit different from HTML. We recommend specifying cell 
                    widths in absolute units (don't use percentages).</item><item>Inline images. In TallPDF images behave like paragraphs.</item><item></item></list><list type="bullet"><listheader>Partial support"</listheader><item>Form and Input tags are partially suported. 
                    <para>Form elements behave like paragraphs (each placed on a single line). 
                          To layout a form place the form elements in a table.</para><para>The following form elements are supported: TEXT, PASSWORD, CHECKBOX, 
                          RADIO, SUBMIT, RESET and TEXTAREA</para><para>The following form elements are not supported (might be incomplete): 
                          HIDDEN, BUTTON</para></item></list>
            TallPDF.NET only suports XHTML during the conversion. HTML is not supported.
            <list type="bullet"><listheader>Differences between HTML - XHTML and common pitfalls:</listheader><item>All elements are closed (either &lt;b&gt;...&lt;/b&gt; or &lt;img... /&gt;)
                    Mainly changing the generation of &lt;br /&gt;, &lt;hr /&gt; &lt;META /&gt; fix 90% 
                    of breaking situations...</item><item>Sequencing/nesting is important for opening/closing elements:
                    &lt;b&gt;bold &lt;i&gt; bolditalic&lt;/b&gt;italic&lt;/i&gt; should be
                    &lt;b&gt;bold &lt;i&gt; bolditalic&lt;/i&gt;&lt;/b&gt;&lt;i&gt;italic&lt;/i&gt;</item><item>All attribute values have to be enclosed in quotes: 
                    &lt;table border="3" width="300"&gt;</item></list></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.#ctor">
      <summary>
            Create a new empty HtmlParagraph.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.#ctor(System.IO.Stream)">
      <summary>
            Create a new XhtmlParagraph from an existing XHTML document.
            </summary>
      <param name="stream">The XHTML stream to import.</param>
      <remarks>
            After this constructor is executed the stream may be closed.
            Closing the stream is the responsability from the client (caller).
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.#ctor(System.String,System.IO.Stream)">
      <summary>
            Create a new HtmlParagraph from an existing HTML document.
            </summary>
      <param name="stream">The HTML stream to import.</param>
      <param name="fontPath">Virtual or absolute path to the folder containing fonts</param>
      <remarks>
            After this constructor is executed the stream may be closed.
            Closing the stream is the responsability from the client (caller).
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.#ctor(System.String)">
      <summary>
            Create a new HtmlParagraph from a string containing HTML.
            </summary>
      <param name="html">The HTML content to include.</param>
      <remarks>
            Fonts are loaded from the system font folder
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.#ctor(System.String,TallComponents.PDF.Layout.Css.CssStyleSheet)">
      <summary>
            Create a new HtmlParagraph from a string, using the stylesheet.
            </summary>
      <param name="html">
      </param>
      <param name="styleSheet">
      </param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.#ctor(System.String,System.String)">
      <summary>
            Create a new HtmlParagraph from a string containing HTML.
            </summary>
      <param name="html">The HTML content</param>
      <param name="fontPath">Virtual or absolute path to the folder containing fonts</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.Read(System.Xml.XmlReader)">
      <summary>
            Read this object from an XmlReader.
            </summary>
      <param name="reader">The XmlReader to read from.</param>
    </member>
    <member name="E:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.GetWebCredentials">
      <summary>
            Occurs when an image is loaded from a weblocation to retrieve the credentials.
            </summary>
      <remarks>Set the credentials in the arguments to perform authentication.
            To authenticate using the user running the application or the impersonated
            user (on ASP.NET) supply <i>System.Net.CredentialCache.DefaultCredentials</i>.</remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.FontPath">
      <summary>
            Absolute or virtual path to the folder containing fonts. Leave empty to use the systems font folder.
            </summary>
      <remarks>
            The system font folder may not be accessible during web requests if the anonymous user (IUSR_xxxx)
            does not have read access to this folder. Clone the required fonts into a different folder
            within the website instead.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.BasePath">
      <summary>
            Absolute or virtual path to the folder containing loadable objects (images, CSS, ...)
            </summary>
      <remarks>
            If the base path is empty the path info from Path property will be used.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.Path">
      <summary>
            Get or set the absolute, relative or virtual path of the XHTML-document.
            </summary>
      <remarks>
            The content of the file will be viewed in the PDF.
            It is not allowed to set both a file to be processed as well 
            as the Text element.</remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.Text">
      <summary>
            Get or set the HTML content of this paragraph
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Paragraphs.XhtmlParagraph.StyleSheet">
      <summary>
            The StyleSheet used by the HtmlParagraph.
            </summary>
      <remarks>Only available when using the programming interface (not from XML).</remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Area">
      <summary>
            An area on a page containing paragraphs.
            </summary>
      <remarks>
            An area occupies a rectangle on a page and has paragraphs that will be 
            rendered inside that rectangle. Whether an area appears on a page depends 
            on page traits such as 'first of section', 'last of section', 'odd', 'even' and 'blank'.
            By default the area will appear on all pages in the section.
            <para>
            The bottom left corner of a page is the origin. The top and left properties are offsets from the origin.
            The default value of the top property is 0, so the top propery must be set otherwise the area will drop 
            off the end of the page and become invisible.
            </para><para>
            If an area has insufficient space to render it's contents, some of the content may not be rendered. 
            </para></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Area.#ctor">
      <summary>
            Initialize a new instance of the Area class.
            </summary>
      <remarks>
            Create a new empty Area. 
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Area.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initialize a new instance of the Area class with the given location and size.
            </summary>
      <param name="left">Horizontal position of left edge of this area.</param>
      <param name="top">Vertical position of top edge of this area. Should be greater than 0.</param>
      <param name="width">Width of this area.</param>
      <param name="height">Height of this area.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.Left">
      <summary>
            Get or set the left edge of the area.
            </summary>
      <remarks>
            Horizontal position of left edge of this area in points (1/72 inch).
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.Top">
      <summary>
            Get or set the top edge of the area.
            </summary>
      <remarks>
            Vertical position of top edge of this area in points (1/72 inch).
            Default value is 0.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.Width">
      <summary>
            Get or set the horizontal extent of this area in points (1/72 inch).
            </summary>
      <remarks>
            If there is insufficient width to render the contents of 
            the area, some of the content may not be rendered.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.Height">
      <summary>
            Get or set the vertical extent of this area in points (1/72 inch).
            </summary>
      <remarks>
            If there is insufficient height to render the contents of 
            the area, some of the content may not be rendered.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.Odd">
      <summary>
            Get or set if the area will appear on all odd pages.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.Even">
      <summary>
            Get or set if the area will appear on all even pages.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.First">
      <summary>
            Get or set if the area will appear on each first page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.Middle">
      <summary>
            Gts or sets if the area will appear on each middle (non-first and non-last) page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.Last">
      <summary>
            Get or set if the area will appear on each last page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.OddFirst">
      <summary>
            Get or set if the area appeas on the odd-first page.
            </summary>
      <remarks>
            If, and only if, set to true, the area will appear on odd first pages.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.OddMiddle">
      <summary>
            Get or set if the area appeas on the odd-middle page(s).
            </summary>
      <remarks>
            If, and only if, set to true, the area will appear on odd middle (not first and not last) pages.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.OddLast">
      <summary>
            Get or set if the area appeas on the odd-last page.
            </summary>
      <remarks>
            If, and only if, set to true, the area will appear on odd last pages.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.EvenFirst">
      <summary>
            Get or set if the area appeas on the even-first page.
            </summary>
      <remarks>
            If, and only if, set to true, the area will appear on even first pages.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.EvenMiddle">
      <summary>
            Get or set if the area appeas on the even-middle page.
            </summary>
      <remarks>
            If, and only if, set to true, the area will appear on even middle (not first and not last) pages.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.EvenLast">
      <summary>
            Get or set if the area appeas on the even-last page.
            </summary>
      <remarks>
            If, and only if, set to true, the area will appear on even last pages.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.Paragraphs">
      <summary>
            Get the collection of paragraphs that will be rendered from top to bottom.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Area.VerticalAlignment">
      <summary>
            Get or set the vertical alignment of the contained <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection">ParagraphCollection</see>. 
            </summary>
      <remarks>Setting or
            getting this property is equivalent to setting and getting the <see cref="P:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.VerticalAlignment" /> 
            property of the <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection" />. It is provided because the ParagraphCollection
            class is implicit in the TallPDF.NET XML schema.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.AreaCollection">
      <summary>
            Collection of area objects.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.AreaCollection.#ctor">
      <summary>
            Initialize a new instance of the AreaCollection class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.AreaCollection.Add">
      <summary>
            Add a new area to this collection.
            </summary>
      <remarks>
            Creates a new area instance, adds it to the collection and returns the 
            created area.
            </remarks>
      <returns>The new area that has been added.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.AreaCollection.Add(TallComponents.PDF.Layout.Area)">
      <summary>
            Add an existing area to this collection.
            </summary>
      <remarks>
            Adds the provided area to the collection.
            </remarks>
      <param name="area">Area to be added.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.AreaCollection.AddRange(TallComponents.PDF.Layout.AreaCollection)">
      <summary>
            Adds the elements of a AreaCollection to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="areas">The AreaCollection whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.AreaCollection.AddRange(TallComponents.PDF.Layout.Area[])">
      <summary>
            Adds the elements of an array of areas to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="areas">The array of areas whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.AreaCollection.Clear">
      <summary>
            Removes all areas from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.AreaCollection.Contains(TallComponents.PDF.Layout.Area)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Area">Area</see> is in the <see cref="T:TallComponents.PDF.Layout.AreaCollection">AreaCollection</see>.
            </summary>
      <param name="area">The <see cref="T:TallComponents.PDF.Layout.Area" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Layout.Area" /> is found in this <see cref="T:TallComponents.PDF.Layout.AreaCollection" />, false otherwise.</returns>
      <remarks>
            The <paramref name="area" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="area" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.AreaCollection.IndexOf(TallComponents.PDF.Layout.Area)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Area">Area</see> in the <see cref="T:TallComponents.PDF.Layout.AreaCollection">AreaCollection</see>.
            </summary>
      <param name="area">The <see cref="T:TallComponents.PDF.Layout.Area" /> to locate in the <see cref="T:TallComponents.PDF.Layout.AreaCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Area" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.AreaCollection.Insert(System.Int32,TallComponents.PDF.Layout.Area)">
      <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Area" /> on a specific place in this <see cref="T:TallComponents.PDF.Layout.AreaCollection" />.
            </summary>
      <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Area" /> should be inserted.</param>
      <param name="area">The <see cref="T:TallComponents.PDF.Layout.Area" /> to be insert.</param>
      <remarks>
            The <paramref name="area" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="area" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.AreaCollection.Remove(TallComponents.PDF.Layout.Area)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Area">Area</see> from this <see cref="T:TallComponents.PDF.Layout.AreaCollection">AreaCollection</see>.
            </summary>
      <param name="area">The area to remove.</param>
      <remarks>
            The <paramref name="area" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="area" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.AreaCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Area">Area</see> from the <see cref="T:TallComponents.PDF.Layout.AreaCollection">AreaCollection</see> at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:TallComponents.PDF.Layout.Area" /> to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.AreaCollection.GetEnumerator">
      <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.AreaCollection.Count">
      <summary>
            Number of area objects in this collecion.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.AreaCollection.Item(System.Int32)">
      <summary>
            Get the area by 0-based index.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Column">
      <summary>
            Column definition in which paragraphs are flowed.
            </summary>
      <remarks>
            A section may contain 1 or more columns.
            Paragraphs are rendered inside the columns from top to bottom and
            from left to right.
            A column has a width and a spacing.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Column.#ctor">
      <summary>
            Initialize a new instance of the Column class.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Column.Width">
      <summary>
            Get or set the width of this column.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Column.Spacing">
      <summary>
            Get or set the spacing between this column and its right neighbor.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.ColumnCollection">
      <summary>
            Contains the column definitions for the pages in the section.
            </summary>
      <remarks>
            The Columns class contains all columns that are associated with a section.
            A section may contain 1 or more columns.
            Paragraphs are rendered inside the columns from top to bottom.
            from left to right.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.ColumnCollection.#ctor">
      <summary>
            Initialize a new instance of the ColumnCollection class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.ColumnCollection.Add(TallComponents.PDF.Layout.Column)">
      <summary>
            Add a column to the collection.
            </summary>
      <remarks>
            Adds the given column to the collection.
            </remarks>
      <param name="column">Add this column.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.ColumnCollection.AddRange(TallComponents.PDF.Layout.ColumnCollection)">
      <summary>
            Adds the elements of a ColumnCollection to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="columns">The ColumnCollection whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.ColumnCollection.AddRange(TallComponents.PDF.Layout.Column[])">
      <summary>
            Adds the elements of an array of columns to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="columns">The array of columns whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.ColumnCollection.Clear">
      <summary>
            Removes all columns from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.ColumnCollection.Contains(TallComponents.PDF.Layout.Column)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Column">Column</see> is in the <see cref="T:TallComponents.PDF.Layout.ColumnCollection">ColumnCollection</see>.
            </summary>
      <param name="column">The <see cref="T:TallComponents.PDF.Layout.Column" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Layout.Column" /> is found in this <see cref="T:TallComponents.PDF.Layout.ColumnCollection" />, false otherwise.</returns>
      <remarks>
            The <paramref name="column" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="column" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.ColumnCollection.IndexOf(TallComponents.PDF.Layout.Column)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Column">Column</see> in the <see cref="T:TallComponents.PDF.Layout.ColumnCollection">ColumnCollection</see>.
            </summary>
      <param name="column">The <see cref="T:TallComponents.PDF.Layout.Column" /> to locate in the <see cref="T:TallComponents.PDF.Layout.ColumnCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Column" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.ColumnCollection.Insert(System.Int32,TallComponents.PDF.Layout.Column)">
      <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Column" /> on a specific place in this <see cref="T:TallComponents.PDF.Layout.ColumnCollection" />.
            </summary>
      <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Column" /> should be inserted.</param>
      <param name="column">The <see cref="T:TallComponents.PDF.Layout.Column" /> to be insert.</param>
      <remarks>
            The <paramref name="column" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="column" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.ColumnCollection.Remove(TallComponents.PDF.Layout.Column)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Column">Column</see> from this <see cref="T:TallComponents.PDF.Layout.ColumnCollection">ColumnCollection</see>.
            </summary>
      <param name="column">The column to remove.</param>
      <remarks>
            The <paramref name="column" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="column" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.ColumnCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Column">Column</see> from the <see cref="T:TallComponents.PDF.Layout.ColumnCollection">ColumnCollection</see> at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:TallComponents.PDF.Layout.Column" /> to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.ColumnCollection.GetEnumerator">
      <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.ColumnCollection.Count">
      <summary>
            The number of columns in this colllection.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.ColumnCollection.Spacing">
      <summary>
            Get or set the column spacing equally and distrutes width evenly.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.ColumnCollection.Width">
      <summary>
            Get or set the column width equally and distrutes space evenly.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.ColumnCollection.Item(System.Int32)">
      <summary>
            Get a column by 0-based index.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.CrossreferenceSection">
      <summary>
            A section that can generate a list of crossreferences.
            </summary>
      <remarks>
            Use the <see cref="T:TallComponents.PDF.Layout.CrossreferenceSection" /> to generate a table of contents, a list of tables, 
            or any other list of paragraphs.
            <para>Implement a handler for the <see cref="E:TallComponents.PDF.Layout.CrossreferenceSection.ComposeEntry" /> event to render an entry for each paragraph.</para></remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Section">
      <summary>
            Renders content onto one or more pages using <see cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph">Paragraphs</see>, <see cref="P:TallComponents.PDF.Layout.Section.Header">Headers</see>, <see cref="P:TallComponents.PDF.Layout.Section.Footer">Footers</see> and <see cref="T:TallComponents.PDF.Layout.Area">Areas</see>.
            </summary>
      <remarks>
            A document has one or more sections that span one or more pages. Within a section a list of 
            paragraphs is rendered in the space available between the margins. A section defines <see cref="P:TallComponents.PDF.Layout.Section.Header" />s and <see cref="P:TallComponents.PDF.Layout.Section.Footer" />s
            that are repeated on each page. It is also possible to add absolutely positioned <see cref="T:TallComponents.PDF.Layout.Area" />s on top
            of or below the main content. 
            <para>A section can define one or more columns.</para><para>Implent a handler for <see cref="E:TallComponents.PDF.Layout.Section.StartCompose" /> to insert a header and a handler for <see cref="E:TallComponents.PDF.Layout.Section.EndCompose" />.</para></remarks>
      <seealso cref="T:TallComponents.PDF.Layout.ColumnCollection" />
      <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection" />
      <seealso cref="T:TallComponents.PDF.Layout.Paragraphs.Paragraph" />
      <seealso cref="T:TallComponents.PDF.Layout.SectionCollection" />
      <seealso cref="P:TallComponents.PDF.Layout.Section.PageSize" />
    </member>
    <member name="M:TallComponents.PDF.Layout.Section.#ctor">
      <summary>
            Creates a new, empty section.
            </summary>
    </member>
    <member name="E:TallComponents.PDF.Layout.Section.QueryPageSettings">
      <summary>
            Occurs before a new empty page is added to the document.
            </summary>
      <remarks>
            This event lets you specify the attributes of the new page.
            </remarks>
    </member>
    <member name="E:TallComponents.PDF.Layout.Section.StartPage">
      <summary>
            Occurs right after a new empty page has been added to the document.
            </summary>
      <remarks>
            This event lets you add content to the page before the main area is filled with paragraphs.
            Do not modify page attributes (size, margin) using this event, but use <see cref="E:TallComponents.PDF.Layout.Section.QueryPageSettings" /> instead.
            </remarks>
    </member>
    <member name="E:TallComponents.PDF.Layout.Section.EndPage">
      <summary>
            Occurs right after the main area has been completely filled with paragraphs.
            </summary>
      <remarks>
            This event lets you add content to the page after the normal content flow ends on this page.
            Declarative defined page headers, footers and areas will not be displayed.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.Paragraphs">
      <summary>
            Returns a paragraphs object. Use this property to add new paragraphs.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.Columns">
      <summary>
            Get or set the collection of columns on the pages of this section.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.VerticalAlignment">
      <summary>
            Get or set the vertical alignment of the contained ParagraphCollection. 
            </summary>
      <remarks>
            Setting or
            getting this property is equivalen to setting and getting the <see cref="P:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection.VerticalAlignment" />
            property of the <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection" />. It is provided because the <see cref="T:TallComponents.PDF.Layout.Paragraphs.ParagraphCollection" />
            class does not correspond to an XML element in the TallPDF.NET XML schema.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.Header">
      <summary>
            Get or set a fixed area at the top of each page of this section.
            </summary>
      <remarks>
            No header will be rendered if the TopMargin is 0 or too small to fit the header contents.
            Rendering can be overridden by specifically setting the <see cref="P:TallComponents.PDF.Layout.Section.OddHeader" /> and/or <see cref="P:TallComponents.PDF.Layout.Section.EvenHeader" />.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.OddHeader">
      <summary>
            Get or set a fixed area at the top of each odd page of this section.
            </summary>
      <remarks>
            No header will be rendered if the TopMargin is 0 or too small to fit the header contents.
            If the OddHeader has not been specified the generic <seealso cref="P:TallComponents.PDF.Layout.Section.Header" /> is returned.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.EvenHeader">
      <summary>
            Get or set a fixed area at the top of each even page of this section.
            </summary>
      <remarks>
            No header will be rendered if the TopMargin is 0 or too small to fit the header contents.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.Footer">
      <summary>
            Get or set a fixed area at the bottom of each page of this section.
            </summary>
      <remarks>
            No footer will be rendered if the BottomMargin is 0 or too small to fit the footer contents.
            Rendering for odd or even pages can be overridden by specifically setting the <see cref="P:TallComponents.PDF.Layout.Section.OddFooter" /> and/or <see cref="P:TallComponents.PDF.Layout.Section.EvenFooter" />.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.OddFooter">
      <summary>
            Get or set a fixed area at the bottom of each odd page of this section.
            </summary>
      <remarks>
            No footer will be rendered if the BottomMargin is 0 or too small to fit the footer contents.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.EvenFooter">
      <summary>
            Get or set a fixed area at the bottom of each even page of this section.
            </summary>
      <remarks>
            No footer will be rendered if the BottomMargin is 0 or too small to fit the footer contents.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.StartOnNewPage">
      <summary>
            Get or set if you want this section to start on a new page. 
            </summary>
      <remarks>
            By default StartOnNewPage is false.
            <para>Note that if a section has a different page size than the previous section, 
            it will always start on a new page.</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.DoNotBreak">
      <summary>
            Get or set if this section has to be rendered on a single page.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.PageSize">
      <summary>
            Get or set the height and width of all pages in this section in points.
            </summary>
      <remarks>
            Default page size is Letter and the sizes are in points (1/72 inch).
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.CropBox">
      <summary>The printed or viewed area of the page.</summary>
      <remarks>
            A rectangle, expressed in points with the origin at the bottom left corner, defining the visible region of default user space. 
            When the page is displayed or printed, its contents are to be clipped (cropped) to this rectangle and then imposed 
            on the output medium in some implementation-defined manner.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.BleedBox">
      <summary>
            A rectangle, expressed in points with the origin at the bottom left corner, defining the region to which the contents of the 
            page should be clipped when output in a production environment.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.Orientation">
      <summary>
            Page orientation in the viewer (counterclockwise).
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.Margin">
      <summary>
            Get the width of the whitespace around the main content in points. 
            </summary>
      <remarks>
            Sizes are given in points (1/72 inch). Default margins are 1.25 inch (90pt) for Left and Right, 
            1 inch (72pt) for Top and Bottom.
            <para>Changing the margins resets the column widths and spacing to their default values.</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.RestartPageNumber">
      <summary>
            Get or set the page number of the first page of this section.
            </summary>
      <remarks>
            When set to -1, page numbering continues from the previous section.
            This property is ignored when the StartOnNewPage is false.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.ForegroundAreas">
      <summary>
            Get the collection of <see cref="T:TallComponents.PDF.Layout.Area">Area</see> objects that is associated with each page of this Section.
            </summary>
      <remarks>
            The objects are placed on top of all other contents on the page.
            Areas are drawn bottom-up, in the same order the 
            areas were added to this collection. So, the last area top be added is on top.
            <para>
            Note: Area's are only drawn on page end. So if the section fits on a page they are not 
            drawn at all. The last section always ends the page (and it's area's are always drawn).</para></remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Section.BackgroundAreas">
      <summary>
            Get the collection of <see cref="T:TallComponents.PDF.Layout.Area">Area</see> objects that is associated with each page of this Section.
            </summary>
      <remarks>
            The objects are placed below of all other contents on the page.
            Areas are drawn bottom-up, in the same order the 
            areas were added to this collection. So, the last area top be added is on top.
            <para>
            Note: Area's are only drawn on page end. So if the section fits on a page they are not 
            drawn at all. The last section always ends the page (and it's area's are always drawn).</para></remarks>
    </member>
    <member name="E:TallComponents.PDF.Layout.Section.EndCompose">
      <summary>
            Occurs when the Compose phase is about to end.
            </summary>
      <remarks>
            Implement a handler for this event to add the final content, for example a summary or closing statement.
            </remarks>
    </member>
    <member name="E:TallComponents.PDF.Layout.Section.StartCompose">
      <summary>
            Occurs when the Compose phase starts.
            </summary>
      <remarks>
            Implement a handler for this event to add leading content, for example a heading.
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.CrossreferenceSection.#ctor">
      <summary>
            Initialize a new instance of the CrossreferenceSection class.
            </summary>
    </member>
    <member name="E:TallComponents.PDF.Layout.CrossreferenceSection.ComposeEntry">
      <summary>
            Occures for every paragraph in the document.
            </summary>
      <remarks>
            This event allows you to add content to the section that represents the paragraph. This can be anything, e.g. a simple text paragraph, 
            a table row or nothing.
            </remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Document">
      <summary>
            The document object represents the complete PDF file.
            </summary>
      <remarks>
            The document contains sections into which content flows. The document declares document-wide options like the 
            subject, author and keywords as well as security settings (Professional edition only).
            </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Document.#ctor">
      <summary>
            Initialize a new instance of the Document class.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.Document.Write(System.Web.HttpResponse)">
      <summary>
            Write PDF document to a HttpResponse in Declaritive mode. 
            </summary>
      <overloads>
            Write PDF document.
            </overloads>
      <exception cref="T:System.ArgumentException">Thrown when the HttpResponse is not connected.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when the HttpResponse is <see langword="null" />.</exception>
      <param name="response">The HTTP response to write to.</param>
      <remarks>
            Sets the following headers:
            <list type="table"><listheader><term>Header</term><description>Value</description></listheader><item><term>ContentType</term><description>application/pdf</description></item><item><term>ContentEncoding</term><description>UTF8</description></item></list><para>Please read <a href="http://www.tallcomponents.com/default.aspx?id=techarticles&amp;ref=013" target="_blank">TechArticle 010</a> 
            for more information on streaming PDF to a browser.</para><example>
            The following snippets demonstrate how to create a simple PDF document and stream it to
            a browser from the code-behind of an ASP.NET page (.aspx) using Declaritice mode.
            See <see cref="M:TallComponents.PDF.Layout.Document.Write(System.Web.HttpResponse,System.Boolean)" /> for an example of Event-Driven mode.
            <para>C#</para><code>
            private void Page_Load(object sender, System.EventArgs e)
            {
              Document doc = new Document();
              Section section = new Section();
              doc.Sections.Add( section );
              TextParagraph text = new TextParagraph();
              section.Paragraphs.Add( text );
              text.Fragments.Add( new Fragment( "Hello world from ASP.NET!" ) );
            
              try
              {
                 Response.Clear();
                 // Write in Declaritive mode
                 <b>doc.Write</b>( Response );
                 Response.Flush();
                 Response.Close();
              }
              catch( Exception ex )
              {
                 // Do some logging or error reporting here ...
              }
            }
            </code><para>VB.NET</para><code>
            Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
               ' Create a document
               Dim doc As New Document
               Dim section As New Section
               doc.Sections.Add(section)
               ' Add some content
               Dim text As New TextParagraph
               section.Paragraphs.Add(text)
               text.Fragments.Add(New Fragment("Hello world from ASP.NET!"))                 
               
               Try
                  Response.Clear()
                  ' Write in Declaritive mode
                  <b>doc.Write</b>(Response)
                  Response.Flush()
                  Response.Close()
               
               Catch ex As Exception
                  ' Do some logging or error reporting here ...
               
               End Try
            End Sub
            </code></example></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Document.Write(System.Web.HttpResponse,System.Boolean)">
      <summary>
            Write PDF document to HttpResponse in Declaritive (push) or Event-Driven mode (pull). 
            </summary>
      <param name="response">The HTTP response to write to.</param>
      <param name="eventDrivenMode">Write in Event-Driven mode (pull) if true, write in Declaritve mode (push) if false.</param>
      <exception cref="T:System.ArgumentException">Thrown when the HttpResponse is not connected.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when the HttpResponse is <see langword="null" />.</exception>
      <remarks>
            Sets the following headers:
            <list type="table"><listheader><term>Header</term><description>Value</description></listheader><item><term>ContentType</term><description>application/pdf</description></item><item><term>ContentEncoding</term><description>UTF8</description></item></list><para>Please read <a href="http://www.tallcomponents.com/default.aspx?id=techarticles&amp;ref=013" target="_blank">TechArticle 010</a> 
            for more information on streaming PDF to a browser.</para><para>Please check the turorial on differences in the Push (normal) and Pull (low resource, event driven) mode generation. There are some features 
            that change behavior when using Pull-mode.</para><example>
            The following snippets demonstrate how to create a simple PDF document and stream it to
            a browser from the code-behind of an ASP.NET page (.aspx) using Event-Driven mode.
            See <see cref="M:TallComponents.PDF.Layout.Document.Write(System.Web.HttpResponse)" /> for an example of Declaritive mode.
            <para>C#</para><code>
            private void Page_Load(object sender, System.EventArgs e)
            {
              // Create a document
              Document doc = new Document();
              Section section = new Section();
              doc.Sections.Add( section );
            
              // Setup an event handler for Section.Paragraphs.PrintParagraph
              section.Paragraphs.PrintParagraph += new ParagraphCollection.PrintParagraphEventHandler(PrintParagraph);
               
              try
              {
                 Response.Clear();
                 // Write in Event-Driven mode
                 <b>doc.Write</b>( Response, true );
                 Response.Flush();
                 Response.Close();
              }
              catch( Exception ex )
              {
                 // Do some logging or error reporting here ...
              }
            }
            
            private void PrintParagraph( ParagraphCollection sender, PrintParagraphEventArgs args )
            {
              TextParagraph text = new TextParagraph();
              text.Fragments.Add( new Fragment( "Hello world from ASP.NET!" ) );
              args.Paragraph = text;
            }
            </code><para>VB.NET</para><code>
            Private Sub Page_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
              ' Create a document
              Dim doc As New Document
              Dim section As New Section
              doc.Sections.Add(section)
               
              ' Setup an event handler for Section.Paragraphs.PrintParagraph
              AddHandler section.Paragraphs.PrintParagraph, AddressOf PrintParagraph
               
              Try
                 Response.Clear()
                 ' Write in Event-Driven mode
                 <b>doc.Write</b>(Response, True)
                 Response.Flush()
                 Response.Close()
               
                 Catch ex As Exception
                    ' Do some logging or error reporting here ...
               
              End Try
            End Sub
               
            Private Sub PrintParagraph(ByVal sender As ParagraphCollection, ByVal e As PrintParagraphEventArgs)
               Dim text As New TextParagraph
               text.Fragments.Add(New Fragment("Hello world from ASP.NET!"))
               e.Paragraph = text
            End Sub
            </code></example></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Document.Write(System.IO.Stream)">
      <summary>
            Write PDF document to stream in Declaritive mode.
            </summary>
      <param name="stream">Write to this stream.</param>
      <exception cref="T:System.ArgumentException">Thrown when the Stream is not writeable.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when the Stream is <see langword="null" />.</exception>
      <remarks>
        <para>It is the responsibility of the client (caller) to Flush and Close the <paramref name="stream" />.</para>
        <para>Please check the turorial on differences in the Push (normal) and Pull (low resource, event driven) mode generation. There are some features 
            that change behavior when using Pull-mode.</para>
        <example>
            The following snippets demonstrate how to create a simple PDF document and save it to
            a file using Declaritive mode.
            <para>C#</para><code>
            // Create a document
            Document doc = new Document();
            Section section = new Section();
            doc.Sections.Add( section );
            
            // Add some content
            TextParagraph text = new TextParagraph();
            text.Fragments.Add( new Fragment( "Hello world!" ) );
            section.Paragraphs.Add( text );
            
            using( FileStream fs = new FileStream( "out.pdf", FileMode.Create, FileAccess.ReadWrite ) )
            {
              // Write the document in Declaritive mode
              <b>doc.Write</b>( fs );
            }
            </code><para>VB.NET</para><code>
            ' Create a new document
            Dim doc As New Document
            Dim section As New Section
            doc.Sections.Add(section)
            
            ' Add some content
            Dim text As New TextParagraph
            text.Fragments.Add(New Fragment("Hello world!"))
            section.Paragraphs.Add(text)
            
            Dim fs As FileStream = Nothing
            
            Try
               fs = New FileStream("out.pdf", FileMode.Create, FileAccess.ReadWrite)
               ' Write in Declaritive mode
               <b>doc.Write</b>(fs)
            Finally
               If Not fs Is Nothing Then
                  fs.Close()
               End If
            End Try
            </code></example>
      </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Document.Write(System.IO.Stream,System.Boolean)">
      <summary>
            Write PDF document to stream in declaritive or Event-Driven mode.
            </summary>
      <remarks>
        <para>It is the responsibility of the client (caller) to Flush and Close the <paramref name="stream" />.</para>
        <para>Please check the turorial on differences in the Push (normal) and Pull (low resource, event driven) mode generation. There are some features 
            that change behavior when using Pull-mode.</para>
      </remarks>
      <param name="stream">Write to this stream.</param>
      <param name="eventDrivenMode">Write in Event-Driven mode if true, write in Declaritve mode if false.</param>
      <exception cref="T:System.ArgumentException">Thrown when the Stream is not writeable.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when the Stream is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Document.Write(System.Xml.XmlReader,System.IO.Stream)">
      <summary>
            Write document in Event-Driven mode to a stream. The document is read from an XML reader.
            </summary>
      <param name="reader">XML specification of the document content.</param>
      <param name="stream">Write to this stream.</param>
      <exception cref="T:System.ArgumentException">Thrown when the Stream is not writeable.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when the Stream or the XmlReader is <see langword="null" />.</exception>
      <remarks>
        <para>It is the responsibility of the client (caller) to Flush and Close the <paramref name="stream" />.</para>
        <para>Please check the turorial on differences in the Push (normal) and Pull (low resource, event driven) mode generation. There are some features 
            that change behavior when using Pull-mode.</para>
        <example>
          <para>XML (layout.xml)</para>
          <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt; 
            &lt;document&gt;
              &lt;section&gt;
                 &lt;paragraph type="TextParagraph"&gt;
                    &lt;fragment&gt;Hello world from XML!&lt;/fragment&gt;
                 &lt;/paragraph&gt;
              &lt;/section&gt;
            &lt;/document&gt;
            </code>
          <para>C#</para>
          <code>
            Document doc = new Document();
            
            using( FileStream fs = new FileStream( "out.pdf", FileMode.Create, FileAccess.ReadWrite ) )
            {
              try
              {
                 XmlTextReader reader = new XmlTextReader( @"layout.xml" );
                 <b>doc.Write</b>( reader, fs );
              }
              catch( Exception ex )
              {
                 System.Console.WriteLine( "Error: {0}", ex.Message );
              }
            }
            </code>
          <para>VB.NET</para>
          <code>
            ' Create a new document
            Dim doc As New Document
            
            Dim fs As FileStream = Nothing
            
            Try
              Dim reader As New Xml.XmlTextReader("layout.xml")
              fs = New FileStream("out.pdf", FileMode.Create, FileAccess.ReadWrite)
              ' Write from XML in Event-Driven mode
              <b>doc.Write</b>(reader, fs)
            Catch ex As Exception
              System.Console.WriteLine( "Error: {0}", ex.Message )
            Finally
              If Not fs Is Nothing Then
                 fs.Close()
              End If
            End Try
            </code>
        </example>
      </remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Document.Write(System.Xml.XmlReader,System.Web.HttpResponse)">
      <summary>
            Write document in Event-Driven mode (pull) to HttpResponse. Document is read from an XML reader.
            </summary>
      <remarks>
            Sets the following headers:
            <list type="table"><listheader><term>Header</term><description>Value</description></listheader><item><term>ContentType</term><description>application/pdf</description></item><item><term>ContentEncoding</term><description>UTF8</description></item></list><para>It is the responsibility of the client (caller) to Flush and Close the <paramref name="response" />.</para><para>Please check the turorial on differences in the Push (normal) and Pull (low resource, event driven) mode generation. There are some features 
            that change behavior when using Pull-mode.</para></remarks>
      <param name="reader">XML specification of the document content.</param>
      <param name="response">The HttpResponse to write to.</param>
      <exception cref="T:System.ArgumentException">Thrown when the HttpResponse is not connected.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown when the HttpResponse or the XmlReader is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.Document.Read(System.Xml.XmlReader)">
      <summary>
            Read from XML reader.
            </summary>
      <remarks>
            This override checks that the document node is correct (node name = "document") as otherwise 
            errors are given that are unclear (if a incorrect xml is provided for example.
            <para>Override this method to implement custom XML reading. When called, the reader should be positioned on the
            start element associated with the type. When the method finishes, the reader must be positioned
            on the first XML node after the end element (i.e. make sure you consume the end element).</para><para>Please check the turorial on differences in the Push (normal) and Pull (low resource, event driven) mode generation. There are some features 
            that change behavior when using Pull-mode.</para></remarks>
      <param name="reader">The XML reader that holds the data from which this layout object is read.</param>
    </member>
    <member name="P:TallComponents.PDF.Layout.Document.Sections">
      <summary>
            Collection of sections of this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Document.ViewerPreferences">
      <summary>
            Get or set the viewer preferences of this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Document.DocumentInfo">
      <summary>
            Get or set the document info object.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Document.Metadata">
      <summary>
            Get the XMP metadata for this document.
            </summary>
      <remarks>
            The XMP metadata can not be specified from XML.
            </remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Document.Security">
      <summary>
            Get or set the security settings and user privileges of this document.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Document.OpenActions">
      <summary>
            Open actions are executed while a document is openening.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Document.JavaScripts">
      <summary>
            Document level JavaScripts.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Document.BeforeSaveAction">
      <summary>
            Before save action is executed before a document will be saved.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Document.AfterSaveAction">
      <summary>
            After save action is executed after a document is saved.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Document.BeforePrintAction">
      <summary>
            Before print action is executed before a document will be printed.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Document.AfterPrintAction">
      <summary>
            After print action is executed after a document is printed.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Document.BeforeCloseAction">
      <summary>
            Before close action is executed before a document will be closed.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Footer">
      <summary>
            An area that is repeated at the bottom of pages in a <see cref="T:TallComponents.PDF.Layout.Section">Section</see>.
            </summary>
      <remarks>
            A footer is associated with a section through the OddFooter and EvenFooter properties of the section.
            The position and the size of a footer is constraint by the page size and page margins of the section.
            The top position of a footer is equal to the sections bottom margin.
            The left position of a footer is equal to the left margin of the section.
            The height of the header is equal to the bottom margin of the section minus the bottom margin of the footer.
            The width of the footer is equal to the width of the page minus the left and right margin of the section.
            <para>If the contents of the footer exceeds the available space, the footer will not be rendered. 
            To include an image inside the footer, make sure it's size is set explicitly so that it fits.</para><para>To place a banner at the bottom of the page that uses the full width of the page use an <see cref="T:TallComponents.PDF.Layout.Area">Area</see> and add it to the <see cref="P:TallComponents.PDF.Layout.Section.BackgroundAreas">BackgroundAreas</see> collection.</para></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Footer.#ctor">
      <summary>
            Initialize a new instance of the Footer class.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.Footer.BottomMargin">
      <summary>
            Get or set the space between the bottom of the footer and the bottom of the page.
            </summary>
      <remarks>By default the BottomMargin is 0.</remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.Header">
      <summary>
            An area that is repeated at the top of pages in a <see cref="T:TallComponents.PDF.Layout.Section">Section</see>.
            </summary>
      <remarks>
            A <see cref="T:TallComponents.PDF.Layout.Header" /> is associated with a <see cref="T:TallComponents.PDF.Layout.Section">Section</see> through the <see cref="P:TallComponents.PDF.Layout.Section.OddHeader" /> and <see cref="P:TallComponents.PDF.Layout.Section.EvenHeader" /> properties of the section.
            The position and the size of a header is constrained by the page size and page margins of the section.
            The top position of a header is equal to the page height of the section minus top margin of the header.
            The left position of a header is equal to the left margin of the section.
            The height of the header is equal to the top margin of the section minus the top margin of the header.
            The width of the header is equal to the width of the page minus the left and right margin of the section.
            <para>If the contents of the header exceeds the available space, the header will not be rendered. 
            To include an image inside the header, make sure it's size is set explicitly so that it fits.</para><para>To place a banner at the top of the page that uses the full width of the page use an <see cref="T:TallComponents.PDF.Layout.Area" /> and add it to the <see cref="P:TallComponents.PDF.Layout.Section.BackgroundAreas" /> collection.</para></remarks>
    </member>
    <member name="M:TallComponents.PDF.Layout.Header.#ctor">
      <summary>
            Initialize a new instance of the Header class.
            </summary>
      <remarks>
            The generated class will have a top margin of 0.</remarks>
    </member>
    <member name="P:TallComponents.PDF.Layout.Header.TopMargin">
      <summary>
            Get or set the space between the top of the header and the top of the page.
            </summary>
      <remarks>By default the TopMargin is 0.</remarks>
    </member>
    <member name="T:TallComponents.PDF.Layout.SectionCollection">
      <summary>
            Collection of paragraph objects. It is obtained through the Sections property of Document.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.SectionCollection.#ctor">
      <summary>
            Create a new empty collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.SectionCollection.Add">
      <summary>
            Add a new section.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.SectionCollection.Add(TallComponents.PDF.Layout.Section)">
      <summary>
            Add an existing section.
            </summary>
      <param name="section">Add this section.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.SectionCollection.AddRange(TallComponents.PDF.Layout.SectionCollection)">
      <summary>
            Adds the elements of a SectionCollection to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="sections">The SectionCollection whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.SectionCollection.AddRange(TallComponents.PDF.Layout.Section[])">
      <summary>
            Adds the elements of an array of sections to the end of this collection.
            </summary>
      <remarks>
        <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
      </remarks>
      <param name="sections">The array of sections whose elements should be added to 
            the end of the collection.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.SectionCollection.Clear">
      <summary>
            Removes all sections from this collection.
            </summary>
    </member>
    <member name="M:TallComponents.PDF.Layout.SectionCollection.Contains(TallComponents.PDF.Layout.Section)">
      <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layout.Section">Section</see> is in the <see cref="T:TallComponents.PDF.Layout.SectionCollection">SectionCollection</see>.
            </summary>
      <param name="section">The <see cref="T:TallComponents.PDF.Layout.Section" /> to verify.</param>
      <returns>True if the <see cref="T:TallComponents.PDF.Layout.Section" /> is found in this <see cref="T:TallComponents.PDF.Layout.SectionCollection" />, false otherwise.</returns>
      <remarks>
            The <paramref name="section" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="section" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.SectionCollection.IndexOf(TallComponents.PDF.Layout.Section)">
      <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layout.Section">Section</see> in the <see cref="T:TallComponents.PDF.Layout.SectionCollection">SectionCollection</see>.
            </summary>
      <param name="section">The <see cref="T:TallComponents.PDF.Layout.Section" /> to locate in the <see cref="T:TallComponents.PDF.Layout.SectionCollection" />.</param>
      <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Section" /> is found, -1 if not found.</returns>
    </member>
    <member name="M:TallComponents.PDF.Layout.SectionCollection.Insert(System.Int32,TallComponents.PDF.Layout.Section)">
      <summary>
            Insert an <see cref="T:TallComponents.PDF.Layout.Section" /> on a specific place in this <see cref="T:TallComponents.PDF.Layout.SectionCollection" />.
            </summary>
      <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Layout.Section" /> should be inserted.</param>
      <param name="section">The <see cref="T:TallComponents.PDF.Layout.Section" /> to be insert.</param>
      <remarks>
            The <paramref name="section" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="section" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.SectionCollection.Remove(TallComponents.PDF.Layout.Section)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Section">Section</see> from this <see cref="T:TallComponents.PDF.Layout.SectionCollection">SectionCollection</see>.
            </summary>
      <param name="section">The section to remove.</param>
      <remarks>
            The <paramref name="section" /> does not accept a <see langword="null" /> as a valid value. 
            </remarks>
      <exception cref="T:System.ArgumentNullException">The given <paramref name="section" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:TallComponents.PDF.Layout.SectionCollection.RemoveAt(System.Int32)">
      <summary>
            Removes an <see cref="T:TallComponents.PDF.Layout.Section">Section</see> from the <see cref="T:TallComponents.PDF.Layout.SectionCollection">SectionCollection</see> at the specified index.
            </summary>
      <param name="index">The zero-based index of the <see cref="T:TallComponents.PDF.Layout.Section" /> to be removed.</param>
    </member>
    <member name="M:TallComponents.PDF.Layout.SectionCollection.GetEnumerator">
      <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.
            </summary>
      <returns>Enumerator for this collection.</returns>
    </member>
    <member name="P:TallComponents.PDF.Layout.SectionCollection.Count">
      <summary>
            Number of sections.
            </summary>
    </member>
    <member name="P:TallComponents.PDF.Layout.SectionCollection.Item(System.Int32)">
      <summary>
            Retrieve section by index (0-based).
            </summary>
    </member>
    <member name="T:TallComponents.Licensing.TallPDFLicenseAttribute">
      <summary>
            License key attribute. Use this attribute to include a license key with your assembly or application.
            </summary>
      <example>
            Include the following code in your AssemblyInfo:
            <para>C#</para><code>
            using TallComponents.Licensing;
            
            [assembly: TallPDFLicense( "TallPDF.NET 3.0 Server Key", "YourKeyValueHere" )] 
            </code><para>VB.NET</para><code>
            Imports TallComponents.Licensing
            
            &lt;Assembly: TallPDFLicense("TallPDF.NET 3.0 Server Key", "YourKeyValueHere")&gt;
            </code>
            
            The license key name depends on the type of license you have purchased. The value is generated when 
            you activate your license.
            <para>You can obtain the license key name and value by logging in to 
            <see href="http://www.tallcomponents.com/?id=myaccount-licenses">your account</see> on 
            <see href="http://www.tallcomponents.com">our website</see>.</para></example>
    </member>
    <member name="M:TallComponents.Licensing.TallPDFLicenseAttribute.#ctor(System.String,System.String)">
      <summary>
            Create a new licensing attribute. Do not use this directly but specify the attribute in 
            the AssemblyInfo.
            </summary>
      <param name="key">Name of the license key.</param>
      <param name="value">Value of the license key.</param>
    </member>
    <member name="P:TallComponents.Licensing.TallPDFLicenseAttribute.Key">
      <summary>
            Get the name of the license key.
            </summary>
    </member>
    <member name="P:TallComponents.Licensing.TallPDFLicenseAttribute.Value">
      <summary>
            Get the value of the license key.
            </summary>
    </member>
    <member name="T:TallComponents.PDF.Layout.Paragraphs.InvalidRtfException">
      <summary>
            Thrown when invalid or unsupported RTF content is encountered.
            </summary>
    </member>
  </members>
</doc>