// 2010-02-02 Liu Dong(eB1-4)         Modify ITC-1122-0049
// 2010-03-04 Liu Dong(eB1-4)         Modify ITC-1122-0080 
// 2010-03-08 Liu Dong(eB1-4)         Modify ITC-1122-0207 
// 2010-04-20 Liu Dong(eB1-4)         Modify Yuan XW: ProductStatus的Line如果傳下了Null或String.Empty, 就不更新了.
// 2010-05-11 Liu Dong(eB1-4)         Modify ITC-1122-0313 SaveSMALLPartsUploadInfo批操作前的判断不太妥当,因为本次插入的集合的数据不能不考虑此逻辑.
// 2010-05-31 Liu Dong(eB1-4)         Modify ChangeLog的Cdt可以由上面传下来.
// 2011-04-02 Lucy Liu(eB1-4)         Modify ITC-1268-0002 
// 2011-04-02 Lucy Liu(eB1-4)         Modify ITC-1268-0001
// 2011-04-02 Lucy Liu(eB1-4)         Modify ITC-1268-0032
// 2011-04-18 Liu Dong(eB1-4)         Modify ITC-1268-0115 
// 2011-04-28 Liu Dong(eB1-4)         Modify ITC-1268-0150 
// 2012-08-28 100003                  Modified ITC-1426-0013 

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Reflection;
using IMES.FisObject.FA.Product;
using IMES.Infrastructure.FisObjectRepositoryFramework;
using IMES.Infrastructure.UnitOfWork;
//
using IMES.FisObject.Common.Repair;
using IMES.Infrastructure.Repository;
using IMES.Infrastructure.Util;
using System.Data.SqlClient;
using IMES.FisObject.Common.TestLog;
using IMES.FisObject.Common.Model;
using IMES.FisObject.Common.Part;
using IMES.FisObject.Common.Station;
//using IMES.DataModel;
using IMES.FisObject.Common.Defect;
using IMES.Infrastructure.Utility.Generates;
using IMES.Infrastructure.Utility.Generates.intf;
using IMES.Infrastructure.Utility.Generates.impl;
using IMES.FisObject.Common.Process;
using IMES.Infrastructure.Utility;
using IMES.FisObject.PAK.Pizza;
using IMES.FisObject.PAK.BoxerBookData;
using IMES.FisObject.PCA.TestBoxDataLog;
using log4net;
using IMES.Infrastructure.Repository._Metas;
using mtns = IMES.Infrastructure.Repository._Metas;
using IMES.DataModel;
using mdlns = IMES.FisObject.Common.Model;
using fons = IMES.FisObject.FA.Product;
using dtmdns = IMES.DataModel;
using System.Threading;
using IMES.FisObject.PAK.DN;
using IMES.FisObject.PAK.Pallet;
using IMES.FisObject.Common.UPS;

namespace IMES.Infrastructure.Repository.FA
{
    /// <summary>
    /// 数据访问与持久化类: Product相关
    /// </summary>
    public class ProductRepository : BaseRepository<IProduct>, IProductRepository
    {
        private static GetValueClass g = new GetValueClass();

        #region Link To Other
        private static IDefectInfoRepository _dfciRepository = null;
        private static IDefectInfoRepository DfciRepository
        {
            get
            {
                if (_dfciRepository == null)
                    _dfciRepository = RepositoryFactory.GetInstance().GetRepository<IDefectInfoRepository, IMES.FisObject.Common.Defect.DefectInfo>();
                return _dfciRepository;
            }
        }

        private static IDefectRepository _dfctRepository = null;
        private static IDefectRepository DfctRepository
        {
            get
            {
                if (_dfctRepository == null)
                    _dfctRepository = RepositoryFactory.GetInstance().GetRepository<IDefectRepository, Defect>();
                return _dfctRepository;
            }
        }

        private static IModelRepository _mdlRepository = null;
        private static IModelRepository MdlRepository
        {
            get
            {
                if (_mdlRepository == null)
                    _mdlRepository = RepositoryFactory.GetInstance().GetRepository<IModelRepository, mdlns::Model>();
                return _mdlRepository;
            }
        }

        private static IPizzaRepository _pzRepository = null;
        private static IPizzaRepository PzRepository
        {
            get
            {
                if (_pzRepository == null)
                    _pzRepository = RepositoryFactory.GetInstance().GetRepository<IPizzaRepository, Pizza>();
                return _pzRepository;
            }
        }

        private static IDeliveryRepository _dnRepository = null;
        private static IDeliveryRepository DnRepository
        {
            get
            {
                if (_dnRepository == null)
                    _dnRepository = RepositoryFactory.GetInstance().GetRepository<IDeliveryRepository, IMES.FisObject.PAK.DN.Delivery>();
                return _dnRepository;
            }
        }

        private static IPalletRepository _pltRepository = null;
        private static IPalletRepository PltRepository
        {
            get
            {
                if (_pltRepository == null)
                    _pltRepository = RepositoryFactory.GetInstance().GetRepository<IPalletRepository, IMES.FisObject.PAK.Pallet.Pallet>();
                return _pltRepository;
            }
        }

        private static IUPSRepository _upsRep= null;
        private static IUPSRepository UPSRep
        {
            get
            {
                if (_upsRep == null)
                    _upsRep = RepositoryFactory.GetInstance().GetRepository<IUPSRepository>();
                return _upsRep;
            }
        }

        #endregion

        #region get private FieldInfo in Product

        static readonly FieldInfo _modelObj = (typeof(IMES.FisObject.FA.Product.Product)).GetField("_modelObj", BindingFlags.NonPublic | BindingFlags.Instance);
        //static readonly FieldInfo _productMO = (typeof(IMES.FisObject.FA.Product.Product)).GetField("_productMO", BindingFlags.NonPublic | BindingFlags.Instance);
        static readonly FieldInfo _testLogs = (typeof(IMES.FisObject.FA.Product.Product)).GetField("_testLogs", BindingFlags.NonPublic | BindingFlags.Instance);
        static readonly FieldInfo _productLogs = (typeof(IMES.FisObject.FA.Product.Product)).GetField("_productLogs", BindingFlags.NonPublic | BindingFlags.Instance);
        static readonly FieldInfo _pizzaObj = (typeof(IMES.FisObject.FA.Product.Product)).GetField("_pizzaObj", BindingFlags.NonPublic | BindingFlags.Instance);
        static readonly FieldInfo _attributeLogs = (typeof(IMES.FisObject.FA.Product.Product)).GetField("_attributeLogs", BindingFlags.NonPublic | BindingFlags.Instance);
        static readonly FieldInfo _attributes = (typeof(IMES.FisObject.FA.Product.Product)).GetField("_attributes", BindingFlags.NonPublic | BindingFlags.Instance);
        static readonly FieldInfo _infoes = (typeof(IMES.FisObject.FA.Product.Product)).GetField("_infoes", BindingFlags.NonPublic | BindingFlags.Instance);
        static readonly FieldInfo _parts = (typeof(IMES.FisObject.FA.Product.Product)).GetField("_parts", BindingFlags.NonPublic | BindingFlags.Instance);
        static readonly FieldInfo _qcStatus = (typeof(IMES.FisObject.FA.Product.Product)).GetField("_qcStatus", BindingFlags.NonPublic | BindingFlags.Instance);
        static readonly FieldInfo _repairDefects = (typeof(IMES.FisObject.Common.Repair.Repair)).GetField("_defects", BindingFlags.NonPublic | BindingFlags.Instance);
        static readonly FieldInfo _repairs = (typeof(IMES.FisObject.FA.Product.Product)).GetField("_repairs", BindingFlags.NonPublic | BindingFlags.Instance);
        static readonly FieldInfo _status = (typeof(IMES.FisObject.FA.Product.Product)).GetField("_status", BindingFlags.NonPublic | BindingFlags.Instance);
        static readonly FieldInfo _testLogDefects = (typeof(IMES.FisObject.Common.TestLog.TestLog)).GetField("_defects", BindingFlags.NonPublic | BindingFlags.Instance);
        static readonly FieldInfo _chngLogs = (typeof(IMES.FisObject.FA.Product.Product)).GetField("_chngLogs", BindingFlags.NonPublic | BindingFlags.Instance);
        #endregion

        ILog logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        #region Overrides of BaseRepository<IProduct>

        protected override void PersistNewItem(IProduct item)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            StateTracker tracker = (item as IMES.FisObject.FA.Product.Product).Tracker;
            try
            {
                //persist Product object
                if (tracker.GetState(item) == DataRowState.Added)
                {
                    this.PersistInsertProduct(item);

                    // 2010-03-08 Liu Dong(eB1-4)         Modify ITC-1122-0207 
                    IMES.FisObject.FA.Product.ProductStatus prodStt = (IMES.FisObject.FA.Product.ProductStatus)item.GetType().GetField("_status", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                    if (prodStt != null)
                        this.PersistInsertProductStatus(item.ProId, prodStt);

                    this.CheckAndInsertSubs(item, tracker);
                }
            }
            finally
            {
                tracker.Clear();
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        protected override void PersistUpdatedItem(IProduct item)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            StateTracker tracker = (item as IMES.FisObject.FA.Product.Product).Tracker;
            try
            {
                //LoggingInfoFormat("Item HashCode:{0}", item.GetHashCode().ToString());
                //LoggingInfoFormat("Tracker Content:{0}", tracker.ToString());
                if (tracker.GetState(item) == DataRowState.Modified)
                {
                    this.PersistUpdateProduct(item);

                    //LoggingInfoFormat("ProductStatus Item HashCode:{0}", item.Status.GetHashCode().ToString());
                    //LoggingInfoFormat("ProductStatus Tracker Content:{0}", tracker.ToString());
                    // 2010-03-08 Liu Dong(eB1-4)         Modify ITC-1122-0207 
                    IMES.FisObject.FA.Product.ProductStatus prodStt = (IMES.FisObject.FA.Product.ProductStatus)item.GetType().GetField("_status", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                    if (prodStt != null)
                    {
                        if (tracker.GetState(prodStt) == DataRowState.Modified)
                        {
                            this.PersistUpdateProductStatus(item.ProId, prodStt);
                        }
                    }

                    this.CheckAndInsertSubs(item, tracker);

                    this.CheckAndUpdateSubs(item, tracker);
                }
            }
            finally
            {
                tracker.Clear();
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        protected override void PersistDeletedItem(IProduct item)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            StateTracker tracker = (item as IMES.FisObject.FA.Product.Product).Tracker;
            try
            {
                if (tracker.GetState(item) == DataRowState.Deleted)
                {
                    this.PersistDeleteProduct(item);
                }
            }
            finally
            {
                tracker.Clear();
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        #endregion

        #region Implementation of IRepository<IProduct>

        /// <summary>
        /// 根据对象key获取对象
        /// </summary>
        /// <param name="key">对象的key</param>
        /// <returns>对象实例</returns>
        public override IProduct Find(object key)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                IProduct ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        //LoggingInfoFormat("ProductRepository::Find: FirstConstruct: Key:{0}; TokenID: {1}", key.ToString(), MethodBase.GetCurrentMethod().MetadataToken.ToString());
                        _Schema.Product cond = new _Schema.Product();
                        cond.ProductID = (string)key;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_ProductID].Value = (string)key;

                //LoggingInfoFormat("ProductRepository::Find: Key:{0}; SQL Sentence: {1}; sqlCtx Hash: {2}", (string)key, sqlCtx.Sentence, sqlCtx.GetHashCode().ToString());

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        //LoggingInfoFormat("ProductRepository::Find: Found Key:{0};", GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]));

                        ret = new IMES.FisObject.FA.Product.Product(GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]));
                        //ret.BIOS = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BIOS]);
                        ret.CartonSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonSN]);
                        ret.CartonWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonWeight]);
                        //ret.COAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_COAID]);
                        ret.CUSTSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                        //ret.CUSTVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.DeliveryNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_DeliveryNo]);
                        ret.ECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ECR]);
                        //ret.ICCID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ICCID]);
                        //ret.IMEI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMEI]);
                        //ret.IMGVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMGVER]);
                        ret.MAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MAC]);
                        ret.MBECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MBECR]);
                        //ret.MEID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MEID]);
                        ret.MO = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MO]);
                        ret.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Model]);
                        ret.PalletNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PalletNo]);
                        ret.PCBID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBID]);
                        ret.PCBModel = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBModel]);
                        ret.PizzaID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PizzaID]);
                        ret.UnitWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UnitWeight]);
                        ret.UUID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UUID]);
                        //ret.WMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_WMAC]);
                        //ret.HDVD = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_HDVD]);
                        //ret.BLMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BLMAC]);
                        //ret.TVTuner = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_TVTuner]);
                        ret.CVSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.State = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_state]);
                        ret.PRSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_prsn]);
                        ret.OOAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ooaid]);
                        ret.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Udt]);
                        ret.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Cdt]);
                        ((IMES.FisObject.FA.Product.Product)ret).Tracker.Clear();
                    }
                }
                //LoggingInfoFormat("ProductRepository::Find: Final Key:{0};", ret.Key.ToString());
                //LoggingInfoFormat("ProductRepository::Find: Final ProdID:{0};", ret.ProId.ToString());

                return ret;
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private IProduct Find_NoLock(object key)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                IProduct ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        //LoggingInfoFormat("ProductRepository::Find: FirstConstruct: Key:{0}; TokenID: {1}", key.ToString(), MethodBase.GetCurrentMethod().MetadataToken.ToString());
                        _Schema.Product cond = new _Schema.Product();
                        cond.ProductID = (string)key;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_ProductID].Value = (string)key;

                string Sentence = sqlCtx.Sentence.Replace(string.Format("{0} WHERE", ToolsNew.GetTableName(typeof(_Metas.Product))), string.Format("{0} WITH (NOLOCK) WHERE", ToolsNew.GetTableName(typeof(_Metas.Product))));

                //LoggingInfoFormat("ProductRepository::Find: Key:{0}; SQL Sentence: {1}; sqlCtx Hash: {2}", (string)key, sqlCtx.Sentence, sqlCtx.GetHashCode().ToString());

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        //LoggingInfoFormat("ProductRepository::Find: Found Key:{0};", GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]));

                        ret = new IMES.FisObject.FA.Product.Product(GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]));
                        //ret.BIOS = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BIOS]);
                        ret.CartonSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonSN]);
                        ret.CartonWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonWeight]);
                        //ret.COAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_COAID]);
                        ret.CUSTSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                        //ret.CUSTVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.DeliveryNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_DeliveryNo]);
                        ret.ECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ECR]);
                        //ret.ICCID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ICCID]);
                        //ret.IMEI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMEI]);
                        //ret.IMGVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMGVER]);
                        ret.MAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MAC]);
                        ret.MBECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MBECR]);
                        //ret.MEID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MEID]);
                        ret.MO = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MO]);
                        ret.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Model]);
                        ret.PalletNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PalletNo]);
                        ret.PCBID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBID]);
                        ret.PCBModel = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBModel]);
                        ret.PizzaID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PizzaID]);
                        ret.UnitWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UnitWeight]);
                        ret.UUID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UUID]);
                        //ret.WMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_WMAC]);
                        //ret.HDVD = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_HDVD]);
                        //ret.BLMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BLMAC]);
                        //ret.TVTuner = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_TVTuner]);
                        ret.CVSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.State = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_state]);
                        ret.PRSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_prsn]);
                        ret.OOAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ooaid]);
                        ret.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Udt]);
                        ret.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Cdt]);
                        ((IMES.FisObject.FA.Product.Product)ret).Tracker.Clear();
                    }
                }
                //LoggingInfoFormat("ProductRepository::Find: Final Key:{0};", ret.Key.ToString());
                //LoggingInfoFormat("ProductRepository::Find: Final ProdID:{0};", ret.ProId.ToString());

                return ret;
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        /// <summary>
        /// 获取所有对象列表
        /// </summary>
        /// <returns>所有对象列表</returns>
        public override IList<IProduct> FindAll()
        {
            try
            {
                IList<IProduct> ret = new List<IProduct>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product));
                    }
                }
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, null))
                {
                    if (sqlR != null)
                    {
                        while (sqlR.Read())
                        {
                            IProduct item = new IMES.FisObject.FA.Product.Product(GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]));
                            //item.BIOS = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BIOS]);
                            item.CartonSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonSN]);
                            item.CartonWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonWeight]);
                            //item.COAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_COAID]);
                            item.CUSTSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                            //item.CUSTVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                            item.DeliveryNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_DeliveryNo]);
                            item.ECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ECR]);
                            //item.ICCID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ICCID]);
                            //item.IMEI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMEI]);
                            //item.IMGVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMGVER]);
                            item.MAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MAC]);
                            item.MBECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MBECR]);
                            //item.MEID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MEID]);
                            item.MO = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MO]);
                            item.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Model]);
                            item.PalletNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PalletNo]);
                            item.PCBID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBID]);
                            item.PCBModel = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBModel]);
                            item.PizzaID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PizzaID]);
                            item.UnitWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UnitWeight]);
                            item.UUID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UUID]);
                            //item.WMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_WMAC]);
                            //item.HDVD = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_HDVD]);
                            //item.BLMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BLMAC]);
                            //item.TVTuner = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_TVTuner]);
                            item.CVSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                            item.State = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_state]);
                            item.PRSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_prsn]);
                            item.OOAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ooaid]);
                            item.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Udt]);
                            item.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Cdt]);
                            ((IMES.FisObject.FA.Product.Product)item).Tracker.Clear();
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// 添加一个对象
        /// </summary>
        /// <param name="item">新添加的对象</param>
        public override void Add(IProduct item, IUnitOfWork uow)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                base.Add(item, uow);
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        /// <summary>
        /// 删除指定对象
        /// </summary>
        /// <param name="item">需删除的对象</param>
        public override void Remove(IProduct item, IUnitOfWork uow)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                base.Remove(item, uow);
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        /// <summary>
        /// 更新指定对象
        /// </summary>
        /// <param name="item">需更新的对象</param>
        /// <param name="uow"></param>
        public override void Update(IProduct item, IUnitOfWork uow)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                base.Update(item, uow);
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        #endregion

        #region Implementation of IProductRepository

        #region . Filling Method .

        public IProduct FillProductParts(IProduct pd)
        {
            try
            {
                IList<IProductPart> newFieldVal = new List<IProductPart>();

                #region obsolete
                //_Schema.SQLContext sqlCtx = null;
                //lock (MethodBase.GetCurrentMethod())
                //{
                //    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                //    {
                //        _Schema.Product_Part cond = new _Schema.Product_Part();
                //        cond.ProductID = pd.ProId;
                //        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product_Part), cond, null, null);
                //    }
                //}
                //sqlCtx.Params[_Schema.Product_Part.fn_ProductID].Value = pd.ProId;
                //using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                //{
                //    while (sqlR != null && sqlR.Read())
                //    {
                //        IProductPart pdpt = new ProductPart(
                //                                GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_ID]),
                //                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_PartNo]),
                //                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_ProductID]),
                //                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_Value]),
                //                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_ValueType]),
                //                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_Station]),
                //                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_Editor]),
                //                                GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_Udt]),
                //                                GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_Cdt])
                //                                );
                //        ((ProductPart)pdpt).Tracker.Clear();
                //        ((ProductPart)pdpt).Tracker = ((Product)pd).Tracker;
                //        newFieldVal.Add(pdpt);
                //    }
                //}
                #endregion

                _Schema.SQLContext sqlCtx = null;
                _Schema.TableAndFields tf1 = null;
                _Schema.TableAndFields tf2 = null;
                _Schema.TableAndFields[] tblAndFldsesArray = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
                    {
                        tf1 = new _Schema.TableAndFields();
                        tf1.Table = typeof(_Schema.Product_Part);
                        _Schema.Product_Part equalCond1 = new _Schema.Product_Part();
                        equalCond1.productID = pd.ProId;
                        tf1.equalcond = equalCond1;

                        tf2 = new _Schema.TableAndFields();
                        tf2.Table = typeof(_Schema.Part);
                        tf2.subDBCalalog = _Schema.SqlHelper.DB_GetData;
                        tf2.ToGetFieldNames.Add(_Schema.Part.fn_PartType);

                        _Schema.TableConnectionCollection tblCnnts = new _Schema.TableConnectionCollection(new _Schema.TableConnectionItem[] { 
                            new _Schema.TableConnectionItem(tf1, _Schema.Product_Part.fn_partNo, tf2, _Schema.Part.fn_PartNo)});

                        tblAndFldsesArray = new _Schema.TableAndFields[] { tf1, tf2 };
                        sqlCtx = _Schema.Func.GetConditionedJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken, null, ref tblAndFldsesArray, tblCnnts);
                    }
                }
                tf1 = tblAndFldsesArray[0];
                tf2 = tblAndFldsesArray[1];

                sqlCtx.Params[_Schema.Func.DecAlias(tf1.alias, _Schema.Product_Part.fn_productID)].Value = pd.ProId;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IProductPart pdpt = new ProductPart(
                                                GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product_Part.fn_id)]),
                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product_Part.fn_partNo)]),
                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product_Part.fn_productID)]),
                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product_Part.fn_station)]),
                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product_Part.fn_partType)]),
                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product_Part.fn_custmerPn)]),
                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product_Part.fn_iecpn)]),
                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product_Part.fn_partSn)]),
                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product_Part.fn_editor)]),
                                                GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product_Part.fn_udt)]),
                                                GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product_Part.fn_cdt)])
                                                );
                        ((ProductPart)pdpt).PartType = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Part.fn_PartType)]);
                        ((ProductPart)pdpt).BomNodeType = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product_Part.fn_bomNodeType)]);
                        ((ProductPart)pdpt).CheckItemType = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product_Part.fn_checkItemType)]);
                        ((ProductPart)pdpt).Tracker.Clear();
                        ((ProductPart)pdpt).Tracker = ((IMES.FisObject.FA.Product.Product)pd).Tracker;
                        newFieldVal.Add(pdpt);
                    }
                }

                //pd.GetType().GetField("_parts", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(pd, newFieldVal);
                _parts.SetValue(pd, newFieldVal);
                return pd;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IProduct FillQCStatuses(IProduct pd)
        {
            try
            {
                IList<ProductQCStatus> newFieldVal = new List<ProductQCStatus>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.QCStatus cond = new _Schema.QCStatus();
                        cond.ProductID = pd.ProId;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.QCStatus), cond, null, null);
                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderByDesc, _Schema.QCStatus.fn_Cdt);
                    }
                }
                sqlCtx.Params[_Schema.QCStatus.fn_ProductID].Value = pd.ProId;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        ProductQCStatus pdqcsts = new ProductQCStatus(
                                            GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.QCStatus.fn_ID]),
                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.QCStatus.fn_ProductID]),
                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.QCStatus.fn_Tp]),
                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.QCStatus.fn_Line]),
                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.QCStatus.fn_Model]),
                            //GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.QCStatus.fn_Date]),
                            //GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.QCStatus.fn_CustSN]),
                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.QCStatus.fn_Status]),
                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.QCStatus.fn_Editor]),
                                            GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.QCStatus.fn_Cdt]),
                                            GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.QCStatus.fn_Udt]));
                        pdqcsts.Remark = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.QCStatus.fn_remark]);
                        pdqcsts.Tracker.Clear();
                        pdqcsts.Tracker = ((IMES.FisObject.FA.Product.Product)pd).Tracker;
                        newFieldVal.Add(pdqcsts);
                    }
                }
                //pd.GetType().GetField("_qcStatus", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(pd, newFieldVal);
                _qcStatus.SetValue(pd, newFieldVal);
                return pd;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IProduct FillTestLogs(IProduct pd)
        {
            try
            {
                IList<TestLog> newFieldVal = new List<TestLog>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductTestLog cond = new _Schema.ProductTestLog();
                        cond.ProductID = pd.ProId;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductTestLog), cond, null, null);
                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderByDesc, _Schema.ProductTestLog.fn_Cdt);
                    }
                }
                sqlCtx.Params[_Schema.ProductTestLog.fn_ProductID].Value = pd.ProId;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        TestLog tstlg = new TestLog(
                                            GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog.fn_ID]),
                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog.fn_ProductID]),
                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog.fn_Line]),
                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog.fn_FixtureID]),
                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog.fn_Station]),
                                            (TestLog.TestLogStatus)Enum.Parse(typeof(TestLog.TestLogStatus), GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog.fn_Status]).ToString()),
                                            null,
                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog.fn_ActionName]),
                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog.fn_ErrorCode]),
                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog.fn_Descr]),
                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog.fn_Editor]),
                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog.fn_Type]),
                                            GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog.fn_Cdt])
                                            );
                        tstlg.Tracker.Clear();
                        tstlg.Tracker = ((IMES.FisObject.FA.Product.Product)pd).Tracker;
                        tstlg.FillingTestLogDefects += new FillTestLog(IMES.FisObject.FA.Product.Product.FillingTestLogDefects);
                        newFieldVal.Add(tstlg);
                    }
                }
                //pd.GetType().GetField("_testLogs", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(pd, newFieldVal);
                _testLogs.SetValue(pd, newFieldVal);
                return pd;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IProduct FillRepairs(IProduct pd)
        {
            try
            {
                IList<Repair> newFieldVal = new List<Repair>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductRepair cond = new _Schema.ProductRepair();
                        cond.ProductID = pd.ProId;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductRepair), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.ProductRepair.fn_ProductID].Value = pd.ProId;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        Repair rp = new Repair(
                                    GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductRepair.fn_ID]),
                                    GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair.fn_ProductID]),
                                    GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair.fn_Model]),
                                    GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair.fn_Type]),
                                    GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair.fn_Line]),
                                    GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair.fn_Station]),
                                    (Repair.RepairStatus)Enum.Parse(typeof(Repair.RepairStatus), GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductRepair.fn_Status]).ToString()),
                                    //GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductRepair.fn_ReturnID]),
                                    GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair.fn_Editor]),
                                    GetValue_Int32_ToStringWithNull(sqlR, sqlCtx.Indexes[_Schema.ProductRepair.fn_TestLogID]),
                                    GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductRepair.fn_logID]),
                                    GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.ProductRepair.fn_Cdt]),
                                    GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.ProductRepair.fn_Udt])
                                    );

                        rp.Tracker.Clear();
                        rp.Tracker = ((IMES.FisObject.FA.Product.Product)pd).Tracker;
                        rp.FillingRepairDefects += new FillRepair(IMES.FisObject.FA.Product.Product.FillingRepairDefects);
                        newFieldVal.Add(rp);
                    }
                }
                //pd.GetType().GetField("_repairs", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(pd, newFieldVal);
                _repairs.SetValue(pd, newFieldVal);
                return pd;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IProduct FillStatus(IProduct pd)
        {
            try
            {
                IMES.FisObject.FA.Product.ProductStatus newFieldVal = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductStatus cond = new _Schema.ProductStatus();
                        cond.ProductID = pd.ProId;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductStatus), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.ProductStatus.fn_ProductID].Value = pd.ProId;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        newFieldVal = new IMES.FisObject.FA.Product.ProductStatus();
                        newFieldVal.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.ProductStatus.fn_Cdt]);
                        newFieldVal.Editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductStatus.fn_Editor]);
                        newFieldVal.Line = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductStatus.fn_Line]);
                        newFieldVal.ProId = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductStatus.fn_ProductID]);
                        newFieldVal.ReworkCode = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductStatus.fn_ReworkCode]);
                        newFieldVal.StationId = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductStatus.fn_Station]);
                        newFieldVal.Status = (StationStatus)Enum.Parse(typeof(StationStatus), GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductStatus.fn_Status]).ToString());
                        newFieldVal.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.ProductStatus.fn_Udt]);
                        newFieldVal.TestFailCount = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductStatus.fn_TestFailCount]);
                        newFieldVal.Tracker.Clear();
                        newFieldVal.Tracker = ((IMES.FisObject.FA.Product.Product)pd).Tracker;
                    }
                }
                //pd.GetType().GetField("_status", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(pd, newFieldVal);
                _status.SetValue(pd, newFieldVal);
                return pd;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IProduct FillModelObj(IProduct pd)
        {
            try
            {
                IMES.FisObject.Common.Model.Model newFieldVal = null;

                IMES.FisObject.Common.Model.Model part = MdlRepository.Find(pd.Model);
                // 2010-03-04 Liu Dong(eB1-4)         Modify ITC-1122-0080 
                if (part != null)
                {
                    newFieldVal = part;
                    //这里不需用深拷贝解决,修改Model是Maintain的责任.故不用链Tracker
                    //newFieldVal.Tracker.Clear();
                    //newFieldVal.Tracker = ((Product)pd).Tracker;
                    //这里不需用深拷贝解决,修改Model是Maintain的责任.故不用链Tracker
                }
                // 2010-03-04 Liu Dong(eB1-4)         Modify ITC-1122-0080 
                //pd.GetType().GetField("_modelObj", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(pd, newFieldVal);
                _modelObj.SetValue(pd, newFieldVal);
                return pd;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IProduct FillLogs(IProduct pd)
        {
            try
            {
                IList<IMES.FisObject.FA.Product.ProductLog> newFieldVal = new List<IMES.FisObject.FA.Product.ProductLog>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductLog cond = new _Schema.ProductLog();
                        cond.ProductID = pd.ProId;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductLog), cond, null, null);
                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderByDesc, _Schema.ProductLog.fn_Cdt);
                    }
                }
                sqlCtx.Params[_Schema.ProductLog.fn_ProductID].Value = pd.ProId;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.FisObject.FA.Product.ProductLog prdlg = new IMES.FisObject.FA.Product.ProductLog();

                        prdlg.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.ProductLog.fn_Cdt]);
                        prdlg.Editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductLog.fn_Editor]);
                        prdlg.Line = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductLog.fn_Line]);
                        prdlg.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductLog.fn_Model]);
                        prdlg.Station = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductLog.fn_Station]);
                        prdlg.Status = (StationStatus)Enum.Parse(typeof(StationStatus), GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductLog.fn_Status]).ToString());
                        prdlg.Id = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductLog.fn_ID]);

                        prdlg.Tracker.Clear();
                        prdlg.Tracker = ((IMES.FisObject.FA.Product.Product)pd).Tracker;
                        newFieldVal.Add(prdlg);
                    }
                }

                //pd.GetType().GetField("_productLogs", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(pd, newFieldVal);
                _productLogs.SetValue(pd, newFieldVal);
                return pd;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IProduct FillChangeLogs(IProduct pd)
        {
            try
            {
                IList<ProductChangeLog> newFieldVal = new List<ProductChangeLog>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ChangeLog cond = new _Schema.ChangeLog();
                        cond.ProductID = pd.ProId;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ChangeLog), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.ChangeLog.fn_ProductID].Value = pd.ProId;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        ProductChangeLog prdChnglg = new ProductChangeLog();
                        prdChnglg.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.ChangeLog.fn_Cdt]);
                        prdChnglg.Editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ChangeLog.fn_Editor]);
                        prdChnglg.ID = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ChangeLog.fn_ID]);
                        prdChnglg.Mo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ChangeLog.fn_Mo]);
                        prdChnglg.ProductID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ChangeLog.fn_ProductID]);
                        prdChnglg.Station = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ChangeLog.fn_Station]);

                        prdChnglg.Tracker.Clear();
                        prdChnglg.Tracker = ((IMES.FisObject.FA.Product.Product)pd).Tracker;
                        newFieldVal.Add(prdChnglg);
                    }
                }

               // pd.GetType().GetField("_chngLogs", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(pd, newFieldVal);
                _chngLogs.SetValue(pd, newFieldVal);

                return pd;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IProduct FillProductInfoes(IProduct pd)
        {
            try
            {
                IList<IMES.FisObject.FA.Product.ProductInfo> newFieldVal = new List<IMES.FisObject.FA.Product.ProductInfo>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductInfo cond = new _Schema.ProductInfo();
                        cond.ProductID = pd.ProId;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductInfo), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.ProductInfo.fn_ProductID].Value = pd.ProId;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.FisObject.FA.Product.ProductInfo prdi = new IMES.FisObject.FA.Product.ProductInfo();

                        prdi.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.ProductInfo.fn_Cdt]);
                        prdi.Editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductInfo.fn_Editor]);
                        prdi.ID = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductInfo.fn_ID]);
                        prdi.InfoType = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductInfo.fn_InfoType]);
                        prdi.InfoValue = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductInfo.fn_InfoValue]);
                        prdi.ProductID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductInfo.fn_ProductID]);
                        prdi.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.ProductInfo.fn_Udt]);

                        prdi.Tracker.Clear();
                        prdi.Tracker = ((IMES.FisObject.FA.Product.Product)pd).Tracker;
                        newFieldVal.Add(prdi);
                    }
                }

                //pd.GetType().GetField("_infoes", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(pd, newFieldVal);
                _infoes.SetValue(pd, newFieldVal);
                return pd;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Lazy load of product attributes
        /// </summary>
        /// <param name="product"></param>
        public void FillProductAttributes(IProduct product)
        {
            try
            {
                IList<IMES.FisObject.FA.Product.ProductAttribute> newFieldVal = new List<IMES.FisObject.FA.Product.ProductAttribute>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductAttr cond = new _Schema.ProductAttr();
                        cond.ProductID = product.ProId;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductAttr), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.ProductAttr.fn_ProductID].Value = product.ProId;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.FisObject.FA.Product.ProductAttribute prda = new IMES.FisObject.FA.Product.ProductAttribute();

                        prda.AttributeName = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductAttr.fn_AttrName]);
                        prda.AttributeValue = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductAttr.fn_AttrValue]);
                        prda.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.ProductAttr.fn_Cdt]);
                        prda.Editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductAttr.fn_Editor]);
                        prda.ProductId = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductAttr.fn_ProductID]);
                        prda.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.ProductAttr.fn_Udt]);

                        prda.Tracker.Clear();
                        prda.Tracker = ((IMES.FisObject.FA.Product.Product)product).Tracker;
                        newFieldVal.Add(prda);
                    }
                }

               // product.GetType().GetField("_attributes", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(product, newFieldVal);
                _attributes.SetValue(product, newFieldVal);
                //return product;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Lazy load of product attribute logs
        /// </summary>
        /// <param name="product"></param>
        public void FillProductAttributeLogs(IProduct product)
        {
            try
            {
                IList<IMES.FisObject.FA.Product.ProductAttributeLog> newFieldVal = new List<IMES.FisObject.FA.Product.ProductAttributeLog>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductAttrLog cond = new _Schema.ProductAttrLog();
                        cond.ProductID = product.ProId;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductAttrLog), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.ProductAttrLog.fn_ProductID].Value = product.ProId;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.FisObject.FA.Product.ProductAttributeLog prdal = new IMES.FisObject.FA.Product.ProductAttributeLog();

                        prdal.AttributeName = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductAttrLog.fn_AttrName]);
                        prdal.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.ProductAttrLog.fn_Cdt]);
                        prdal.Editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductAttrLog.fn_AttrName]);
                        prdal.ID = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductAttrLog.fn_ID]);
                        prdal.NewValue = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductAttrLog.fn_AttrNewValue]);
                        prdal.OldValue = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductAttrLog.fn_AttrOldValue]);
                        prdal.ProductId = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductAttrLog.fn_ProductID]);
                        prdal.Descr = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductAttrLog.fn_Descr]);
                        prdal.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductAttrLog.fn_Model]);
                        prdal.Station = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductAttrLog.fn_Station]);

                        prdal.Tracker.Clear();
                        prdal.Tracker = ((IMES.FisObject.FA.Product.Product)product).Tracker;
                        newFieldVal.Add(prdal);
                    }
                }

                //product.GetType().GetField("_attributeLogs", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(product, newFieldVal);
                _attributeLogs.SetValue(product, newFieldVal);
                //return product;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public Repair FillRepairDefectInfo(Repair rep)
        {
            try
            {
                IList<RepairDefect> newFieldVal = new List<RepairDefect>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductRepair_DefectInfo cond = new _Schema.ProductRepair_DefectInfo();
                        cond.ProductRepairID = rep.ID;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductRepair_DefectInfo), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_ProductRepairID].Value = rep.ID;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        RepairDefect repDfct = new RepairDefect(GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_ID]),
                                                                GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_ProductRepairID]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Type]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_DefectCodeID]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Cause]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Obligation]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Component]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Site]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Location]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_MajorPart]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Remark]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_VendorCT]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_PartType]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_OldPart]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_OldPartSno]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_NewPart]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_NewPartSno]),
                                                                null,//???//GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_NewPartSno]), 
                                                                Convert.ToBoolean(GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_IsManual])),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Manufacture]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_VersionA]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_VersionB]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_ReturnSign]),
                                                                null,
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Mark]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_SubDefect]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_PIAStation]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Distribution]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn__4M]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Responsibility]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Action]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Cover]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Uncover]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_TrackingStatus]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_MTAID]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_returnStn]),
                                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Editor]),
                                                                GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Cdt]),
                                                                GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.ProductRepair_DefectInfo.fn_Udt]));

                        repDfct.Tracker.Clear();
                        repDfct.Tracker = rep.Tracker;
                        newFieldVal.Add(repDfct);
                    }
                }

                //rep.GetType().GetField("_defects", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(rep, newFieldVal);
                _repairDefects.SetValue(rep, newFieldVal);
                return rep;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public TestLog FillTestLogDefectInfo(TestLog testLog)
        {
            try
            {
                IList<TestLogDefect> newFieldVal = new List<TestLogDefect>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductTestLog_DefectInfo cond = new _Schema.ProductTestLog_DefectInfo();
                        cond.ProductTestLogID = testLog.ID;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductTestLog_DefectInfo), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.ProductTestLog_DefectInfo.fn_ProductTestLogID].Value = testLog.ID;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        TestLogDefect tld = new TestLogDefect(
                            GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog_DefectInfo.fn_ID]),
                            GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog_DefectInfo.fn_ProductTestLogID]),
                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog_DefectInfo.fn_DefectCodeID]),
                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog_DefectInfo.fn_Editor]),
                            GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.ProductTestLog_DefectInfo.fn_Cdt]));

                        tld.Tracker.Clear();
                        tld.Tracker = testLog.Tracker;
                        newFieldVal.Add(tld);
                    }
                }

                //testLog.GetType().GetField("_defects", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(testLog, newFieldVal);
                _testLogDefects.SetValue(testLog, newFieldVal);
                return testLog;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IProduct FillPizza(IProduct pd)
        {
            try
            {
                if (string.IsNullOrEmpty(pd.PizzaID))
                    return pd;

                Pizza newFieldVal = PzRepository.Find(pd.PizzaID);
                //pd.GetType().GetField("_pizzaObj", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(pd, newFieldVal);
                _pizzaObj.SetValue(pd, newFieldVal);
                return pd;
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        /// <summary>
        /// 用于Carton称重时，任意取一个SN来创建Product对象，进行卡站
        /// </summary>
        /// <param name="cartonNumber"></param>
        /// <returns></returns>
        public string GetTop1SNByCarton(string cartonNumber)
        {
            try
            {
                string ret = string.Empty;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.CartonSN = cartonNumber;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), "TOP 1", new List<string>() { _Schema.Product.fn_ProductID }, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_CartonSN].Value = cartonNumber;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// 根据前缀获取最大ProductId
        /// </summary>
        /// <param name="preSeqStr">前缀</param>
        /// <returns>最大ProductId</returns>
        public string GetMaxProductId(string preSeqStr)
        {
            try
            {
                string ret = string.Empty;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product likecond = new _Schema.Product();
                        likecond.ProductID = preSeqStr + "%";

                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), "MAX", new List<string>() { _Schema.Product.fn_ProductID }, null, likecond, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_ProductID].Value = preSeqStr + "%";
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Str(sqlR, sqlCtx.Indexes["MAX"]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// 更新最大ProductId (Product)
        /// </summary>
        /// <param name="smtMO">MO</param>
        /// <param name="ProductId">最大ProductId</param>
        public void SetMaxProductId(string smtMO, IProduct Product)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                PersistInsertProduct(Product);
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        /// <summary>
        /// 获取与指定mb绑定的Product
        /// </summary>
        /// <param name="mbSn"></param>
        /// <returns></returns>
        public IProduct GetProductByMBSn(string mbSn)
        {
            try
            {
                IProduct ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.PCBID = mbSn;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_PCBID].Value = mbSn;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = new IMES.FisObject.FA.Product.Product(GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]));
                        //ret.BIOS = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BIOS]);
                        ret.CartonSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonSN]);
                        ret.CartonWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonWeight]);
                        //ret.COAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_COAID]);
                        ret.CUSTSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                        //ret.CUSTVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.DeliveryNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_DeliveryNo]);
                        ret.ECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ECR]);
                        //ret.ICCID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ICCID]);
                        //ret.IMEI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMEI]);
                        //ret.IMGVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMGVER]);
                        ret.MAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MAC]);
                        ret.MBECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MBECR]);
                        //ret.MEID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MEID]);
                        ret.MO = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MO]);
                        ret.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Model]);
                        ret.PalletNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PalletNo]);
                        ret.PCBID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBID]);
                        ret.PCBModel = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBModel]);
                        ret.PizzaID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PizzaID]);
                        ret.UnitWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UnitWeight]);
                        ret.UUID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UUID]);
                        //ret.WMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_WMAC]);
                        //ret.HDVD = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_HDVD]);
                        //ret.BLMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BLMAC]);
                        //ret.TVTuner = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_TVTuner]);
                        ret.CVSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.State = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_state]);
                        ret.PRSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_prsn]);
                        ret.OOAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ooaid]);
                        ret.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Udt]);
                        ret.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Cdt]);
                        ((IMES.FisObject.FA.Product.Product)ret).Tracker.Clear();
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateProductListStatus(IMES.FisObject.FA.Product.ProductStatus status, IList<string> ProductIDList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                if (string.IsNullOrEmpty(status.Line))
                    UpdateProductListStatusWithoutLine_Inner(status, ProductIDList);
                else
                    UpdateProductListStatus_Inner(status, ProductIDList);
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void UpdateProductListStatus_Inner(IMES.FisObject.FA.Product.ProductStatus status, IList<string> ProductIDList)
        {
            try
            {
                //if (ProductIDList == null || ProductIDList.Count < 1)
                //    return;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductStatus insetCond = new _Schema.ProductStatus();
                        insetCond.ProductID = "INSET";
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductStatus), null, new List<string>() { _Schema.ProductStatus.fn_ProductID, _Schema.ProductStatus.fn_ReworkCode }, null, null, null, null, null, null, null, null, null, insetCond);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                //_Schema.ProductStatus.fn_Cdt;
                //_Schema.ProductStatus.fn_ReworkCode;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Editor)].Value = status.Editor;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Line)].Value = status.Line;
                //_Schema.ProductStatus.fn_ProductID;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Station)].Value = status.StationId;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Status)].Value = status.Status;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Udt)].Value = cmDt;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_TestFailCount)].Value = status.TestFailCount;

                string Sentence = sqlCtx.Sentence.Replace(_Schema.Func.DecInSet(_Schema.ProductStatus.fn_ProductID), _Schema.Func.ConvertInSet(ProductIDList));

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void UpdateProductListStatusWithoutLine_Inner(IMES.FisObject.FA.Product.ProductStatus status, IList<string> ProductIDList)
        {
            try
            {
                //if (ProductIDList == null || ProductIDList.Count < 1)
                //    return;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductStatus insetCond = new _Schema.ProductStatus();
                        insetCond.ProductID = "INSET";
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductStatus), null, new List<string>() { _Schema.ProductStatus.fn_ProductID, _Schema.ProductStatus.fn_Line, _Schema.ProductStatus.fn_ReworkCode }, null, null, null, null, null, null, null, null, null, insetCond);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                //_Schema.ProductStatus.fn_Cdt;
                //_Schema.ProductStatus.fn_ReworkCode;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Editor)].Value = status.Editor;
                //_Schema.ProductStatus.fn_ProductID;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Station)].Value = status.StationId;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Status)].Value = status.Status;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Udt)].Value = cmDt;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_TestFailCount)].Value = status.TestFailCount;

                string Sentence = sqlCtx.Sentence.Replace(_Schema.Func.DecInSet(_Schema.ProductStatus.fn_ProductID), _Schema.Func.ConvertInSet(ProductIDList));

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BindDN(string dn, IList<string> productIDList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product insetCond = new _Schema.Product();
                        insetCond.ProductID = "INSET";
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), new List<string>() { _Schema.Product.fn_DeliveryNo }, null, null, null, null, null, null, null, null, null, null, insetCond);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.Product.fn_DeliveryNo)].Value = dn;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.Product.fn_Udt)].Value = cmDt;
                string Sentence = sqlCtx.Sentence.Replace(_Schema.Func.DecInSet(_Schema.Product.fn_ProductID), _Schema.Func.ConvertInSet(productIDList));
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private static object _syncLockForBindDn = new object();

        public bool BindDN(string dn, IList<string> productIDList, int dnQty)
        {
            lock (_syncLockForBindDn)
            {
                try
                {
                    MethodBase mthObj = MethodBase.GetCurrentMethod();
                    int tk = mthObj.MetadataToken;
                    SQLContextNew sqlCtx = null;
                    lock (mthObj)
                    {
                        if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                        {
                            _Metas.Product cond = new _Metas.Product();
                            cond.productID = "[INSET]";

                            _Metas.Product cond2 = new _Metas.Product();
                            cond2.deliveryNo = dn;

                            _Metas.Product setv = new _Metas.Product();
                            setv.deliveryNo = dn;
                            setv.udt = DateTime.Now;

                            sqlCtx = FuncNew.GetConditionedUpdate<_Metas.Product>(tk, 
                                new SetValueCollection<_Metas.Product>(new CommonSetValue<_Metas.Product>(setv)), 
                                new ConditionCollection<_Metas.Product>(new InSetCondition<_Metas.Product>(cond),
                                                                        new AnyCondition<_Metas.Product>(cond2, string.Format("((SELECT COUNT(1) FROM {0} WHERE {1}={2})<=@{3})", ToolsNew.GetTableName(typeof(_Metas.Product)), "{0}", "{1}", _Metas.Delivery.fn_qty))));

                            sqlCtx.AddParam(_Metas.Delivery.fn_qty, new SqlParameter("@" + _Metas.Delivery.fn_qty, ToolsNew.GetDBFieldType<_Metas.Delivery>(_Metas.Delivery.fn_qty)));
                        }
                    }
                    sqlCtx.Param(g.DecAny(_Metas.Product.fn_deliveryNo)).Value = dn;
                    sqlCtx.Param(_Metas.Delivery.fn_qty).Value = dnQty - productIDList.Count;

                    DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                    sqlCtx.Param(g.DecSV(_Metas.Product.fn_udt)).Value = cmDt;
                    sqlCtx.Param(g.DecSV(_Metas.Product.fn_deliveryNo)).Value = dn;

                    string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(mtns::Product.fn_productID), g.ConvertInSet(productIDList));

                    int iAfrws = _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params);

                    if (iAfrws != productIDList.Count)
                    {
                        List<string> err = new List<string>();
                        err.Add(dn);
                        err.Add(string.Empty);
                        throw new FisException("CHK188", err);
                        //return false;
                    }
                    else
                    {
                        return true;
                    }
                }
                catch (Exception)
                {
                    throw;
                }
            }
        }

        public bool CheckResultOfBindDN_OnTrans(InvokeBody isThrow, string dn, int dnQty)
        {
            if (isThrow != null && !isThrow.IsExpected)
            {
                List<string> err = new List<string>();
                err.Add(dn);
                err.Add(string.Empty);
                throw new FisException("CHK188", err);
            }
            lock (_syncLockForBindDn)
            {
                bool ret = false;
                SqlDataReader sqlR = null;
                try
                {
                    MethodBase mthObj = MethodBase.GetCurrentMethod();
                    int tk = mthObj.MetadataToken;
                    SQLContextNew sqlCtx = null;
                    lock (mthObj)
                    {
                        if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                        {
                            _Metas.Product cond = new _Metas.Product();
                            cond.deliveryNo = dn;

                            sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, "COUNT", new string[] { _Metas.Product.fn_productID }, new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond)));
                        }
                    }
                    sqlCtx.Param(_Metas.Product.fn_deliveryNo).Value = dn;

                    sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
                    if (sqlR != null && sqlR.Read())
                    {
                        int count = GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = (count == dnQty);
                    }
                    return ret;
                }
                catch (Exception)
                {
                    throw;
                }
                finally
                {
                    if (sqlR != null)
                    {
                        sqlR.Close();
                    }
                }
            }
        }

        public void BindPallet(string Pallet, IList<string> ProductIDList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product insetCond = new _Schema.Product();
                        insetCond.ProductID = "INSET";
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), new List<string>() { _Schema.Product.fn_PalletNo }, null, null, null, null, null, null, null, null, null, null, insetCond);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.Product.fn_Udt)].Value = cmDt;//A BUG (ITC-1360-1809): Cannot insert the value NULL into column 'Udt'
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.Product.fn_PalletNo)].Value = Pallet;
                string Sentence = sqlCtx.Sentence.Replace(_Schema.Func.DecInSet(_Schema.Product.fn_ProductID), _Schema.Func.ConvertInSet(ProductIDList));
               
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        //public void BindPallet(ProductLog NewLog, IList<string> ProductIDList)
        //{
        //    
        //}

        public void WriteProductListLog(IList<IMES.FisObject.FA.Product.ProductLog> NewLogs)//, IList<string> ProductIDList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                SqlTransactionManager.Begin();

                //调用者不需要知道这些新增ProductLog的ID.
                foreach (IMES.FisObject.FA.Product.ProductLog NewLog in NewLogs)
                {
                    this.PersistInsertProductLog(NewLog.ProductID, NewLog);
                    NewLog.Tracker.Clear();
                }
                //NewLog.GetType().GetField("_id", BindingFlags.NonPublic | BindingFlags.Instance).SetValue(NewLog, 0);
                ////NewLog.Id = 0;
                ////NewLog.Tracker.Clear();

                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        public void BindCarton(string CartonSN, IList<string> ProductIDList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product insetCond = new _Schema.Product();
                        insetCond.ProductID = "INSET";
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), new List<string>() { _Schema.Product.fn_CartonSN }, null, null, null, null, null, null, null, null, null, null, insetCond);
                    }
                }
                //DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.Product.fn_CartonSN)].Value = CartonSN;
                string Sentence = sqlCtx.Sentence.Replace(_Schema.Func.DecInSet(_Schema.Product.fn_ProductID), _Schema.Func.ConvertInSet(ProductIDList));
                logger.Error("------------------ begin BindCarton ------------------------");
                logger.Error("Sentence=" + Sentence);
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                logger.Error("------------------ end BindCarton ------------------------");
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        public IList<IMES.DataModel.ProdIdRangeInfo> GetProdIdRangeList(string MOId)
        {
            try
            {
                IList<IMES.DataModel.ProdIdRangeInfo> ret = new List<IMES.DataModel.ProdIdRangeInfo>();

                IList<string> lst = GetProdIDListByMO(MOId);

                //规则冗余,应该先执行Rule然后取得.
                ISequenceConverter seqCvt = new SequenceConverterNormal("0123456789", 6, "999999", "000000", '0');

                //if (seqCvt == null || seqCvt.NumberRule == null)
                //    throw new Exception("Cannot find the ISequenceConverter for Product ID!");

                if (lst != null && lst.Count > 0)
                {
                    string preStr_last = null;
                    string seq_last = null;
                    foreach (string proId in lst)
                    {
                        bool isContinue = false;

                        string preStr = string.Empty;
                        string seq = CutOutSeq(proId, out preStr, seqCvt.NumberRule.iBits);

                        isContinue = (preStr_last != null && preStr_last == preStr && seq_last != null && seqCvt.NumberRule.IncreaseToNumber(seq_last, 1) == seq);
                        if (isContinue)
                        {
                            IMES.DataModel.ProdIdRangeInfo piri = ret[ret.Count - 1];
                            piri.endId = proId;
                            ret.RemoveAt(ret.Count - 1);
                            ret.Add(piri);
                        }
                        else
                        {
                            IMES.DataModel.ProdIdRangeInfo piri = new IMES.DataModel.ProdIdRangeInfo();
                            piri.endId = piri.startId = proId;
                            ret.Add(piri);
                        }
                        preStr_last = preStr;
                        seq_last = seq;
                    }
                }

                #region . OLD .
                //_Schema.SQLContext sqlCtx = null;
                //lock (MethodBase.GetCurrentMethod())
                //{
                //if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                //{
                //    sqlCtx = new _Schema.SQLContext();
                //    sqlCtx.Sentence =   "SELECT MAX({0}) as productID" +
                //                        "  FROM {1} WHERE {2}=%{2} " + 
                //                        "UNION " +
                //                        "SELECT MIN({0}) as productID " +
                //                        "  FROM {1} WHERE {2}=%{2} " + 
                //                        "ORDER BY productID DESC";

                //    sqlCtx.Sentence = string.Format(sqlCtx.Sentence, _Schema.Product.fn_ProductID,
                //                                                    typeof(_Schema.Product).Name,
                //                                                    _Schema.Product.fn_MO
                //                                                    );

                //    sqlCtx.Params.Add(_Schema.Product.fn_MO, new SqlParameter("@" + _Schema.Product.fn_MO, SqlDbType.VarChar));
                //    _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                //}
                //}
                //sqlCtx.Params[_Schema.Product.fn_MO].Value = MOId;
                //using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                //{
                //    if (sqlR != null)
                //    {
                //        ProdIdRangeInfo pri = null;
                //        while (sqlR.Read())
                //        {
                //            if (null == pri)
                //                pri = new ProdIdRangeInfo();

                //            ret.Add
                //        }
                //    }
                //}
                #endregion

                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.RepairInfo> GetProdRepairLogList(string ProdId)
        {
            try
            {
                IList<IMES.DataModel.RepairInfo> ret = new List<IMES.DataModel.RepairInfo>();

                _Schema.SQLContext sqlCtx = null;
                _Schema.TableAndFields tf1 = null;
                _Schema.TableAndFields tf2 = null;
                _Schema.TableAndFields[] tblAndFldsesArray = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
                    {
                        tf1 = new _Schema.TableAndFields();
                        tf1.Table = typeof(_Schema.ProductRepair);
                        _Schema.ProductRepair equalCond = new _Schema.ProductRepair();
                        equalCond.ProductID = ProdId;
                        equalCond.Status = 0;
                        tf1.equalcond = equalCond;

                        tf2 = new _Schema.TableAndFields();
                        tf2.Table = typeof(_Schema.ProductRepair_DefectInfo);

                        _Schema.TableConnectionCollection tblCnnts = new _Schema.TableConnectionCollection(new _Schema.TableConnectionItem[] { new _Schema.TableConnectionItem(tf1, _Schema.ProductRepair.fn_ID, tf2, _Schema.ProductRepair_DefectInfo.fn_ProductRepairID) });

                        tblAndFldsesArray = new _Schema.TableAndFields[] { tf1, tf2 };
                        sqlCtx = _Schema.Func.GetConditionedJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken, null, ref tblAndFldsesArray, tblCnnts);

                        sqlCtx.Params[_Schema.Func.DecAlias(tf1.alias, _Schema.ProductRepair.fn_Status)].Value = equalCond.Status;
                    }
                }
                tf1 = tblAndFldsesArray[0];
                tf2 = tblAndFldsesArray[1];

                sqlCtx.Params[_Schema.Func.DecAlias(tf1.alias, _Schema.ProductRepair.fn_ProductID)].Value = ProdId;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.DataModel.RepairInfo repi = new IMES.DataModel.RepairInfo();
                        repi._4M = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn__4M)]);
                        repi.action = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Action)]);
                        repi.cause = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Cause)]);
                        repi.cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Cdt)]);
                        repi.component = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Component)]);
                        repi.cover = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Cover)]);
                        repi.defectCodeID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_DefectCodeID)]);
                        repi.distribution = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Distribution)]);
                        repi.editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Editor)]);
                        repi.id = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_ID)]).ToString();
                        repi.Identity = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_ID)]);
                        repi.isManual = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_IsManual)]).ToString();
                        repi.majorPart = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_MajorPart)]);
                        repi.manufacture = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Manufacture)]);
                        repi.mark = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Mark)]);
                        repi.newPart = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_NewPart)]);
                        repi.newPartSno = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_NewPartSno)]);
                        repi.obligation = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Obligation)]);
                        repi.oldPart = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_OldPart)]);
                        repi.oldPartSno = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_OldPartSno)]);
                        repi.partType = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_PartType)]);
                        repi.pdLine = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.ProductRepair.fn_Line)]);
                        repi.piaStation = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_PIAStation)]);
                        repi.remark = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Remark)]);
                        repi.repairID = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_ProductRepairID)]).ToString();
                        repi.responsibility = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Responsibility)]);
                        repi.returnSign = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_ReturnSign)]);
                        repi.site = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Site)]);
                        repi.subDefect = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_SubDefect)]);
                        repi.testStation = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.ProductRepair.fn_Station)]);
                        repi.trackingStatus = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_TrackingStatus)]);
                        repi.type = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Type)]);
                        repi.udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Udt)]);
                        repi.uncover = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Uncover)]);
                        repi.vendorCT = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_VendorCT)]);
                        repi.versionA = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_VersionA)]);
                        repi.versionB = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_VersionB)]);
                        repi.mtaID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_MTAID)]);
                        repi.location = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_Location)]);
                        repi.returnStation = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductRepair_DefectInfo.fn_returnStn)]);

                        repi.defectCodeDesc = DfctRepository.TransToDesc(repi.defectCodeID);
                        repi.causeDesc = DfciRepository.TransToDesc(IMES.FisObject.Common.Defect.DefectInfo.DefectInfoType.FaCause, repi.cause);

                        ret.Add(repi);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IMES.DataModel.ProductInfo GetProductInfo(string productId)
        {
            try
            {
                IMES.DataModel.ProductInfo ret = new IMES.DataModel.ProductInfo();
                IProduct prd = this.Find(productId);
                if (prd != null)
                {
                    ret = new IMES.DataModel.ProductInfo();
                    ret.customSN = prd.CUSTSN;
                    if (prd.ModelObj != null)
                    {
                        ret.familyId = prd.ModelObj.FamilyName;
                    }
                    ret.id = prd.ProId;//prd.PCBID;// 2010-02-02 Liu Dong(eB1-4)         Modify ITC-1122-0049
                    ret.modelId = prd.Model;
                    ret.MOId = prd.MO;
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IMES.DataModel.ProductInfo GetProductInfoByCustomSn(string customerSn)
        {
            //一對一?
            try
            {
                IMES.DataModel.ProductInfo ret = new IMES.DataModel.ProductInfo();
                IProduct prd = this.FindByCustomSn(customerSn);
                if (prd != null)
                {
                    ret = new IMES.DataModel.ProductInfo();
                    ret.customSN = prd.CUSTSN;
                    ret.familyId = prd.ModelObj.FamilyName;
                    ret.id = prd.ProId;//prd.PCBID;// 2010-02-02 Liu Dong(eB1-4)         Modify ITC-1122-0049
                    ret.modelId = prd.Model;
                    ret.MOId = prd.MO;
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IProduct GetProductByCustomSn(string customerSn)
        {
            //一對一?
            try
            {
                IProduct prd = this.FindByCustomSn(customerSn);
                return prd;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IMES.DataModel.ProductStatusInfo GetProductStatusInfo(string productId)
        {
            try
            {
                IMES.DataModel.ProductStatusInfo ret = new IMES.DataModel.ProductStatusInfo();
                IProduct prd = this.Find(productId);
                if (prd != null)
                {
                    ret = new IMES.DataModel.ProductStatusInfo();
                    ret.productId = productId;
                    if (prd.Status != null)
                    {
                        ret.pdLine = prd.Status.Line;
                        ret.station = prd.Status.StationId;
                        ret.status = Convert.ToInt32(prd.Status.Status);
                    }
                 }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        //product表中能否找到pcb的记录
        public bool IfBindPCB(string pcbid)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product equalCond = new _Schema.Product();
                        equalCond.PCBID = pcbid;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), equalCond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_PCBID].Value = pcbid;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        return true;
                    }
                }
                return false;
            }
            catch (Exception)
            {
                throw;
            }
        }

        ////暂不需要实现
        ////在PrintLog中查找
        ////Start ProdId和End ProdId在BegNo和EndNo中范围内,且MO满足1的条件
        ////1:MO.Prt_Qty>0 and MO.Status='H' and MO.SAPStatus=''
        //public bool CheckTravelCardReprint(string startId, string endId)
        //{
        //    try
        //    {
        //        bool ret = false;

        //        _Schema.SQLContext sqlCtx = null;
        //        _Schema.TableAndFields tf1 = null;
        //        _Schema.TableAndFields tf2 = null;
        //        _Schema.TableAndFields[] tblAndFldsesArray = null;
        //lock (MethodBase.GetCurrentMethod())
        //{
        //        if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
        //        {
        //            tf1 = new _Schema.TableAndFields();
        //            tf1.Table = typeof(_Schema.PrintLog);
        //            _Schema.PrintLog geCond = new _Schema.PrintLog();
        //            geCond.EndNo = endId;
        //            tf1.greaterOrEqualcond = geCond;
        //            _Schema.PrintLog seCond = new _Schema.PrintLog();
        //            seCond.BegNo = startId;
        //            tf1.smallerOrEqualcond = seCond;

        //            tf2 = new _Schema.TableAndFields();
        //            tf2.Table = typeof(_Schema.MO);
        //            _Schema.MO eqCond = new _Schema.MO();
        //            eqCond.Status = "H";
        //            eqCond.SAPStatus = "";
        //            tf2.equalcond = eqCond;
        //            _Schema.MO gCond = new _Schema.MO();
        //            gCond.Print_Qty = 0;
        //            tf2.greatercond = gCond;


        //            List<_Schema.TableConnectionItem> tblCnntIs = new List<_Schema.TableConnectionItem>();
        //            TableConnectionItem tc1 = new TableConnectionItem(tf1, _Schema.PrintLog., tf2, PartInfo.fn_PartNo);
        //            tblCnntIs.Add(tc2);

        //            TableConnectionCollection tblCnnts = new TableConnectionCollection(tblCnntIs.ToArray());

        //            tblAndFldsesArray = new TableAndFields[] { tf1, tf2, tf3 };
        //            _Schema.SQLContext sqlCtx = _Schema.Func.GetConditionedJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken,"COUNT",,);
        //        }
        //}
        //    }
        //    catch (Exception)
        //    {
        //        throw;
        //    }
        //}

        //在WipBuffer表中是否存在Code = @DM+’-’+@family 的纪录
        //@family =Model.FamilyID，若有空格，只取空格前字串
        //@DM=ModelInfo.Value where ModelInfo.Model=(model) and Name=DM2(二楼)/DM(三楼)
        public bool CheckKitting(string family, string model, string floor)
        {
            try
            {
                string code = string.Empty; //Code = @DM+’-’+@family
                IMES.FisObject.Common.Model.Model mdl = MdlRepository.Find(model);
                if (mdl != null)
                {
                    string val = mdl.GetAttribute(floor);
                    code = val + "-" + family;
                }
                if (code == string.Empty)
                    return false;

                int count = 0;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.WipBuffer cond = new _Schema.WipBuffer();
                        cond.Code = code;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.WipBuffer), "COUNT", new List<string>() { _Schema.WipBuffer.fn_ID }, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = code;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        count = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                    }
                }
                return count > 0;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// 检查输入的cpuVendorSn是否已经和product绑定
        /// 用于CombineproductCPU之前检查CPU是否已与其他product绑定;
        /// 检查product表的CVSN栏位如果等于输入的cpuVendorSn存在返回和它绑定的productSNO
        /// 不存在返回""
        /// select top 1 ProductID from Product where CVSN=@CVSN
        /// </summary>
        /// <param name="cpuVendorSn"></param>
        /// <returns></returns>
        public string IsUsedCvsn(string cpuVendorSn)
        {
            try
            {
                string ret = string.Empty;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.CVSN = cpuVendorSn;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_CVSN].Value = cpuVendorSn;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        //public IList<string> GetProductIdByCurrentStation(string station)
        //{
        //    try
        //    {
        //        IList<string> ret = new List<string>();
        //        _Schema.SQLContext sqlCtx = null;
        //lock (MethodBase.GetCurrentMethod())
        //{
        //        if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
        //        {
        //            _Schema.ProductStatus eqCond = new _Schema.ProductStatus();
        //            eqCond.Station = station;
        //            sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductStatus), null, new List<string>() { _Schema.ProductStatus.fn_ProductID }, eqCond, null, null, null, null, null, null, null);
        //        }
        //}
        //        sqlCtx.Params[_Schema.Product.fn_ProductID].Value = station;
        //        using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
        //        {
        //            while (sqlR != null && sqlR.Read())
        //            {
        //                string item = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductStatus.fn_ProductID]);
        //                ret.Add(item);
        //            }
        //        }
        //        return ret;
        //    }
        //    catch(Exception)
        //    {
        //        throw;
        //    }
        //}

        public IList<IProductPart> GetProductPartsByPartNoAndValue(string partNo, string val)
        {
            try
            {
                IList<IProductPart> ret = new List<IProductPart>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product_Part cond = new _Schema.Product_Part();
                        cond.partNo = partNo;
                        cond.partSn = val;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product_Part), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product_Part.fn_partNo].Value = partNo;
                sqlCtx.Params[_Schema.Product_Part.fn_partSn].Value = val;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IProductPart item = new ProductPart(GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_id]),
                                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_partNo]),
                                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_productID]),
                                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_station]),
                                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_partType]),
                                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_custmerPn]),
                                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_iecpn]),
                                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_partSn]),
                                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_editor]),
                                                            GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_udt]),
                                                            GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_cdt])
                                                            );
                        item.BomNodeType = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_bomNodeType]);
                        item.CheckItemType = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_checkItemType]);
                        ((ProductPart)item).Tracker.Clear();
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProductPart> GetProductPartsByBomNodeTypeAndPartSn(string bomNodeType, string partSn)
        {
            try
            {
                IList<IProductPart> ret = new List<IProductPart>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product_Part cond = new _Schema.Product_Part();
                        cond.bomNodeType = bomNodeType;
                        cond.partSn = partSn;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product_Part), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product_Part.fn_bomNodeType].Value = bomNodeType;
                sqlCtx.Params[_Schema.Product_Part.fn_partSn].Value = partSn;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IProductPart item = new ProductPart(GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_id]),
                                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_partNo]),
                                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_productID]),
                                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_station]),
                                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_partType]),
                                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_custmerPn]),
                                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_iecpn]),
                                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_partSn]),
                                                            GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_editor]),
                                                            GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_udt]),
                                                            GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_cdt])
                                                            );
                        item.BomNodeType = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_bomNodeType]);
                        item.CheckItemType = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_checkItemType]);
                        ((ProductPart)item).Tracker.Clear();
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BindKitting(string mo, string proid, string boxid, string pdline)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                SqlParameter[] paramsArray = new SqlParameter[4];

                paramsArray[0] = new SqlParameter("@mo", SqlDbType.VarChar);
                paramsArray[0].Value = mo;
                paramsArray[1] = new SqlParameter("@proid", SqlDbType.VarChar);
                paramsArray[1].Value = proid;
                paramsArray[2] = new SqlParameter("@boxid", SqlDbType.VarChar);
                paramsArray[2].Value = boxid;
                paramsArray[3] = new SqlParameter("@pdline", SqlDbType.VarChar);
                paramsArray[3].Value = pdline;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.StoredProcedure, "kittingBind", paramsArray);
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        public IList<IMES.DataModel.ModelPassQty> GetModelPassQty(string line, string station, DateTime startTime, DateTime endTime)
        {
            IList<IMES.DataModel.ModelPassQty> resultList = new List<IMES.DataModel.ModelPassQty>();
            try
            {

                SqlParameter[] paramsArray = new SqlParameter[4];

                paramsArray[0] = new SqlParameter("@line", SqlDbType.VarChar);
                paramsArray[0].Value = line;
                paramsArray[1] = new SqlParameter("@station", SqlDbType.VarChar);
                paramsArray[1].Value = station;
                paramsArray[2] = new SqlParameter("@startTime", SqlDbType.DateTime);
                paramsArray[2].Value = startTime;
                paramsArray[3] = new SqlParameter("@endTime", SqlDbType.DateTime);
                paramsArray[3].Value = endTime;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.StoredProcedure, "IMES_GetModelPassQty", paramsArray))
                {
                    if (sqlR != null)
                    {
                        while (sqlR.Read())
                        {
                            IMES.DataModel.ModelPassQty tempModelPassQty = new IMES.DataModel.ModelPassQty();
                            tempModelPassQty.model = GetValue_Str(sqlR, 0);
                            tempModelPassQty.qty = GetValue_Int32(sqlR, 1);
                            resultList.Add(tempModelPassQty);
                        }
                    }
                }

            }
            catch (Exception)
            {
                throw;
            }
            return resultList;
        }

        public List<string> GetProductIDListByCarton(string cartonSN)
        {
            try
            {
                List<string> ret = new List<string>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product equalCond = new _Schema.Product();
                        equalCond.CartonSN = cartonSN;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), equalCond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_CartonSN].Value = cartonSN;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        string item = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public List<string> GetCustSnListByCarton(string cartonSN)
        {
            try
            {
                List<string> ret = new List<string>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product equalCond = new _Schema.Product();
                        equalCond.CartonSN = cartonSN;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), equalCond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_CartonSN].Value = cartonSN;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        string item = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }
     
        public void UpdateCartonWeightByCarton(string cartonSN, decimal cartonWeight)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.CartonSN = cartonSN;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), new List<string>() { _Schema.Product.fn_CartonWeight }, null, null, null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_CartonSN].Value = cartonSN;
                //DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.Product.fn_CartonWeight)].Value = cartonWeight;
                //sqlCtx.Params[_Schema.Func.DecSV(_Schema.Product.fn_Udt)].Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateProductStatusByCarton(string cartonSN, IMES.FisObject.FA.Product.ProductStatus newStatus)
        {
            try
            {
                if (string.IsNullOrEmpty(newStatus.Line))
                    UpdateProductStatusByCartonWithoutLine_Inner(cartonSN, newStatus);
                else
                    UpdateProductStatusByCarton_Inner(cartonSN, newStatus);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void UpdateProductStatusByCarton_Inner(string cartonSN, IMES.FisObject.FA.Product.ProductStatus newStatus)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductStatus insetCond = new _Schema.ProductStatus();
                        insetCond.ProductID = "INSET";
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductStatus), null, new List<string>() { _Schema.ProductStatus.fn_ProductID, _Schema.ProductStatus.fn_ReworkCode }, null, null, null, null, null, null, null, null, null, insetCond);

                        _Schema.SQLContext sqlCtx_sub = ComposeSubSQLForUpdateProductStatusByCarton(cartonSN);

                        foreach (KeyValuePair<string, SqlParameter> value in sqlCtx_sub.Params)
                        {
                            sqlCtx.Params.Add("s_" + value.Key, new SqlParameter("@s_" + value.Value.ParameterName.Substring(1), value.Value.SqlDbType));
                        }
                        sqlCtx.Sentence = sqlCtx.Sentence.Replace(_Schema.Func.DecInSet(_Schema.ProductStatus.fn_ProductID), sqlCtx_sub.Sentence.Replace("@" + _Schema.Product.fn_CartonSN, "@s_" + _Schema.Product.fn_CartonSN));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params["s_" + _Schema.Product.fn_CartonSN].Value = cartonSN;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Udt)].Value = cmDt;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Status)].Value = newStatus.Status;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Editor)].Value = newStatus.Editor;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Line)].Value = newStatus.Line;
                //sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_ReworkCode)].Value = newStatus.ReworkCode;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Station)].Value = newStatus.StationId;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_TestFailCount)].Value = newStatus.TestFailCount;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void UpdateProductStatusByCartonWithoutLine_Inner(string cartonSN, IMES.FisObject.FA.Product.ProductStatus newStatus)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductStatus insetCond = new _Schema.ProductStatus();
                        insetCond.ProductID = "INSET";
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductStatus), null, new List<string>() { _Schema.ProductStatus.fn_ProductID, _Schema.ProductStatus.fn_Line, _Schema.ProductStatus.fn_ReworkCode }, null, null, null, null, null, null, null, null, null, insetCond);

                        _Schema.SQLContext sqlCtx_sub = ComposeSubSQLForUpdateProductStatusByCarton(cartonSN);

                        foreach (KeyValuePair<string, SqlParameter> value in sqlCtx_sub.Params)
                        {
                            sqlCtx.Params.Add("s_" + value.Key, new SqlParameter("@s_" + value.Value.ParameterName.Substring(1), value.Value.SqlDbType));
                        }
                        sqlCtx.Sentence = sqlCtx.Sentence.Replace(_Schema.Func.DecInSet(_Schema.ProductStatus.fn_ProductID), sqlCtx_sub.Sentence.Replace("@" + _Schema.Product.fn_CartonSN, "@s_" + _Schema.Product.fn_CartonSN));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params["s_" + _Schema.Product.fn_CartonSN].Value = cartonSN;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Udt)].Value = cmDt;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Status)].Value = newStatus.Status;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Editor)].Value = newStatus.Editor;
                //sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_ReworkCode)].Value = newStatus.ReworkCode;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_Station)].Value = newStatus.StationId;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_TestFailCount)].Value = newStatus.TestFailCount;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        private _Schema.SQLContext ComposeSubSQLForUpdateProductStatusByCarton(string cartonSN)
        {
            _Schema.SQLContext sqlCtx = null;
            lock (MethodBase.GetCurrentMethod())
            {
                if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                {
                    _Schema.Product cond = new _Schema.Product();
                    cond.CartonSN = cartonSN;
                    sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), null, new List<string>() { _Schema.Product.fn_ProductID }, cond, null, null, null, null, null, null, null);
                }
            }
            return sqlCtx;
        }

        public void WriteProductLogByCarton(string cartonSN, IMES.FisObject.FA.Product.ProductLog newLog)
        {
            try
            {
                SqlTransactionManager.Begin();

                bool isNeedGetLine = string.IsNullOrEmpty(newLog.Line);

                IList<string[]> prods = GetProductIdsByCarton(cartonSN);
                if (prods != null && prods.Count > 0)
                {
                    IList<string[]> batch = new List<string[]>();
                    int i = 0;
                    foreach (string[] entry in prods)
                    {
                        batch.Add(entry);
                        if ((i + 1) % batchSQLCnt == 0 || i == prods.Count - 1)
                        {
                            WriteProductLogBatch_Inner(batch, newLog, isNeedGetLine);
                            batch.Clear();
                        }
                        i++;
                    }
                }

                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        private IList<string[]> GetProductIdsByCarton(string cartonSN)
        {
            SqlDataReader sqlR = null;
            try
            {
                IList<string[]> ret = new List<string[]>();

                _Schema.SQLContext sqlCtx = null;
                _Schema.TableAndFields tf1 = null;
                _Schema.TableAndFields tf2 = null;
                _Schema.TableAndFields[] tblAndFldsesArray = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
                    {
                        tf1 = new _Schema.TableAndFields();
                        tf1.Table = typeof(_Schema.Product);
                        _Schema.Product cond = new _Schema.Product();
                        cond.CartonSN = cartonSN;
                        tf1.equalcond = cond;
                        tf1.ToGetFieldNames.Add(_Schema.Product.fn_ProductID);
                        tf1.ToGetFieldNames.Add(_Schema.Product.fn_Model);

                        tf2 = new _Schema.TableAndFields();
                        tf2.Table = typeof(_Schema.ProductStatus);
                        tf2.ToGetFieldNames.Add(_Schema.ProductStatus.fn_Line);

                        List<_Schema.TableConnectionItem> tblCnntIs = new List<_Schema.TableConnectionItem>();
                        _Schema.TableConnectionItem tc1 = new _Schema.TableConnectionItem(tf1, _Schema.Product.fn_ProductID, tf2, _Schema.ProductStatus.fn_ProductID);
                        tblCnntIs.Add(tc1);

                        _Schema.TableConnectionCollection tblCnnts = new _Schema.TableConnectionCollection(tblCnntIs.ToArray());

                        tblAndFldsesArray = new _Schema.TableAndFields[] { tf1, tf2 };

                        _Schema.TableBiJoinedLogic tblBiJndLgc = new _Schema.TableBiJoinedLogic();
                        tblBiJndLgc.Add(tf1);
                        tblBiJndLgc.Add(_Schema.Func.LEFTJOIN);
                        tblBiJndLgc.Add(tf2);
                        tblBiJndLgc.Add(tc1);

                        sqlCtx = _Schema.Func.GetConditionedComprehensiveJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken, null, ref tblAndFldsesArray, tblCnnts, tblBiJndLgc);

                        sqlCtx.Sentence = sqlCtx.Sentence.Replace(tf1.alias + " ", string.Format("{0} WITH (UPDLOCK)", tf1.alias));
                        sqlCtx.Sentence = sqlCtx.Sentence.Replace(tf2.alias + " ", string.Format("{0} WITH (UPDLOCK)", tf2.alias));
                    }
                }
                tf1 = tblAndFldsesArray[0];
                tf2 = tblAndFldsesArray[1];

                sqlCtx.Params[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_CartonSN)].Value = cartonSN;

                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                while (sqlR != null && sqlR.Read())
                {
                    string[] item = new string[3];
                    item[0] = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_ProductID)]);
                    item[1] = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_Model)]);
                    item[2] = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductStatus.fn_Line)]);
                    ret.Add(item);
                }

                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                    sqlR.Close();
            }
        }

        private void WriteProductLogBatch_Inner(IList<string[]> productIDs, IMES.FisObject.FA.Product.ProductLog prodlog, bool isNeedGetLine)
        {
            try
            {
                if (productIDs != null && productIDs.Count > 0)
                {
                    _Schema.SQLContextCollection sqlCtxSet = new _Schema.SQLContextCollection();

                    int i = 0;
                    foreach (string[] productID in productIDs)
                    {
                        prodlog.Model = productID[1];
                        _Schema.SQLContext sqlCtx = null;

                        if (isNeedGetLine)
                            prodlog.Line = productID[2];
                        sqlCtx = ComposeForWriteProductLogBatch(productID[0], prodlog);

                        sqlCtxSet.AddOne(i, sqlCtx);
                        i++;
                    }
                    _Schema.SQLContext sqlCtxBatch = sqlCtxSet.MergeToOneNonQuery();
                    _Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtxBatch.Sentence, sqlCtxBatch.Params.Values.ToArray<SqlParameter>());
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private _Schema.SQLContext ComposeForWriteProductLogBatch(string productID, IMES.FisObject.FA.Product.ProductLog prodlog)
        {
            _Schema.SQLContext sqlCtx = null;
            lock (MethodBase.GetCurrentMethod())
            {
                if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                {
                    sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductLog));
                }
            }
            DateTime cmDt = _Schema.SqlHelper.GetDateTime();
            sqlCtx.Params[_Schema.ProductLog.fn_Cdt].Value = cmDt;
            sqlCtx.Params[_Schema.ProductLog.fn_Editor].Value = prodlog.Editor;
            sqlCtx.Params[_Schema.ProductLog.fn_Line].Value = prodlog.Line;
            sqlCtx.Params[_Schema.ProductLog.fn_Model].Value = prodlog.Model;
            sqlCtx.Params[_Schema.ProductLog.fn_ProductID].Value = productID;
            sqlCtx.Params[_Schema.ProductLog.fn_Station].Value = prodlog.Station;
            sqlCtx.Params[_Schema.ProductLog.fn_Status].Value = Convert.ToInt32(prodlog.Status);
            return sqlCtx;
        }

        /// <summary>
        /// 根据PalletNo获取所有属于该Pallet的CartonSN的重量之和
        /// </summary>
        /// <param name="palletNo"></param>
        /// <returns></returns>
        public decimal GetAllCartonWeightByPallet(string palletNo)
        {
            try
            {
                decimal ret = 0;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product equalCond = new _Schema.Product();
                        equalCond.PalletNo = palletNo;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), "SUM", new List<string>() { _Schema.Product.fn_CartonWeight }, equalCond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_PalletNo].Value = palletNo;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Decimal(sqlR, sqlCtx.Indexes["SUM"]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetCombinedQtyByDN(string deliveryNo)
        {
            try
            {
                int ret = 0;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product equalCond = new _Schema.Product();
                        equalCond.DeliveryNo = deliveryNo;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), "COUNT", new List<string>() { _Schema.Product.fn_ProductID }, equalCond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_DeliveryNo].Value = deliveryNo;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetCombinedPalletQtyByDN(string deliveryNo)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        
                        sqlCtx = new SQLContextNew();
                        sqlCtx.Sentence = @"Select count(1) 
                                                            from Product 
                                                            where DeliveryNo=@DN
                                                                and PalletNo !='' ";
                        sqlCtx.AddParam("DN", new SqlParameter("@DN" , SqlDbType.VarChar));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param("DN").Value = deliveryNo;
               
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, 
                                                                                                                                CommandType.Text, 
                                                                                                                                sqlCtx.Sentence, 
                                                                                                                                sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, 0);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetProductIdsByRange(string begNo, string endNo)
        {
            try
            {
                IList<string> ret = new List<string>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product betCond = new _Schema.Product();
                        betCond.ProductID = "BETWEEN begin AND end";
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), null, new List<string>() { _Schema.Product.fn_ProductID }, null, null, betCond, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Func.DecBeg(_Schema.Product.fn_ProductID)].Value = begNo;
                sqlCtx.Params[_Schema.Func.DecEnd(_Schema.Product.fn_ProductID)].Value = endNo;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        string num = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]);
                        ret.Add(num);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.ProductStatus> GetProductFromProductStatus(string mo)
        {
            //select * from ProductStatus a join Product b on a.ProductId= b.ProductId where b.MO=MO
            try
            {
                IList<IMES.DataModel.ProductStatus> ret = new List<IMES.DataModel.ProductStatus>();

                _Schema.SQLContext sqlCtx = null;
                _Schema.TableAndFields tf1 = null;
                _Schema.TableAndFields tf2 = null;
                _Schema.TableAndFields[] tblAndFldsesArray = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
                    {
                        tf1 = new _Schema.TableAndFields();
                        tf1.Table = typeof(_Schema.Product);
                        _Schema.Product equalCond = new _Schema.Product();
                        equalCond.MO = mo;
                        tf1.equalcond = equalCond;
                        tf1.ToGetFieldNames = null;

                        tf2 = new _Schema.TableAndFields();
                        tf2.Table = typeof(_Schema.ProductStatus);
                        tf2.ToGetFieldNames.Add(_Schema.ProductStatus.fn_ProductID);
                        tf2.ToGetFieldNames.Add(_Schema.ProductStatus.fn_Station);
                        tf2.ToGetFieldNames.Add(_Schema.ProductStatus.fn_Status);

                        _Schema.TableConnectionCollection tblCnnts = new _Schema.TableConnectionCollection(new _Schema.TableConnectionItem[] { new _Schema.TableConnectionItem(tf1, _Schema.Product.fn_ProductID, tf2, _Schema.ProductStatus.fn_ProductID) });

                        tblAndFldsesArray = new _Schema.TableAndFields[] { tf1, tf2 };
                        sqlCtx = _Schema.Func.GetConditionedJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken, null, ref tblAndFldsesArray, tblCnnts);
                    }
                }
                tf1 = tblAndFldsesArray[0];
                tf2 = tblAndFldsesArray[1];

                sqlCtx.Params[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_MO)].Value = mo;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.DataModel.ProductStatus item = new IMES.DataModel.ProductStatus();
                        item.ProductId = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductStatus.fn_ProductID)]);
                        item.Station = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductStatus.fn_Station)]);
                        item.Status = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductStatus.fn_Status)]).ToString();
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IProduct FindOneProductWithProductIDOrCustSN(string productIDOrCustSN)
        {
            try
            {
                IProduct ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.ProductID = productIDOrCustSN;
                        cond.CUSTSN = productIDOrCustSN;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelectUsingOrConds(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), null, null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_ProductID].Value = productIDOrCustSN;
                sqlCtx.Params[_Schema.Product.fn_CUSTSN].Value = productIDOrCustSN;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = new IMES.FisObject.FA.Product.Product(GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]));
                        //ret.BIOS = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BIOS]);
                        ret.CartonSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonSN]);
                        ret.CartonWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonWeight]);
                        //ret.COAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_COAID]);
                        ret.CUSTSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                        //ret.CUSTVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.DeliveryNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_DeliveryNo]);
                        ret.ECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ECR]);
                        //ret.ICCID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ICCID]);
                        //ret.IMEI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMEI]);
                        //ret.IMGVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMGVER]);
                        ret.MAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MAC]);
                        ret.MBECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MBECR]);
                        //ret.MEID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MEID]);
                        ret.MO = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MO]);
                        ret.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Model]);
                        ret.PalletNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PalletNo]);
                        ret.PCBID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBID]);
                        ret.PCBModel = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBModel]);
                        ret.PizzaID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PizzaID]);
                        ret.UnitWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UnitWeight]);
                        ret.UUID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UUID]);
                        //ret.WMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_WMAC]);
                        //ret.HDVD = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_HDVD]);
                        //ret.BLMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BLMAC]);
                        //ret.TVTuner = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_TVTuner]);
                        ret.CVSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.State = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_state]);
                        ret.PRSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_prsn]);
                        ret.OOAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ooaid]);
                        ret.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Udt]);
                        ret.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Cdt]);
                        ((IMES.FisObject.FA.Product.Product)ret).Tracker.Clear();
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IProduct FindOneProductWithProductIDOrCustSNOrCarton(string productIDOrCustSNOrCarton)
        {
            try
            {
                IProduct ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.ProductID = productIDOrCustSNOrCarton;
                        cond.CUSTSN = productIDOrCustSNOrCarton;
                        cond.CartonSN = productIDOrCustSNOrCarton;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelectUsingOrConds(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), null, null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_ProductID].Value = productIDOrCustSNOrCarton;
                sqlCtx.Params[_Schema.Product.fn_CUSTSN].Value = productIDOrCustSNOrCarton;
                sqlCtx.Params[_Schema.Product.fn_CartonSN].Value = productIDOrCustSNOrCarton;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = new IMES.FisObject.FA.Product.Product(GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]));
                        //ret.BIOS = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BIOS]);
                        ret.CartonSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonSN]);
                        ret.CartonWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonWeight]);
                        //ret.COAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_COAID]);
                        ret.CUSTSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                        //ret.CUSTVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.DeliveryNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_DeliveryNo]);
                        ret.ECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ECR]);
                        //ret.ICCID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ICCID]);
                        //ret.IMEI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMEI]);
                        //ret.IMGVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMGVER]);
                        ret.MAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MAC]);
                        ret.MBECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MBECR]);
                        //ret.MEID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MEID]);
                        ret.MO = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MO]);
                        ret.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Model]);
                        ret.PalletNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PalletNo]);
                        ret.PCBID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBID]);
                        ret.PCBModel = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBModel]);
                        ret.PizzaID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PizzaID]);
                        ret.UnitWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UnitWeight]);
                        ret.UUID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UUID]);
                        //ret.WMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_WMAC]);
                        //ret.HDVD = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_HDVD]);
                        //ret.BLMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BLMAC]);
                        //ret.TVTuner = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_TVTuner]);
                        ret.CVSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.State = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_state]);
                        ret.PRSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_prsn]);
                        ret.OOAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ooaid]);
                        ret.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Udt]);
                        ret.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Cdt]);
                        ((IMES.FisObject.FA.Product.Product)ret).Tracker.Clear();
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IProduct FindOneProductWithProductIDOrCustSNOrPallet(string productIDOrCustSNOrPallet)
        {
            try
            {
                IProduct ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.ProductID = productIDOrCustSNOrPallet;
                        cond.CUSTSN = productIDOrCustSNOrPallet;
                        cond.PalletNo = productIDOrCustSNOrPallet;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelectUsingOrConds(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), null, null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_ProductID].Value = productIDOrCustSNOrPallet;
                sqlCtx.Params[_Schema.Product.fn_CUSTSN].Value = productIDOrCustSNOrPallet;
                sqlCtx.Params[_Schema.Product.fn_PalletNo].Value = productIDOrCustSNOrPallet;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = new IMES.FisObject.FA.Product.Product(GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]));
                        //ret.BIOS = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BIOS]);
                        ret.CartonSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonSN]);
                        ret.CartonWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonWeight]);
                        //ret.COAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_COAID]);
                        ret.CUSTSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                        //ret.CUSTVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.DeliveryNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_DeliveryNo]);
                        ret.ECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ECR]);
                        //ret.ICCID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ICCID]);
                        //ret.IMEI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMEI]);
                        //ret.IMGVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMGVER]);
                        ret.MAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MAC]);
                        ret.MBECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MBECR]);
                        //ret.MEID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MEID]);
                        ret.MO = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MO]);
                        ret.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Model]);
                        ret.PalletNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PalletNo]);
                        ret.PCBID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBID]);
                        ret.PCBModel = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBModel]);
                        ret.PizzaID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PizzaID]);
                        ret.UnitWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UnitWeight]);
                        ret.UUID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UUID]);
                        //ret.WMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_WMAC]);
                        //ret.HDVD = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_HDVD]);
                        //ret.BLMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BLMAC]);
                        //ret.TVTuner = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_TVTuner]);
                        ret.CVSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.State = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_state]);
                        ret.PRSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_prsn]);
                        ret.OOAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ooaid]);
                        ret.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Udt]);
                        ret.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Cdt]);
                        ((IMES.FisObject.FA.Product.Product)ret).Tracker.Clear();
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// 根據pcbID獲取與之綁定的Product列表
        /// </summary>
        /// <param name="pcbID"></param>
        /// <returns></returns>
        public IList<IProduct> GetProductListByPCBID(string pcbID)
        {
            try
            {
                IList<IProduct> ret = new List<IProduct>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.PCBID = pcbID;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_PCBID].Value = pcbID;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IProduct item = new IMES.FisObject.FA.Product.Product(GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]));
                        //item.BIOS = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BIOS]);
                        item.CartonSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonSN]);
                        item.CartonWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonWeight]);
                        //item.COAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_COAID]);
                        item.CUSTSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                        //item.CUSTVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        item.DeliveryNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_DeliveryNo]);
                        item.ECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ECR]);
                        //item.ICCID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ICCID]);
                        //item.IMEI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMEI]);
                        //item.IMGVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMGVER]);
                        item.MAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MAC]);
                        item.MBECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MBECR]);
                        //item.MEID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MEID]);
                        item.MO = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MO]);
                        item.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Model]);
                        item.PalletNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PalletNo]);
                        item.PCBID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBID]);
                        item.PCBModel = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBModel]);
                        item.PizzaID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PizzaID]);
                        item.UnitWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UnitWeight]);
                        item.UUID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UUID]);
                        //item.WMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_WMAC]);
                        //item.HDVD = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_HDVD]);
                        //item.BLMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BLMAC]);
                        //item.TVTuner = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_TVTuner]);
                        item.CVSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        item.State = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_state]);
                        item.PRSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_prsn]);
                        item.OOAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ooaid]);
                        item.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Udt]);
                        item.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Cdt]);
                        ((IMES.FisObject.FA.Product.Product)item).Tracker.Clear();
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IProduct GetProductByPizzaID(string pizzaID)
        {
            try
            {
                IProduct ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.PizzaID = pizzaID;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_PizzaID].Value = pizzaID;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = new IMES.FisObject.FA.Product.Product(GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]));
                        //ret.BIOS = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BIOS]);
                        ret.CartonSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonSN]);
                        ret.CartonWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonWeight]);
                        //ret.COAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_COAID]);
                        ret.CUSTSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                        //ret.CUSTVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.DeliveryNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_DeliveryNo]);
                        ret.ECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ECR]);
                        //ret.ICCID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ICCID]);
                        //ret.IMEI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMEI]);
                        //ret.IMGVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMGVER]);
                        ret.MAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MAC]);
                        ret.MBECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MBECR]);
                        //ret.MEID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MEID]);
                        ret.MO = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MO]);
                        ret.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Model]);
                        ret.PalletNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PalletNo]);
                        ret.PCBID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBID]);
                        ret.PCBModel = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBModel]);
                        ret.PizzaID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PizzaID]);
                        ret.UnitWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UnitWeight]);
                        ret.UUID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UUID]);
                        //ret.WMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_WMAC]);
                        //ret.HDVD = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_HDVD]);
                        //ret.BLMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BLMAC]);
                        //ret.TVTuner = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_TVTuner]);
                        ret.CVSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.State = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_state]);
                        ret.PRSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_prsn]);
                        ret.OOAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ooaid]);
                        ret.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Udt]);
                        ret.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Cdt]);
                        ((IMES.FisObject.FA.Product.Product)ret).Tracker.Clear();
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.FisObject.FA.Product.RunInTimeControl> GetRunInTimeControlByTypeAndCode(string type, string code)
        {
            try
            {
                IList<IMES.FisObject.FA.Product.RunInTimeControl> ret = new List<IMES.FisObject.FA.Product.RunInTimeControl>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.RunInTimeControl cond = new _Schema.RunInTimeControl();
                        cond.type = type;
                        cond.code = code;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.RunInTimeControl), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.RunInTimeControl.fn_type].Value = type;
                sqlCtx.Params[_Schema.RunInTimeControl.fn_code].Value = code;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.FisObject.FA.Product.RunInTimeControl item = new IMES.FisObject.FA.Product.RunInTimeControl();
                        item.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_cdt]);
                        item.Code = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_code]);
                        item.Editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_editor]);
                        item.Hour = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_hour]);
                        item.ID = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_id]);
                        item.Remark = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_remark]);
                        item.Type = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_type]);
                        item.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_udt]);
                        item.TestStation = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_testStation]);
                        item.ControlType = GetValue_Boolean(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_controlType]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DateTime GetTheNewestTime(string prodid)
        {
            try
            {
                DateTime ret = DateTime.MinValue;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductLog cond = new _Schema.ProductLog();
                        cond.ProductID = prodid;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductLog), "MAX", new List<string>() { _Schema.ProductLog.fn_Cdt }, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.ProductLog.fn_ProductID].Value = prodid;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_DateTime(sqlR, sqlCtx.Indexes["MAX"]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.ProductModel> GetProductByDnPallet(string dn, string pallet)
        {
            try
            {
                IList<IMES.DataModel.ProductModel> ret = new List<IMES.DataModel.ProductModel>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.DeliveryNo = dn;
                        cond.PalletNo = pallet;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), null, new List<string>() { _Schema.Product.fn_CUSTSN, _Schema.Product.fn_Model, _Schema.Product.fn_ProductID }, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_DeliveryNo].Value = dn;
                sqlCtx.Params[_Schema.Product.fn_PalletNo].Value = pallet;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.DataModel.ProductModel item = new IMES.DataModel.ProductModel();
                        item.CustSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                        item.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Model]);
                        item.ProductID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool ReworkReject(string customer, string station, StationStatus status)
        {
            try
            {
                bool ret = false;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ReworkRejectStation cond = new _Schema.ReworkRejectStation();
                        cond.Customer = customer;
                        cond.Station = station;
                        cond.Status = Convert.ToInt32(status);
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ReworkRejectStation), "COUNT", new List<string>() { _Schema.ReworkRejectStation.fn_ID }, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.ReworkRejectStation.fn_Customer].Value = customer;
                sqlCtx.Params[_Schema.ReworkRejectStation.fn_Station].Value = station;
                sqlCtx.Params[_Schema.ReworkRejectStation.fn_Status].Value = Convert.ToInt32(status);

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                        ret = cnt > 0 ? true : false;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.ProductModel> GetProductListByPalletNo(string palletNo)
        {
            try
            {
                IList<IMES.DataModel.ProductModel> ret = new List<IMES.DataModel.ProductModel>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.PalletNo = palletNo;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), null, new List<string>() { _Schema.Product.fn_CUSTSN, _Schema.Product.fn_Model, _Schema.Product.fn_ProductID }, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_PalletNo].Value = palletNo;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.DataModel.ProductModel item = new IMES.DataModel.ProductModel();
                        item.CustSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                        item.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Model]);
                        item.ProductID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void CopyProductToRework(string productId, string reworkCode)
        {
            try
            {
                SqlTransactionManager.Begin();

                CopyProductToRework_Product(productId, reworkCode);
                CopyProductToRework_ProductStatus(productId, reworkCode);
                CopyProductToRework_ProductInfo(productId, reworkCode);
                CopyProductToRework_ProductPart(productId, reworkCode);

                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        private void CopyProductToRework_Product(string productId, string reworkCode)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();

                        sqlCtx.Sentence = "INSERT INTO {0} ({1}) SELECT @{2},{3} FROM {4} WHERE {5}=@{5} ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.Rework_Product).Name,
                            string.Join(",", new string[] { _Schema.Rework_Product.fn_ReworkCode, _Schema.Rework_Product.fn_BIOS, _Schema.Rework_Product.fn_BLMAC, _Schema.Rework_Product.fn_CartonSN, 
                                _Schema.Rework_Product.fn_CartonWeight, _Schema.Rework_Product.fn_COAID, _Schema.Rework_Product.fn_CUSTSN, _Schema.Rework_Product.fn_CVSN, 
                                _Schema.Rework_Product.fn_DeliveryNo, _Schema.Rework_Product.fn_ECR, _Schema.Rework_Product.fn_HDVD, _Schema.Rework_Product.fn_ICCID,  
                                _Schema.Rework_Product.fn_IMEI, _Schema.Rework_Product.fn_IMGVER, _Schema.Rework_Product.fn_MAC, _Schema.Rework_Product.fn_MBECR, 
                                _Schema.Rework_Product.fn_MEID, _Schema.Rework_Product.fn_MO, _Schema.Rework_Product.fn_Model, _Schema.Rework_Product.fn_PalletNo, 
                                _Schema.Rework_Product.fn_PCBID, _Schema.Rework_Product.fn_PCBModel, _Schema.Rework_Product.fn_PizzaID, _Schema.Rework_Product.fn_ProductID, 
                                _Schema.Rework_Product.fn_TVTuner, _Schema.Rework_Product.fn_UnitWeight, _Schema.Rework_Product.fn_UUID, _Schema.Rework_Product.fn_WMAC }),
                            _Schema.Rework_Product.fn_ReworkCode,
                            string.Join(",", new string[] { "''","''",/*_Schema.Product.fn_BIOS, _Schema.Product.fn_BLMAC,*/ _Schema.Product.fn_CartonSN,
                                 _Schema.Product.fn_CartonWeight,  "''",/*_Schema.Product.fn_COAID,*/  _Schema.Product.fn_CUSTSN,  _Schema.Product.fn_CVSN,
                                 _Schema.Product.fn_DeliveryNo,  _Schema.Product.fn_ECR,  "''","''","''","''",/*_Schema.Product.fn_HDVD,  _Schema.Product.fn_ICCID, 
                                 _Schema.Product.fn_IMEI,  _Schema.Product.fn_IMGVER,*/  _Schema.Product.fn_MAC,  _Schema.Product.fn_MBECR,
                                 "''",/*_Schema.Product.fn_MEID,*/  _Schema.Product.fn_MO,  _Schema.Product.fn_Model,  _Schema.Product.fn_PalletNo,
                                 _Schema.Product.fn_PCBID,  _Schema.Product.fn_PCBModel,  _Schema.Product.fn_PizzaID,  _Schema.Product.fn_ProductID,
                                 "''",/*_Schema.Product.fn_TVTuner,*/  _Schema.Product.fn_UnitWeight,  _Schema.Product.fn_UUID,  "''",/*_Schema.Product.fn_WMAC*/}),
                            typeof(_Schema.Product).Name,
                            _Schema.Product.fn_ProductID);

                        sqlCtx.Params.Add(_Schema.Rework_Product.fn_ReworkCode, new SqlParameter("@" + _Schema.Rework_Product.fn_ReworkCode, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.Product.fn_ProductID, new SqlParameter("@" + _Schema.Product.fn_ProductID, SqlDbType.VarChar));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.Rework_Product.fn_ReworkCode].Value = reworkCode;
                sqlCtx.Params[_Schema.Product.fn_ProductID].Value = productId;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void CopyProductToRework_ProductStatus(string productId, string reworkCode)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();

                        sqlCtx.Sentence = "INSERT INTO {0} ({1}) SELECT @{2},{3} FROM {4} WHERE {5}=@{5} ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.Rework_ProductStatus).Name,
                            string.Join(",", new string[] { _Schema.Rework_ProductStatus.fn_ReworkCode, _Schema.Rework_ProductStatus.fn_Cdt, _Schema.Rework_ProductStatus.fn_Editor,
                                    _Schema.Rework_ProductStatus.fn_Line, _Schema.Rework_ProductStatus.fn_ProductID,
                                    _Schema.Rework_ProductStatus.fn_Station, _Schema.Rework_ProductStatus.fn_Status, _Schema.Rework_ProductStatus.fn_Udt }),
                            _Schema.Rework_ProductStatus.fn_ReworkCode,
                            string.Join(",", new string[] { _Schema.ProductStatus.fn_Cdt, _Schema.ProductStatus.fn_Editor,
                                    _Schema.ProductStatus.fn_Line, _Schema.ProductStatus.fn_ProductID,
                                    _Schema.ProductStatus.fn_Station, _Schema.ProductStatus.fn_Status, _Schema.ProductStatus.fn_Udt}),
                            typeof(_Schema.ProductStatus).Name,
                            _Schema.ProductStatus.fn_ProductID);

                        sqlCtx.Params.Add(_Schema.Rework_ProductStatus.fn_ReworkCode, new SqlParameter("@" + _Schema.Rework_ProductStatus.fn_ReworkCode, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.ProductStatus.fn_ProductID, new SqlParameter("@" + _Schema.ProductStatus.fn_ProductID, SqlDbType.VarChar));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.Rework_ProductStatus.fn_ReworkCode].Value = reworkCode;
                sqlCtx.Params[_Schema.ProductStatus.fn_ProductID].Value = productId;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void CopyProductToRework_ProductInfo(string productId, string reworkCode)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();

                        sqlCtx.Sentence = "INSERT INTO {0} ({1}) SELECT @{2},{3} FROM {4} WHERE {5}=@{5} ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.Rework_ProductInfo).Name,
                            string.Join(",", new string[] { _Schema.Rework_ProductInfo.fn_ReworkCode, _Schema.Rework_ProductInfo.fn_Cdt, _Schema.Rework_ProductInfo.fn_Editor,
                                                _Schema.Rework_ProductInfo.fn_InfoType, _Schema.Rework_ProductInfo.fn_InfoValue, _Schema.Rework_ProductInfo.fn_ProductID,
                                                _Schema.Rework_ProductInfo.fn_Udt}),
                            _Schema.Rework_ProductInfo.fn_ReworkCode,
                            string.Join(",", new string[] { _Schema.ProductInfo.fn_Cdt, _Schema.ProductInfo.fn_Editor,
                                                _Schema.ProductInfo.fn_InfoType, _Schema.ProductInfo.fn_InfoValue, _Schema.ProductInfo.fn_ProductID,
                                                _Schema.ProductInfo.fn_Udt}),
                            typeof(_Schema.ProductInfo).Name,
                            _Schema.ProductInfo.fn_ProductID);

                        sqlCtx.Params.Add(_Schema.Rework_ProductInfo.fn_ReworkCode, new SqlParameter("@" + _Schema.Rework_ProductInfo.fn_ReworkCode, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.ProductInfo.fn_ProductID, new SqlParameter("@" + _Schema.ProductInfo.fn_ProductID, SqlDbType.VarChar));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.Rework_ProductInfo.fn_ReworkCode].Value = reworkCode;
                sqlCtx.Params[_Schema.ProductInfo.fn_ProductID].Value = productId;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void CopyProductToRework_ProductPart(string productId, string reworkCode)
        {
            try
            {/*
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();

                        sqlCtx.Sentence = "INSERT INTO {0} ({1}) SELECT @{2},{3} FROM {4} WHERE {5}=@{5} ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.Rework_Product_Part).Name,
                            string.Join(",", new string[] { _Schema.Rework_Product_Part.fn_ReworkCode, _Schema.Rework_Product_Part.fn_Cdt, _Schema.Rework_Product_Part.fn_Editor,
                                    _Schema.Rework_Product_Part.fn_PartNo, _Schema.Rework_Product_Part.fn_ProductID, _Schema.Rework_Product_Part.fn_Station,
                                    _Schema.Rework_Product_Part.fn_Udt, _Schema.Rework_Product_Part.fn_Value, _Schema.Rework_Product_Part.fn_ValueType}),
                            _Schema.Rework_Product_Part.fn_ReworkCode,
                            string.Join(",", new string[] { _Schema.Product_Part.fn_cdt, _Schema.Product_Part.fn_editor,
                                    _Schema.Product_Part.fn_partNo, _Schema.Product_Part.fn_productID, _Schema.Product_Part.fn_station,
                                    _Schema.Product_Part.fn_udt, _Schema.Product_Part.fn_value, _Schema.Product_Part.fn_valueType}),
                            typeof(_Schema.Product_Part).Name,
                            _Schema.Product_Part.fn_productID);

                        sqlCtx.Params.Add(_Schema.Rework_Product_Part.fn_ReworkCode, new SqlParameter("@" + _Schema.Rework_Product_Part.fn_ReworkCode, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.Product_Part.fn_productID, new SqlParameter("@" + _Schema.Product_Part.fn_productID, SqlDbType.VarChar));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.Rework_Product_Part.fn_ReworkCode].Value = reworkCode;
                sqlCtx.Params[_Schema.Product_Part.fn_productID].Value = productId;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());*/
                throw new NotImplementedException("Rework_Product_Part needs modification?");
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void RemoveProductInfosByType(string proid, IList<string> itemTypes)
        {
            RemoveProductInfosByType_Inner(proid, itemTypes);
            //try
            //{
            //    SqlTransactionManager.Begin();

            //    if (itemTypes != null && itemTypes.Count > 0)
            //    {
            //        IList<string> batch = new List<string>();
            //        int i = 0;
            //        foreach (string str in itemTypes)
            //        {
            //            batch.Add(str);
            //            if ((i + 1) % batchSQLCnt == 0 || i == itemTypes.Count - 1)
            //            {
            //                RemoveProductInfosByType_Inner(proid, batch);
            //                batch.Clear();
            //            }
            //            i++;
            //        }
            //    }

            //    SqlTransactionManager.Commit();
            //}
            //catch (Exception)
            //{
            //    SqlTransactionManager.Rollback();
            //    throw;
            //}
            //finally
            //{
            //    SqlTransactionManager.Dispose();
            //    SqlTransactionManager.End();
            //}
        }

        private void RemoveProductInfosByType_Inner(string proid, IList<string> itemTypes)
        {
            //delete ProductInfo where ProductID=@proid and InfoType in @itemtypes
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductInfo eqCond = new _Schema.ProductInfo();
                        eqCond.ProductID = proid;
                        _Schema.ProductInfo insetCond = new _Schema.ProductInfo();
                        insetCond.InfoType = "INSET";
                        sqlCtx = _Schema.Func.GetConditionedDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductInfo), eqCond, null, insetCond);
                    }
                }
                sqlCtx.Params[_Schema.ProductInfo.fn_ProductID].Value = proid;
                string Sentence = sqlCtx.Sentence.Replace(_Schema.Func.DecInSet(_Schema.ProductInfo.fn_InfoType), _Schema.Func.ConvertInSet(itemTypes));
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void RemoveProductPartsByPnAndType(string proid, string customer, IList<string> partTypes)
        {
            try
            {
                SqlTransactionManager.Begin();

                if (partTypes != null && partTypes.Count > 0)
                {
                    IList<string> batch = new List<string>();
                    int i = 0;
                    foreach (string str in partTypes)
                    {
                        batch.Add(str);
                        if ((i + 1) % batchSQLCnt == 0 || i == partTypes.Count - 1)
                        {
                            RemoveProductPartsByPnAndType_Inner(proid, customer, batch);
                            batch.Clear();
                        }
                        i++;
                    }
                }

                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        private void RemoveProductPartsByPnAndType_Inner(string proid, string customer, IList<string> partTypes)
        {
            //delete IMES_FA..Product_Part where PartNo in
            //( select PartNo from IMES_GetData..Part where 
            //  PartNo in 
            //          (select PartNo from IMES_FA..Product_Part where ProductID=@proid) 
            //  and 
            //  PartType in 
            //          (select PartType from PartCheck where Customer=@customer and PartType in ReleaseType范围)
            //)
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();

                        sqlCtx.Sentence = "DELETE {0} WHERE {1} IN " +
                                            "( SELECT {5} FROM {3}..{4} WHERE " +
                                                "{5} IN " +
                                                    "(SELECT {1} FROM {0} WHERE {2}=@{2}) " +
                                                "AND " +
                                                "{6} IN " +
                                                    "(SELECT PartType FROM {7}..{8} WHERE {9}=@{9} AND {10} IN (INSET[{10}]) )" +
                                            ") ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.Product_Part).Name,
                                                                        _Schema.Product_Part.fn_partNo,
                                                                        _Schema.Product_Part.fn_productID,
                                                                        _Schema.SqlHelper.DB_BOM,
                                                                        typeof(_Schema.Part).Name,
                                                                        _Schema.Part.fn_PartNo,
                                                                        _Schema.Part.fn_PartType,
                                                                        _Schema.SqlHelper.DB_GetData,
                                                                        typeof(_Schema.PartCheck).Name,
                                                                        _Schema.PartCheck.fn_Customer,
                                                                        _Schema.PartCheck.fn_PartType);

                        sqlCtx.Params.Add(_Schema.Product_Part.fn_productID, new SqlParameter("@" + _Schema.Product_Part.fn_productID, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.PartCheck.fn_Customer, new SqlParameter("@" + _Schema.PartCheck.fn_Customer, SqlDbType.VarChar));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.Product_Part.fn_productID].Value = proid;
                sqlCtx.Params[_Schema.PartCheck.fn_Customer].Value = customer;

                string Sentence = sqlCtx.Sentence.Replace(_Schema.Func.DecInSet(_Schema.PartCheck.fn_PartType), _Schema.Func.ConvertInSet(partTypes));
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void ClearFieldsOfProductById(string proid, IList<string> fieldNames)
        {
            //update Product set @itemtypes='' where ProductID=@proid
            try
            {
                if (string.IsNullOrEmpty(proid) || fieldNames == null || fieldNames.Count < 1)
                    return;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();

                        sqlCtx.Sentence = "UPDATE {0} SET INSET[SETVALUES] WHERE {1}=@{1}";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.Product).Name,
                                                                        _Schema.Product.fn_ProductID);

                        sqlCtx.Params.Add(_Schema.Product.fn_ProductID, new SqlParameter("@" + _Schema.Product.fn_ProductID, SqlDbType.VarChar));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                IList<string> setValues = new List<string>();
                foreach (string str in fieldNames)
                {
                    setValues.Add(string.Format("{0}=NULL", str));
                }
                sqlCtx.Params[_Schema.Product.fn_ProductID].Value = proid;
                string Sentence = sqlCtx.Sentence.Replace(_Schema.Func.DecInSet("SETVALUES"), string.Join(",", setValues.ToArray()));

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.KittingCodeInfo> GetKittingCodeList()
        {
            //SELECT DISTINCT RTRIM(Code) as Code
            //    FROM KittingCode 
            //    WHERE [Type] = 'Kitting' 
            //    ORDER BY Code
            try
            {
                IList<IMES.DataModel.KittingCodeInfo> ret = new List<IMES.DataModel.KittingCodeInfo>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.KittingCode cond = new _Schema.KittingCode();
                        cond.Type = "Kitting";
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.KittingCode), "DISTINCT", new List<string>() { _Schema.KittingCode.fn_Code }, cond, null, null, null, null, null, null, null);
                        sqlCtx.Params[_Schema.KittingCode.fn_Type].Value = cond.Type;
                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, _Schema.KittingCode.fn_Code);
                    }
                }
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.DataModel.KittingCodeInfo item = new IMES.DataModel.KittingCodeInfo();
                        item.friendlyName = item.id = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.KittingCode.fn_Code]);
                        ret.Add(item);
                    }
                }
                return (from item in ret select item).Distinct().ToList();
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.LightBomInfo> GetWipBufferInfoListByKittingCode(string code)
        {
            //SELECT RTRIM(b.Code) as Code, RTRIM(b.PartNo) as [Part No],
            //       RTRIM(b.Tp) as [Type], CONVERT(int, b.LightNo) as [Light No],
            //       '' as Scan
            //    FROM KittingCode a, WipBuffer b
            //    WHERE a.[Type] = 'Kitting'
            //       AND a.Code = b.Code
            //       AND b.Code = @Code
            //    ORDER BY [Light No], [Part No], [Type]
            try
            {
                IList<IMES.DataModel.LightBomInfo> ret = new List<IMES.DataModel.LightBomInfo>();

                _Schema.SQLContext sqlCtx = null;
                _Schema.TableAndFields tf1 = null;
                _Schema.TableAndFields tf2 = null;
                _Schema.TableAndFields[] tblAndFldsesArray = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
                    {
                        tf1 = new _Schema.TableAndFields();
                        tf1.Table = typeof(_Schema.KittingCode);
                        _Schema.KittingCode cond = new _Schema.KittingCode();
                        cond.Type = "Kitting";
                        tf1.equalcond = cond;
                        tf1.ToGetFieldNames = null;

                        tf2 = new _Schema.TableAndFields();
                        tf2.Table = typeof(_Schema.WipBuffer);
                        _Schema.WipBuffer cond2 = new _Schema.WipBuffer();
                        cond2.Code = code;
                        tf2.equalcond = cond2;
                        tf2.ToGetFieldNames.Add(_Schema.WipBuffer.fn_Code);
                        tf2.ToGetFieldNames.Add(_Schema.WipBuffer.fn_PartNo);
                        tf2.ToGetFieldNames.Add(_Schema.WipBuffer.fn_Tp);
                        tf2.ToGetFieldNames.Add(_Schema.WipBuffer.fn_LightNo);

                        _Schema.TableConnectionCollection tblCnnts = new _Schema.TableConnectionCollection(new _Schema.TableConnectionItem[] { new _Schema.TableConnectionItem(tf1, _Schema.KittingCode.fn_Code, tf2, _Schema.WipBuffer.fn_Code) });

                        tblAndFldsesArray = new _Schema.TableAndFields[] { tf1, tf2 };
                        sqlCtx = _Schema.Func.GetConditionedJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken, "DISTINCT", ref tblAndFldsesArray, tblCnnts);

                        sqlCtx.Params[_Schema.Func.DecAlias(tf1.alias, _Schema.KittingCode.fn_Type)].Value = cond.Type;

                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, string.Join(",", new string[] { _Schema.Func.DecAliasInner(tf2.alias, _Schema.WipBuffer.fn_LightNo), 
                                                                                                                                _Schema.Func.DecAliasInner(tf2.alias, _Schema.WipBuffer.fn_PartNo), 
                                                                                                                                _Schema.Func.DecAliasInner(tf2.alias, _Schema.WipBuffer.fn_Tp) }));
                    }
                }
                tf1 = tblAndFldsesArray[0];
                tf2 = tblAndFldsesArray[1];

                sqlCtx.Params[_Schema.Func.DecAlias(tf2.alias, _Schema.WipBuffer.fn_Code)].Value = code;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.DataModel.LightBomInfo item = new IMES.DataModel.LightBomInfo();
                        item.code = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.WipBuffer.fn_Code)]);
                        item.lightNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.WipBuffer.fn_LightNo)]);
                        item.partNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.WipBuffer.fn_PartNo)]);
                        item.scan = string.Empty;
                        item.type = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.WipBuffer.fn_Tp)]);
                        ret.Add(item);
                    }
                }
                return (from item in ret select item).Distinct().ToList();
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetCountOfKittingCodeByCode(string code)
        {
            //SELECT count(*) FROM IMES_FA..KittingCode WHERE Code = @Code AND Type = 'Kitting'
            try
            {
                int ret = 0;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.KittingCode cond = new _Schema.KittingCode();
                        cond.Type = "Kitting";
                        cond.Code = code;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.KittingCode), "COUNT", new List<string>() { _Schema.KittingCode.fn_Code }, cond, null, null, null, null, null, null, null);
                        sqlCtx.Params[_Schema.KittingCode.fn_Type].Value = cond.Type;
                    }
                }
                sqlCtx.Params[_Schema.KittingCode.fn_Code].Value = code;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.LightBomInfo> GetWipBufferInfoListByKittingCodeAndModel(string code, string model)
        {
            //SELECT DISTINCT RTRIM(b.Code) as Code, RTRIM(b.PartNo) as [Part No],
            //       RTRIM(b.Tp) as [Type], CONVERT(int, b.LightNo) as [Light No],
            //       '' as Scan
            //    FROM IMES_GetData..MoBOM a, IMES_FA..WipBuffer b
            //    WHERE a.Deviation = 1
            //       AND a.PartNo = b.PartNo
            //       AND b.Code = @Code
            //       AND b.Tp = 'Kitting'
            //       AND MO IN (SELECT MO FROM IMES_GetData..MO WHERE Model = @Model)
            //    ORDER BY [Light No], [Part No], [Type]
            try
            {
                IList<IMES.DataModel.LightBomInfo> ret = new List<IMES.DataModel.LightBomInfo>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();

                        sqlCtx.Sentence = "SELECT DISTINCT b.{1} AS {1}, b.{2} AS {2}," +
                                                    "b.{3} AS {3}, b.{4} AS {4}," +
                                                     "'' " +
                                            "FROM {5}..{6} a, {0} b " +
                                            "WHERE a.{7} = 1 " +
                                               "AND a.{8} = b.{2} " +
                                               "AND b.{1} = @{1} " +
                                               "AND b.{3} = 'Kitting' " +
                                               "AND {9} IN (SELECT {11} FROM {5}..{10} WHERE {12} = @{12}) " +
                                            "ORDER BY {4}, {2}, {3}";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.WipBuffer).Name,
                                                                        _Schema.WipBuffer.fn_Code,
                                                                        _Schema.WipBuffer.fn_PartNo,
                                                                        _Schema.WipBuffer.fn_Tp,
                                                                        _Schema.WipBuffer.fn_LightNo,
                                                                        _Schema.SqlHelper.DB_BOM,
                                                                        typeof(_Schema.MoBOM).Name,
                                                                        _Schema.MoBOM.fn_Deviation,
                                                                        _Schema.MoBOM.fn_PartNo,
                                                                        _Schema.MoBOM.fn_MO,
                                                                        typeof(_Schema.MO).Name,
                                                                        _Schema.MO.fn_Mo,
                                                                        _Schema.MO.fn_Model);

                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_Code, new SqlParameter("@" + _Schema.WipBuffer.fn_Code, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.MO.fn_Model, new SqlParameter("@" + _Schema.MO.fn_Model, SqlDbType.VarChar));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = code;
                sqlCtx.Params[_Schema.MO.fn_Model].Value = model;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.DataModel.LightBomInfo item = new IMES.DataModel.LightBomInfo();
                        item.code = GetValue_Str(sqlR, 0);
                        item.partNo = GetValue_Str(sqlR, 1);
                        item.type = GetValue_Str(sqlR, 2);
                        item.lightNo = GetValue_Str(sqlR, 3);
                        item.scan = GetValue_Str(sqlR, 4);
                        ret.Add(item);
                    }
                }
                return (from item in ret select item).Distinct().ToList();
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.BorrowLog> GetBorrowLogByStatus(string status)
        {
            //SELECT Sno, Model, Borrower, Lender, Returner, Accepter, Status, Bdate, Rdate 
            //    FROM IMES_FA..BorrowLog
            //    WHERE Status = @status
            //    ORDER BY Model, Sno, Rdate DESC
            //    Status为空取所有status的数据
            try
            {
                IList<IMES.DataModel.BorrowLog> ret = new List<IMES.DataModel.BorrowLog>();

                _Schema.SQLContext sqlCtx = null;
                if (string.IsNullOrEmpty(status))
                {
                    sqlCtx = ComposeForGetBorrowLogByStatus_All();
                }
                else
                {
                    sqlCtx = ComposeForGetBorrowLogByStatus(status);
                }
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.DataModel.BorrowLog item = new IMES.DataModel.BorrowLog();
                        item.Acceptor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_acceptor]);
                        item.Bdate = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_bdate]);
                        item.Borrower = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_borrower]);
                        item.Lender = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_lender]);
                        item.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_model]);
                        item.Rdate = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_rdate]);
                        item.Returner = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_returner]);
                        item.Sn = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_sn]);
                        item.Status = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_status]);
                        item.ID = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_id]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private _Schema.SQLContext ComposeForGetBorrowLogByStatus(string status)
        {
            _Schema.SQLContext sqlCtx = null;
            lock (MethodBase.GetCurrentMethod())
            {
                if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                {
                    _Schema.BorrowLog cond = new _Schema.BorrowLog();
                    cond.status = status;
                    sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.BorrowLog), cond, null, null);
                    sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, string.Join(",", new string[] { _Schema.BorrowLog.fn_model, _Schema.BorrowLog.fn_sn, _Schema.BorrowLog.fn_rdate + " DESC" }));
                }
            }
            sqlCtx.Params[_Schema.BorrowLog.fn_status].Value = status;
            return sqlCtx;
        }

        private _Schema.SQLContext ComposeForGetBorrowLogByStatus_All()
        {
            _Schema.SQLContext sqlCtx = null;
            lock (MethodBase.GetCurrentMethod())
            {
                if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                {
                    sqlCtx = _Schema.Func.GetCommonSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.BorrowLog));
                    sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, string.Join(",", new string[] { _Schema.BorrowLog.fn_model, _Schema.BorrowLog.fn_sn, _Schema.BorrowLog.fn_rdate + " DESC" }));
                }
            }
            return sqlCtx;
        }

        public IList<IMES.DataModel.BorrowLog> GetBorrowLogBySno(string sno)
        {
            //SELECT * FROM IMES_FA..BorrowLog WHERE Sno = @ProductID
            try
            {
                IList<IMES.DataModel.BorrowLog> ret = new List<IMES.DataModel.BorrowLog>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.BorrowLog cond = new _Schema.BorrowLog();
                        cond.sn = sno;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.BorrowLog), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.BorrowLog.fn_sn].Value = sno;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.DataModel.BorrowLog item = new IMES.DataModel.BorrowLog();
                        item.Acceptor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_acceptor]);
                        item.Bdate = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_bdate]);
                        item.Borrower = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_borrower]);
                        item.Lender = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_lender]);
                        item.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_model]);
                        item.Rdate = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_rdate]);
                        item.Returner = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_returner]);
                        item.Sn = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_sn]);
                        item.Status = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_status]);
                        item.ID = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.BorrowLog.fn_id]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddBorrowLog(IMES.DataModel.BorrowLog item)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.BorrowLog));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.BorrowLog.fn_acceptor].Value = item.Acceptor;
                sqlCtx.Params[_Schema.BorrowLog.fn_bdate].Value = cmDt;
                sqlCtx.Params[_Schema.BorrowLog.fn_borrower].Value = item.Borrower;
                sqlCtx.Params[_Schema.BorrowLog.fn_lender].Value = item.Lender;
                sqlCtx.Params[_Schema.BorrowLog.fn_model].Value = item.Model;
                sqlCtx.Params[_Schema.BorrowLog.fn_rdate].Value = cmDt;
                sqlCtx.Params[_Schema.BorrowLog.fn_returner].Value = item.Returner;
                sqlCtx.Params[_Schema.BorrowLog.fn_sn].Value = item.Sn;
                sqlCtx.Params[_Schema.BorrowLog.fn_status].Value = item.Status;
                item.ID = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateBorrowLog(IMES.DataModel.BorrowLog item)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.BorrowLog cond = new _Schema.BorrowLog();
                        cond.id = item.ID;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.BorrowLog), new List<string>() { _Schema.BorrowLog.fn_returner, _Schema.BorrowLog.fn_acceptor, _Schema.BorrowLog.fn_status, _Schema.BorrowLog.fn_rdate }, null, null, null, cond, null, null, null, null, null, null, null);

                        sqlCtx.Params[_Schema.Func.DecSV(_Schema.BorrowLog.fn_status)].Value = "R";
                    }
                }
                sqlCtx.Params[_Schema.BorrowLog.fn_id].Value = item.ID;
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.BorrowLog.fn_returner)].Value = item.Returner;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.BorrowLog.fn_acceptor)].Value = item.Acceptor;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.BorrowLog.fn_rdate)].Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public string GetSFGCustomizingSiteCode(string infoType, string infoValue)
        {
            //SFGSite
            try
            {
                string ret = string.Empty;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.SFGSite cond = new _Schema.SFGSite();
                        cond.InfoType = infoType;
                        cond.InfoValue = infoValue;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.SFGSite), "TOP 1", new List<string>() { _Schema.SFGSite.fn_InfoValue }, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.SFGSite.fn_InfoType].Value = infoType;
                sqlCtx.Params[_Schema.SFGSite.fn_InfoValue].Value = infoValue;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.SFGSite.fn_InfoValue]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void CartonUnpack(string cartonSN)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.CartonSN = cartonSN;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), new List<string>() { _Schema.Product.fn_CartonSN }, null, null, null, cond, null, null, null, null, null, null, null);

                        sqlCtx.Params[_Schema.Func.DecSV(_Schema.Product.fn_CartonSN)].Value = string.Empty;
                        //sqlCtx.Params[_Schema.Func.DecSV(_Schema.Product.fn_DeliveryNo)].Value = string.Empty;
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_CartonSN].Value = cartonSN;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.SMALLPartsUploadInfo> QuerySmallPartsUploadInfo()
        {
            try
            {
                List<IMES.DataModel.SMALLPartsUploadInfo> ret = new List<IMES.DataModel.SMALLPartsUploadInfo>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.SmallPartsUpload));

                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderByDesc, _Schema.SmallPartsUpload.fn_Cdt);
                    }
                }
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, null))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.DataModel.SMALLPartsUploadInfo item = new IMES.DataModel.SMALLPartsUploadInfo();
                        item.cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.SmallPartsUpload.fn_Cdt]);
                        item.editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.SmallPartsUpload.fn_Editor]);
                        item.iecPN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.SmallPartsUpload.fn_IECPN]);
                        item.tsbPN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.SmallPartsUpload.fn_TSBPN]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void SaveSmallPartsUploadInfo(IList<IMES.DataModel.SMALLPartsUploadInfo> list)
        {
            try
            {
                SqlTransactionManager.Begin();

                if (list != null && list.Count > 0)
                {
                    //IList<IMES.DataModel.SMALLPartsUploadInfo> batch = new List<IMES.DataModel.SMALLPartsUploadInfo>();
                    // 2010-05-11 Liu Dong(eB1-4)         Modify SaveSMALLPartsUploadInfo批操作前的判断不太妥当,因为本次插入的集合的数据不能不考虑此逻辑.
                    //int i = 0;
                    foreach (IMES.DataModel.SMALLPartsUploadInfo entry in list)
                    {
                        //batch.Add(entry);
                        // 2010-05-11 Liu Dong(eB1-4)         Modify SaveSMALLPartsUploadInfo批操作前的判断不太妥当,因为本次插入的集合的数据不能不考虑此逻辑.
                        //if ((i + 1) % batchSQLCnt == 0 || i == list.Count - 1)
                        //{
                        //    SaveSMALLPartsUploadInfo_Inner(batch);
                        SaveSMALLPartsUploadInfo_Inner(entry);
                        //    batch.Clear();
                        //}
                        //i++;
                        // 2010-05-11 Liu Dong(eB1-4)         Modify SaveSMALLPartsUploadInfo批操作前的判断不太妥当,因为本次插入的集合的数据不能不考虑此逻辑.
                    }
                }
                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        // 2010-05-11 Liu Dong(eB1-4)         Modify SaveSMALLPartsUploadInfo批操作前的判断不太妥当,因为本次插入的集合的数据不能不考虑此逻辑.
        private void SaveSMALLPartsUploadInfo_Inner(IMES.DataModel.SMALLPartsUploadInfo item)//(IList<IMES.DataModel.SMALLPartsUploadInfo> list)
        {
            try
            {
                //if (list != null && list.Count > 0)
                //{
                //    _Schema.SQLContextCollection sqlCtxSet = new _Schema.SQLContextCollection();

                //    int i = 0;
                //    foreach (IMES.DataModel.SMALLPartsUploadInfo entry in list)
                //    {
                _Schema.SQLContext sqlCtx = null;

                if (!PeekForSaveSMALLPartsUploadInfo(item))
                {
                    if (PeekForUpdateSaveSMALLPartsUploadInfo(item))
                        sqlCtx = ComposeForUpdateSaveSMALLPartsUploadInfo(item);
                    else
                        sqlCtx = ComposeForInsertSaveSMALLPartsUploadInfo(item);

                    _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                }

                //if (sqlCtx != null)
                //{
                //    sqlCtxSet.AddOne(i, sqlCtx);
                //    i++;
                //}
                //}

                //    if (i > 0)
                //    {
                //        _Schema.SQLContext sqlCtxBatch = sqlCtxSet.MergeToOneNonQuery();
                //        _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtxBatch.Sentence, sqlCtxBatch.Params.Values.ToArray<SqlParameter>());
                //    }
                //}
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool PeekForSaveSMALLPartsUploadInfo(IMES.DataModel.SMALLPartsUploadInfo item)
        {
            //SELECT * FROM IMES_FA..SmallPartsUpload WHERE TSBPN = @tsbpn AND IECPN = @iecpn
            SqlDataReader sqlR = null;
            try
            {
                bool ret = false;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.SmallPartsUpload cond = new _Schema.SmallPartsUpload();
                        cond.TSBPN = item.tsbPN;
                        cond.IECPN = item.iecPN;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.SmallPartsUpload), "COUNT", new List<string>() { _Schema.SmallPartsUpload.fn_Cdt }, cond, null, null, null, null, null, null, null);

                        sqlCtx.Sentence = sqlCtx.Sentence.Replace("WHERE", "WITH (UPDLOCK) WHERE");
                    }
                }
                sqlCtx.Params[_Schema.SmallPartsUpload.fn_TSBPN].Value = item.tsbPN;
                sqlCtx.Params[_Schema.SmallPartsUpload.fn_IECPN].Value = item.iecPN;
                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                if (sqlR != null && sqlR.Read())
                {
                    int cnt = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                    ret = cnt > 0 ? true : false;
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                {
                    sqlR.Close();
                }
            }
        }

        private bool PeekForUpdateSaveSMALLPartsUploadInfo(IMES.DataModel.SMALLPartsUploadInfo item)
        {
            //SELECT * FROM IMES_FA..SmallPartsUpload WHERE IECPN = @iecpn AND TSBPN <> @tsbpn
            SqlDataReader sqlR = null;
            try
            {
                bool ret = false;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.SmallPartsUpload cond = new _Schema.SmallPartsUpload();
                        cond.IECPN = item.iecPN;
                        _Schema.SmallPartsUpload neqCond = new _Schema.SmallPartsUpload();
                        neqCond.TSBPN = item.tsbPN;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelectWith3NotConds(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.SmallPartsUpload), "COUNT", new List<string>() { _Schema.SmallPartsUpload.fn_Cdt }, cond, null, null, null, null, null, null, null, neqCond, null, null);

                        sqlCtx.Sentence = sqlCtx.Sentence.Replace("WHERE", "WITH (UPDLOCK) WHERE");
                    }
                }
                sqlCtx.Params[_Schema.SmallPartsUpload.fn_TSBPN].Value = item.tsbPN;
                sqlCtx.Params[_Schema.SmallPartsUpload.fn_IECPN].Value = item.iecPN;
                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                if (sqlR != null && sqlR.Read())
                {
                    int cnt = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                    ret = cnt > 0 ? true : false;
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                {
                    sqlR.Close();
                }
            }
        }

        private _Schema.SQLContext ComposeForUpdateSaveSMALLPartsUploadInfo(IMES.DataModel.SMALLPartsUploadInfo item)
        {
            //UPDATE SmallPartsUpload SET TSBPN = @tsbpn WHERE IECPN = @iecpn
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.SmallPartsUpload cond = new _Schema.SmallPartsUpload();
                        cond.IECPN = item.iecPN;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.SmallPartsUpload), new List<string>() { _Schema.SmallPartsUpload.fn_TSBPN }, null, null, null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.SmallPartsUpload.fn_IECPN].Value = item.iecPN;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.SmallPartsUpload.fn_TSBPN)].Value = item.tsbPN;
                return sqlCtx;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private _Schema.SQLContext ComposeForInsertSaveSMALLPartsUploadInfo(IMES.DataModel.SMALLPartsUploadInfo item)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.SmallPartsUpload));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.SmallPartsUpload.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.SmallPartsUpload.fn_Editor].Value = item.editor;
                sqlCtx.Params[_Schema.SmallPartsUpload.fn_IECPN].Value = item.iecPN;
                sqlCtx.Params[_Schema.SmallPartsUpload.fn_TSBPN].Value = item.tsbPN;
                return sqlCtx;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int CheckIECPn(string iecPn)
        {
            //SELECT COUNT(TSBPN) FROM SmallPartsUpload WHERE IECPN = @IECPN
            try
            {
                int ret = 0;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.SmallPartsUpload equalCond = new _Schema.SmallPartsUpload();
                        equalCond.IECPN = iecPn;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.SmallPartsUpload), "COUNT", new List<string>() { _Schema.SmallPartsUpload.fn_IECPN }, equalCond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.SmallPartsUpload.fn_IECPN].Value = iecPn;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckFruNo(string fruNo)
        {
            try
            {
                bool ret = false;

                SqlParameter[] paramsArray = new SqlParameter[1];

                paramsArray[0] = new SqlParameter("@FruNo", SqlDbType.Char);
                paramsArray[0].Value = fruNo;
                object data = _Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_PAK, CommandType.StoredProcedure, "IMES_Check_FruNo", paramsArray);
                if (data != null)
                    ret = Convert.ToBoolean(data);
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool IsLastReworkStation(string reworkcode, string currentStation, int status)
        {
            //Declare @process varchar(20)
            //Declare @nextStation char(10)
            //select @process = Process from Rework_Process where ReworkCode = @reworkcode
            //select @nextStation = Station from Process_Station where Process = @process and PreStation = @currentStation and Status = @Status
            try
            {
                bool ret = false;

                _Schema.SQLContext sqlCtx = null;
                _Schema.TableAndFields tf1 = null;
                _Schema.TableAndFields tf2 = null;
                _Schema.TableAndFields[] tblAndFldsesArray = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
                    {
                        tf1 = new _Schema.TableAndFields();
                        tf1.Table = typeof(_Schema.Rework_Process);
                        _Schema.Rework_Process equalCond1 = new _Schema.Rework_Process();
                        equalCond1.ReworkCode = reworkcode;
                        tf1.equalcond = equalCond1;
                        tf1.ToGetFieldNames = null;

                        tf2 = new _Schema.TableAndFields();
                        tf2.Table = typeof(_Schema.Process_Station);
                        _Schema.Process_Station equalCond2 = new _Schema.Process_Station();
                        equalCond2.PreStation = currentStation;
                        equalCond2.Status = status;
                        tf2.equalcond = equalCond2;
                        tf2.ToGetFieldNames.Add(_Schema.Process_Station.fn_Station);

                        _Schema.TableConnectionCollection tblCnnts = new _Schema.TableConnectionCollection(new _Schema.TableConnectionItem[] { 
                            new _Schema.TableConnectionItem(tf1, _Schema.Rework_Process.fn_Process, tf2, _Schema.Process_Station.fn_Process)});

                        tblAndFldsesArray = new _Schema.TableAndFields[] { tf1, tf2 };
                        sqlCtx = _Schema.Func.GetConditionedJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken, "COUNT", ref tblAndFldsesArray, tblCnnts);
                    }
                }
                tf1 = tblAndFldsesArray[0];
                tf2 = tblAndFldsesArray[1];

                sqlCtx.Params[_Schema.Func.DecAlias(tf1.alias, _Schema.Rework_Process.fn_ReworkCode)].Value = reworkcode;
                sqlCtx.Params[_Schema.Func.DecAlias(tf2.alias, _Schema.Process_Station.fn_PreStation)].Value = currentStation;
                sqlCtx.Params[_Schema.Func.DecAlias(tf2.alias, _Schema.Process_Station.fn_Status)].Value = status;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                        ret = cnt > 0 ? false : true;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool IsReworkFinish(string reworkcode, string productID)
        {
            //select count(productid) from ProductStatus where ReworkCode=@ReworkCode and ProductId != @ProductId
            try
            {
                bool ret = false;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductStatus cond = new _Schema.ProductStatus();
                        cond.ReworkCode = reworkcode;
                        _Schema.ProductStatus neqCond = new _Schema.ProductStatus();
                        neqCond.ProductID = productID;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelectWith3NotConds(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductStatus), "COUNT", new List<string>() { _Schema.ProductStatus.fn_ProductID }, cond, null, null, null, null, null, null, null, neqCond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.ProductStatus.fn_ReworkCode].Value = reworkcode;
                sqlCtx.Params[_Schema.ProductStatus.fn_ProductID].Value = productID;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                        ret = cnt > 0 ? true : false;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateReworkConsideredProductStatus(IMES.DataModel.Rework rework, string productID)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();

                        sqlCtx.Sentence = "UPDATE {0} SET {1}=@{1}, {2}=@{2}, {3}=@{3} " +
                                            "WHERE {4}=@{4} " +
                                            "AND NOT EXISTS(SELECT {6} FROM {5} WHERE {7}=@{4} AND {6}<>@{6}) ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.Rework).Name,
                                                                        _Schema.Rework.fn_Status,
                                                                        _Schema.Rework.fn_Editor,
                                                                        _Schema.Rework.fn_Udt,
                                                                        _Schema.Rework.fn_ReworkCode,
                                                                        typeof(_Schema.ProductStatus).Name,
                                                                        _Schema.ProductStatus.fn_ProductID,
                                                                        _Schema.ProductStatus.fn_ReworkCode);


                        sqlCtx.Params.Add(_Schema.Rework.fn_Status, new SqlParameter("@" + _Schema.Rework.fn_Status, SqlDbType.Char));
                        sqlCtx.Params.Add(_Schema.Rework.fn_Editor, new SqlParameter("@" + _Schema.Rework.fn_Editor, SqlDbType.Char));
                        sqlCtx.Params.Add(_Schema.Rework.fn_Udt, new SqlParameter("@" + _Schema.Rework.fn_Udt, SqlDbType.DateTime));
                        sqlCtx.Params.Add(_Schema.Rework.fn_ReworkCode, new SqlParameter("@" + _Schema.Rework.fn_ReworkCode, SqlDbType.Char));
                        sqlCtx.Params.Add(_Schema.ProductStatus.fn_ProductID, new SqlParameter("@" + _Schema.ProductStatus.fn_ProductID, SqlDbType.Char));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Rework.fn_Status].Value = rework.Status;
                sqlCtx.Params[_Schema.Rework.fn_Editor].Value = rework.Editor;
                sqlCtx.Params[_Schema.Rework.fn_Udt].Value = cmDt;
                sqlCtx.Params[_Schema.Rework.fn_ReworkCode].Value = rework.ReworkCode;
                sqlCtx.Params[_Schema.ProductStatus.fn_ProductID].Value = productID;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public BoxerBookData GetNewBoxerBookDataByCustSN(string custSN)
        {
            try
            {
                BoxerBookData ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.BoxerBookData cond = new _Schema.BoxerBookData();
                        cond.SerialNumber = custSN;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.BoxerBookData), "TOP 1", null, cond, null, null, null, null, null, null, null);
                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderByDesc, _Schema.BoxerBookData.fn_Cdt);
                    }
                }
                sqlCtx.Params[_Schema.BoxerBookData.fn_SerialNumber].Value = custSN;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = new BoxerBookData();
                        ret.CartonSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_CartonSN]);
                        ret.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_Cdt]);
                        ret.DateManufactured = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_DateManufactured]);
                        ret.datetime = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_datetime]);
                        ret.Desc = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_Desc]);
                        ret.DeviceAttribute = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_DeviceAttribute]);
                        ret.EAN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_EAN]);
                        ret.ErrorCode = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_ErrorCode]);
                        ret.EventType = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_EventType]);
                        ret.ICCID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_ICCID]);
                        ret.id = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_ID]);
                        ret.IMEI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_IMEI]);
                        ret.IMSI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_IMSI]);
                        ret.IsPass = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_IsPass]);
                        ret.MACAddress = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_MACAddress]);
                        ret.MBNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_MBNo]);
                        ret.ModelNumber = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_ModelNumber]);
                        ret.PalletSerialNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_PalletSerialNo]);
                        ret.PID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_PID]);
                        ret.Platform = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_Platform]);
                        ret.PrivateKey = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_PrivateKey]);
                        ret.PublicKey = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_PublicKey]);
                        ret.SerialNumber = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_SerialNumber]);
                        ret.TCaseNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_TCaseNo]);
                        ret.TLineNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_TLineNo]);
                        ret.TStatNo = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.BoxerBookData.fn_TStatNo]);
                        ((BoxerBookData)ret).Tracker.Clear();
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateBoxerBookData(string pltNo, string custSN)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.BoxerBookData cond = new _Schema.BoxerBookData();
                        cond.SerialNumber = custSN;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.BoxerBookData), new List<string>() { _Schema.BoxerBookData.fn_PalletSerialNo }, null, null, null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.BoxerBookData.fn_SerialNumber].Value = custSN;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.BoxerBookData.fn_PalletSerialNo)].Value = pltNo;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        // 2011-04-28 Liu Dong(eB1-4)         Modify ITC-1268-0150 
        public void DeleteProductPartByPartType(string productID, IList<string> partTypeList)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();

                        sqlCtx.Sentence = "DELETE {0} WHERE {1}=@{2} AND {3} IN (SELECT {4} FROM {5} WHERE {6} IN ({7})) ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.Product_Part).Name,
                                                            _Schema.Product_Part.fn_productID,
                                                            _Schema.Product_Part.fn_productID,
                                                            _Schema.Product_Part.fn_partNo,
                                                            _Schema.Part.fn_PartNo,
                                                            typeof(_Schema.Part).Name,
                                                            _Schema.Part.fn_PartType,
                                                            "INSET");

                        sqlCtx.Params.Add(_Schema.Product_Part.fn_productID, new SqlParameter("@" + _Schema.Rework_ProductInfo.fn_ProductID, SqlDbType.VarChar));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.Product_Part.fn_productID].Value = productID;
                string Sentence = sqlCtx.Sentence.Replace("INSET", _Schema.Func.ConvertInSet(partTypeList));

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateProductListRework(IMES.FisObject.FA.Product.ProductStatus newStatus, IList<string> productIDList, string cartonSN)
        {
            try
            {
                string strProductID = "-";
                if (productIDList != null)
                {
                    foreach (string tempProductID in productIDList)
                    {
                        strProductID = strProductID + tempProductID + "-";
                    }
                }
                string currentDB = _Schema.SqlHelper.ConnectionString_FA;
                string currentSPName = "IMES_Update_Rework";

                SqlParameter[] paramsArray = new SqlParameter[6];

                paramsArray[0] = new SqlParameter("@ProductID", SqlDbType.VarChar);
                paramsArray[0].Value = strProductID;
                paramsArray[1] = new SqlParameter("@Editor", SqlDbType.VarChar);
                paramsArray[1].Value = newStatus.Editor;
                paramsArray[2] = new SqlParameter("@Station", SqlDbType.VarChar);
                paramsArray[2].Value = newStatus.StationId;
                paramsArray[3] = new SqlParameter("@Status", SqlDbType.Int);
                paramsArray[3].Value = (int)newStatus.Status;
                paramsArray[4] = new SqlParameter("@Line", SqlDbType.VarChar);
                paramsArray[4].Value = newStatus.Line;
                paramsArray[5] = new SqlParameter("@CartonSN", SqlDbType.VarChar);
                paramsArray[5].Value = cartonSN;

                _Schema.SqlHelper.ExecuteNonQuery(currentDB, CommandType.StoredProcedure, currentSPName, paramsArray);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public TestBoxDataLog GetTestBoxDataLogByCustSN(string custSN)
        {
            try
            {
                TestBoxDataLog ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.TestBoxDataLog cond = new _Schema.TestBoxDataLog();
                        cond.SerialNumber = custSN;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TestBoxDataLog), "TOP 1", null, cond, null, null, null, null, null, null, null);
                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderByDesc, _Schema.TestBoxDataLog.fn_Cdt);
                    }
                }
                sqlCtx.Params[_Schema.TestBoxDataLog.fn_SerialNumber].Value = custSN;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = new TestBoxDataLog();
                        ret.CartonSn = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_CartonSn]);
                        ret.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_Cdt]);
                        ret.DateManufactured = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_DateManufactured]);
                        ret.Descr = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_Descr]);
                        ret.DeviceAttribute = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_DeviceAttribute]);
                        ret.EAN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_EAN]);
                        ret.ErrorCode = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_ErrorCode]);
                        ret.EventType = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_EventType]);
                        ret.ICCID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_ICCID]);
                        ret.ID = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_ID]);
                        ret.IMEI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_IMEI]);
                        ret.IMSI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_IMSI]);
                        ret.IsPass = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_IsPass]);
                        ret.LineNum = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_LineNum]);
                        ret.MACAddress = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_MACAddress]);
                        ret.ModelNumber = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_ModelNumber]);
                        ret.PalletSerialNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_PalletSerialNo]);
                        ret.PCBNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_PCBNo]);
                        ret.Platform = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_Platform]);
                        ret.PrivateKey = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_PrivateKey]);
                        ret.ProductID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_ProductID]);
                        ret.PublicKey = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_PublicKey]);
                        ret.SerialNumber = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_SerialNumber]);
                        ret.TestCase = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_TestCase]);
                        ret.TestTime = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_TestTime]);
                        ret.WC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TestBoxDataLog.fn_WC]);
                        ((TestBoxDataLog)ret).Tracker.Clear();
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateTestBoxDataLog(string pltno, string custSN)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.TestBoxDataLog cond = new _Schema.TestBoxDataLog();
                        cond.SerialNumber = custSN;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TestBoxDataLog), new List<string>() { _Schema.TestBoxDataLog.fn_PalletSerialNo }, null, null, null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.TestBoxDataLog.fn_SerialNumber].Value = custSN;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.TestBoxDataLog.fn_PalletSerialNo)].Value = pltno;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        #region . Inners .

        private void PersistInsertProduct(IProduct prdct)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                //sqlCtx.Params[_Schema.Product.fn_BIOS].Value = prdct.BIOS;
                sqlCtx.Params[_Schema.Product.fn_CartonSN].Value = prdct.CartonSN;
                sqlCtx.Params[_Schema.Product.fn_CartonWeight].Value = prdct.CartonWeight;
                //sqlCtx.Params[_Schema.Product.fn_COAID].Value = prdct.COAID;
                sqlCtx.Params[_Schema.Product.fn_CUSTSN].Value = prdct.CUSTSN;
                sqlCtx.Params[_Schema.Product.fn_CVSN].Value = prdct.CVSN;// prdct.CUSTVER;
                sqlCtx.Params[_Schema.Product.fn_DeliveryNo].Value = prdct.DeliveryNo;
                sqlCtx.Params[_Schema.Product.fn_ECR].Value = prdct.ECR;
                //sqlCtx.Params[_Schema.Product.fn_ICCID].Value = prdct.ICCID;
                //sqlCtx.Params[_Schema.Product.fn_IMEI].Value = prdct.IMEI;
                //sqlCtx.Params[_Schema.Product.fn_IMGVER].Value = prdct.IMGVER;
                sqlCtx.Params[_Schema.Product.fn_MAC].Value = prdct.MAC;
                sqlCtx.Params[_Schema.Product.fn_MBECR].Value = prdct.MBECR;
                //sqlCtx.Params[_Schema.Product.fn_MEID].Value = prdct.MEID;
                sqlCtx.Params[_Schema.Product.fn_MO].Value = prdct.MO;
                sqlCtx.Params[_Schema.Product.fn_Model].Value = prdct.Model;
                sqlCtx.Params[_Schema.Product.fn_PalletNo].Value = prdct.PalletNo;
                sqlCtx.Params[_Schema.Product.fn_PCBID].Value = prdct.PCBID;
                sqlCtx.Params[_Schema.Product.fn_PCBModel].Value = prdct.PCBModel;
                sqlCtx.Params[_Schema.Product.fn_PizzaID].Value = prdct.PizzaID;
                sqlCtx.Params[_Schema.Product.fn_ProductID].Value = prdct.ProId;
                sqlCtx.Params[_Schema.Product.fn_UnitWeight].Value = prdct.UnitWeight;
                sqlCtx.Params[_Schema.Product.fn_UUID].Value = prdct.UUID;
                //sqlCtx.Params[_Schema.Product.fn_WMAC].Value = prdct.WMAC;
                //sqlCtx.Params[_Schema.Product.fn_HDVD].Value = prdct.HDVD;
                //sqlCtx.Params[_Schema.Product.fn_BLMAC].Value = prdct.BLMAC;
                //sqlCtx.Params[_Schema.Product.fn_TVTuner].Value = prdct.TVTuner;
                sqlCtx.Params[_Schema.Product.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.Product.fn_Udt].Value = cmDt;
                sqlCtx.Params[_Schema.Product.fn_state].Value = prdct.State;
                sqlCtx.Params[_Schema.Product.fn_ooaid].Value = prdct.OOAID;
                sqlCtx.Params[_Schema.Product.fn_prsn].Value = prdct.PRSN;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistUpdateProduct(IProduct prdct)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                //sqlCtx.Params[_Schema.Product.fn_BIOS].Value = prdct.BIOS;
                sqlCtx.Params[_Schema.Product.fn_CartonSN].Value = prdct.CartonSN;
                sqlCtx.Params[_Schema.Product.fn_CartonWeight].Value = prdct.CartonWeight;
                //sqlCtx.Params[_Schema.Product.fn_COAID].Value = prdct.COAID;
                sqlCtx.Params[_Schema.Product.fn_CUSTSN].Value = prdct.CUSTSN;
                sqlCtx.Params[_Schema.Product.fn_CVSN].Value = prdct.CVSN;// prdct.CUSTVER;
                sqlCtx.Params[_Schema.Product.fn_DeliveryNo].Value = prdct.DeliveryNo;
                sqlCtx.Params[_Schema.Product.fn_ECR].Value = prdct.ECR;
                //sqlCtx.Params[_Schema.Product.fn_ICCID].Value = prdct.ICCID;
                //sqlCtx.Params[_Schema.Product.fn_IMEI].Value = prdct.IMEI;
                //sqlCtx.Params[_Schema.Product.fn_IMGVER].Value = prdct.IMGVER;
                sqlCtx.Params[_Schema.Product.fn_MAC].Value = prdct.MAC;
                sqlCtx.Params[_Schema.Product.fn_MBECR].Value = prdct.MBECR;
                //sqlCtx.Params[_Schema.Product.fn_MEID].Value = prdct.MEID;
                sqlCtx.Params[_Schema.Product.fn_MO].Value = prdct.MO;
                sqlCtx.Params[_Schema.Product.fn_Model].Value = prdct.Model;
                sqlCtx.Params[_Schema.Product.fn_PalletNo].Value = prdct.PalletNo;
                sqlCtx.Params[_Schema.Product.fn_PCBID].Value = prdct.PCBID;
                sqlCtx.Params[_Schema.Product.fn_PCBModel].Value = prdct.PCBModel;
                sqlCtx.Params[_Schema.Product.fn_PizzaID].Value = prdct.PizzaID;
                sqlCtx.Params[_Schema.Product.fn_ProductID].Value = prdct.ProId;
                sqlCtx.Params[_Schema.Product.fn_UnitWeight].Value = prdct.UnitWeight;
                sqlCtx.Params[_Schema.Product.fn_UUID].Value = prdct.UUID;
                //sqlCtx.Params[_Schema.Product.fn_WMAC].Value = prdct.WMAC;
                //sqlCtx.Params[_Schema.Product.fn_HDVD].Value = prdct.HDVD;
                //sqlCtx.Params[_Schema.Product.fn_BLMAC].Value = prdct.BLMAC;
                //sqlCtx.Params[_Schema.Product.fn_TVTuner].Value = prdct.TVTuner;
                sqlCtx.Params[_Schema.Product.fn_Udt].Value = cmDt;
                sqlCtx.Params[_Schema.Product.fn_state].Value = prdct.State;
                sqlCtx.Params[_Schema.Product.fn_ooaid].Value = prdct.OOAID;
                sqlCtx.Params[_Schema.Product.fn_prsn].Value = prdct.PRSN;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        public void PersistUpdateProductWithoutUdt(IProduct prdct)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns.Product cond = new mtns.Product();
                        cond.productID = prdct.ProId;
                        mtns.Product setv = FuncNew.SetColumnFromField<mtns.Product, fons.Product>((fons.Product)prdct, mtns.Product.fn_udt);

                        sqlCtx = FuncNew.GetConditionedUpdate<mtns.Product>(new SetValueCollection<mtns.Product>(new CommonSetValue<mtns.Product>(setv)), new ConditionCollection<mtns.Product>(new EqualCondition<mtns.Product>(cond)));
                    }
                }
                sqlCtx.Param(mtns.Product.fn_productID).Value = prdct.ProId;
                sqlCtx = FuncNew.SetColumnFromField<mtns.Product, fons.Product>(sqlCtx, (fons.Product)prdct, true, mtns.Product.fn_udt);

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void PersistDeleteProduct(IProduct prdct)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product));
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_ProductID].Value = prdct.ProId;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private IProduct FindByCustomSn(string customerSn)
        {
            //一對一?
            try
            {
                IProduct ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product equalCond = new _Schema.Product();
                        equalCond.CUSTSN = customerSn;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), equalCond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_CUSTSN].Value = customerSn;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = new IMES.FisObject.FA.Product.Product(GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]));
                        //ret.BIOS = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BIOS]);
                        ret.CartonSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonSN]);
                        ret.CartonWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonWeight]);
                        //ret.COAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_COAID]);
                        ret.CUSTSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                        //ret.CUSTVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.DeliveryNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_DeliveryNo]);
                        ret.ECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ECR]);
                        //ret.ICCID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ICCID]);
                        //ret.IMEI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMEI]);
                        //ret.IMGVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMGVER]);
                        ret.MAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MAC]);
                        ret.MBECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MBECR]);
                        //ret.MEID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MEID]);
                        ret.MO = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MO]);
                        ret.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Model]);
                        ret.PalletNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PalletNo]);
                        ret.PCBID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBID]);
                        ret.PCBModel = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBModel]);
                        ret.PizzaID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PizzaID]);
                        ret.UnitWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UnitWeight]);
                        ret.UUID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UUID]);
                        //ret.WMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_WMAC]);
                        ret.CVSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.State = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_state]);
                        ret.PRSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_prsn]);
                        ret.OOAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ooaid]);
                        ret.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Udt]);
                        ret.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Cdt]);
                        ((IMES.FisObject.FA.Product.Product)ret).Tracker.Clear();
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        #region . inserts .

        private void CheckAndInsertSubs(IProduct item, StateTracker tracker)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                IList<Repair> lstRep = (IList<Repair>)item.GetType().GetField("_repairs", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                if (lstRep != null && lstRep.Count > 0)//(item.Repairs.Count > 0)
                {
                    foreach (Repair repi in lstRep)//item.Repairs)
                    {
                        if (tracker.GetState(repi) == DataRowState.Added)
                        {
                            repi.Sn = item.ProId;
                            this.PersistInsertRepair(repi);

                            IList<RepairDefect> lstRepDfct = (IList<RepairDefect>)repi.GetType().GetField("_defects", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(repi);
                            if (lstRepDfct != null && lstRepDfct.Count > 0)//(repi.Defects != null && repi.Defects.Count > 0)
                            {
                                foreach (RepairDefect repDfcti in lstRepDfct)//repi.Defects)
                                {
                                    //if (tracker.GetState(repDfcti) == DataRowState.Modified)
                                    //{
                                    //    this.PersistUpdateRepairDefect(repDfcti);
                                    //}
                                    //else 
                                    if (tracker.GetState(repDfcti) == DataRowState.Added)
                                    {
                                        repDfcti.RepairID = repi.ID;
                                        this.PersistInsertRepairDefect(repDfcti);
                                    }
                                }
                            }
                        }
                    }
                }

                //persist ProductInfo
                IList<IMES.FisObject.FA.Product.ProductInfo> lstProdInfo = (IList<IMES.FisObject.FA.Product.ProductInfo>)item.GetType().GetField("_infoes", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                if (lstProdInfo != null && lstProdInfo.Count > 0)
                {
                    foreach (IMES.FisObject.FA.Product.ProductInfo prodii in lstProdInfo)
                    {
                        if (tracker.GetState(prodii) == DataRowState.Added)
                        {
                            prodii.ProductID = item.ProId;
                            this.PersistInsertProductInfo(prodii);
                        }
                    }
                }

                //persist QCStatus
                IList<ProductQCStatus> lstQCstts = (IList<ProductQCStatus>)item.GetType().GetField("_qcStatus", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                if (lstQCstts != null && lstQCstts.Count > 0)//(item.QCStatus.Count > 0)
                {
                    foreach (ProductQCStatus pdqcs in lstQCstts)//item.QCStatus)
                    {
                        if (tracker.GetState(pdqcs) == DataRowState.Added)
                        {
                            pdqcs.ProductID = item.ProId;
                            this.PersistInsertQCStatuses(pdqcs);
                        }
                    }
                }

                //persist ProductPart
                IList<IProductPart> lstParts = (IList<IProductPart>)item.GetType().GetField("_parts", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                if (lstParts != null && lstParts.Count > 0)//(item.ProductParts.Count > 0)
                {
                    foreach (ProductPart prdctpt in lstParts)//item.ProductParts)
                    {
                        if (tracker.GetState(prdctpt) == DataRowState.Added)
                        {
                            prdctpt.ProductID = item.ProId;
                            this.PersistInsertProductPart(prdctpt);
                        }
                    }
                }

                //persist TestLog
                IList<TestLog> lstTstLg = (IList<TestLog>)item.GetType().GetField("_testLogs", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                if (lstTstLg != null && lstTstLg.Count > 0)//(item.TestLog.Count > 0)
                {
                    foreach (TestLog testLog in lstTstLg)//item.TestLog)
                    {
                        if (tracker.GetState(testLog) == DataRowState.Added)
                        {
                            testLog.Sn = item.ProId;
                            this.PersistInsertTestLog(testLog);
                            //Disable Code 0001304: [kernel]停止複製Alarm 使用的Table(Repair/TestLog)
                            //this.PersistInsertTestLogBack(testLog);

                            IList<TestLogDefect> lstTstLgDfct = (IList<TestLogDefect>)testLog.GetType().GetField("_defects", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(testLog);
                            if (lstTstLgDfct != null && lstTstLgDfct.Count > 0)//(testLog.Defects != null && testLog.Defects.Count > 0)
                            {
                                foreach (TestLogDefect testLogDfcti in lstTstLgDfct)//testLog.Defects)
                                {
                                    if (tracker.GetState(testLogDfcti) == DataRowState.Added)
                                    {
                                        testLogDfcti.TestLogID = testLog.ID;
                                        this.PersistInsertTestLogDefect(testLogDfcti);
                                        //Disable Code 0001304: [kernel]停止複製Alarm 使用的Table(Repair/TestLog)
                                        //this.PersistInsertTestLogDefectBack(testLogDfcti);
                                    }
                                }
                            }
                        }
                    }
                }

                IList<IMES.FisObject.FA.Product.ProductLog> lstPrdLg = (IList<IMES.FisObject.FA.Product.ProductLog>)item.GetType().GetField("_productLogs", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                if (lstPrdLg != null && lstPrdLg.Count > 0)//(item.ProductLogs.Count > 0)
                {
                    foreach (IMES.FisObject.FA.Product.ProductLog prdctlg in lstPrdLg)//item.ProductLogs)
                    {
                        //LoggingInfoFormat("ProductLog Item HashCode:{0}", prdctlg.GetHashCode().ToString());
                        //LoggingInfoFormat("ProductLog Tracker Content:{0}", tracker.ToString());
                        if (tracker.GetState(prdctlg) == DataRowState.Added)
                        {
                            this.PersistInsertProductLog(item.ProId, prdctlg);
                        }
                    }
                }

                IList<ProductChangeLog> lstPrdChLg = (IList<ProductChangeLog>)item.GetType().GetField("_chngLogs", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                if (lstPrdChLg != null && lstPrdChLg.Count > 0)//(item.ChangeLogs.Count > 0)
                {
                    foreach (ProductChangeLog prdctChngLg in lstPrdChLg)//item.ChangeLogs)
                    {
                        if (tracker.GetState(prdctChngLg) == DataRowState.Added)
                        {
                            prdctChngLg.ProductID = item.ProId;
                            this.PersistInsertProductChangeLog(prdctChngLg);
                        }
                    }
                }

                IList<ProductAttribute> lstPrdAttr = (IList<ProductAttribute>)item.GetType().GetField("_attributes", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                if (lstPrdAttr != null && lstPrdAttr.Count > 0)
                {
                    foreach (ProductAttribute prdctAttr in lstPrdAttr)
                    {
                        if (tracker.GetState(prdctAttr) == DataRowState.Added)
                        {
                            prdctAttr.ProductId = item.ProId;
                            this.PersistInsertProductAttribute(prdctAttr);
                        }
                    }
                }

                IList<ProductAttributeLog> lstPrdAttrLg = (IList<ProductAttributeLog>)item.GetType().GetField("_attributeLogs", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                if (lstPrdAttrLg != null && lstPrdAttrLg.Count > 0)
                {
                    foreach (ProductAttributeLog prdctAttrLg in lstPrdAttrLg)
                    {
                        if (tracker.GetState(prdctAttrLg) == DataRowState.Added)
                        {
                            prdctAttrLg.ProductId = item.ProId;
                            this.PersistInsertProductAttributeLog(prdctAttrLg);
                        }
                    }
                }
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistInsertProductStatus(string productID, IMES.FisObject.FA.Product.ProductStatus prdctStatus)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductStatus));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ProductStatus.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.ProductStatus.fn_Editor].Value = prdctStatus.Editor;
                sqlCtx.Params[_Schema.ProductStatus.fn_Line].Value = prdctStatus.Line;
                sqlCtx.Params[_Schema.ProductStatus.fn_ProductID].Value = productID;
                sqlCtx.Params[_Schema.ProductStatus.fn_ReworkCode].Value = prdctStatus.ReworkCode;
                sqlCtx.Params[_Schema.ProductStatus.fn_Station].Value = prdctStatus.StationId;
                sqlCtx.Params[_Schema.ProductStatus.fn_Status].Value = prdctStatus.Status;
                sqlCtx.Params[_Schema.ProductStatus.fn_Udt].Value = cmDt;
                sqlCtx.Params[_Schema.ProductStatus.fn_TestFailCount].Value = prdctStatus.TestFailCount;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistInsertRepair(Repair rep)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductRepair));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ProductRepair.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.ProductRepair.fn_Editor].Value = rep.Editor;
                //sqlCtx.Params[_Schema.ProductRepair.fn_ID].Value = rep.ID;
                sqlCtx.Params[_Schema.ProductRepair.fn_Line].Value = rep.LineID;
                sqlCtx.Params[_Schema.ProductRepair.fn_Model].Value = rep.Model;
                sqlCtx.Params[_Schema.ProductRepair.fn_ProductID].Value = rep.Sn;
                sqlCtx.Params[_Schema.ProductRepair.fn_Station].Value = rep.Station;
                sqlCtx.Params[_Schema.ProductRepair.fn_Status].Value = Convert.ToInt32(rep.Status);
                //sqlCtx.Params[_Schema.ProductRepair.fn_ReturnID].Value = rep.ReturnID;
                sqlCtx.Params[_Schema.ProductRepair.fn_TestLogID].Value = ToInt32WithNull(rep.TestLogID);
                sqlCtx.Params[_Schema.ProductRepair.fn_Type].Value = rep.Type;
                sqlCtx.Params[_Schema.ProductRepair.fn_Udt].Value = cmDt;
                sqlCtx.Params[_Schema.ProductRepair.fn_logID].Value = rep.LogId;
                rep.ID = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistInsertRepairDefect(RepairDefect repDefect)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductRepair_DefectInfo));

                        //sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn__4M].ParameterName = _Schema.Func.ClearRectBrace(sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn__4M].ParameterName);
                        //sqlCtx.Params.Add(_Schema.Func.ClearRectBrace(_Schema.ProductRepair_DefectInfo.fn__4M), sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn__4M]);
                        //sqlCtx.Params.Remove(_Schema.ProductRepair_DefectInfo.fn__4M);
                        //sqlCtx.Sentence = sqlCtx.Sentence.Replace("@" + _Schema.ProductRepair_DefectInfo.fn__4M, "@" + _Schema.Func.ClearRectBrace(_Schema.ProductRepair_DefectInfo.fn__4M));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn__4M].Value = repDefect._4M;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Action].Value = repDefect.Action;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Cause].Value = repDefect.Cause;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Component].Value = repDefect.Component;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Cover].Value = repDefect.Cover;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_DefectCodeID].Value = repDefect.DefectCodeID;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Distribution].Value = repDefect.Distribution;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Editor].Value = repDefect.Editor;
                //sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_ID].Value = repDefect.ID;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_IsManual].Value = Convert.ToInt32(repDefect.IsManual);
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_MajorPart].Value = repDefect.MajorPart;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Manufacture].Value = repDefect.Manufacture;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Mark].Value = repDefect.Mark;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_NewPart].Value = repDefect.NewPart;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_NewPartSno].Value = repDefect.NewPartSno;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Obligation].Value = repDefect.Obligation;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_OldPart].Value = repDefect.OldPart;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_OldPartSno].Value = repDefect.OldPartSno;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_PartType].Value = repDefect.PartType;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_PIAStation].Value = repDefect.PIAStation;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_ProductRepairID].Value = repDefect.RepairID;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Remark].Value = repDefect.Remark;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Responsibility].Value = repDefect.Responsibility;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_ReturnSign].Value = repDefect.ReturnSign;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Site].Value = repDefect.Site;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_SubDefect].Value = repDefect.SubDefect;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_TrackingStatus].Value = repDefect.TrackingStatus;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Type].Value = repDefect.Type;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Udt].Value = cmDt;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Uncover].Value = repDefect.Uncover;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_VendorCT].Value = repDefect.VendorCT;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_VersionA].Value = repDefect.VersionA;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_VersionB].Value = repDefect.VersionB;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_MTAID].Value = repDefect.MTAID;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Location].Value = repDefect.Location;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_returnStn].Value = repDefect.ReturnStation;
                repDefect.ID = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistInsertQCStatuses(ProductQCStatus pdqcs)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.QCStatus));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.QCStatus.fn_Cdt].Value = cmDt;
                //sqlCtx.Params[_Schema.QCStatus.fn_CustSN].Value = pdqcs.CustSN;
                //sqlCtx.Params[_Schema.QCStatus.fn_Date].Value = pdqcs.Date;
                sqlCtx.Params[_Schema.QCStatus.fn_Editor].Value = pdqcs.Editor;
                //sqlCtx.Params[_Schema.QCStatus.fn_ID].Value = pdqcs.ID;
                sqlCtx.Params[_Schema.QCStatus.fn_Model].Value = pdqcs.Model;
                sqlCtx.Params[_Schema.QCStatus.fn_Line].Value = pdqcs.Line;
                sqlCtx.Params[_Schema.QCStatus.fn_ProductID].Value = pdqcs.ProductID;
                sqlCtx.Params[_Schema.QCStatus.fn_Status].Value = pdqcs.Status;
                sqlCtx.Params[_Schema.QCStatus.fn_Tp].Value = pdqcs.Type;
                sqlCtx.Params[_Schema.QCStatus.fn_Udt].Value = cmDt;
                sqlCtx.Params[_Schema.QCStatus.fn_remark].Value = pdqcs.Remark;
                pdqcs.ID = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistInsertProductPart(ProductPart prdctpt)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product_Part));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Product_Part.fn_cdt].Value = cmDt;
                sqlCtx.Params[_Schema.Product_Part.fn_editor].Value = prdctpt.Editor;
                //sqlCtx.Params[_Schema.Product_Part.fn_id].Value = prdctpt.ID;
                sqlCtx.Params[_Schema.Product_Part.fn_partNo].Value = prdctpt.PartID;
                sqlCtx.Params[_Schema.Product_Part.fn_productID].Value = prdctpt.ProductID;
                sqlCtx.Params[_Schema.Product_Part.fn_station].Value = prdctpt.Station;
                sqlCtx.Params[_Schema.Product_Part.fn_udt].Value = cmDt;
                sqlCtx.Params[_Schema.Product_Part.fn_custmerPn].Value = prdctpt.CustomerPn;
                sqlCtx.Params[_Schema.Product_Part.fn_partSn].Value = prdctpt.PartSn;
                sqlCtx.Params[_Schema.Product_Part.fn_partType].Value = prdctpt.PartType;
                sqlCtx.Params[_Schema.Product_Part.fn_iecpn].Value = prdctpt.Iecpn;
                sqlCtx.Params[_Schema.Product_Part.fn_bomNodeType].Value = prdctpt.BomNodeType;
                sqlCtx.Params[_Schema.Product_Part.fn_checkItemType].Value = prdctpt.CheckItemType;

                prdctpt.ID = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistInsertTestLog(TestLog testLog)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductTestLog));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ProductTestLog.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.ProductTestLog.fn_Editor].Value = testLog.Editor;
                sqlCtx.Params[_Schema.ProductTestLog.fn_FixtureID].Value = testLog.FixtureId;
                //sqlCtx.Params[_Schema.ProductTestLog.fn_ID].Value = testLog.ID;
                sqlCtx.Params[_Schema.ProductTestLog.fn_Line].Value = testLog.Line;
                sqlCtx.Params[_Schema.ProductTestLog.fn_ProductID].Value = testLog.Sn;
                sqlCtx.Params[_Schema.ProductTestLog.fn_Station].Value = testLog.Station;
                sqlCtx.Params[_Schema.ProductTestLog.fn_Status].Value = Convert.ToInt32(testLog.Status);
                sqlCtx.Params[_Schema.ProductTestLog.fn_Type].Value = testLog.Type;
                sqlCtx.Params[_Schema.ProductTestLog.fn_ActionName].Value = testLog.ActionName;
                sqlCtx.Params[_Schema.ProductTestLog.fn_Descr].Value = testLog.Descr;
                sqlCtx.Params[_Schema.ProductTestLog.fn_ErrorCode].Value = testLog.ErrorCode;
                testLog.ID = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistInsertTestLogBack(TestLog testLog)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetCommonInsert<_Metas.ProductTestLogBack>(tk);
                    }
                }
                sqlCtx.Param(_Metas.ProductTestLogBack.fn_id).Value = testLog.ID;
                sqlCtx.Param(_Metas.ProductTestLogBack.fn_line).Value = testLog.Line;
                sqlCtx.Param(_Metas.ProductTestLogBack.fn_productID).Value = testLog.Sn;
                sqlCtx.Param(_Metas.ProductTestLogBack.fn_station).Value = testLog.Station;
                sqlCtx.Param(_Metas.ProductTestLogBack.fn_status).Value = Convert.ToInt32(testLog.Status);
                sqlCtx.Param(_Metas.ProductTestLogBack.fn_type).Value = testLog.Type;

                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(_Metas.ProductTestLogBack.fn_cdt).Value = cmDt;
                //sqlCtx.Param(_Metas.ProductTestLogBack.fn_udt).Value = cmDt;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void PersistInsertProductLog(string productID, IMES.FisObject.FA.Product.ProductLog prdctLog)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductLog));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ProductLog.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.ProductLog.fn_Editor].Value = prdctLog.Editor;
                //sqlCtx.Params[_Schema.ProductLog.fn_ID].Value = ;
                sqlCtx.Params[_Schema.ProductLog.fn_Line].Value = prdctLog.Line;
                sqlCtx.Params[_Schema.ProductLog.fn_Model].Value = prdctLog.Model;
                sqlCtx.Params[_Schema.ProductLog.fn_ProductID].Value = prdctLog.ProductID = productID;
                sqlCtx.Params[_Schema.ProductLog.fn_Station].Value = prdctLog.Station;
                sqlCtx.Params[_Schema.ProductLog.fn_Status].Value = Convert.ToInt32(prdctLog.Status);
                prdctLog.Id = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistInsertTestLogDefect(TestLogDefect testLogDfcti)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductTestLog_DefectInfo));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ProductTestLog_DefectInfo.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.ProductTestLog_DefectInfo.fn_DefectCodeID].Value = testLogDfcti.DefectCode;
                sqlCtx.Params[_Schema.ProductTestLog_DefectInfo.fn_Editor].Value = testLogDfcti.Editor;
                //sqlCtx.Params[_Schema.ProductTestLog_DefectInfo.fn_ID].Value = testLogDfcti.ID;
                sqlCtx.Params[_Schema.ProductTestLog_DefectInfo.fn_ProductTestLogID].Value = testLogDfcti.TestLogID;
                testLogDfcti.ID = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistInsertTestLogDefectBack(TestLogDefect testLogDfcti)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetCommonInsert<_Metas.ProductTestLogBack_DefectInfo>(tk);
                    }
                }
                sqlCtx.Param(_Metas.ProductTestLogBack_DefectInfo.fn_defectCodeID).Value = testLogDfcti.DefectCode;
                sqlCtx.Param(_Metas.ProductTestLogBack_DefectInfo.fn_id).Value = testLogDfcti.ID;
                sqlCtx.Param(_Metas.ProductTestLogBack_DefectInfo.fn_productTestLogBackID).Value = testLogDfcti.TestLogID;
                sqlCtx.Param(_Metas.ProductTestLogBack_DefectInfo.fn_triggerAlarm).Value = false;
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(_Metas.ProductTestLogBack_DefectInfo.fn_cdt).Value = cmDt;
                //sqlCtx.Param(_Metas.ProductTestLogBack_DefectInfo.fn_udt).Value = cmDt;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void PersistInsertProductChangeLog(ProductChangeLog chngLog)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ChangeLog));
                    }
                }
                // 2010-05-31 Liu Dong(eB1-4)         Modify ChangeLog的Cdt可以由上面传下来.
                DateTime cmDt = DateTime.MinValue;
                if (chngLog.Cdt != DateTime.MinValue)
                    cmDt = chngLog.Cdt;
                else
                    cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ChangeLog.fn_Cdt].Value = cmDt;
                // 2010-05-31 Liu Dong(eB1-4)         Modify ChangeLog的Cdt可以由上面传下来.
                sqlCtx.Params[_Schema.ChangeLog.fn_Editor].Value = chngLog.Editor;
                //sqlCtx.Params[_Schema.ChangeLog.fn_ID].Value;
                sqlCtx.Params[_Schema.ChangeLog.fn_Mo].Value = chngLog.Mo;
                sqlCtx.Params[_Schema.ChangeLog.fn_ProductID].Value = chngLog.ProductID;
                sqlCtx.Params[_Schema.ChangeLog.fn_Station].Value = chngLog.Station;
                chngLog.ID = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistInsertProductInfo(IMES.FisObject.FA.Product.ProductInfo item)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductInfo));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ProductInfo.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.ProductInfo.fn_Editor].Value = item.Editor;
                sqlCtx.Params[_Schema.ProductInfo.fn_InfoType].Value = item.InfoType;
                sqlCtx.Params[_Schema.ProductInfo.fn_InfoValue].Value = item.InfoValue;
                sqlCtx.Params[_Schema.ProductInfo.fn_ProductID].Value = item.ProductID;
                sqlCtx.Params[_Schema.ProductInfo.fn_Udt].Value = cmDt;
                item.ID = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void PersistInsertProductAttribute(ProductAttribute item)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductAttr));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ProductAttr.fn_AttrName].Value = item.AttributeName;
                sqlCtx.Params[_Schema.ProductAttr.fn_AttrValue].Value = item.AttributeValue;
                sqlCtx.Params[_Schema.ProductAttr.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.ProductAttr.fn_Editor].Value = item.Editor;
                sqlCtx.Params[_Schema.ProductAttr.fn_ProductID].Value = item.ProductId;
                sqlCtx.Params[_Schema.ProductAttr.fn_Udt].Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void PersistInsertProductAttributeLog(ProductAttributeLog item)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductAttrLog));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ProductAttrLog.fn_AttrName].Value = item.AttributeName;
                sqlCtx.Params[_Schema.ProductAttrLog.fn_AttrNewValue].Value = item.NewValue;
                sqlCtx.Params[_Schema.ProductAttrLog.fn_AttrOldValue].Value = item.OldValue;
                sqlCtx.Params[_Schema.ProductAttrLog.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.ProductAttrLog.fn_Descr].Value = item.Descr;
                sqlCtx.Params[_Schema.ProductAttrLog.fn_Editor].Value = item.Editor;
                sqlCtx.Params[_Schema.ProductAttrLog.fn_Model].Value = item.Model;
                sqlCtx.Params[_Schema.ProductAttrLog.fn_ProductID].Value = item.ProductId;
                sqlCtx.Params[_Schema.ProductAttrLog.fn_Station].Value = item.Station;
                item.ID = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                throw;
            }
        }

        #endregion

        #region . updates .

        private void CheckAndUpdateSubs(IProduct item, StateTracker tracker)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                IList<Repair> lstRep = (IList<Repair>)item.GetType().GetField("_repairs", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                if (lstRep != null && lstRep.Count > 0)//(item.Repairs.Count > 0)
                {
                    foreach (Repair repi in lstRep)//item.Repairs)
                    {
                        if (tracker.GetState(repi) == DataRowState.Modified)
                        {
                            this.PersistUpdateRepair(repi);

                            IList<RepairDefect> lstRepDfct = (IList<RepairDefect>)repi.GetType().GetField("_defects", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(repi);
                            if (lstRepDfct != null && lstRepDfct.Count > 0)//(repi.Defects != null && repi.Defects.Count > 0)
                            {
                                IList<RepairDefect> iLstToDel = new List<RepairDefect>();
                                foreach (RepairDefect repDfcti in lstRepDfct)//repi.Defects)
                                {
                                    if (tracker.GetState(repDfcti) == DataRowState.Modified)
                                    {
                                        this.PersistUpdateRepairDefect(repDfcti);
                                    }
                                    else if (tracker.GetState(repDfcti) == DataRowState.Added)
                                    {
                                        repDfcti.RepairID = repi.ID;
                                        this.PersistInsertRepairDefect(repDfcti);
                                    }
                                    else if (tracker.GetState(repDfcti) == DataRowState.Deleted)
                                    {
                                        this.PersistDeleteRepairDefect(repDfcti);
                                        iLstToDel.Add(repDfcti);
                                    }
                                }
                                foreach (RepairDefect rdfct in iLstToDel)
                                {
                                    lstRepDfct.Remove(rdfct);
                                }
                            }
                        }
                    }
                }

                //persist ProductInfo
                IList<IMES.FisObject.FA.Product.ProductInfo> lstProdInfo = (IList<IMES.FisObject.FA.Product.ProductInfo>)item.GetType().GetField("_infoes", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                if (lstProdInfo != null && lstProdInfo.Count > 0)
                {
                    foreach (IMES.FisObject.FA.Product.ProductInfo prodii in lstProdInfo)
                    {
                        if (tracker.GetState(prodii) == DataRowState.Modified)
                        {
                            this.PersistUpdateProductInfo(prodii);
                        }
                    }
                }

                //persist QCStatus
                IList<ProductQCStatus> lstQCstts = (IList<ProductQCStatus>)item.GetType().GetField("_qcStatus", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                if (lstQCstts != null && lstQCstts.Count > 0)//(item.QCStatus.Count > 0)
                {
                    foreach (ProductQCStatus pdqcs in lstQCstts)//item.QCStatus)
                    {
                        if (tracker.GetState(pdqcs) == DataRowState.Modified)
                        {
                            this.PersistUpdateProductQCStatus(pdqcs);
                        }
                    }
                }

                //persist ProductPart
                IList<IProductPart> lstParts = (IList<IProductPart>)item.GetType().GetField("_parts", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                if (lstParts != null && lstParts.Count > 0)//(item.ProductParts.Count > 0)
                {
                    IList<IProductPart> iLstToDel = new List<IProductPart>();
                    foreach (ProductPart prdctpt in lstParts)//item.ProductParts)
                    {
                        if (tracker.GetState(prdctpt) == DataRowState.Modified)
                        {
                            this.PersistUpdateProductPart(prdctpt);
                        }
                        else if (tracker.GetState(prdctpt) == DataRowState.Deleted)
                        {
                            this.PersistDeleteProductPart(prdctpt);
                            iLstToDel.Add(prdctpt);
                        }
                    }
                    foreach (IProductPart prdprt in iLstToDel)
                    {
                        lstParts.Remove(prdprt);
                    }
                }

                //persist TestLog
                IList<TestLog> lstTstLg = (IList<TestLog>)item.GetType().GetField("_testLogs", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                if (lstTstLg != null && lstTstLg.Count > 0)//(item.TestLog.Count > 0)
                {
                    foreach (TestLog testLog in lstTstLg)//item.TestLog)
                    {
                        if (tracker.GetState(testLog) == DataRowState.Modified)
                        {
                            this.PersistUpdateTestLog(testLog);
                            //Disable Code 0001304: [kernel]停止複製Alarm 使用的Table(Repair/TestLog)
                            //this.PersistUpdateTestLogBack(testLog);

                            IList<TestLogDefect> lstTstLgDfct = (IList<TestLogDefect>)testLog.GetType().GetField("_defects", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(testLog);
                            if (lstTstLgDfct != null && lstTstLgDfct.Count > 0)//(testLog.Defects != null && testLog.Defects.Count > 0)
                            {
                                IList<TestLogDefect> iLstToDel = new List<TestLogDefect>();
                                foreach (TestLogDefect testLogDfcti in lstTstLgDfct)//testLog.Defects)
                                {
                                    if (tracker.GetState(testLogDfcti) == DataRowState.Modified)
                                    {
                                        this.PersistUpdateTestLogDefect(testLogDfcti);
                                        //Disable Code 0001304: [kernel]停止複製Alarm 使用的Table(Repair/TestLog)
                                       // this.PersistUpdateTestLogDefectBack(testLogDfcti);
                                    }
                                    else if (tracker.GetState(testLogDfcti) == DataRowState.Added)
                                    {
                                        testLogDfcti.TestLogID = testLog.ID;
                                        this.PersistInsertTestLogDefect(testLogDfcti);
                                        //Disable Code 0001304: [kernel]停止複製Alarm 使用的Table(Repair/TestLog)
                                        //this.PersistInsertTestLogDefectBack(testLogDfcti);
                                    }
                                    else if (tracker.GetState(testLogDfcti) == DataRowState.Deleted)
                                    {
                                        this.PersistDeleteTestLogDefect(testLogDfcti);
                                        //Disable Code 0001304: [kernel]停止複製Alarm 使用的Table(Repair/TestLog)
                                        //this.PersistDeleteTestLogDefectBack(testLogDfcti);
                                        iLstToDel.Add(testLogDfcti);
                                    }
                                }
                                foreach (TestLogDefect tld in iLstToDel)
                                {
                                    lstTstLgDfct.Remove(tld);
                                }
                            }
                        }
                    }
                }

                //persist ProductAttr
                IList<IMES.FisObject.FA.Product.ProductAttribute> lstProdAttr = (IList<IMES.FisObject.FA.Product.ProductAttribute>)item.GetType().GetField("_attributes", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                if (lstProdAttr != null && lstProdAttr.Count > 0)
                {
                    foreach (IMES.FisObject.FA.Product.ProductAttribute proda in lstProdAttr)
                    {
                        if (tracker.GetState(proda) == DataRowState.Modified)
                        {
                            this.PersistUpdateProductAttribute(proda);
                        }
                    }
                }

                //persist ProductAttrLog
                IList<IMES.FisObject.FA.Product.ProductAttributeLog> lstProdAttrLg = (IList<IMES.FisObject.FA.Product.ProductAttributeLog>)item.GetType().GetField("_attributeLogs", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(item);
                if (lstProdAttrLg != null && lstProdAttrLg.Count > 0)
                {
                    foreach (IMES.FisObject.FA.Product.ProductAttributeLog prodal in lstProdAttrLg)
                    {
                        if (tracker.GetState(prodal) == DataRowState.Modified)
                        {
                            this.PersistUpdateProductAttributeLog(prodal);
                        }
                    }
                }
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistUpdateProductStatus(string productID, IMES.FisObject.FA.Product.ProductStatus prdctStatus)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductStatus));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ProductStatus.fn_Editor].Value = prdctStatus.Editor;
                sqlCtx.Params[_Schema.ProductStatus.fn_Line].Value = prdctStatus.Line;
                sqlCtx.Params[_Schema.ProductStatus.fn_ProductID].Value = productID;
                sqlCtx.Params[_Schema.ProductStatus.fn_ReworkCode].Value = prdctStatus.ReworkCode;
                sqlCtx.Params[_Schema.ProductStatus.fn_Station].Value = prdctStatus.StationId;
                sqlCtx.Params[_Schema.ProductStatus.fn_Status].Value = prdctStatus.Status;
                sqlCtx.Params[_Schema.ProductStatus.fn_Udt].Value = cmDt;
                sqlCtx.Params[_Schema.ProductStatus.fn_TestFailCount].Value = prdctStatus.TestFailCount;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistUpdateRepair(Repair rep)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductRepair));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ProductRepair.fn_Editor].Value = rep.Editor;
                sqlCtx.Params[_Schema.ProductRepair.fn_ID].Value = rep.ID;
                sqlCtx.Params[_Schema.ProductRepair.fn_Line].Value = rep.LineID;
                sqlCtx.Params[_Schema.ProductRepair.fn_Model].Value = rep.Model;
                sqlCtx.Params[_Schema.ProductRepair.fn_ProductID].Value = rep.Sn;
                sqlCtx.Params[_Schema.ProductRepair.fn_Station].Value = rep.Station;
                sqlCtx.Params[_Schema.ProductRepair.fn_Status].Value = Convert.ToInt32(rep.Status);
                //sqlCtx.Params[_Schema.ProductRepair.fn_ReturnID].Value = rep.ReturnID;
                sqlCtx.Params[_Schema.ProductRepair.fn_TestLogID].Value = ToInt32WithNull(rep.TestLogID);
                sqlCtx.Params[_Schema.ProductRepair.fn_Type].Value = rep.Type;
                sqlCtx.Params[_Schema.ProductRepair.fn_Udt].Value = cmDt;
                sqlCtx.Params[_Schema.ProductRepair.fn_logID].Value = rep.LogId;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistUpdateRepairDefect(RepairDefect repDefect)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductRepair_DefectInfo));

                        //sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn__4M].ParameterName = _Schema.Func.ClearRectBrace(sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn__4M].ParameterName);
                        //sqlCtx.Params.Add(_Schema.Func.ClearRectBrace(_Schema.ProductRepair_DefectInfo.fn__4M), sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn__4M]);
                        //sqlCtx.Params.Remove(_Schema.ProductRepair_DefectInfo.fn__4M);
                        //sqlCtx.Sentence = sqlCtx.Sentence.Replace("@" + _Schema.ProductRepair_DefectInfo.fn__4M, "@" + _Schema.Func.ClearRectBrace(_Schema.ProductRepair_DefectInfo.fn__4M));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn__4M].Value = repDefect._4M;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Action].Value = repDefect.Action;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Cause].Value = repDefect.Cause;
                //sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Cdt].Value = repDefect.Cdt;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Component].Value = repDefect.Component;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Cover].Value = repDefect.Cover;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_DefectCodeID].Value = repDefect.DefectCodeID;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Distribution].Value = repDefect.Distribution;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Editor].Value = repDefect.Editor;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_ID].Value = repDefect.ID;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_IsManual].Value = Convert.ToInt32(repDefect.IsManual);
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_MajorPart].Value = repDefect.MajorPart;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Manufacture].Value = repDefect.Manufacture;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Mark].Value = repDefect.Mark;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_NewPart].Value = repDefect.NewPart;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_NewPartSno].Value = repDefect.NewPartSno;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Obligation].Value = repDefect.Obligation;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_OldPart].Value = repDefect.OldPart;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_OldPartSno].Value = repDefect.OldPartSno;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_PartType].Value = repDefect.PartType;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_PIAStation].Value = repDefect.PIAStation;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_ProductRepairID].Value = repDefect.RepairID;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Remark].Value = repDefect.Remark;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Responsibility].Value = repDefect.Responsibility;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_ReturnSign].Value = repDefect.ReturnSign;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Site].Value = repDefect.Site;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_SubDefect].Value = repDefect.SubDefect;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_TrackingStatus].Value = repDefect.TrackingStatus;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Type].Value = repDefect.Type;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Udt].Value = cmDt;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Uncover].Value = repDefect.Uncover;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_VendorCT].Value = repDefect.VendorCT;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_VersionA].Value = repDefect.VersionA;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_VersionB].Value = repDefect.VersionB;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_MTAID].Value = repDefect.MTAID;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_Location].Value = repDefect.Location;
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_returnStn].Value = repDefect.ReturnStation;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistDeleteRepairDefect(RepairDefect repDefect)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductRepair_DefectInfo));
                    }
                }
                sqlCtx.Params[_Schema.ProductRepair_DefectInfo.fn_ID].Value = repDefect.ID;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistUpdateProductQCStatus(ProductQCStatus pdqcs)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.QCStatus));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                //sqlCtx.Params[_Schema.QCStatus.fn_CustSN].Value = pdqcs.CustSN;
                //sqlCtx.Params[_Schema.QCStatus.fn_Date].Value = pdqcs.Date;
                sqlCtx.Params[_Schema.QCStatus.fn_Editor].Value = pdqcs.Editor;
                sqlCtx.Params[_Schema.QCStatus.fn_ID].Value = pdqcs.ID;
                sqlCtx.Params[_Schema.QCStatus.fn_Model].Value = pdqcs.Model;
                sqlCtx.Params[_Schema.QCStatus.fn_Line].Value = pdqcs.Line;
                sqlCtx.Params[_Schema.QCStatus.fn_ProductID].Value = pdqcs.ProductID;
                sqlCtx.Params[_Schema.QCStatus.fn_Status].Value = pdqcs.Status;
                sqlCtx.Params[_Schema.QCStatus.fn_Tp].Value = pdqcs.Type;
                sqlCtx.Params[_Schema.QCStatus.fn_Udt].Value = cmDt;
                sqlCtx.Params[_Schema.QCStatus.fn_remark].Value = pdqcs.Remark;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistUpdateProductPart(ProductPart prdctpt)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product_Part));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Product_Part.fn_editor].Value = prdctpt.Editor;
                sqlCtx.Params[_Schema.Product_Part.fn_id].Value = prdctpt.ID;
                sqlCtx.Params[_Schema.Product_Part.fn_partNo].Value = prdctpt.PartID;
                sqlCtx.Params[_Schema.Product_Part.fn_productID].Value = prdctpt.ProductID;
                sqlCtx.Params[_Schema.Product_Part.fn_station].Value = prdctpt.Station;
                sqlCtx.Params[_Schema.Product_Part.fn_udt].Value = cmDt;
                sqlCtx.Params[_Schema.Product_Part.fn_partSn].Value = prdctpt.PartSn;
                sqlCtx.Params[_Schema.Product_Part.fn_iecpn].Value = prdctpt.Iecpn;
                sqlCtx.Params[_Schema.Product_Part.fn_custmerPn].Value = prdctpt.CustomerPn;
                sqlCtx.Params[_Schema.Product_Part.fn_partType].Value = prdctpt.PartType;
                sqlCtx.Params[_Schema.Product_Part.fn_station].Value = prdctpt.Station;
                sqlCtx.Params[_Schema.Product_Part.fn_bomNodeType].Value = prdctpt.BomNodeType;
                sqlCtx.Params[_Schema.Product_Part.fn_checkItemType].Value = prdctpt.CheckItemType;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistDeleteProductPart(ProductPart prdctpt)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product_Part));
                    }
                }
                sqlCtx.Params[_Schema.Product_Part.fn_id].Value = prdctpt.ID;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void PersistUpdateTestLog(TestLog testLog)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductTestLog));
                    }
                }
                //DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ProductTestLog.fn_Editor].Value = testLog.Editor;
                sqlCtx.Params[_Schema.ProductTestLog.fn_FixtureID].Value = testLog.FixtureId;
                sqlCtx.Params[_Schema.ProductTestLog.fn_ID].Value = testLog.ID;
                sqlCtx.Params[_Schema.ProductTestLog.fn_Line].Value = testLog.Line;
                sqlCtx.Params[_Schema.ProductTestLog.fn_ProductID].Value = testLog.Sn;
                sqlCtx.Params[_Schema.ProductTestLog.fn_Station].Value = testLog.Station;
                sqlCtx.Params[_Schema.ProductTestLog.fn_Status].Value = Convert.ToInt32(testLog.Status);
                sqlCtx.Params[_Schema.ProductTestLog.fn_Type].Value = testLog.Type;
                sqlCtx.Params[_Schema.ProductTestLog.fn_ActionName].Value = testLog.ActionName;
                sqlCtx.Params[_Schema.ProductTestLog.fn_Descr].Value = testLog.Descr;
                sqlCtx.Params[_Schema.ProductTestLog.fn_ErrorCode].Value = testLog.ErrorCode;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistUpdateTestLogBack(TestLog testLog)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetCommonUpdate<_Metas.ProductTestLogBack>(tk);
                    }
                }
                sqlCtx.Param(_Metas.ProductTestLogBack.fn_line).Value = testLog.Line;
                sqlCtx.Param(_Metas.ProductTestLogBack.fn_productID).Value = testLog.Sn;
                sqlCtx.Param(_Metas.ProductTestLogBack.fn_station).Value = testLog.Station;
                sqlCtx.Param(_Metas.ProductTestLogBack.fn_status).Value = Convert.ToInt32(testLog.Status);
                sqlCtx.Param(_Metas.ProductTestLogBack.fn_type).Value = testLog.Type;
                sqlCtx.Param(_Metas.ProductTestLogBack.fn_id).Value = testLog.ID;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void PersistUpdateTestLogDefect(TestLogDefect testLogDfcti)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductTestLog_DefectInfo));
                    }
                }
                //DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ProductTestLog_DefectInfo.fn_DefectCodeID].Value = testLogDfcti.DefectCode;
                sqlCtx.Params[_Schema.ProductTestLog_DefectInfo.fn_Editor].Value = testLogDfcti.Editor;
                sqlCtx.Params[_Schema.ProductTestLog_DefectInfo.fn_ID].Value = testLogDfcti.ID;
                sqlCtx.Params[_Schema.ProductTestLog_DefectInfo.fn_ProductTestLogID].Value = testLogDfcti.TestLogID;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistUpdateTestLogDefectBack(TestLogDefect testLogDfcti)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        ProductTestLogBack_DefectInfo setv = new ProductTestLogBack_DefectInfo();
                        setv.defectCodeID = "defectCodeID";
                        setv.productTestLogBackID = 88;
                        ProductTestLogBack_DefectInfo cond = new ProductTestLogBack_DefectInfo();
                        cond.id = 88;
                        sqlCtx = FuncNew.GetConditionedUpdate<_Metas.ProductTestLogBack_DefectInfo>(tk, new SetValueCollection<ProductTestLogBack_DefectInfo>(new CommonSetValue<ProductTestLogBack_DefectInfo>(setv)), new ConditionCollection<ProductTestLogBack_DefectInfo>(new EqualCondition<ProductTestLogBack_DefectInfo>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.ProductTestLogBack_DefectInfo.fn_defectCodeID).Value = testLogDfcti.DefectCode;
                sqlCtx.Param(_Metas.ProductTestLogBack_DefectInfo.fn_productTestLogBackID).Value = testLogDfcti.TestLogID;
                sqlCtx.Param(_Metas.ProductTestLogBack_DefectInfo.fn_id).Value = testLogDfcti.ID;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void PersistDeleteTestLogDefect(TestLogDefect testLogDfcti)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductTestLog_DefectInfo));
                    }
                }
                sqlCtx.Params[_Schema.ProductTestLog_DefectInfo.fn_ID].Value = testLogDfcti.ID;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistDeleteTestLogDefectBack(TestLogDefect testLogDfcti)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetCommonDelete<_Metas.ProductTestLogBack_DefectInfo>(tk);
                    }
                }
                sqlCtx.Param(_Metas.ProductTestLogBack_DefectInfo.fn_id).Value = testLogDfcti.ID;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void PersistUpdateProductInfo(IMES.FisObject.FA.Product.ProductInfo item)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductInfo));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ProductInfo.fn_Editor].Value = item.Editor;
                sqlCtx.Params[_Schema.ProductInfo.fn_ID].Value = item.ID;
                sqlCtx.Params[_Schema.ProductInfo.fn_InfoType].Value = item.InfoType;
                sqlCtx.Params[_Schema.ProductInfo.fn_InfoValue].Value = item.InfoValue;
                sqlCtx.Params[_Schema.ProductInfo.fn_ProductID].Value = item.ProductID;
                sqlCtx.Params[_Schema.ProductInfo.fn_Udt].Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        // 2011-04-18 Liu Dong(eB1-4)         Modify ITC-1268-0115 
        public void PersistUpdateProductAttribute(ProductAttribute prdcta)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductAttr cond = new _Schema.ProductAttr();
                        cond.ProductID = prdcta.ProductId;
                        cond.AttrName = prdcta.AttributeName;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductAttr), new List<string>() { _Schema.ProductAttr.fn_AttrValue, _Schema.ProductAttr.fn_Editor}, null, null,null, cond, null,null,null,null,null,null,null);
                    }
                }
                 sqlCtx.Params[_Schema.ProductAttr.fn_AttrName].Value = prdcta.AttributeName;
                sqlCtx.Params[_Schema.ProductAttr.fn_ProductID].Value = prdcta.ProductId;
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductAttr.fn_AttrValue)].Value = prdcta.AttributeValue;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductAttr.fn_Editor)].Value = prdcta.Editor;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductAttr.fn_Udt)].Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void PersistUpdateProductAttributeLog(ProductAttributeLog prdctal)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductAttrLog));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.ProductAttrLog.fn_AttrName].Value = prdctal.AttributeName;
                sqlCtx.Params[_Schema.ProductAttrLog.fn_AttrNewValue].Value = prdctal.NewValue;
                sqlCtx.Params[_Schema.ProductAttrLog.fn_AttrOldValue].Value = prdctal.OldValue;
                sqlCtx.Params[_Schema.ProductAttrLog.fn_Descr].Value = prdctal.Descr;
                sqlCtx.Params[_Schema.ProductAttrLog.fn_Editor].Value = prdctal.Editor;
                sqlCtx.Params[_Schema.ProductAttrLog.fn_ID].Value = prdctal.ID;
                sqlCtx.Params[_Schema.ProductAttrLog.fn_Model].Value = prdctal.Model;
                sqlCtx.Params[_Schema.ProductAttrLog.fn_ProductID].Value = prdctal.ProductId;
                sqlCtx.Params[_Schema.ProductAttrLog.fn_Station].Value = prdctal.Station;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        #endregion

        public IList<string> GetProdIDListByMO(string MOId)
        {
            try
            {
                IList<string> ret = new List<string>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.MO = MOId;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), cond, null, null);
                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, _Schema.Product.fn_ProductID);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_MO].Value = MOId;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        string prodId = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]);
                        ret.Add(prodId);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private string CutOutSeq(string orig, out string preStr, int length)
        {
            string ret = string.Empty;
            preStr = orig.Substring(0, orig.Length - length);
            ret = orig.Substring(orig.Length - length);
            return ret;
        }

        #endregion

        #region . Defered  .

        public void SetMaxProductIdDefered(IUnitOfWork uow, string smtMO, IProduct product)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), smtMO, product);
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        public void UpdateProductListStatusDefered(IUnitOfWork uow, IMES.FisObject.FA.Product.ProductStatus status, IList<string> productIDList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), status, productIDList);
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        public void BindDNDefered(IUnitOfWork uow, string dn, IList<string> productIDList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dn, productIDList);
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        public InvokeBody BindDNDefered(IUnitOfWork uow, string dn, IList<string> productIDList, int dnQty)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                return AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dn, productIDList, dnQty);
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        public InvokeBody CheckResultOfBindDN_OnTransDefered(IUnitOfWork uow, InvokeBody isThrow, string dn, int dnQty)
        {
            return AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), isThrow, dn, dnQty);
        }

        public void BindPalletDefered(IUnitOfWork uow, string pallet, IList<string> productIDList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), pallet, productIDList);
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        public void BindCartonDefered(IUnitOfWork uow, string cartonSN, IList<string> productIDList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), cartonSN, productIDList);
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        public void WriteProductListLogDefered(IUnitOfWork uow, IList<IMES.FisObject.FA.Product.ProductLog> newLogs)// IList<string> ProductIDList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), newLogs);//, ProductIDList);
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        public void BindKittingDefered(IUnitOfWork uow, string mo, string proid, string boxid, string pdline)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), mo, proid, boxid, pdline);
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        public void UpdateCartonWeightByCartonDefered(IUnitOfWork uow, string cartonSN, decimal cartonWeight)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), cartonSN, cartonWeight);
        }

        public void UpdateProductStatusByCartonDefered(IUnitOfWork uow, string cartonSN, IMES.FisObject.FA.Product.ProductStatus newStatus)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), cartonSN, newStatus);
        }

        public void WriteProductLogByCartonDefered(IUnitOfWork uow, string cartonSN, IMES.FisObject.FA.Product.ProductLog newLog)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), cartonSN, newLog);
        }

        public void WriteProductLogByDeliveryNoDefered(IUnitOfWork uow, string dn, IMES.FisObject.FA.Product.ProductLog newLog)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dn, newLog);
        }

        public void CopyProductToReworkDefered(IUnitOfWork uow, string productId, string reworkCode)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, reworkCode);
        }

        public void RemoveProductInfosByTypeDefered(IUnitOfWork uow, string proid, IList<string> itemTypes)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), proid, itemTypes);
        }

        public void RemoveProductPartsByPnAndTypeDefered(IUnitOfWork uow, string proid, string customer, IList<string> partTypes)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), proid, customer, partTypes);
        }

        public void ClearFieldsOfProductByIdDefered(IUnitOfWork uow, string proid, IList<string> fieldNames)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), proid, fieldNames);
        }

        public void AddBorrowLogDefered(IUnitOfWork uow, IMES.DataModel.BorrowLog item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void UpdateBorrowLogDefered(IUnitOfWork uow, IMES.DataModel.BorrowLog item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void CartonUnpackDefered(IUnitOfWork uow, string cartonSN)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), cartonSN);
        }

        public void SaveSmallPartsUploadInfoDefered(IUnitOfWork uow, IList<IMES.DataModel.SMALLPartsUploadInfo> list)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), list);
        }

        public void UpdateReworkConsideredProductStatusDefered(IUnitOfWork uow, IMES.DataModel.Rework rework, string productID)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), rework, productID);
        }

        public void UpdateBoxerBookDataDefered(IUnitOfWork uow, string pltNo, string custSN)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), pltNo, custSN);
        }

        public void DeleteProductPartByPartTypeDefered(IUnitOfWork uow, string productID, IList<string> partTypeList)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productID, partTypeList);
        }

        public void UpdateProductListReworkDefered(IUnitOfWork uow, IMES.FisObject.FA.Product.ProductStatus newStatus, IList<string> productIDList, string cartonSN)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), newStatus, productIDList, cartonSN);
        }

        public void UpdateTestBoxDataLogDefered(IUnitOfWork uow, string pltno, string custSN)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), pltno, custSN);
        }

        #endregion

        #region For Maintain

        public IProduct GetProductByIdOrSn(string productIdOrSN)
        {
            try
            {
                IProduct ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.ProductID = productIdOrSN;
                        cond.CUSTSN = productIdOrSN;
                        sqlCtx = _Schema.Func.GetConditionedSelectExtOr(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), cond, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_ProductID].Value = productIdOrSN;
                sqlCtx.Params[_Schema.Product.fn_CUSTSN].Value = productIdOrSN;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = new IMES.FisObject.FA.Product.Product(GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]));
                        //ret.BIOS = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BIOS]);
                        ret.CartonSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonSN]);
                        ret.CartonWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonWeight]);
                        //ret.COAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_COAID]);
                        ret.CUSTSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                        //ret.CUSTVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.DeliveryNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_DeliveryNo]);
                        ret.ECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ECR]);
                        //ret.ICCID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ICCID]);
                        //ret.IMEI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMEI]);
                        //ret.IMGVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMGVER]);
                        ret.MAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MAC]);
                        ret.MBECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MBECR]);
                        //ret.MEID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MEID]);
                        ret.MO = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MO]);
                        ret.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Model]);
                        ret.PalletNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PalletNo]);
                        ret.PCBID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBID]);
                        ret.PCBModel = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBModel]);
                        ret.PizzaID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PizzaID]);
                        ret.UnitWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UnitWeight]);
                        ret.UUID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UUID]);
                        //ret.WMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_WMAC]);
                        //ret.HDVD = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_HDVD]);
                        //ret.BLMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BLMAC]);
                        //ret.TVTuner = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_TVTuner]);
                        ret.CVSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        ret.State = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_state]);
                        ret.PRSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_prsn]);
                        ret.OOAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ooaid]);
                        ret.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Udt]);
                        ret.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Cdt]);
                        ((IMES.FisObject.FA.Product.Product)ret).Tracker.Clear();
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProduct> GetProductListByByUserKey(string userKey)
        {
            try
            {
                IList<IProduct> ret = new List<IProduct>();

                _Schema.SQLContext sqlCtx = null;
                _Schema.TableAndFields tf1 = null;
                _Schema.TableAndFields tf2 = null;
                _Schema.TableAndFields tf3 = null;
                _Schema.TableAndFields[] tblAndFldsesArray = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
                    {
                        tf1 = new _Schema.TableAndFields();
                        tf1.Table = typeof(_Schema.TempProductID);
                        _Schema.TempProductID cond = new _Schema.TempProductID();
                        cond.UserKey = userKey;
                        tf1.equalcond = cond;
                        tf1.ToGetFieldNames = null;

                        tf2 = new _Schema.TableAndFields();
                        tf2.Table = typeof(_Schema.Product);

                        tf3 = new _Schema.TableAndFields();
                        tf3.Table = typeof(_Schema.ProductStatus);

                        List<_Schema.TableConnectionItem> tblCnntIs = new List<_Schema.TableConnectionItem>();
                        _Schema.TableConnectionItem tc1 = new _Schema.TableConnectionItem(tf1, _Schema.TempProductID.fn_ProductID, tf2, _Schema.Product.fn_ProductID);
                        tblCnntIs.Add(tc1);
                        _Schema.TableConnectionItem tc2 = new _Schema.TableConnectionItem(tf1, _Schema.TempProductID.fn_ProductID, tf2, _Schema.Product.fn_CUSTSN);
                        tc2.AndOrOr = false;
                        tblCnntIs.Add(tc2);
                        _Schema.TableConnectionItem tc3 = new _Schema.TableConnectionItem(tf2, _Schema.Product.fn_ProductID, tf3, _Schema.ProductStatus.fn_ProductID);
                        tblCnntIs.Add(tc3);

                        _Schema.TableConnectionCollection tblCnnts = new _Schema.TableConnectionCollection(tblCnntIs.ToArray());

                        tblAndFldsesArray = new _Schema.TableAndFields[] { tf1, tf2, tf3 };

                        _Schema.TableBiJoinedLogic tblBiJndLgc = new _Schema.TableBiJoinedLogic();
                        tblBiJndLgc.Add(tf1);
                        tblBiJndLgc.Add(_Schema.Func.JOIN);
                        tblBiJndLgc.Add(tf2);
                        tblBiJndLgc.Add(tc1);
                        tblBiJndLgc.Add(tc2);
                        tblBiJndLgc.Add(_Schema.Func.JOIN);
                        tblBiJndLgc.Add(tf3);
                        tblBiJndLgc.Add(tc3);

                        sqlCtx = _Schema.Func.GetConditionedComprehensiveJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken, "DISTINCT", ref tblAndFldsesArray, tblCnnts, tblBiJndLgc);

                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, _Schema.Func.DecAliasInner(tf2.alias, _Schema.Product.fn_ProductID));
                    }
                }
                tf1 = tblAndFldsesArray[0];
                tf2 = tblAndFldsesArray[1];
                tf3 = tblAndFldsesArray[2];

                sqlCtx.Params[_Schema.Func.DecAlias(tf1.alias, _Schema.TempProductID.fn_UserKey)].Value = userKey;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    FieldInfo fi = typeof(IMES.FisObject.FA.Product.Product).GetField("_status", BindingFlags.NonPublic | BindingFlags.Instance);

                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.FisObject.FA.Product.Product item = new IMES.FisObject.FA.Product.Product(GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_ProductID)]));
                        //item.BIOS = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_BIOS)]);
                        item.CartonSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_CartonSN)]);
                        item.CartonWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_CartonWeight)]);
                        //item.COAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_COAID)]);
                        item.CUSTSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_CUSTSN)]);
                        //item.CUSTVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_CVSN)]);
                        item.DeliveryNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_DeliveryNo)]);
                        item.ECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_ECR)]);
                        //item.ICCID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_ICCID)]);
                        //item.IMEI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_IMEI)]);
                        //item.IMGVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_IMGVER)]);
                        item.MAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_MAC)]);
                        item.MBECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_MBECR)]);
                        //item.MEID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_MEID)]);
                        item.MO = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_MO)]);
                        item.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_Model)]);
                        item.PalletNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_PalletNo)]);
                        item.PCBID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_PCBID)]);
                        item.PCBModel = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_PCBModel)]);
                        item.PizzaID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_PizzaID)]);
                        item.UnitWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_UnitWeight)]);
                        item.UUID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_UUID)]);
                        //item.WMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_WMAC)]);
                        //item.HDVD = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_HDVD)]);
                        //item.BLMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_BLMAC)]);
                        //item.TVTuner = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_TVTuner)]);
                        item.CVSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_CVSN)]);
                        item.State = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_state)]);
                        item.PRSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_prsn)]);
                        item.OOAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_ooaid)]);
                        item.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_Udt)]);
                        item.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Product.fn_Cdt)]);
                        item.Tracker.Clear();
                        ret.Add(item);

                        IMES.FisObject.FA.Product.ProductStatus newFieldVal = new IMES.FisObject.FA.Product.ProductStatus();
                        newFieldVal.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf3.alias, _Schema.ProductStatus.fn_Cdt)]);
                        newFieldVal.Editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf3.alias, _Schema.ProductStatus.fn_Editor)]);
                        newFieldVal.Line = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf3.alias, _Schema.ProductStatus.fn_Line)]);
                        newFieldVal.ProId = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf3.alias, _Schema.ProductStatus.fn_ProductID)]);
                        newFieldVal.ReworkCode = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf3.alias, _Schema.ProductStatus.fn_ReworkCode)]);
                        newFieldVal.StationId = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf3.alias, _Schema.ProductStatus.fn_Station)]);
                        newFieldVal.Status = (StationStatus)Enum.Parse(typeof(StationStatus), GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf3.alias, _Schema.ProductStatus.fn_Status)]).ToString());
                        newFieldVal.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf3.alias, _Schema.ProductStatus.fn_Udt)]);
                        newFieldVal.TestFailCount = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf3.alias, _Schema.ProductStatus.fn_TestFailCount)]);
                        newFieldVal.Tracker.Clear();
                        newFieldVal.Tracker = item.Tracker;

                        fi.SetValue(item, newFieldVal);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetAllInvalidProductIdByUserKey(string userKey)
        {
            try
            {
                IList<string> ret = new List<string>();

                _Schema.SQLContext sqlCtx = null;
                _Schema.TableAndFields tf1 = null;
                _Schema.TableAndFields tf2 = null;
                _Schema.TableAndFields tf3 = null;
                _Schema.TableAndFields[] tblAndFldsesArray = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
                    {
                        tf1 = new _Schema.TableAndFields();
                        tf1.Table = typeof(_Schema.TempProductID);
                        _Schema.TempProductID cond = new _Schema.TempProductID();
                        cond.UserKey = userKey;
                        tf1.equalcond = cond;
                        tf1.ToGetFieldNames.Add(_Schema.TempProductID.fn_ProductID);

                        tf2 = new _Schema.TableAndFields();
                        tf2.Table = typeof(_Schema.Product);
                        _Schema.Product cond2 = new _Schema.Product();
                        cond2.ProductID = "NULL";
                        tf2.nullcond = cond2;
                        tf2.ToGetFieldNames = null;

                        tf3 = new _Schema.TableAndFields();
                        tf3.Table = typeof(_Schema.Product);
                        _Schema.Product cond3 = new _Schema.Product();
                        cond3.ProductID = "NULL";
                        tf3.nullcond = cond3;
                        tf3.ToGetFieldNames = null;

                        List<_Schema.TableConnectionItem> tblCnntIs = new List<_Schema.TableConnectionItem>();
                        _Schema.TableConnectionItem tc1 = new _Schema.TableConnectionItem(tf1, _Schema.TempProductID.fn_ProductID, tf2, _Schema.Product.fn_ProductID);
                        tblCnntIs.Add(tc1);
                        _Schema.TableConnectionItem tc2 = new _Schema.TableConnectionItem(tf1, _Schema.TempProductID.fn_ProductID, tf3, _Schema.Product.fn_CUSTSN);
                        tblCnntIs.Add(tc2);

                        _Schema.TableConnectionCollection tblCnnts = new _Schema.TableConnectionCollection(tblCnntIs.ToArray());

                        tblAndFldsesArray = new _Schema.TableAndFields[] { tf1, tf2, tf3 };

                        _Schema.TableBiJoinedLogic tblBiJndLgc = new _Schema.TableBiJoinedLogic();
                        tblBiJndLgc.Add(tf1);
                        tblBiJndLgc.Add(_Schema.Func.LEFTJOIN);
                        tblBiJndLgc.Add(tf2);
                        tblBiJndLgc.Add(tc1);
                        tblBiJndLgc.Add(_Schema.Func.LEFTJOIN);
                        tblBiJndLgc.Add(tf3);
                        tblBiJndLgc.Add(tc2);

                        sqlCtx = _Schema.Func.GetConditionedComprehensiveJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken, "DISTINCT", ref tblAndFldsesArray, tblCnnts, tblBiJndLgc);

                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, _Schema.Func.DecAliasInner(tf1.alias, _Schema.TempProductID.fn_ProductID));
                    }
                }
                tf1 = tblAndFldsesArray[0];
                tf2 = tblAndFldsesArray[1];
                tf3 = tblAndFldsesArray[2];

                sqlCtx.Params[_Schema.Func.DecAlias(tf1.alias, _Schema.TempProductID.fn_UserKey)].Value = userKey;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        string item = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.TempProductID.fn_ProductID)]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetUnitExistsCountByUserKey(string userKey)
        {
            try
            {
                int ret = 0;

                _Schema.SQLContext sqlCtx = null;
                _Schema.TableAndFields tf1 = null;
                _Schema.TableAndFields tf2 = null;
                _Schema.TableAndFields tf3 = null;
                _Schema.TableAndFields[] tblAndFldsesArray = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
                    {
                        tf1 = new _Schema.TableAndFields();
                        tf1.Table = typeof(_Schema.TempProductID);
                        _Schema.TempProductID cond = new _Schema.TempProductID();
                        cond.UserKey = userKey;
                        tf1.equalcond = cond;
                        tf1.ToGetFieldNames.Add(_Schema.TempProductID.fn_ProductID);

                        tf2 = new _Schema.TableAndFields();
                        tf2.Table = typeof(_Schema.ProductStatus);
                        tf2.ToGetFieldNames = null;

                        tf3 = new _Schema.TableAndFields();
                        tf3.Table = typeof(_Schema.Rework);
                        _Schema.Rework neqcond3 = new _Schema.Rework();
                        neqcond3.Status = "3";
                        tf3.notEqualcond = neqcond3;
                        tf3.ToGetFieldNames = null;

                        List<_Schema.TableConnectionItem> tblCnntIs = new List<_Schema.TableConnectionItem>();
                        _Schema.TableConnectionItem tc1 = new _Schema.TableConnectionItem(tf1, _Schema.TempProductID.fn_ProductID, tf2, _Schema.ProductStatus.fn_ProductID);
                        tblCnntIs.Add(tc1);
                        _Schema.TableConnectionItem tc2 = new _Schema.TableConnectionItem(tf2, _Schema.ProductStatus.fn_ReworkCode, tf3, _Schema.Rework.fn_ReworkCode);
                        tblCnntIs.Add(tc2);

                        _Schema.TableConnectionCollection tblCnnts = new _Schema.TableConnectionCollection(tblCnntIs.ToArray());

                        tblAndFldsesArray = new _Schema.TableAndFields[] { tf1, tf2, tf3 };

                        sqlCtx = _Schema.Func.GetConditionedJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken, "COUNT", ref tblAndFldsesArray, tblCnnts);

                        sqlCtx.Params[_Schema.Func.DecAlias(tf3.alias, _Schema.Rework.fn_Status)].Value = neqcond3.Status;
                    }
                }
                tf1 = tblAndFldsesArray[0];
                tf2 = tblAndFldsesArray[1];
                tf3 = tblAndFldsesArray[2];

                sqlCtx.Params[_Schema.Func.DecAlias(tf1.alias, _Schema.TempProductID.fn_UserKey)].Value = userKey;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetInvalidUnitCountByUserKey(string userKey)
        {
            try
            {
                int ret = 0;

                _Schema.SQLContext sqlCtx = null;
                _Schema.TableAndFields tf1 = null;
                _Schema.TableAndFields tf2 = null;
                _Schema.TableAndFields tf3 = null;
                _Schema.TableAndFields[] tblAndFldsesArray = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
                    {
                        tf1 = new _Schema.TableAndFields();
                        tf1.Table = typeof(_Schema.TempProductID);
                        _Schema.TempProductID cond = new _Schema.TempProductID();
                        cond.UserKey = userKey;
                        tf1.equalcond = cond;
                        tf1.ToGetFieldNames.Add(_Schema.TempProductID.fn_ProductID);

                        tf2 = new _Schema.TableAndFields();
                        tf2.Table = typeof(_Schema.ProductStatus);
                        tf2.ToGetFieldNames = null;

                        tf3 = new _Schema.TableAndFields();
                        tf3.Table = typeof(_Schema.ReworkRejectStation);
                        tf3.subDBCalalog = _Schema.SqlHelper.DB_GetData;
                        tf3.ToGetFieldNames = null;

                        List<_Schema.TableConnectionItem> tblCnntIs = new List<_Schema.TableConnectionItem>();
                        _Schema.TableConnectionItem tc1 = new _Schema.TableConnectionItem(tf1, _Schema.TempProductID.fn_ProductID, tf2, _Schema.Product.fn_ProductID);
                        tblCnntIs.Add(tc1);
                        _Schema.TableConnectionItem tc2 = new _Schema.TableConnectionItem(tf2, _Schema.ProductStatus.fn_Station, tf3, _Schema.ReworkRejectStation.fn_Station);
                        tblCnntIs.Add(tc2);
                        _Schema.TableConnectionItem tc3 = new _Schema.TableConnectionItem(tf2, _Schema.ProductStatus.fn_Status, tf3, _Schema.ReworkRejectStation.fn_Status);
                        tblCnntIs.Add(tc3);

                        _Schema.TableConnectionCollection tblCnnts = new _Schema.TableConnectionCollection(tblCnntIs.ToArray());

                        tblAndFldsesArray = new _Schema.TableAndFields[] { tf1, tf2, tf3 };

                        sqlCtx = _Schema.Func.GetConditionedJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken, "COUNT", ref tblAndFldsesArray, tblCnnts);
                    }
                }
                tf1 = tblAndFldsesArray[0];
                tf2 = tblAndFldsesArray[1];
                tf3 = tblAndFldsesArray[2];

                sqlCtx.Params[_Schema.Func.DecAlias(tf1.alias, _Schema.TempProductID.fn_UserKey)].Value = userKey;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetProductListByReworkCode(string reworkCode)
        {
            try
            {
                DataTable ret = null;

                _Schema.SQLContext sqlCtx = null;
                _Schema.TableAndFields tf1 = null;
                _Schema.TableAndFields tf2 = null;
                _Schema.TableAndFields[] tblAndFldsesArray = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
                    {
                        tf1 = new _Schema.TableAndFields();
                        tf1.Table = typeof(_Schema.Product);
                        //a.ProductID,a.CUSTSN,a.Model,a.MO,a.DeliveryNo,b.Station,b.Status
                        tf1.ToGetFieldNames.Add(_Schema.Product.fn_ProductID);
                        tf1.ToGetFieldNames.Add(_Schema.Product.fn_CUSTSN);
                        tf1.ToGetFieldNames.Add(_Schema.Product.fn_Model);
                        tf1.ToGetFieldNames.Add(_Schema.Product.fn_MO);
                        tf1.ToGetFieldNames.Add(_Schema.Product.fn_DeliveryNo);

                        tf2 = new _Schema.TableAndFields();
                        tf2.Table = typeof(_Schema.ProductStatus);
                        _Schema.ProductStatus cond = new _Schema.ProductStatus();
                        cond.ReworkCode = reworkCode;
                        tf2.equalcond = cond;
                        tf2.ToGetFieldNames.Add(_Schema.ProductStatus.fn_Station);
                        tf2.ToGetFieldNames.Add(_Schema.ProductStatus.fn_Status);

                        List<_Schema.TableConnectionItem> tblCnntIs = new List<_Schema.TableConnectionItem>();
                        _Schema.TableConnectionItem tc1 = new _Schema.TableConnectionItem(tf1, _Schema.Product.fn_ProductID, tf2, _Schema.ProductStatus.fn_ProductID);
                        tblCnntIs.Add(tc1);

                        _Schema.TableConnectionCollection tblCnnts = new _Schema.TableConnectionCollection(tblCnntIs.ToArray());

                        tblAndFldsesArray = new _Schema.TableAndFields[] { tf1, tf2 };

                        sqlCtx = _Schema.Func.GetConditionedJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken, null, ref tblAndFldsesArray, tblCnnts);

                        string toCvtFld = _Schema.Func.DecAliasInner(tf2.alias, _Schema.ProductStatus.fn_Status);
                        sqlCtx.Sentence = sqlCtx.Sentence.Replace(toCvtFld, string.Format("CONVERT(CHAR(1),{0})", toCvtFld));

                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, _Schema.Func.DecAliasInner(tf1.alias, _Schema.Product.fn_ProductID));
                    }
                }
                tf1 = tblAndFldsesArray[0];
                tf2 = tblAndFldsesArray[1];

                sqlCtx.Params[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductStatus.fn_ReworkCode)].Value = reworkCode;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                ret = _Schema.Func.SortColumns(ret, new int[] { sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias,_Schema.Product.fn_ProductID)],
                                                                sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias,_Schema.Product.fn_CUSTSN)],
                                                                sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias,_Schema.Product.fn_Model)],
                                                                sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias,_Schema.Product.fn_MO)],
                                                                sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias,_Schema.Product.fn_DeliveryNo)],
                                                                sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias,_Schema.ProductStatus.fn_Station)],
                                                                sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias,_Schema.ProductStatus.fn_Status)]
                                                                });
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.ModelAndCount> GetProductModelStatisticByReworkCode(string reworkCode)
        {
            try
            {
                IList<IMES.DataModel.ModelAndCount> ret = new List<IMES.DataModel.ModelAndCount>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();

                        sqlCtx.Sentence = "SELECT a.{3}, COUNT(1) AS Quantity " +
                                            "FROM {0} a " +
                                            "JOIN {2} b ON a.{1}=b.{4} " +
                                            "WHERE b.{5}=@{5} " +
                                            "GROUP BY a.{3} " +
                                            "ORDER BY a.{3} ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.Product).Name,
                                                                        _Schema.Product.fn_ProductID,
                                                                        typeof(_Schema.ProductStatus).Name,
                                                                        _Schema.Product.fn_Model,
                                                                        _Schema.ProductStatus.fn_ProductID,
                                                                        _Schema.ProductStatus.fn_ReworkCode);

                        sqlCtx.Params.Add(_Schema.ProductStatus.fn_ReworkCode, new SqlParameter("@" + _Schema.ProductStatus.fn_ReworkCode, SqlDbType.VarChar));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.ProductStatus.fn_ReworkCode].Value = reworkCode;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null)
                    {
                        while (sqlR.Read())
                        {
                            IMES.DataModel.ModelAndCount item = new IMES.DataModel.ModelAndCount();
                            item.Model = GetValue_Str(sqlR, 0);
                            item.Count = GetValue_Int32(sqlR, 1);
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.StationAndCount> GetProductStationStatisticByReworkCode(string reworkCode)
        {
            try
            {
                IList<IMES.DataModel.StationAndCount> ret = new List<IMES.DataModel.StationAndCount>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();

                        sqlCtx.Sentence = "SELECT b.{3},c.{10},COUNT(1) AS Quantity " +
                                            "FROM {0} a " +
                                            "JOIN {2} b ON a.{1}=b.{4} " +
                                            "JOIN {7}..{6} c on b.{9}=c.{8} " +
                                            "WHERE b.{5}=@{5} " +
                                            "GROUP BY b.{3},c.{10} " +
                                            "ORDER BY b.{3} ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.Product).Name,
                                                                        _Schema.Product.fn_ProductID,
                                                                        typeof(_Schema.ProductStatus).Name,
                                                                        _Schema.ProductStatus.fn_Station,
                                                                        _Schema.ProductStatus.fn_ProductID,
                                                                        _Schema.ProductStatus.fn_ReworkCode,
                                                                        typeof(_Schema.Station).Name,
                                                                        _Schema.SqlHelper.DB_GetData,
                                                                        _Schema.Station.fn_station,
                                                                        _Schema.ProductStatus.fn_Station,
                                                                        _Schema.Station.fn_Descr);

                        sqlCtx.Params.Add(_Schema.ProductStatus.fn_ReworkCode, new SqlParameter("@" + _Schema.ProductStatus.fn_ReworkCode, SqlDbType.VarChar));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.ProductStatus.fn_ReworkCode].Value = reworkCode;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null)
                    {
                        while (sqlR.Read())
                        {
                            IMES.DataModel.StationAndCount item = new IMES.DataModel.StationAndCount();
                            item.Station = GetValue_Str(sqlR, 0);
                            item.StationDescr = GetValue_Str(sqlR, 1);
                            item.Count = GetValue_Int32(sqlR, 2);
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetUnitCountByRework(string reworkCode)
        {
            //select count(1) 
            //from IMES_FA.dbo.ProductStatus 
            //where b.ReworkCode=? 
            try
            {
                int ret = 0;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductStatus cond = new _Schema.ProductStatus();
                        cond.ReworkCode = reworkCode;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductStatus), "COUNT", new List<string>() { _Schema.ProductStatus.fn_ProductID }, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.ProductStatus.fn_ReworkCode].Value = reworkCode;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateProductStatusReworkCodeByUserKey(string userKey, IMES.DataModel.ReworkObj reworkCode)
        {
            //update b 
            //set b.ReworkCode=? 
            //from IMES_GetData.dbo.TempProductID a 
            //     join IMES_FA.dbo.ProductStatus b on a.ProductID = b.ProductID  
            //where a.UserKey=?
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();

                        sqlCtx.Sentence = "UPDATE b " +
                                            "SET b.{4}=@{4} " +
                                            "FROM {0} a " +
                                            "JOIN {1} b ON a.{2} = b.{5} " +
                                            "WHERE a.{3}=@{3} ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.TempProductID).Name,
                                                                         typeof(_Schema.ProductStatus).Name,
                                                                         _Schema.TempProductID.fn_ProductID,
                                                                         _Schema.TempProductID.fn_UserKey,
                                                                         _Schema.ProductStatus.fn_ReworkCode,
                                                                         _Schema.ProductStatus.fn_ProductID);

                        sqlCtx.Params.Add(_Schema.ProductStatus.fn_ReworkCode, new SqlParameter("@" + _Schema.ProductStatus.fn_ReworkCode, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.TempProductID.fn_UserKey, new SqlParameter("@" + _Schema.TempProductID.fn_UserKey, SqlDbType.VarChar));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.ProductStatus.fn_ReworkCode].Value = reworkCode.ReworkCode;
                sqlCtx.Params[_Schema.TempProductID.fn_UserKey].Value = userKey;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void CreateTempProductIDList(IList<string> productIdList, string userKey)
        {
            try
            {
                SqlTransactionManager.Begin();

                if (productIdList != null && productIdList.Count > 0)
                {
                    IList<string> batch = new List<string>();
                    int i = 0;
                    foreach (string entry in productIdList)
                    {
                        batch.Add(entry);
                        if ((i + 1) % batchSQLCnt == 0 || i == productIdList.Count - 1)
                        {
                            CreateTempProductIDList_Inner(batch, userKey);
                            batch.Clear();
                        }
                        i++;
                    }
                }
                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        private void CreateTempProductIDList_Inner(IList<string> productIdList, string userKey)
        {
            try
            {
                if (productIdList != null && productIdList.Count > 0)
                {
                    _Schema.SQLContextCollection sqlCtxSet = new _Schema.SQLContextCollection();

                    int i = 0;
                    foreach (string entry in productIdList)
                    {
                        _Schema.SQLContext sqlCtx = ComposeForCreateTempProductIDList(entry, userKey);
                        sqlCtxSet.AddOne(i, sqlCtx);
                        i++;
                    }
                    _Schema.SQLContext sqlCtxBatch = sqlCtxSet.MergeToOneNonQuery();
                    _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtxBatch.Sentence, sqlCtxBatch.Params.Values.ToArray<SqlParameter>());
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private _Schema.SQLContext ComposeForCreateTempProductIDList(string productId, string userKey)
        {
            _Schema.SQLContext sqlCtx = null;
            lock (MethodBase.GetCurrentMethod())
            {
                if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                {
                    sqlCtx = _Schema.Func.GetCommonInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TempProductID));
                }
            }
            sqlCtx.Params[_Schema.TempProductID.fn_ProductID].Value = productId;
            sqlCtx.Params[_Schema.TempProductID.fn_UserKey].Value = userKey;
            return sqlCtx;
        }

        public void DeleteProductIDListByUserKey(string userKey)
        {
            //delete TempProductID where UserKey=?
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.TempProductID cond = new _Schema.TempProductID();
                        cond.UserKey = userKey;
                        sqlCtx = _Schema.Func.GetConditionedDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TempProductID), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.TempProductID.fn_UserKey].Value = userKey;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        private static MathSequenceWithCarryNumberRule _carryNumRule = new MathSequenceWithCarryNumberRule(2, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ZZ", "00");

        public string CreateRework(IMES.DataModel.Rework rework)
        {
            //Rework Code产生规则：
            //YYMMDDXX
            //第1-2码：两位年
            //第3-4码：两位月
            //第5-6码：两位日
            //第7-8码：Sequence No.，从01开始，36进制(0-9,A-Z)
            try
            {
                SqlTransactionManager.Begin();

                DateTime now = _Schema.SqlHelper.GetDateTime();

                string preStr = now.Year.ToString().Substring(now.Year.ToString().Length - 2) + now.Month.ToString().PadLeft(2, '0') + now.Day.ToString().PadLeft(2, '0');
                string maxNum = null;
                string max = null;
                if (!PeekMaxRewokCode(preStr, out maxNum))
                {
                    max = _carryNumRule.MinNumber;
                }
                else
                {
                    max = maxNum.Substring(6, 2);
                }
                rework.ReworkCode = preStr + _carryNumRule.IncreaseToNumber(max, 1);

                CreateRework_Inner(rework, now);

                SqlTransactionManager.Commit();

                return rework.ReworkCode;
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        private bool PeekMaxRewokCode(string preStr, out string maxNum)
        {
            SqlDataReader sqlR = null;
            try
            {
                bool ret = false;
                maxNum = string.Empty;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Rework likeCond = new _Schema.Rework();
                        likeCond.ReworkCode = preStr + "%";
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Rework), "MAX", new List<string>() { _Schema.Rework.fn_ReworkCode }, null, likeCond, null, null, null, null, null, null);

                        sqlCtx.Sentence = sqlCtx.Sentence.Replace("WHERE", "WITH (UPDLOCK) WHERE");
                    }
                }
                sqlCtx.Params[_Schema.Rework.fn_ReworkCode].Value = preStr + "%";

                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                if (sqlR != null && sqlR.Read())
                {
                    maxNum = GetValue_Str(sqlR, sqlCtx.Indexes["MAX"]);
                    if (!string.IsNullOrEmpty(maxNum))
                        ret = true;
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                {
                    sqlR.Close();
                }
            }
        }

        private void CreateRework_Inner(IMES.DataModel.Rework rework, DateTime time)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Rework));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Rework.fn_Cdt].Value = rework.Cdt = time;
                sqlCtx.Params[_Schema.Rework.fn_Editor].Value = rework.Editor;
                sqlCtx.Params[_Schema.Rework.fn_ReworkCode].Value = rework.ReworkCode;
                sqlCtx.Params[_Schema.Rework.fn_Status].Value = rework.Status;
                sqlCtx.Params[_Schema.Rework.fn_Udt].Value = rework.Udt = time;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetReworkList(DateTime dateFrom, DateTime dateTo)
        {
            try
            {
                DataTable ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();

                        sqlCtx.Sentence = "SELECT a.{7}," +
                                            "(SELECT COUNT(1) FROM {2} c WHERE c.{6}=a.{7}) AS Qty," +
                                            "(CASE a.{8} WHEN '0' THEN 'Create' WHEN '1' THEN 'Submit' WHEN '2' THEN 'Confirm' WHEN '3' THEN 'Finish' END)," +
                                            "a.{9},a.{10},a.{11},b.{5} " +
                                            "FROM {3} a " +
                                            "LEFT OUTER JOIN {1}..{0} b ON a.{7}=b.{4} " +
                                            "WHERE a.{11} >= @dateFrom AND a.{11} <= @dateTo AND a.{8} <> '3' " +
                                            "ORDER BY {11} DESC ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.Rework_Process).Name,
                                                                        _Schema.SqlHelper.DB_GetData,
                                                                        typeof(_Schema.ProductStatus).Name,
                                                                        typeof(_Schema.Rework).Name,
                                                                        _Schema.Rework_Process.fn_ReworkCode,
                                                                        _Schema.Rework_Process.fn_Process,
                                                                        _Schema.ProductStatus.fn_ReworkCode,
                                                                        _Schema.Rework.fn_ReworkCode,
                                                                        _Schema.Rework.fn_Status,
                                                                        _Schema.Rework.fn_Editor,
                                                                        _Schema.Rework.fn_Cdt,
                                                                        _Schema.Rework.fn_Udt);

                        sqlCtx.Params.Add("dateFrom", new SqlParameter("@dateFrom", SqlDbType.DateTime));
                        sqlCtx.Params.Add("dateTo", new SqlParameter("@dateTo", SqlDbType.DateTime));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params["dateFrom"].Value = dateFrom;
                sqlCtx.Params["dateTo"].Value = dateTo;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());

                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public string GetReworkStatus(string reworkCode)
        {
            //select Status from Rework where ReworkCode=?
            try
            {
                string ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Rework equalCond = new _Schema.Rework();
                        equalCond.ReworkCode = reworkCode;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Rework), null, new List<string>() { _Schema.Rework.fn_Status }, equalCond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Rework.fn_ReworkCode].Value = reworkCode;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Rework.fn_Status]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void RemoveARework(string reworkCode)
        {
            //a)update ProductStatus set ReworkCode='' where ReworkCode=? 
            //b)delete Rework_Process where ReworkCode=? 
            //c)delete Rework where ReworkCode=? 
            try
            {
                SqlTransactionManager.Begin();

                ClearProductStatusReworkCode(reworkCode);
                DeleteReworkProcess(reworkCode);
                DeleteRework(reworkCode);

                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        private void ClearProductStatusReworkCode(string reworkCode)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductStatus cond = new _Schema.ProductStatus();
                        cond.ReworkCode = reworkCode;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductStatus), new List<string>() { _Schema.ProductStatus.fn_ReworkCode }, new List<string>() { _Schema.ProductStatus.fn_Udt }, null, null, cond, null, null, null, null, null, null, null);

                        sqlCtx.Params[_Schema.Func.DecSV(_Schema.ProductStatus.fn_ReworkCode)].Value = string.Empty;
                    }
                }
                sqlCtx.Params[_Schema.ProductStatus.fn_ReworkCode].Value = reworkCode;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        //private void DeleteReworkProcess(string reworkCode)
        //{
        //    _Schema.SQLContext sqlCtx = null;
        //    lock (MethodBase.GetCurrentMethod())
        //    {
        //        if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
        //        {
        //            _Schema.Rework_Process cond = new _Schema.Rework_Process();
        //            cond.ReworkCode = reworkCode;
        //            sqlCtx = _Schema.Func.GetConditionedDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Rework_Process), cond, null, null);
        //        }
        //    }
        //    sqlCtx.Params[_Schema.Rework_Process.fn_ReworkCode].Value = reworkCode;
        //    _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
        //}

        private void DeleteRework(string reworkCode)
        {
            _Schema.SQLContext sqlCtx = null;
            lock (MethodBase.GetCurrentMethod())
            {
                if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                {
                    _Schema.Rework cond = new _Schema.Rework();
                    cond.ReworkCode = reworkCode;
                    sqlCtx = _Schema.Func.GetConditionedDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Rework), cond, null, null);
                }
            }
            sqlCtx.Params[_Schema.Rework.fn_ReworkCode].Value = reworkCode;
            _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
        }

        public void UpdateRework(IMES.DataModel.Rework rework)
        {
            //Update Rework set Status=?,Editor=?,Udt=? where ReworkCode=? 
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Rework cond = new _Schema.Rework();
                        cond.ReworkCode = rework.ReworkCode;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Rework), new List<string>() { _Schema.Rework.fn_Status, _Schema.Rework.fn_Editor }, null, null, null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Rework.fn_ReworkCode].Value = rework.ReworkCode;
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.Rework.fn_Editor)].Value = rework.Editor;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.Rework.fn_Status)].Value = rework.Status;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.Rework.fn_Udt)].Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void SetReworkProcess(ReworkProcess reworkProcess)
        {
            //a)delete Rework_Process where ReworkCode=? 
            //b)insert Rework_Process(ReworkCode,Process,Editor,Cdt,Udt) values(?,?,?,?,?)
            try
            {
                SqlTransactionManager.Begin();

                DeleteReworkProcess(reworkProcess.ReworkCode);
                InsertReworkProcess(reworkProcess);

                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        private void DeleteReworkProcess(string reworkCode)
        {
            _Schema.SQLContext sqlCtx = null;
            lock (MethodBase.GetCurrentMethod())
            {
                if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                {
                    _Schema.Rework_Process cond = new _Schema.Rework_Process();
                    cond.ReworkCode = reworkCode;
                    sqlCtx = _Schema.Func.GetConditionedDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Rework_Process), cond, null, null);
                }
            }
            sqlCtx.Params[_Schema.Rework_Process.fn_ReworkCode].Value = reworkCode;
            _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
        }

        private void InsertReworkProcess(ReworkProcess reworkProcess)
        {
            _Schema.SQLContext sqlCtx = null;
            lock (MethodBase.GetCurrentMethod())
            {
                if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                {
                    sqlCtx = _Schema.Func.GetCommonInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Rework_Process));
                }
            }
            DateTime cmDt = _Schema.SqlHelper.GetDateTime();
            sqlCtx.Params[_Schema.Rework_Process.fn_Cdt].Value = cmDt;
            sqlCtx.Params[_Schema.Rework_Process.fn_Editor].Value = reworkProcess.Editor;
            sqlCtx.Params[_Schema.Rework_Process.fn_Process].Value = reworkProcess.Process;
            sqlCtx.Params[_Schema.Rework_Process.fn_ReworkCode].Value = reworkProcess.ReworkCode;
            sqlCtx.Params[_Schema.Rework_Process.fn_Udt].Value = cmDt;
            _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
        }

        public IList<string> GetProcessReleaseType(string reworkCode)
        {
            //select ReleaseType 
            //from Rework_Process a
            //     join Rework_ReleaseType b on a.Process=b.Process 
            //where a.ReworkCode=? 
            try
            {
                IList<string> ret = new List<string>();

                _Schema.SQLContext sqlCtx = null;
                _Schema.TableAndFields tf1 = null;
                _Schema.TableAndFields tf2 = null;
                _Schema.TableAndFields[] tblAndFldsesArray = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
                    {
                        tf1 = new _Schema.TableAndFields();
                        tf1.Table = typeof(_Schema.Rework_Process);
                        _Schema.Rework_Process cond = new _Schema.Rework_Process();
                        cond.ReworkCode = reworkCode;
                        tf1.equalcond = cond;
                        tf1.ToGetFieldNames = null;

                        tf2 = new _Schema.TableAndFields();
                        tf2.Table = typeof(_Schema.Rework_ReleaseType);
                        tf2.ToGetFieldNames.Add(_Schema.Rework_ReleaseType.fn_ReleaseType);

                        _Schema.TableConnectionCollection tblCnnts = new _Schema.TableConnectionCollection(new _Schema.TableConnectionItem[] { new _Schema.TableConnectionItem(tf1, _Schema.Rework_Process.fn_Process, tf2, _Schema.Rework_ReleaseType.fn_Process) });

                        tblAndFldsesArray = new _Schema.TableAndFields[] { tf1, tf2 };

                        sqlCtx = _Schema.Func.GetConditionedJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken, "DISTINCT", ref tblAndFldsesArray, tblCnnts);
                    }
                }
                tf1 = tblAndFldsesArray[0];
                tf2 = tblAndFldsesArray[1];

                sqlCtx.Params[_Schema.Func.DecAlias(tf1.alias, _Schema.Rework_Process.fn_ReworkCode)].Value = reworkCode;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        string item = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Rework_ReleaseType.fn_ReleaseType)]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.ProcessStationInfo> GetProcessStationList(string reworkCode)
        {
            //select b.PreStation+’(’+c. Descr +’)’,b.Station+’(’+d. Descr +’)’,b.Status
            //from Rework_Process a
            //     join Process_Station b on a.Process = b.Process  
            //     join Station c on b.PreStation=c.Station  
            //     join Station d on b.Station=d.Station
            //where a.ReworkCode=?
            try
            {
                IList<IMES.DataModel.ProcessStationInfo> ret = new List<IMES.DataModel.ProcessStationInfo>();

                _Schema.SQLContext sqlCtx = null;
                _Schema.TableAndFields tf1 = null;
                _Schema.TableAndFields tf2 = null;
                _Schema.TableAndFields tf3 = null;
                _Schema.TableAndFields tf4 = null;
                _Schema.TableAndFields[] tblAndFldsesArray = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
                    {
                        tf1 = new _Schema.TableAndFields();
                        tf1.Table = typeof(_Schema.Rework_Process);
                        _Schema.Rework_Process equalCond = new _Schema.Rework_Process();
                        equalCond.ReworkCode = reworkCode;
                        tf1.equalcond = equalCond;
                        tf1.ToGetFieldNames = null;

                        tf2 = new _Schema.TableAndFields();
                        tf2.Table = typeof(_Schema.Process_Station);
                        tf2.ToGetFieldNames.Add(_Schema.Process_Station.fn_PreStation);
                        tf2.ToGetFieldNames.Add(_Schema.Process_Station.fn_Station);
                        tf2.ToGetFieldNames.Add(_Schema.Process_Station.fn_Status);

                        tf3 = new _Schema.TableAndFields();
                        tf3.Table = typeof(_Schema.Station);
                        tf3.ToGetFieldNames.Add(_Schema.Station.fn_Descr);

                        tf4 = new _Schema.TableAndFields();
                        tf4.Table = typeof(_Schema.Station);
                        tf4.ToGetFieldNames.Add(_Schema.Station.fn_Descr);

                        _Schema.TableConnectionCollection tblCnnts = new _Schema.TableConnectionCollection(new _Schema.TableConnectionItem[] { 
                            new _Schema.TableConnectionItem(tf1, _Schema.Rework_Process.fn_Process, tf2, _Schema.Process_Station.fn_Process),
                            new _Schema.TableConnectionItem(tf2, _Schema.Process_Station.fn_PreStation, tf3, _Schema.Station.fn_station),
                            new _Schema.TableConnectionItem(tf2, _Schema.Process_Station.fn_Station, tf4, _Schema.Station.fn_station)});

                        tblAndFldsesArray = new _Schema.TableAndFields[] { tf1, tf2, tf3, tf4 };
                        sqlCtx = _Schema.Func.GetConditionedJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken, "DISTINCT", ref tblAndFldsesArray, tblCnnts);
                    }
                }
                tf1 = tblAndFldsesArray[0];
                tf2 = tblAndFldsesArray[1];
                tf3 = tblAndFldsesArray[2];
                tf4 = tblAndFldsesArray[3];

                sqlCtx.Params[_Schema.Func.DecAlias(tf1.alias, _Schema.Rework_Process.fn_ReworkCode)].Value = reworkCode;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.DataModel.ProcessStationInfo item = new IMES.DataModel.ProcessStationInfo();
                        item.PreStation = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Process_Station.fn_PreStation)]);
                        item.Station = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Process_Station.fn_Station)]);
                        item.Status = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.Process_Station.fn_Status)]);
                        item.PreStationDescr = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf3.alias, _Schema.Station.fn_Descr)]);
                        item.StationDescr = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf4.alias, _Schema.Station.fn_Descr)]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool IFReworkHasProcess(string reworkCode)
        {
            try
            {
                bool ret = false;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Rework_Process equalCond = new _Schema.Rework_Process();
                        equalCond.ReworkCode = reworkCode;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Rework_Process), equalCond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Rework_Process.fn_ReworkCode].Value = reworkCode;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = true;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProduct> GetProductListByIdList(IList<string> idList)
        {
            try
            {
                List<IProduct> ret = new List<IProduct>();

                if (idList != null && idList.Count > 0)
                {
                    idList = (from item in idList select item).Distinct().ToList();

                    IList<string> batch = new List<string>();
                    int i = 0;
                    foreach (string str in idList)
                    {
                        batch.Add(str);
                        if ((i + 1) % batchSQLCnt == 0 || i == idList.Count - 1)
                        {
                            ret.AddRange(GetProductListByIdList_Inner(batch));
                            batch.Clear();
                        }
                        i++;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private IList<IProduct> GetProductListByIdList_Inner(IList<string> idList)
        {
            try
            {
                IList<IProduct> ret = new List<IProduct>();

                _Schema.SQLContext sqlCtx = null;
                _Schema.TableAndFields tf1 = null;
                _Schema.TableAndFields tf2 = null;
                _Schema.TableAndFields[] tblAndFldsesArray = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
                    {
                        tf1 = new _Schema.TableAndFields();
                        tf1.Table = typeof(_Schema.Product);
                        _Schema.Product insetCond = new _Schema.Product();
                        insetCond.ProductID = "INSET";
                        tf1.inSetcond = insetCond;

                        tf2 = new _Schema.TableAndFields();
                        tf2.Table = typeof(_Schema.ProductStatus);

                        List<_Schema.TableConnectionItem> tblCnntIs = new List<_Schema.TableConnectionItem>();
                        _Schema.TableConnectionItem tc1 = new _Schema.TableConnectionItem(tf1, _Schema.Product.fn_ProductID, tf2, _Schema.ProductStatus.fn_ProductID);
                        tblCnntIs.Add(tc1);

                        _Schema.TableConnectionCollection tblCnnts = new _Schema.TableConnectionCollection(tblCnntIs.ToArray());

                        tblAndFldsesArray = new _Schema.TableAndFields[] { tf1, tf2 };

                        sqlCtx = _Schema.Func.GetConditionedJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken, null, ref tblAndFldsesArray, tblCnnts);
                    }
                }
                tf1 = tblAndFldsesArray[0];
                tf2 = tblAndFldsesArray[1];

                string Sentence = sqlCtx.Sentence.Replace(_Schema.Func.DecAlias(tf1.alias, _Schema.Func.DecInSet(_Schema.Product.fn_ProductID)), _Schema.Func.ConvertInSet(idList));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    FieldInfo fi = typeof(IMES.FisObject.FA.Product.Product).GetField("_status", BindingFlags.NonPublic | BindingFlags.Instance);

                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.FisObject.FA.Product.Product item = new IMES.FisObject.FA.Product.Product(GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_ProductID)]));
                        //item.BIOS = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_BIOS)]);
                        item.CartonSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_CartonSN)]);
                        item.CartonWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_CartonWeight)]);
                        //item.COAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_COAID)]);
                        item.CUSTSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_CUSTSN)]);
                        //item.CUSTVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_CVSN)]);
                        item.DeliveryNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_DeliveryNo)]);
                        item.ECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_ECR)]);
                        //item.ICCID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_ICCID)]);
                        //item.IMEI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_IMEI)]);
                        //item.IMGVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_IMGVER)]);
                        item.MAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_MAC)]);
                        item.MBECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_MBECR)]);
                        //item.MEID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_MEID)]);
                        item.MO = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_MO)]);
                        item.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_Model)]);
                        item.PalletNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_PalletNo)]);
                        item.PCBID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_PCBID)]);
                        item.PCBModel = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_PCBModel)]);
                        item.PizzaID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_PizzaID)]);
                        item.UnitWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_UnitWeight)]);
                        item.UUID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_UUID)]);
                        //item.WMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_WMAC)]);
                        //item.HDVD = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_HDVD)]);
                        //item.BLMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_BLMAC)]);
                        //item.TVTuner = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_TVTuner)]);
                        item.CVSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_CVSN)]);
                        item.State = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_state)]);
                        item.PRSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_prsn)]);
                        item.OOAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_ooaid)]);
                        item.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_Udt)]);
                        item.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_Cdt)]);
                        item.Tracker.Clear();
                        ret.Add(item);

                        IMES.FisObject.FA.Product.ProductStatus newFieldVal = new IMES.FisObject.FA.Product.ProductStatus();
                        newFieldVal.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductStatus.fn_Cdt)]);
                        newFieldVal.Editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductStatus.fn_Editor)]);
                        newFieldVal.Line = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductStatus.fn_Line)]);
                        newFieldVal.ProId = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductStatus.fn_ProductID)]);
                        newFieldVal.ReworkCode = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductStatus.fn_ReworkCode)]);
                        newFieldVal.StationId = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductStatus.fn_Station)]);
                        newFieldVal.Status = (StationStatus)Enum.Parse(typeof(StationStatus), GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductStatus.fn_Status)]).ToString());
                        newFieldVal.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductStatus.fn_Udt)]);
                        newFieldVal.TestFailCount = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductStatus.fn_TestFailCount)]);
                        newFieldVal.Tracker.Clear();
                        newFieldVal.Tracker = item.Tracker;

                        fi.SetValue(item, newFieldVal);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void ClearData(string reworkCode, string editor)
        {
            try
            {
                SqlParameter[] paramsArray = new SqlParameter[2];

                paramsArray[0] = new SqlParameter("@reworkCode", SqlDbType.VarChar);
                paramsArray[0].Value = reworkCode;
                paramsArray[1] = new SqlParameter("@editor", SqlDbType.VarChar);
                paramsArray[1].Value = editor;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.StoredProcedure, "ClearProductDataForRework", paramsArray);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetTabKittingCodeList()
        {
            //SELECT RTRIM(Code), RTRIM(Descr) as [Description] FROM KittingCode
            //  WHERE [Type] = 'Kitting'
            //  ORDER BY Code, Descr
            try
            {
                DataTable ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.KittingCode cond = new _Schema.KittingCode();
                        cond.Type = "Kitting";
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.KittingCode), null, new List<string>() { _Schema.KittingCode.fn_Code, _Schema.KittingCode.fn_Descr }, cond, null, null, null, null, null, null, null);
                        sqlCtx.Params[_Schema.KittingCode.fn_Type].Value = cond.Type;
                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, string.Join(",", new string[] { _Schema.KittingCode.fn_Code, _Schema.KittingCode.fn_Descr }));
                    }
                }
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                ret = _Schema.Func.SortColumns(ret, new int[] { sqlCtx.Indexes[_Schema.KittingCode.fn_Code],
                                                                sqlCtx.Indexes[_Schema.KittingCode.fn_Descr]
                                                                });
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetLightNoListByCode(string code)
        {
            //SELECT DISTINCT RTRIM(Code), RTRIM(PartNo) as [Part No], RTRIM([Tp]) as [Type], 
            //          CONVERT(int, LightNo) as LightNo,Qty, RTRIM(Sub) as Substitution, Safety_Stock as [Safety Stock], 
            //          Max_Stock as [Max Stock],Remark, Editor, Cdt as [Create Date], Udt as [Update Date], [ID]
            //         FROM WipBuffer b
            //         WHERE Code = @Code
            //         ORDER BY CONVERT(int, LightNo), [Part No]
            try
            {
                DataTable ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.WipBuffer cond = new _Schema.WipBuffer();
                        cond.Code = code;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.WipBuffer), "DISTINCT", new List<string>() { _Schema.WipBuffer.fn_Code,
                                                                                                                                                                                _Schema.WipBuffer.fn_PartNo,
                                                                                                                                                                                _Schema.WipBuffer.fn_Tp,
                                                                                                                                                                                _Schema.WipBuffer.fn_LightNo,
                                                                                                                                                                                _Schema.WipBuffer.fn_Qty,
                                                                                                                                                                                _Schema.WipBuffer.fn_Sub,
                                                                                                                                                                                _Schema.WipBuffer.fn_Safety_Stock,
                                                                                                                                                                                _Schema.WipBuffer.fn_Max_Stock,
                                                                                                                                                                                _Schema.WipBuffer.fn_Remark,
                                                                                                                                                                                _Schema.WipBuffer.fn_Editor,
                                                                                                                                                                                _Schema.WipBuffer.fn_Cdt,
                                                                                                                                                                                _Schema.WipBuffer.fn_Udt,
                                                                                                                                                                                _Schema.WipBuffer.fn_ID }, cond, null, null, null, null, null, null, null);
                        string toCvtFld = _Schema.WipBuffer.fn_LightNo;
                        string newFld = string.Format("CONVERT(INT,{0})", toCvtFld);
                        sqlCtx.Sentence = sqlCtx.Sentence.Replace(toCvtFld, newFld);

                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, string.Join(",", new string[] { newFld, _Schema.WipBuffer.fn_PartNo }));
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = code;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                ret = _Schema.Func.SortColumns(ret, new int[] {     sqlCtx.Indexes[_Schema.WipBuffer.fn_Code],
                                                                    sqlCtx.Indexes[_Schema.WipBuffer.fn_PartNo],
                                                                    sqlCtx.Indexes[_Schema.WipBuffer.fn_Tp],
                                                                    sqlCtx.Indexes[_Schema.WipBuffer.fn_LightNo],
                                                                    sqlCtx.Indexes[_Schema.WipBuffer.fn_Qty],
                                                                    sqlCtx.Indexes[_Schema.WipBuffer.fn_Sub],
                                                                    sqlCtx.Indexes[_Schema.WipBuffer.fn_Safety_Stock],
                                                                    sqlCtx.Indexes[_Schema.WipBuffer.fn_Max_Stock],
                                                                    sqlCtx.Indexes[_Schema.WipBuffer.fn_Remark],
                                                                    sqlCtx.Indexes[_Schema.WipBuffer.fn_Editor],
                                                                    sqlCtx.Indexes[_Schema.WipBuffer.fn_Cdt],
                                                                    sqlCtx.Indexes[_Schema.WipBuffer.fn_Udt],
                                                                    sqlCtx.Indexes[_Schema.WipBuffer.fn_ID]
                                                                });
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetExistPartNo(string partNo)
        {
            //SELECT * FROM IMES_GetData..Part WHERE PartNo = @PartNo AND Flag=1
            try
            {
                DataTable ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Part cond = new _Schema.Part();
                        cond.PartNo = partNo;
                        cond.Flag = 1;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Part), cond, null, null);
                        sqlCtx.Params[_Schema.Part.fn_Flag].Value = cond.Flag;
                    }
                }
                sqlCtx.Params[_Schema.Part.fn_PartNo].Value = partNo;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_BOM, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void SaveWipBuffer(IMES.DataModel.WipBuffer item)
        {
            try
            {
                SqlTransactionManager.Begin();

                if (PeekWipBuffer(item))
                    UpdateWipBuffer_Inner(item);
                else
                    InsertWipBuffer(item);

                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        private bool PeekWipBuffer(IMES.DataModel.WipBuffer item)
        {
            SqlDataReader sqlR = null;
            try
            {
                bool ret = false;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.WipBuffer cond = new _Schema.WipBuffer();
                        cond.PartNo = item.PartNo;
                        cond.Code = item.Code;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.WipBuffer), "COUNT", new List<string>() { _Schema.WipBuffer.fn_ID }, cond, null, null, null, null, null, null, null);

                        sqlCtx.Sentence = sqlCtx.Sentence.Replace("WHERE", "WITH (UPDLOCK) WHERE");
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_PartNo].Value = item.PartNo;
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = item.Code;
                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                if (sqlR != null && sqlR.Read())
                {
                    int cnt = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                    ret = cnt > 0 ? true : false;
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                {
                    sqlR.Close();
                }
            }
        }

        private void UpdateWipBuffer_Inner(IMES.DataModel.WipBuffer item)
        {
            //UPDATE [IMES_FA].[dbo].[WipBuffer]
            //SET LightNo = @LightNo, Qty = @Qty, Sub = @Sub, Safety_Stock = @SafetyStock,
            //Max_Stock = @MaxStock, Remark = @Remark, Editor = @Editor, Udt = GETDATE()
            //WHERE Code = @Code AND PartNo = @PartNo
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.WipBuffer cond = new _Schema.WipBuffer();
                        cond.PartNo = item.PartNo;
                        cond.Code = item.Code;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.WipBuffer), new List<string>() { _Schema.WipBuffer.fn_LightNo, _Schema.WipBuffer.fn_Qty, _Schema.WipBuffer.fn_Sub, _Schema.WipBuffer.fn_Safety_Stock, _Schema.WipBuffer.fn_Max_Stock, _Schema.WipBuffer.fn_Remark, _Schema.WipBuffer.fn_Editor, _Schema.WipBuffer.fn_kittingType, _Schema.WipBuffer.fn_station, _Schema.WipBuffer.fn_line }, null, null, null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_PartNo].Value = item.PartNo;
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = item.Code;
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_LightNo)].Value = item.LightNo;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_Qty)].Value = item.Qty;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_Sub)].Value = item.Sub;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_Safety_Stock)].Value = item.Safety_Stock;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_Max_Stock)].Value = item.Max_Stock;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_Remark)].Value = item.Remark;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_Editor)].Value = item.Editor;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_Udt)].Value = cmDt;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_kittingType)].Value = item.KittingType;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_station)].Value = item.Station;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_line)].Value = item.Line;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void InsertWipBuffer(IMES.DataModel.WipBuffer item)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.WipBuffer));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.WipBuffer.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = item.Code;
                sqlCtx.Params[_Schema.WipBuffer.fn_Editor].Value = item.Editor;
                sqlCtx.Params[_Schema.WipBuffer.fn_LightNo].Value = item.LightNo;
                sqlCtx.Params[_Schema.WipBuffer.fn_Max_Stock].Value = item.Max_Stock;
                sqlCtx.Params[_Schema.WipBuffer.fn_PartNo].Value = item.PartNo;
                sqlCtx.Params[_Schema.WipBuffer.fn_Picture].Value = item.Picture;
                sqlCtx.Params[_Schema.WipBuffer.fn_Qty].Value = item.Qty;
                sqlCtx.Params[_Schema.WipBuffer.fn_Remark].Value = item.Remark;
                sqlCtx.Params[_Schema.WipBuffer.fn_Safety_Stock].Value = item.Safety_Stock;
                sqlCtx.Params[_Schema.WipBuffer.fn_Sub].Value = item.Sub;
                sqlCtx.Params[_Schema.WipBuffer.fn_Tp].Value = item.Tp;
                sqlCtx.Params[_Schema.WipBuffer.fn_Udt].Value = cmDt;
                sqlCtx.Params[_Schema.WipBuffer.fn_station].Value = item.Station;
                sqlCtx.Params[_Schema.WipBuffer.fn_kittingType].Value = item.KittingType;
                sqlCtx.Params[_Schema.WipBuffer.fn_line].Value = item.Line;
                item.ID = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteLightNo(string code, string lightNo)
        {
            //DELETE FROM [IMES_FA].[dbo].[WipBuffer] WHERE Code = @Code AND LightNo = @LightNo
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.WipBuffer cond = new _Schema.WipBuffer();
                        cond.Code = code;
                        cond.LightNo = lightNo;
                        sqlCtx = _Schema.Func.GetConditionedDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.WipBuffer), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = code;
                sqlCtx.Params[_Schema.WipBuffer.fn_LightNo].Value = lightNo;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetLightStationList()
        {
            //SELECT RTRIM(Code) as Code, RTRIM([Type]) as Type, RTRIM(Descr) as Description, RTRIM(Remark) as Remark, RTRIM(Editor) as Editor, Cdt as [Create Date], Udt as [Update Date]
            //         FROM KittingCode WHERE [Type]='Kitting' 
            //         ORDER BY Code, Description
            try
            {
                DataTable ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.KittingCode cond = new _Schema.KittingCode();
                        cond.Type = "Kitting";
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.KittingCode), null, new List<string>() { _Schema.KittingCode.fn_Code, _Schema.KittingCode.fn_Type, _Schema.KittingCode.fn_Descr, _Schema.KittingCode.fn_Remark, _Schema.KittingCode.fn_Editor, _Schema.KittingCode.fn_Cdt, _Schema.KittingCode.fn_Udt }, cond, null, null, null, null, null, null, null);
                        sqlCtx.Params[_Schema.KittingCode.fn_Type].Value = cond.Type;
                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, string.Join(",", new string[] { _Schema.KittingCode.fn_Code, _Schema.KittingCode.fn_Descr }));
                    }
                }
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                ret = _Schema.Func.SortColumns(ret, new int[] { sqlCtx.Indexes[_Schema.KittingCode.fn_Code], 
                                                                sqlCtx.Indexes[_Schema.KittingCode.fn_Type], 
                                                                sqlCtx.Indexes[_Schema.KittingCode.fn_Descr], 
                                                                sqlCtx.Indexes[_Schema.KittingCode.fn_Remark], 
                                                                sqlCtx.Indexes[_Schema.KittingCode.fn_Editor], 
                                                                sqlCtx.Indexes[_Schema.KittingCode.fn_Cdt], 
                                                                sqlCtx.Indexes[_Schema.KittingCode.fn_Udt]
                                                                });

                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void SaveKittingCode(IMES.DataModel.KittingCode item)
        {
            try
            {
                SqlTransactionManager.Begin();

                if (PeekKittingCode(item))
                    UpdateKittingCode(item);
                else
                    InsertKittingCode(item);

                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        private bool PeekKittingCode(IMES.DataModel.KittingCode item)
        {
            SqlDataReader sqlR = null;
            try
            {
                bool ret = false;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.KittingCode cond = new _Schema.KittingCode();
                        cond.Type = item.Type;
                        cond.Code = item.Code;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.KittingCode), "COUNT", new List<string>() { _Schema.KittingCode.fn_Code }, cond, null, null, null, null, null, null, null);
                        sqlCtx.Sentence = sqlCtx.Sentence.Replace("WHERE", "WITH (UPDLOCK) WHERE");
                    }
                }
                sqlCtx.Params[_Schema.KittingCode.fn_Type].Value = item.Type;
                sqlCtx.Params[_Schema.KittingCode.fn_Code].Value = item.Code;
                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                if (sqlR != null && sqlR.Read())
                {
                    int cnt = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                    ret = cnt > 0 ? true : false;
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                {
                    sqlR.Close();
                }
            }
        }

        private void UpdateKittingCode(IMES.DataModel.KittingCode item)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.KittingCode cond = new _Schema.KittingCode();
                        cond.Type = item.Type;
                        cond.Code = item.Code;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.KittingCode), new List<string>() { _Schema.KittingCode.fn_Descr, _Schema.KittingCode.fn_Remark, _Schema.KittingCode.fn_Editor }, null, null, null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.KittingCode.fn_Type].Value = item.Type;
                sqlCtx.Params[_Schema.KittingCode.fn_Code].Value = item.Code;
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.KittingCode.fn_Descr)].Value = item.Descr;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.KittingCode.fn_Remark)].Value = item.Remark;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.KittingCode.fn_Editor)].Value = item.Editor;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.KittingCode.fn_Udt)].Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void InsertKittingCode(IMES.DataModel.KittingCode item)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.KittingCode));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.KittingCode.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.KittingCode.fn_Code].Value = item.Code;
                sqlCtx.Params[_Schema.KittingCode.fn_Descr].Value = item.Descr;
                sqlCtx.Params[_Schema.KittingCode.fn_Editor].Value = item.Editor;
                sqlCtx.Params[_Schema.KittingCode.fn_Remark].Value = item.Remark;
                sqlCtx.Params[_Schema.KittingCode.fn_Type].Value = item.Type;
                sqlCtx.Params[_Schema.KittingCode.fn_Udt].Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteKittingCode(string code)
        {
            //DELETE FROM [IMES_FA].[dbo].[KittingCode] WHERE Code = @Code AND [Type] = 'Kitting'
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.KittingCode cond = new _Schema.KittingCode();
                        cond.Code = code;
                        cond.Type = "Kitting";
                        sqlCtx = _Schema.Func.GetConditionedDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.KittingCode), cond, null, null);
                        sqlCtx.Params[_Schema.KittingCode.fn_Type].Value = cond.Type;
                    }
                }
                sqlCtx.Params[_Schema.KittingCode.fn_Code].Value = code;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetWipBufferID(string code, string partNo)
        {
            //SELECT [ID] FROM WipBuffer WHERE Code = @Code AND PartNo = @PartNo
            try
            {
                DataTable ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.WipBuffer cond = new _Schema.WipBuffer();
                        cond.PartNo = partNo;
                        cond.Code = code;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.WipBuffer), null, new List<string>() { _Schema.WipBuffer.fn_ID }, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_PartNo].Value = partNo;
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = code;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetAreaItem()
        {
            //SELECT DISTINCT Area as Area
            //         FROM TraceStd
            //         ORDER BY Area
            try
            {
                DataTable ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TraceStd), "DISTINCT", new List<string>() { _Schema.TraceStd.fn_Area }, null, null, null, null, null, null, null, null);
                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderByDesc, _Schema.TraceStd.fn_Area);
                    }
                }
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.AreaDef> GetAreaList()
        {
            //SELECT DISTINCT Area as Area
            //         FROM TraceStd
            //         ORDER BY Area
            try
            {
                IList<IMES.DataModel.AreaDef> ret = new List<IMES.DataModel.AreaDef>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TraceStd), "DISTINCT", new List<string>() { _Schema.TraceStd.fn_Area }, null, null, null, null, null, null, null, null);
                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderByDesc, _Schema.TraceStd.fn_Area);
                    }
                }
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.DataModel.AreaDef item = new IMES.DataModel.AreaDef();
                        item.Area = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TraceStd.fn_Area]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetFamilyListFromRunInTimeControl()
        {
            //SELECT Code AS Family 
            //FROM RunInTimeControl
            //         WHERE Type = 'Family'
            //         ORDER BY Family 
            try
            {
                IList<string> ret = new List<string>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.RunInTimeControl cond = new _Schema.RunInTimeControl();
                        cond.type = "Family";
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.RunInTimeControl), null, new List<string>() { _Schema.RunInTimeControl.fn_code }, cond, null, null, null, null, null, null, null);

                        sqlCtx.Params[_Schema.RunInTimeControl.fn_type].Value = cond.type;

                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, _Schema.RunInTimeControl.fn_code);
                    }
                }
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        string item = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_code]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.FisObject.FA.Product.RunInTimeControl> GetRunInTimeControlListByType(string type)
        {
            try
            {
                IList<IMES.FisObject.FA.Product.RunInTimeControl> ret = new List<IMES.FisObject.FA.Product.RunInTimeControl>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.RunInTimeControl cond = new _Schema.RunInTimeControl();
                        cond.type = type;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.RunInTimeControl), cond, null, null);
                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, _Schema.RunInTimeControl.fn_code);
                    }
                }
                sqlCtx.Params[_Schema.RunInTimeControl.fn_type].Value = type;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.FisObject.FA.Product.RunInTimeControl item = new IMES.FisObject.FA.Product.RunInTimeControl();
                        item.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_cdt]);
                        item.Code = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_code]);
                        item.Editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_editor]);
                        item.Hour = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_hour]);
                        item.ID = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_id]);
                        item.Remark = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_remark]);
                        item.Type = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_type]);
                        item.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_udt]);
                        item.TestStation = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_testStation]);
                        item.ControlType = GetValue_Boolean(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_controlType]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IMES.FisObject.FA.Product.RunInTimeControl GetRunInTimeControl(string type, string code)
        {
            try
            {
                IMES.FisObject.FA.Product.RunInTimeControl ret = null;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.RunInTimeControl cond = new _Schema.RunInTimeControl();
                        cond.type = type;
                        cond.code = code;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.RunInTimeControl), "TOP 1", null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.RunInTimeControl.fn_type].Value = type;
                sqlCtx.Params[_Schema.RunInTimeControl.fn_code].Value = code;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = new IMES.FisObject.FA.Product.RunInTimeControl();
                        ret.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_cdt]);
                        ret.Code = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_code]);
                        ret.Editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_editor]);
                        ret.Hour = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_hour]);
                        ret.ID = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_id]);
                        ret.Remark = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_remark]);
                        ret.Type = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_type]);
                        ret.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_udt]);
                        ret.TestStation = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_testStation]);
                        ret.ControlType = GetValue_Boolean(sqlR, sqlCtx.Indexes[_Schema.RunInTimeControl.fn_controlType]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateRunInTimeControlByTypeAndCode(IMES.FisObject.FA.Product.RunInTimeControl runInTimeControl)
        {
            //UPDATE RunInTimeControl 
            //SET Hour = ?, Remark = ?, Editor = ?, Udt = GETDATE()
            //WHERE [Type] = ? AND Code = ? 
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.RunInTimeControl cond = new _Schema.RunInTimeControl();
                        cond.type = runInTimeControl.Type;
                        cond.code = runInTimeControl.Code;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.RunInTimeControl), new List<string>() { _Schema.RunInTimeControl.fn_hour, _Schema.RunInTimeControl.fn_remark, _Schema.RunInTimeControl.fn_editor }, null, null, null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.RunInTimeControl.fn_type].Value = runInTimeControl.Type;
                sqlCtx.Params[_Schema.RunInTimeControl.fn_code].Value = runInTimeControl.Code;
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_hour)].Value = runInTimeControl.Hour;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_remark)].Value = runInTimeControl.Remark;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_editor)].Value = runInTimeControl.Editor;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_udt)].Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateRunInTimeControlById(IMES.FisObject.FA.Product.RunInTimeControl runInTimeControl)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.RunInTimeControl cond = new _Schema.RunInTimeControl();
                        cond.id = runInTimeControl.ID;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.RunInTimeControl), new List<string>() { _Schema.RunInTimeControl.fn_type, _Schema.RunInTimeControl.fn_hour, _Schema.RunInTimeControl.fn_editor, _Schema.RunInTimeControl.fn_code, _Schema.RunInTimeControl.fn_controlType, _Schema.RunInTimeControl.fn_testStation }, null, null, null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.RunInTimeControl.fn_id].Value = runInTimeControl.ID;
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_type)].Value = runInTimeControl.Type;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_hour)].Value = runInTimeControl.Hour;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_editor)].Value = runInTimeControl.Editor;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_code)].Value = runInTimeControl.Code;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_controlType)].Value = runInTimeControl.ControlType;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_testStation)].Value = runInTimeControl.TestStation;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_udt)].Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void InsertRunInTimeControlLog(int id)
        {
            //INSERT RunInTimeControlLog(Code, [Type], [Hour], Remark, Editor, TestStation, ControlType, Cdt)
            //SELECT Code, [Type], Hour, Remark, Editor, TestStation, ControlType, Udt
            //FROM RunInTimeControl
            //WHERE [ID] = @id
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();

                        sqlCtx.Sentence = "INSERT INTO {0} ({1}) SELECT {2} FROM {3} WHERE {4}=@{4} ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence,
                            typeof(_Schema.RunInTimeControlLog).Name,
                            string.Join(",", new string[] { _Schema.RunInTimeControlLog.fn_id, _Schema.RunInTimeControlLog.fn_code, _Schema.RunInTimeControlLog.fn_type, _Schema.RunInTimeControlLog.fn_hour, _Schema.RunInTimeControlLog.fn_remark, _Schema.RunInTimeControlLog.fn_editor, _Schema.RunInTimeControlLog.fn_testStation, _Schema.RunInTimeControlLog.fn_controlType, _Schema.RunInTimeControlLog.fn_cdt }),
                            string.Join(",", new string[] { _Schema.RunInTimeControl.fn_id, _Schema.RunInTimeControl.fn_code, _Schema.RunInTimeControl.fn_type, _Schema.RunInTimeControl.fn_hour, _Schema.RunInTimeControl.fn_remark, _Schema.RunInTimeControl.fn_editor, _Schema.RunInTimeControl.fn_testStation, _Schema.RunInTimeControl.fn_controlType, _Schema.RunInTimeControl.fn_udt }),
                            typeof(_Schema.RunInTimeControl).Name,
                            _Schema.RunInTimeControl.fn_id);

                        sqlCtx.Params.Add(_Schema.RunInTimeControl.fn_id, new SqlParameter("@" + _Schema.RunInTimeControl.fn_id, SqlDbType.Int));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.RunInTimeControl.fn_id].Value = id;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void InsertRunInTimeControl(IMES.FisObject.FA.Product.RunInTimeControl runInTimeControl)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.RunInTimeControl));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.RunInTimeControl.fn_cdt].Value = cmDt;
                sqlCtx.Params[_Schema.RunInTimeControl.fn_code].Value = runInTimeControl.Code;
                sqlCtx.Params[_Schema.RunInTimeControl.fn_editor].Value = runInTimeControl.Editor;
                sqlCtx.Params[_Schema.RunInTimeControl.fn_hour].Value = runInTimeControl.Hour;
                sqlCtx.Params[_Schema.RunInTimeControl.fn_remark].Value = runInTimeControl.Remark;
                sqlCtx.Params[_Schema.RunInTimeControl.fn_type].Value = runInTimeControl.Type;
                sqlCtx.Params[_Schema.RunInTimeControl.fn_udt].Value = cmDt;
                sqlCtx.Params[_Schema.RunInTimeControl.fn_testStation].Value = runInTimeControl.TestStation;
                sqlCtx.Params[_Schema.RunInTimeControl.fn_controlType].Value = runInTimeControl.ControlType;
                runInTimeControl.ID = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteRunInTimeControl(string type, string code)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.RunInTimeControl cond = new _Schema.RunInTimeControl();
                        cond.type = type;
                        cond.code = code;
                        sqlCtx = _Schema.Func.GetConditionedDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.RunInTimeControl), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.RunInTimeControl.fn_type].Value = type;
                sqlCtx.Params[_Schema.RunInTimeControl.fn_code].Value = code;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteRunInTimeControlById(int id)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.RunInTimeControl cond = new _Schema.RunInTimeControl();
                        cond.id = id;
                        sqlCtx = _Schema.Func.GetConditionedDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.RunInTimeControl), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.RunInTimeControl.fn_id].Value = id;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.TraceStdInfo> GetTraceStdList(string family, string area)
        {
            try
            {
                IList<IMES.DataModel.TraceStdInfo> ret = new List<IMES.DataModel.TraceStdInfo>();

                _Schema.SQLContextCollection sqlSet = new _Schema.SQLContextCollection();
                int i = 0;
                sqlSet.AddOne(i++, ComposeForGetTraceStdList_All());
                if (!string.IsNullOrEmpty(family))
                    sqlSet.AddOne(i++, ComposeForGetTraceStdList_Family(family));
                if (!string.IsNullOrEmpty(area))
                    sqlSet.AddOne(i++, ComposeForGetTraceStdList_Area(area));

                _Schema.SQLContext sqlCtx = sqlSet.MergeToOneAndQuery();
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null)
                    {
                        while (sqlR.Read())
                        {
                            IMES.DataModel.TraceStdInfo item = new IMES.DataModel.TraceStdInfo();
                            item.Family = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TraceStd.fn_Family]);
                            item.Area = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TraceStd.fn_Area]);
                            item.Type = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TraceStd.fn_Type]);
                            item.Editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.TraceStd.fn_Editor]);
                            item.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.TraceStd.fn_Cdt]);
                            item.Id = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.TraceStd.fn_ID]);
                            item.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.TraceStd.fn_Udt]);
                            ret.Add(item);
                        }
                    }
                }
                return (from c in ret orderby c.Family, c.Area select c).ToList();
            }
            catch (Exception)
            {
                throw;
            }
        }

        private _Schema.SQLContext ComposeForGetTraceStdList_All()
        {
            _Schema.SQLContext sqlCtx = null;
            lock (MethodBase.GetCurrentMethod())
            {
                if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                {
                    sqlCtx = _Schema.Func.GetCommonSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TraceStd));
                }
            }
            return sqlCtx;
        }

        private _Schema.SQLContext ComposeForGetTraceStdList_Family(string family)
        {
            _Schema.SQLContext sqlCtx = null;
            lock (MethodBase.GetCurrentMethod())
            {
                if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                {
                    _Schema.TraceStd cond = new _Schema.TraceStd();
                    cond.Family = family;
                    sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TraceStd), null, new List<string>() { _Schema.TraceStd.fn_Family, _Schema.TraceStd.fn_Area, _Schema.TraceStd.fn_Type, _Schema.TraceStd.fn_Editor, _Schema.TraceStd.fn_Cdt, _Schema.TraceStd.fn_ID, _Schema.TraceStd.fn_Udt }, cond, null, null, null, null, null, null, null);
                }
            }
            sqlCtx.Params[_Schema.TraceStd.fn_Family].Value = family;
            return sqlCtx;
        }

        private _Schema.SQLContext ComposeForGetTraceStdList_Area(string area)
        {
            _Schema.SQLContext sqlCtx = null;
            lock (MethodBase.GetCurrentMethod())
            {
                if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                {
                    _Schema.TraceStd cond = new _Schema.TraceStd();
                    cond.Area = area;
                    sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TraceStd), null, new List<string>() { _Schema.TraceStd.fn_Family, _Schema.TraceStd.fn_Area, _Schema.TraceStd.fn_Type, _Schema.TraceStd.fn_Editor, _Schema.TraceStd.fn_Cdt, _Schema.TraceStd.fn_ID, _Schema.TraceStd.fn_Udt }, cond, null, null, null, null, null, null, null);
                }
            }
            sqlCtx.Params[_Schema.TraceStd.fn_Area].Value = area;
            return sqlCtx;
        }

        public void SaveAllKindsOfTypeInfo(IMES.DataModel.TraceStdInfo item)
        {
            try
            {
                SqlTransactionManager.Begin();

                if (!PeekTraceStdInfo(item))
                    InsertTraceStdInfo(item);

                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        private bool PeekTraceStdInfo(IMES.DataModel.TraceStdInfo item)
        {
            SqlDataReader sqlR = null;
            try
            {
                bool ret = false;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.TraceStd cond = new _Schema.TraceStd();
                        cond.Family = item.Family;
                        cond.Area = item.Area;
                        cond.Type = item.Type;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TraceStd), "COUNT", new List<string>() { _Schema.TraceStd.fn_Family }, cond, null, null, null, null, null, null, null);

                        sqlCtx.Sentence = sqlCtx.Sentence.Replace("WHERE", "WITH (UPDLOCK) WHERE");
                    }
                }
                sqlCtx.Params[_Schema.TraceStd.fn_Family].Value = item.Family;
                sqlCtx.Params[_Schema.TraceStd.fn_Area].Value = item.Area;
                sqlCtx.Params[_Schema.TraceStd.fn_Type].Value = item.Type;
                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                if (sqlR != null && sqlR.Read())
                {
                    int cnt = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                    ret = cnt > 0 ? true : false;
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                {
                    sqlR.Close();
                }
            }
        }

        private void InsertTraceStdInfo(IMES.DataModel.TraceStdInfo item)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TraceStd));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.TraceStd.fn_Area].Value = item.Area;
                sqlCtx.Params[_Schema.TraceStd.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.TraceStd.fn_Editor].Value = item.Editor;
                sqlCtx.Params[_Schema.TraceStd.fn_Family].Value = item.Family;
                sqlCtx.Params[_Schema.TraceStd.fn_Type].Value = item.Type;
                sqlCtx.Params[_Schema.TraceStd.fn_Udt].Value = cmDt;
                item.Id = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteResult(IMES.DataModel.TraceStdInfo item)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.TraceStd cond = new _Schema.TraceStd();
                        cond.Family = item.Family;
                        cond.Area = item.Area;
                        cond.Type = item.Type;
                        sqlCtx = _Schema.Func.GetConditionedDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TraceStd), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.TraceStd.fn_Family].Value = item.Family;
                sqlCtx.Params[_Schema.TraceStd.fn_Area].Value = item.Area;
                sqlCtx.Params[_Schema.TraceStd.fn_Type].Value = item.Type;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetId(IMES.DataModel.TraceStdInfo item)
        {
            try
            {
                int ret = 0;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.TraceStd cond = new _Schema.TraceStd();
                        cond.Family = item.Family;
                        cond.Area = item.Area;
                        cond.Type = item.Type;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TraceStd), "TOP 1", new List<string>() { _Schema.TraceStd.fn_ID }, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.TraceStd.fn_Family].Value = item.Family;
                sqlCtx.Params[_Schema.TraceStd.fn_Area].Value = item.Area;
                sqlCtx.Params[_Schema.TraceStd.fn_Type].Value = item.Type;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.TraceStd.fn_ID]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.WLBTDescr> GetAllWLBTDescr()
        {
            try
            {
                IList<IMES.DataModel.WLBTDescr> ret = new List<IMES.DataModel.WLBTDescr>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.WLBTDescr));

                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, string.Join(",", new string[] { _Schema.WLBTDescr.fn_Code, _Schema.WLBTDescr.fn_Site, _Schema.WLBTDescr.fn_Tp }));
                    }
                }
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.DataModel.WLBTDescr item = new IMES.DataModel.WLBTDescr();
                        item.Id = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_ID]);
                        item.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_Cdt]);
                        item.Code = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_Code]);
                        item.Descr = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_Descr]);
                        item.Editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_Editor]);
                        item.Site = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_Site]);
                        item.Tp = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_Tp]);
                        item.TpDescr = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_TpDescr]);
                        item.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_Udt]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.WLBTDescr> GetWLBTDescrListByPartNo(string partNo)
        {
            try
            {
                IList<IMES.DataModel.WLBTDescr> ret = new List<IMES.DataModel.WLBTDescr>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.WLBTDescr cond = new _Schema.WLBTDescr();
                        cond.Code = partNo;

                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.WLBTDescr), cond, null, null);

                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, string.Join(",", new string[] { _Schema.WLBTDescr.fn_Code, _Schema.WLBTDescr.fn_Site, _Schema.WLBTDescr.fn_Tp }));
                    }
                }
                sqlCtx.Params[_Schema.WLBTDescr.fn_Code].Value = partNo;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.DataModel.WLBTDescr item = new IMES.DataModel.WLBTDescr();
                        item.Id = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_ID]);
                        item.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_Cdt]);
                        item.Code = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_Code]);
                        item.Descr = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_Descr]);
                        item.Editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_Editor]);
                        item.Site = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_Site]);
                        item.Tp = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_Tp]);
                        item.TpDescr = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_TpDescr]);
                        item.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_Udt]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int IFWLBTDescrIsExists(IMES.DataModel.WLBTDescr descr)
        {
            try
            {
                int ret = 0;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.WLBTDescr cond = new _Schema.WLBTDescr();
                        cond.Code = descr.Code;
                        cond.Tp = descr.Tp;
                        cond.Site = descr.Site;
                        cond.TpDescr = descr.TpDescr;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.WLBTDescr), "TOP 1", new List<string>() { _Schema.WLBTDescr.fn_ID }, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.WLBTDescr.fn_Code].Value = descr.Code;
                sqlCtx.Params[_Schema.WLBTDescr.fn_Tp].Value = descr.Tp;
                sqlCtx.Params[_Schema.WLBTDescr.fn_Site].Value = descr.Site;
                sqlCtx.Params[_Schema.WLBTDescr.fn_TpDescr].Value = descr.TpDescr;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.WLBTDescr.fn_ID]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateWLBTDescr(IMES.DataModel.WLBTDescr descr)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.WLBTDescr));
                    }
                }
                sqlCtx.Params[_Schema.WLBTDescr.fn_ID].Value = descr.Id;
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.WLBTDescr.fn_Code].Value = descr.Code;
                sqlCtx.Params[_Schema.WLBTDescr.fn_Descr].Value = descr.Descr;
                sqlCtx.Params[_Schema.WLBTDescr.fn_Editor].Value = descr.Editor;
                sqlCtx.Params[_Schema.WLBTDescr.fn_Site].Value = descr.Site;
                sqlCtx.Params[_Schema.WLBTDescr.fn_Tp].Value = descr.Tp;
                sqlCtx.Params[_Schema.WLBTDescr.fn_TpDescr].Value = descr.TpDescr;
                sqlCtx.Params[_Schema.WLBTDescr.fn_Udt].Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void InsertWLBTDescr(IMES.DataModel.WLBTDescr descr)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.WLBTDescr));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.WLBTDescr.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.WLBTDescr.fn_Code].Value = descr.Code;
                sqlCtx.Params[_Schema.WLBTDescr.fn_Descr].Value = descr.Descr;
                sqlCtx.Params[_Schema.WLBTDescr.fn_Editor].Value = descr.Editor;
                sqlCtx.Params[_Schema.WLBTDescr.fn_Site].Value = descr.Site;
                sqlCtx.Params[_Schema.WLBTDescr.fn_Tp].Value = descr.Tp;
                sqlCtx.Params[_Schema.WLBTDescr.fn_TpDescr].Value = descr.TpDescr;
                sqlCtx.Params[_Schema.WLBTDescr.fn_Udt].Value = cmDt;
                descr.Id = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
        }

        public void DeleteWLBTDescr(string id)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.WLBTDescr));
                    }
                }
                sqlCtx.Params[_Schema.WLBTDescr.fn_ID].Value = id;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateAllKindsOfTypeInfo(IMES.DataModel.TraceStdInfo item)
        {
            // IF EXISTS(SELECT * FROM [IMES_FA].[dbo].[TraceStd]
            //      WHERE Family = @Family AND Area = @Area)
            // UPDATE [IMES_FA].[dbo].[TraceStd]
            //      SET [Type]= @Type,[Editor]=@ Editor,[Udt]=GETDATE()
            //      WHERE Family = @Family AND Area = @Area 
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.TraceStd cond = new _Schema.TraceStd();
                        cond.Family = item.Family;
                        cond.Area = item.Area;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TraceStd), new List<string>() { _Schema.TraceStd.fn_Type, _Schema.TraceStd.fn_Editor }, null, null, null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.TraceStd.fn_Family].Value = item.Family;
                sqlCtx.Params[_Schema.TraceStd.fn_Area].Value = item.Area;
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.TraceStd.fn_Type)].Value = item.Type;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.TraceStd.fn_Editor)].Value = item.Editor;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.TraceStd.fn_Udt)].Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int CheckExistsRecord(IMES.DataModel.TraceStdInfo item)
        {
            // SELECT COUNT(*) FROM [IMES_FA].[dbo].[TraceStd]
            // WHERE Family = @Family AND Area = @Area AND Type=@Type
            try
            {
                int ret = 0;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.TraceStd cond = new _Schema.TraceStd();
                        cond.Family = item.Family;
                        cond.Area = item.Area;
                        cond.Type = item.Type;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TraceStd), "COUNT", new List<string>() { _Schema.TraceStd.fn_Family }, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.TraceStd.fn_Family].Value = item.Family;
                sqlCtx.Params[_Schema.TraceStd.fn_Area].Value = item.Area;
                sqlCtx.Params[_Schema.TraceStd.fn_Type].Value = item.Type;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool IsKittingCodeExist(string code)
        {
            // IF EXISTS(SELECT * FROM [IMES_FA].[dbo].[KittingCode] WHERE Code = @Code AND [Type] = 'Kitting')
            try
            {
                bool ret = false;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.KittingCode cond = new _Schema.KittingCode();
                        cond.Code = code;
                        cond.Type = "Kitting";
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.KittingCode), "COUNT", new List<string>() { _Schema.KittingCode.fn_Code }, cond, null, null, null, null, null, null, null);
                        sqlCtx.Params[_Schema.KittingCode.fn_Type].Value = cond.Type;
                    }
                }
                sqlCtx.Params[_Schema.KittingCode.fn_Code].Value = code;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                        ret = cnt > 0 ? true : false;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateKittingCode(string code, string descr, string remark, string editor)
        {
            // UPDATE [IMES_FA].[dbo].[KittingCode]
            // SET Descr = @Description, Remark = @Remark,Editor = @Editor,Udt = GETDATE()
            // WHERE Code = @Code AND [Type] = 'Kitting'
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.KittingCode cond = new _Schema.KittingCode();
                        cond.Code = code;
                        cond.Type = "Kitting";
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.KittingCode), new List<string>() { _Schema.KittingCode.fn_Descr, _Schema.KittingCode.fn_Remark, _Schema.KittingCode.fn_Editor }, null, null, null, cond, null, null, null, null, null, null, null);
                        sqlCtx.Params[_Schema.KittingCode.fn_Type].Value = cond.Type;
                    }
                }
                sqlCtx.Params[_Schema.KittingCode.fn_Code].Value = code;
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.KittingCode.fn_Descr)].Value = descr;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.KittingCode.fn_Remark)].Value = remark;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.KittingCode.fn_Editor)].Value = editor;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.KittingCode.fn_Udt)].Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddKittingCode(IMES.DataModel.KittingCode item)
        {
            // INSERT INTO [IMES_FA].[dbo].[KittingCode]
            // ([Code],[Type],[Descr],[Remark],[Editor],[Cdt],[Udt]) VALUES(@Code, 'Kitting', 
            // @Description, @Remark, @Editor, GETDATE(), GETDATE())
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.KittingCode));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.KittingCode.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.KittingCode.fn_Code].Value = item.Code;
                sqlCtx.Params[_Schema.KittingCode.fn_Descr].Value = item.Descr;
                sqlCtx.Params[_Schema.KittingCode.fn_Editor].Value = item.Editor;
                sqlCtx.Params[_Schema.KittingCode.fn_Remark].Value = item.Remark;
                sqlCtx.Params[_Schema.KittingCode.fn_Type].Value = item.Type;
                sqlCtx.Params[_Schema.KittingCode.fn_Udt].Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool IsWipBufferExist(string code, string partNo)
        {
            // IF EXISTS(SELECT * FROM WipBuffer WHERE Code = @Code AND PartNo = @PartNo)
            // 返回true
            // 否则false
            try
            {
                bool ret = false;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.WipBuffer cond = new _Schema.WipBuffer();
                        cond.Code = code;
                        cond.PartNo = partNo;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.WipBuffer), "COUNT", new List<string>() { _Schema.WipBuffer.fn_ID }, cond, null, null, null, null, null, null, null);

                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = code;
                sqlCtx.Params[_Schema.WipBuffer.fn_PartNo].Value = partNo;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                        ret = cnt > 0 ? true : false;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateWipBuffer(IMES.DataModel.WipBuffer item)
        {
            // UPDATE [IMES_FA].[dbo].[WipBuffer]
            // SET LightNo = @LightNo, Qty = @Qty, Sub = @Sub, Safety_Stock = @SafetyStock,
            //     Max_Stock = @MaxStock, Remark = @Remark, Editor = @Editor, Udt = GETDATE()
            // WHERE ID=id
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.WipBuffer cond = new _Schema.WipBuffer();
                        cond.ID = item.ID;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.WipBuffer), new List<string>() { _Schema.WipBuffer.fn_LightNo, _Schema.WipBuffer.fn_Qty, _Schema.WipBuffer.fn_Sub, _Schema.WipBuffer.fn_Safety_Stock, _Schema.WipBuffer.fn_Max_Stock, _Schema.WipBuffer.fn_Remark, _Schema.WipBuffer.fn_Editor, _Schema.WipBuffer.fn_kittingType, _Schema.WipBuffer.fn_station, _Schema.WipBuffer.fn_line }, null, null, null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_ID].Value = item.ID;
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_LightNo)].Value = item.LightNo;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_Qty)].Value = item.Qty;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_Sub)].Value = item.Sub;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_Safety_Stock)].Value = item.Safety_Stock;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_Max_Stock)].Value = item.Max_Stock;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_Remark)].Value = item.Remark;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_Editor)].Value = item.Editor;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_Udt)].Value = cmDt;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_kittingType)].Value = item.KittingType;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_station)].Value = item.Station;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.WipBuffer.fn_line)].Value = item.Line;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddWipBuffer(IMES.DataModel.WipBuffer item)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.WipBuffer));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.WipBuffer.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = item.Code;
                sqlCtx.Params[_Schema.WipBuffer.fn_Editor].Value = item.Editor;
                sqlCtx.Params[_Schema.WipBuffer.fn_LightNo].Value = item.LightNo;
                sqlCtx.Params[_Schema.WipBuffer.fn_Max_Stock].Value = item.Max_Stock;
                sqlCtx.Params[_Schema.WipBuffer.fn_PartNo].Value = item.PartNo;
                sqlCtx.Params[_Schema.WipBuffer.fn_Picture].Value = item.Picture;
                sqlCtx.Params[_Schema.WipBuffer.fn_Qty].Value = item.Qty;
                sqlCtx.Params[_Schema.WipBuffer.fn_Remark].Value = item.Remark;
                sqlCtx.Params[_Schema.WipBuffer.fn_Safety_Stock].Value = item.Safety_Stock;
                sqlCtx.Params[_Schema.WipBuffer.fn_Sub].Value = item.Sub;
                sqlCtx.Params[_Schema.WipBuffer.fn_Tp].Value = item.Tp;
                sqlCtx.Params[_Schema.WipBuffer.fn_Udt].Value = cmDt;
                sqlCtx.Params[_Schema.WipBuffer.fn_station].Value = item.Station;
                sqlCtx.Params[_Schema.WipBuffer.fn_kittingType].Value = item.KittingType;
                sqlCtx.Params[_Schema.WipBuffer.fn_line].Value = item.Line;
                item.ID = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetLineList()
        {
            // SELECT DISTINCT [Line]
            // FROM [IMES_GetData].[dbo].[Line]
            try
            {
                IList<string> ret = new List<string>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Line), "DISTINCT", new List<string>() { _Schema.Line.fn_line }, null, null, null, null, null, null, null, null);
                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, _Schema.Line.fn_line);
                    }
                }
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        string item = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Line.fn_line]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.FaStationInfo> GetFaStationInfoList()
        {
            // SELECT [ID],[Line],[Station],[OptCode],[OptName],[Remark],[Editor],[Cdt],[Udt]
            //   FROM [IMES_FA_Datamaintain].[dbo].[FA_Station]
            //   ORDER BY [Line]
            try
            {
                IList<IMES.DataModel.FaStationInfo> ret = new List<IMES.DataModel.FaStationInfo>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetCommonSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.FA_Station));
                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, _Schema.FA_Station.fn_Line);
                    }
                }
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, null))
                {
                    if (sqlR != null)
                    {
                        while (sqlR.Read())
                        {
                            IMES.DataModel.FaStationInfo item = new IMES.DataModel.FaStationInfo();
                            item.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_Cdt]);
                            item.Editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_Editor]);
                            item.ID = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_ID]);
                            item.Line = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_Line]);
                            item.OptCode = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_OptCode]);
                            item.OptName = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_OptName]);
                            item.Remark = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_Remark]);
                            item.Station = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_Station]);
                            item.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_Udt]);
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.FaStationInfo> GetFaStationInfoList(string line)
        {
            // SELECT [ID],[Line],[Station],[OptCode],[OptName],[Remark],[Editor],[Cdt],[Udt]
            //   FROM [IMES_FA_Datamaintain].[dbo].[FA_Station]
            //   WHERE [Line]=@Line
            //   ORDER BY [Line]
            try
            {
                IList<IMES.DataModel.FaStationInfo> ret = new List<IMES.DataModel.FaStationInfo>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.FA_Station cond = new _Schema.FA_Station();
                        cond.Line = line;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.FA_Station), cond, null, null);
                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, _Schema.FA_Station.fn_Line);     
                    }
                }
                sqlCtx.Params[_Schema.FA_Station.fn_Line].Value = line;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.DataModel.FaStationInfo item = new IMES.DataModel.FaStationInfo();
                        item.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_Cdt]);
                        item.Editor = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_Editor]);
                        item.ID = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_ID]);
                        item.Line = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_Line]);
                        item.OptCode = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_OptCode]);
                        item.OptName = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_OptName]);
                        item.Remark = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_Remark]);
                        item.Station = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_Station]);
                        item.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_Udt]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int CheckExistsRecord(string line, string station)
        {
            // SELECT COUNT(*)
            //   FROM [IMES_FA_Datamaintain].[dbo].[FA_Station]
            //   WHERE [Line]=@Line AND [Station]=@Station
            try
            {
                int ret = 0;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.FA_Station cond = new _Schema.FA_Station();
                        cond.Line = line;
                        cond.Station = station;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.FA_Station), "COUNT", new List<string>() { _Schema.FA_Station.fn_ID }, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.FA_Station.fn_Line].Value = line;
                sqlCtx.Params[_Schema.FA_Station.fn_Station].Value = station;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetID(string line, string station)
        {
            // SELECT [ID] FROM [IMES_FA_Datamaintain].[dbo].[FA_Station]
            //   WHERE [Line]=@Line AND [Station]=@Station
            try
            {
                int ret = 0;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.FA_Station cond = new _Schema.FA_Station();
                        cond.Line = line;
                        cond.Station = station;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.FA_Station), "TOP 1", new List<string>() { _Schema.FA_Station.fn_ID }, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.FA_Station.fn_Line].Value = line;
                sqlCtx.Params[_Schema.FA_Station.fn_Station].Value = station;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.FA_Station.fn_ID]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateFaStation(IMES.DataModel.FaStationInfo item)
        {
            // UPDATE [IMES_FA_Datamaintain].[dbo].[FA_Station]
            //    SET [OptCode] = @OptCode
            //       ,[OptName] = @OptName
            //       ,[Remark] =  @Remark
            //       ,[Editor] = @Editor
            //       ,[Udt] = GETDATE()
            //  WHERE [Line] = @Line
            //       AND [Station] = @Station
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.FA_Station cond = new _Schema.FA_Station();
                        cond.Line = item.Line;
                        cond.Station = item.Station;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.FA_Station), new List<string>() { _Schema.FA_Station.fn_OptCode,_Schema.FA_Station.fn_OptName,_Schema.FA_Station.fn_Remark,_Schema.FA_Station.fn_Editor }, null, null, null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.FA_Station.fn_Line].Value = item.Line;
                sqlCtx.Params[_Schema.FA_Station.fn_Station].Value = item.Station;
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.FA_Station.fn_OptCode)].Value = item.OptCode;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.FA_Station.fn_OptName)].Value = item.OptName;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.FA_Station.fn_Remark)].Value = item.Remark;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.FA_Station.fn_Editor)].Value = item.Editor;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.FA_Station.fn_Udt)].Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void InsertFaStation(IMES.DataModel.FaStationInfo item)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = _Schema.Func.GetAquireIdInsert(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.FA_Station));
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.FA_Station.fn_Cdt].Value = cmDt;
                sqlCtx.Params[_Schema.FA_Station.fn_Editor].Value = item.Editor;
                sqlCtx.Params[_Schema.FA_Station.fn_Line].Value = item.Line;
                sqlCtx.Params[_Schema.FA_Station.fn_OptCode].Value = item.OptCode;
                sqlCtx.Params[_Schema.FA_Station.fn_OptName].Value = item.OptName;
                sqlCtx.Params[_Schema.FA_Station.fn_Remark].Value = item.Remark;
                sqlCtx.Params[_Schema.FA_Station.fn_Station].Value = item.Station;
                sqlCtx.Params[_Schema.FA_Station.fn_Udt].Value = cmDt;
                item.ID = Convert.ToInt32(_Schema.SqlHelper.ExecuteScalar(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()));
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteFaStationInfo(string line, string station)
        {
            // DELETE FROM [IMES_FA_Datamaintain].[dbo].[FA_Station]
            //       WHERE [Line]=@Line AND [Station]=@Station
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.FA_Station cond = new _Schema.FA_Station();
                        cond.Line = line;
                        cond.Station = station;
                        sqlCtx = _Schema.Func.GetConditionedDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.FA_Station), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.FA_Station.fn_Line].Value = line;
                sqlCtx.Params[_Schema.FA_Station.fn_Station].Value = station;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<MasterLabelInfo> GetAllMasterLabels()
        {
            try
            {
                IList<MasterLabelInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetCommonSelect<MasterLabel>(tk, MasterLabel.fn_code, MasterLabel.fn_vc);
                    }
                }
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<MasterLabel, MasterLabelInfo, MasterLabelInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void RemoveMasterLabelItem(int id)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        MasterLabel cond = new MasterLabel();
                        cond.id = id;
                        sqlCtx = FuncNew.GetConditionedDelete<MasterLabel>(tk, new ConditionCollection<MasterLabel>(new EqualCondition<MasterLabel>(cond)));
                    }
                }
                sqlCtx.Param(MasterLabel.fn_id).Value = id;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<MasterLabelInfo> GetMasterLabelByVCAndCode(string vc, string family)
        {
            try
            {
                IList<MasterLabelInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        MasterLabel cond = new MasterLabel();
                        cond.vc = vc;
                        cond.family = family;
                        sqlCtx = FuncNew.GetConditionedSelect<MasterLabel>(tk, null, null, new ConditionCollection<MasterLabel>(new EqualCondition<MasterLabel>(cond)), MasterLabel.fn_cdt);
                    }
                }
                sqlCtx.Param(MasterLabel.fn_vc).Value = vc;
                sqlCtx.Param(MasterLabel.fn_family).Value = family;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<MasterLabel, MasterLabelInfo, MasterLabelInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<MasterLabelInfo> GetMasterLabelByVCAndCode(string[] vcs, string family)
        {
            try
            {
                IList<MasterLabelInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        MasterLabel cond0 = new MasterLabel();
                        cond0.vc = "[INSET]";

                        MasterLabel cond = new MasterLabel();
                        cond.family = family;

                        sqlCtx = FuncNew.GetConditionedSelect<MasterLabel>(tk, null, null, new ConditionCollection<MasterLabel>(
                            new EqualCondition<MasterLabel>(cond),
                            new InSetCondition<MasterLabel>(cond0)), MasterLabel.fn_cdt);
                    }
                }
                sqlCtx.Param(MasterLabel.fn_family).Value = family;

                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(mtns.MasterLabel.fn_vc), g.ConvertInSet(vcs));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<MasterLabel, MasterLabelInfo, MasterLabelInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<MasterLabelInfo> GetMasterLabelByVC(string vc)
        {
            try
            {
                IList<MasterLabelInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        MasterLabel cond = new MasterLabel();
                        cond.vc = vc;
                        sqlCtx = FuncNew.GetConditionedSelect<MasterLabel>(tk, null, null, new ConditionCollection<MasterLabel>(new EqualCondition<MasterLabel>(cond)), MasterLabel.fn_family);
                    }
                }
                sqlCtx.Param(MasterLabel.fn_vc).Value = vc;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<MasterLabel, MasterLabelInfo, MasterLabelInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<MasterLabelInfo> GetMasterLabelByCode(string family)
        {
            try
            {
                IList<MasterLabelInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        MasterLabel cond = new MasterLabel();
                        cond.family = family;
                        sqlCtx = FuncNew.GetConditionedSelect<MasterLabel>(tk, null, null, new ConditionCollection<MasterLabel>(new EqualCondition<MasterLabel>(cond)), MasterLabel.fn_vc);
                    }
                }
                sqlCtx.Param(MasterLabel.fn_family).Value = family;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<MasterLabel, MasterLabelInfo, MasterLabelInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddMasterLabelItem(MasterLabelInfo ml)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<MasterLabel>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<MasterLabel, MasterLabelInfo>(sqlCtx, ml);

                sqlCtx.Param(MasterLabel.fn_cdt).Value = cmDt;
                sqlCtx.Param(MasterLabel.fn_udt).Value = cmDt;

                ml.id = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateMasterLabelItem(MasterLabelInfo ml, string vc, string family)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        MasterLabel cond = new MasterLabel();
                        cond.vc = vc;
                        cond.family = family;
                        MasterLabel setv = FuncNew.SetColumnFromField<MasterLabel, MasterLabelInfo>(ml, MasterLabel.fn_id, MasterLabel.fn_cdt);
                        setv.udt = DateTime.Now;
                        sqlCtx = FuncNew.GetConditionedUpdate<MasterLabel>(tk, new SetValueCollection<MasterLabel>(new CommonSetValue<MasterLabel>(setv)), new ConditionCollection<MasterLabel>(new EqualCondition<MasterLabel>(cond)));
                    }
                }
                sqlCtx.Param(MasterLabel.fn_vc).Value = vc;
                sqlCtx.Param(MasterLabel.fn_family).Value = family;

                sqlCtx = FuncNew.SetColumnFromField<MasterLabel, MasterLabelInfo>(sqlCtx, ml, true);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(MasterLabel.fn_udt)).Value = cmDt;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetVendorsByLikeDescr(string descr)
        {
            try
            {
                IList<string> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        IqcPnoBom cond = new IqcPnoBom();
                        cond.descr = descr + "%";
                        IqcPnoBom cond2 = new IqcPnoBom();
                        cond2.vendor = string.Empty;
                        sqlCtx = FuncNew.GetConditionedSelect<IqcPnoBom>(tk, "DISTINCT UPPER", new string[] { IqcPnoBom.fn_vendor }, 
                            new ConditionCollection<IqcPnoBom>( new LikeCondition<IqcPnoBom>(cond),
                                                                new NotEqualCondition<IqcPnoBom>(cond2)
                                                                ), string.Format("UPPER({0})",IqcPnoBom.fn_vendor));
                        sqlCtx.Param(IqcPnoBom.fn_vendor).Value = cond2.vendor;
                    }
                }
                sqlCtx.Param(IqcPnoBom.fn_descr).Value = descr + "%";

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string>();
                        while (sqlR.Read())
                        {
                            string result = g.GetValue_Str(sqlR, sqlCtx.Indexes("DISTINCT UPPER"));
                            ret.Add(result);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<SupplierCodeInfo> GetAllSupplierCodeList()
        {
            try
            {
                IList<SupplierCodeInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetCommonSelect<SupplierCode>(tk, SupplierCode.fn_vendor, SupplierCode.fn_idex);
                    }
                }
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<SupplierCode, SupplierCodeInfo, SupplierCodeInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<SupplierCodeInfo> GetSupplierCodeListByCode(string code)
        {
            try
            {
                IList<SupplierCodeInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        SupplierCode cond = new SupplierCode();
                        cond.code = code;
                        sqlCtx = FuncNew.GetConditionedSelect<SupplierCode>(tk, null, null, new ConditionCollection<SupplierCode>(new EqualCondition<SupplierCode>(cond)), SupplierCode.fn_vendor, SupplierCode.fn_idex);
                    }
                }
                sqlCtx.Param(SupplierCode.fn_code).Value = code;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<SupplierCode, SupplierCodeInfo, SupplierCodeInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<SupplierCodeInfo> GetSupplierCodeListByCode(string vendor, string idex)
        {
            try
            {
                IList<SupplierCodeInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        SupplierCode cond = new SupplierCode();
                        cond.vendor = vendor;
                        cond.idex = idex;
                        sqlCtx = FuncNew.GetConditionedSelect<SupplierCode>(tk, null, null, new ConditionCollection<SupplierCode>(new EqualCondition<SupplierCode>(cond)), SupplierCode.fn_code);
                    }
                }
                sqlCtx.Param(SupplierCode.fn_vendor).Value = vendor;
                sqlCtx.Param(SupplierCode.fn_idex).Value = idex;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<SupplierCode, SupplierCodeInfo, SupplierCodeInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddSupplierCodeInfo(SupplierCodeInfo item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<SupplierCode>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<SupplierCode, SupplierCodeInfo>(sqlCtx, item);

                sqlCtx.Param(SupplierCode.fn_cdt).Value = cmDt;
                sqlCtx.Param(SupplierCode.fn_udt).Value = cmDt;

                item.id = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void RemoveSupplierCodeInfo(int id)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        SupplierCode cond = new SupplierCode();
                        cond.id = id;
                        sqlCtx = FuncNew.GetConditionedDelete<SupplierCode>(tk, new ConditionCollection<SupplierCode>(new EqualCondition<SupplierCode>(cond)));
                    }
                }
                sqlCtx.Param(SupplierCode.fn_id).Value = id;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public SupplierCodeInfo FindSupplierCodeInfo(int id)
        {
            try
            {
                SupplierCodeInfo ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        SupplierCode cond = new SupplierCode();
                        cond.id = id;
                        sqlCtx = FuncNew.GetConditionedSelect<SupplierCode>(tk, null, null, new ConditionCollection<SupplierCode>(new EqualCondition<SupplierCode>(cond)));
                    }
                }
                sqlCtx.Param(SupplierCode.fn_id).Value = id;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<SupplierCode, SupplierCodeInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }
    
        #region . LJK banned .

        //public void CopyProductInfoToReworkTable(string reworkCode, string editor)
        //{
        //    try
        //    {
        //        SqlTransactionManager.Begin();



        //        SqlTransactionManager.Commit();
        //    }
        //    catch (Exception)
        //    {
        //        SqlTransactionManager.Rollback();
        //        throw;
        //    }
        //    finally
        //    {
        //        SqlTransactionManager.Dispose();
        //        SqlTransactionManager.End();
        //    }
        //}

        //private void CopyProductInfoToReworkTable_Product(string reworkCode, string editor)
        //{
        //    try
        //    {
        //        _Schema.SQLContext sqlCtx = null;
        //        lock (MethodBase.GetCurrentMethod())
        //        {
        //            if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
        //            {
        //                sqlCtx = new _Schema.SQLContext();

        //                sqlCtx.Sentence = "";
        //            }
        //        }

        //        
        //    }
        //    catch (Exception)
        //    {
        //        throw;
        //    }
        //}

        //private void CopyProductInfoToReworkTable_ProductStatus(string reworkCode, string editor)
        //{

        //}

        //private void CopyProductInfoToReworkTable_ProductPart(string reworkCode, string editor)
        //{

        //}

        //private void CopyProductInfoToReworkTable_ProductInfo(string reworkCode, string editor)
        //{

        //}

        //private void CopyProductInfoToReworkTable_UpdateProductStatus(string reworkCode, string editor)
        //{

        //}

        //private void CopyProductInfoToReworkTable_ProductLog(string reworkCode, string editor)
        //{

        //}

        //private void CopyProductInfoToReworkTable_UpdateProcessStation(string reworkCode, string editor)
        //{

        //}

        //public void ClearData_BWEIGHT(string reworkCode)
        //{
        //    
        //}

        //public void ClearData_SN(string reworkCode)
        //{
        //    
        //}

        //public void ClearData_COA(string reworkCode, string editor)
        //{
        //    
        //}

        //public void ClearData_CPQSNO(string reworkCode)
        //{
        //    
        //}

        //public void ClearData_Delivery(string reworkCode)
        //{
        //    
        //}

        //public void ClearData_KITID(string reworkCode)
        //{
        //    
        //}

        //public void ClearData_MB(string reworkCode, string editor)
        //{
        //    
        //}

        //public void ClearData_MMI(string reworkCode)
        //{
        //    
        //}

        //public void ClearData_PLT(string reworkCode)
        //{
        //    
        //}

        //public void ClearData_WEIGHT(string reworkCode)
        //{
        //    
        //}

        //public void ClearData_PartCheck(string reworkCode)
        //{
        //    
        //}

        //public IList<string> GetPartCheckList(string reworkCode)
        //{
        //    
        //}

        //public void ClearData_CheckItem(IList<string> item, string reworkCode)
        //{
        //    
        //}

        #endregion

        #region . Defered  .

        public void UpdateProductStatusReworkCodeByUserKeyDefered(IUnitOfWork uow, string userKey, IMES.DataModel.ReworkObj reworkCode)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), userKey, reworkCode);
        }

        public void CreateTempProductIDListDefered(IUnitOfWork uow, IList<string> productIdList, string userkey)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productIdList, userkey);
        }

        public void DeleteProductIDListByUserKeyDefered(IUnitOfWork uow, string userKey)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), userKey);
        }

        public void CreateReworkDefered(IUnitOfWork uow, IMES.DataModel.Rework rework)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), rework);
        }

        public void RemoveAReworkDefered(IUnitOfWork uow, string reworkCode)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), reworkCode);
        }

        public void UpdateReworkDefered(IUnitOfWork uow, IMES.DataModel.Rework rework)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), rework);
        }

        public void SetReworkProcessDefered(IUnitOfWork uow, ReworkProcess reworkProcess)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), reworkProcess);
        }

        public void ClearDataDefered(IUnitOfWork uow, string reworkCode, string editor)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), reworkCode, editor);
        }

        public void SaveWipBufferDefered(IUnitOfWork uow, IMES.DataModel.WipBuffer item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void DeleteLightNoDefered(IUnitOfWork uow, string code, string lightNo)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), code, lightNo);
        }

        public void SaveKittingCodeDefered(IUnitOfWork uow, IMES.DataModel.KittingCode item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void DeleteKittingCodeDefered(IUnitOfWork uow, string code)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), code);
        }

        public void UpdateRunInTimeControlByTypeAndCodeDefered(IUnitOfWork uow, IMES.FisObject.FA.Product.RunInTimeControl runInTimeControl)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), runInTimeControl);
        }

        public void UpdateRunInTimeControlByIdDefered(IUnitOfWork uow, IMES.FisObject.FA.Product.RunInTimeControl runInTimeControl)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), runInTimeControl);
        }

        public void InsertRunInTimeControlLogDefered(IUnitOfWork uow, int id)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), id);
        }

        public void InsertRunInTimeControlDefered(IUnitOfWork uow, IMES.FisObject.FA.Product.RunInTimeControl runInTimeControl)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), runInTimeControl);
        }

        public void DeleteRunInTimeControlDefered(IUnitOfWork uow, string type, string code)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), type, code);
        }

        public void DeleteRunInTimeControlByIdDefered(IUnitOfWork uow, int id)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), id);
        }

        public void SaveAllKindsOfTypeInfoDefered(IUnitOfWork uow, IMES.DataModel.TraceStdInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void DeleteResultDefered(IUnitOfWork uow, IMES.DataModel.TraceStdInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void UpdateWLBTDescrDefered(IUnitOfWork uow, IMES.DataModel.WLBTDescr descr)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), descr);
        }

        public void InsertWLBTDescrDefered(IUnitOfWork uow, IMES.DataModel.WLBTDescr descr)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), descr);
        }

        public void DeleteWLBTDescrDefered(IUnitOfWork uow, string id)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), id);
        }

        public void UpdateAllKindsOfTypeInfoDefered(IUnitOfWork uow, IMES.DataModel.TraceStdInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void UpdateKittingCodeDefered(IUnitOfWork uow, string code, string descr, string remark, string editor)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), code, descr, remark, editor);
        }

        public void AddKittingCodeDefered(IUnitOfWork uow, IMES.DataModel.KittingCode item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void UpdateWipBufferDefered(IUnitOfWork uow, IMES.DataModel.WipBuffer item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void AddWipBufferDefered(IUnitOfWork uow, IMES.DataModel.WipBuffer item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void UpdateFaStationDefered(IUnitOfWork uow, IMES.DataModel.FaStationInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void InsertFaStationDefered(IUnitOfWork uow, IMES.DataModel.FaStationInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void DeleteFaStationInfoDefered(IUnitOfWork uow, string line, string station)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), line, station);
        }

        public void RemoveMasterLabelItemDefered(IUnitOfWork uow, int id)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), id);
        }

        public void AddMasterLabelItemDefered(IUnitOfWork uow, MasterLabelInfo ml)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), ml);
        }

        public void UpdateMasterLabelItemDefered(IUnitOfWork uow, MasterLabelInfo ml, string vc, string family)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), ml, vc, family);
        }

        public void AddSupplierCodeInfoDefered(IUnitOfWork uow, SupplierCodeInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void RemoveSupplierCodeInfoDefered(IUnitOfWork uow, int id)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), id);
        }

        #region . LJK banned .

        //public void CopyProductInfoToReworkTableDefered(IUnitOfWork uow, string reworkCode, string editor)
        //{
        //    
        //}

        //public void ClearData_BWEIGHTDefered(IUnitOfWork uow, string reworkCode)
        //{
        //    
        //}

        //public void ClearData_SNDefered(IUnitOfWork uow, string reworkCode)
        //{
        //    
        //}

        //public void ClearData_COADefered(IUnitOfWork uow, string reworkCode, string editor)
        //{
        //    
        //}

        //public void ClearData_CPQSNODefered(IUnitOfWork uow, string reworkCode)
        //{
        //    
        //}

        //public void ClearData_DeliveryDefered(IUnitOfWork uow, string reworkCode)
        //{
        //    
        //}

        //public void ClearData_KITIDDefered(IUnitOfWork uow, string reworkCode)
        //{
        //    
        //}

        //public void ClearData_MBDefered(IUnitOfWork uow, string reworkCode, string editor)
        //{
        //    
        //}

        //public void ClearData_MMIDefered(IUnitOfWork uow, string reworkCode)
        //{
        //    
        //}

        //public void ClearData_PLTDefered(IUnitOfWork uow, string reworkCode)
        //{
        //    
        //}

        //public void ClearData_WEIGHTDefered(IUnitOfWork uow, string reworkCode)
        //{
        //    
        //}

        //public void ClearData_PartCheckDefered(IUnitOfWork uow, string reworkCode)
        //{
        //    
        //}

        //public void ClearData_CheckItemDefered(IUnitOfWork uow, IList<string> item, string reworkCode)
        //{
        //    
        //}

        #endregion

        #endregion

        #endregion

        #region Lucy Liu Added

        public IList<string> GetProductRepairByProIdAndStatus(string pordId, int status)
        {
            try
            {
                IList<string> ret = new List<string>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductRepair cond = new _Schema.ProductRepair();
                        cond.ProductID = pordId;
                        cond.Status = status;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductRepair), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.ProductRepair.fn_ProductID].Value = pordId;
                sqlCtx.Params[_Schema.ProductRepair.fn_Status].Value = status;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        string item = "";
                        item = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.ProductRepair.fn_Model]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteProductPartByProIdDefered(IUnitOfWork uow, string proID)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), proID);
        }
        public void DeleteProductPartByProId(string proID)
        {
            //delete Product_Part where ProductID=?
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product_Part cond = new _Schema.Product_Part();
                        cond.productID = proID;
                        sqlCtx = _Schema.Func.GetConditionedDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product_Part), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product_Part.fn_productID].Value = proID;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteProductInfoByProIdDefered(IUnitOfWork uow, string proID)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), proID);
        }

        public void DeleteProductInfoByProId(string proID)
        {
            //delete ProductInfo where ProductID=?
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductInfo cond = new _Schema.ProductInfo();
                        cond.ProductID = proID;
                        sqlCtx = _Schema.Func.GetConditionedDelete(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductInfo), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.ProductInfo.fn_ProductID].Value = proID;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void CopyProductToUnpackDefered(IUnitOfWork uow, string cartonSN, string palletNo, string dn, string productId, string editor)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), cartonSN, palletNo, dn, productId, editor);
        }

        public void CopyProductToUnpack(string cartonSN, string palletNo, string dn, string productId, string editor)
        {
            try
            {
                SqlTransactionManager.Begin();

                CopyProductToUnpack_Product(cartonSN, palletNo, dn, productId, editor);
                CopyProductToUnpack_ProductStatus(cartonSN, palletNo, dn, productId, editor);


                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        private void CopyProductToUnpack_Product(string cartonSN, string palletNo, string dn, string productId, string editor)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    //ITC-1268-0032
                    //不能把sql语句放到cache中，因为很多模块都调用，否则会引起参数找不到
                    //if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    //{
                        sqlCtx = new _Schema.SQLContext();

                        sqlCtx.Sentence = "INSERT INTO {0} ({1}) SELECT {2},@{3},@{4} FROM {5} WHERE {6}=@{6} ";

                        if (!String.IsNullOrEmpty(cartonSN))
                        {
                            sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.UnpackProduct).Name,
                                string.Join(",", new string[] { /*_Schema.UnpackProduct.fn_BIOS, _Schema.UnpackProduct.fn_BLMAC,*/ _Schema.UnpackProduct.fn_CartonSN, 
                                _Schema.UnpackProduct.fn_CartonWeight, /*_Schema.UnpackProduct.fn_COAID,*/ _Schema.UnpackProduct.fn_CUSTSN, _Schema.UnpackProduct.fn_CVSN, 
                                _Schema.UnpackProduct.fn_DeliveryNo, _Schema.UnpackProduct.fn_ECR, /*_Schema.UnpackProduct.fn_HDVD, _Schema.UnpackProduct.fn_ICCID,  
                                _Schema.UnpackProduct.fn_IMEI, _Schema.UnpackProduct.fn_IMGVER,*/ _Schema.UnpackProduct.fn_MAC, _Schema.UnpackProduct.fn_MBECR, 
                                /*_Schema.UnpackProduct.fn_MEID,*/ _Schema.UnpackProduct.fn_MO, _Schema.UnpackProduct.fn_Model, _Schema.UnpackProduct.fn_PalletNo, 
                                _Schema.UnpackProduct.fn_PCBID, _Schema.UnpackProduct.fn_PCBModel, _Schema.UnpackProduct.fn_PizzaID, _Schema.UnpackProduct.fn_ProductID, 
                                /*_Schema.UnpackProduct.fn_TVTuner,*/ _Schema.UnpackProduct.fn_UnitWeight, _Schema.UnpackProduct.fn_UUID, /*_Schema.UnpackProduct.fn_WMAC,*/ 
                                _Schema.UnpackProduct.fn_ooaid, _Schema.UnpackProduct.fn_prsn, _Schema.UnpackProduct.fn_udt, _Schema.UnpackProduct.fn_cdt, _Schema.UnpackProduct.fn_state, _Schema.UnpackProduct.fn_UEditor, _Schema.UnpackProduct.fn_UPdt }),

                                string.Join(",", new string[] { /*_Schema.Product.fn_BIOS, _Schema.Product.fn_BLMAC,*/ _Schema.Product.fn_CartonSN,
                                 _Schema.Product.fn_CartonWeight,  /*_Schema.Product.fn_COAID,*/  _Schema.Product.fn_CUSTSN,  _Schema.Product.fn_CVSN,
                                 _Schema.Product.fn_DeliveryNo,  _Schema.Product.fn_ECR,  /*_Schema.Product.fn_HDVD,  _Schema.Product.fn_ICCID, 
                                 _Schema.Product.fn_IMEI,  _Schema.Product.fn_IMGVER,*/  _Schema.Product.fn_MAC,  _Schema.Product.fn_MBECR,
                                 /*_Schema.Product.fn_MEID,*/  _Schema.Product.fn_MO,  _Schema.Product.fn_Model,  _Schema.Product.fn_PalletNo,
                                 _Schema.Product.fn_PCBID,  _Schema.Product.fn_PCBModel,  _Schema.Product.fn_PizzaID,  _Schema.Product.fn_ProductID,
                                 /*_Schema.Product.fn_TVTuner,*/  _Schema.Product.fn_UnitWeight,  _Schema.Product.fn_UUID, /*_Schema.Product.fn_WMAC*/
                                 _Schema.Product.fn_ooaid, _Schema.Product.fn_prsn, _Schema.Product.fn_Udt, _Schema.Product.fn_Cdt, _Schema.Product.fn_state }),

                                _Schema.UnpackProduct.fn_UEditor,
                                _Schema.UnpackProduct.fn_UPdt,
                                typeof(_Schema.Product).Name,
                                _Schema.Product.fn_CartonSN);

                            sqlCtx.Params.Add(_Schema.UnpackProduct.fn_UEditor, new SqlParameter("@" + _Schema.UnpackProduct.fn_UEditor, SqlDbType.VarChar));
                            sqlCtx.Params.Add(_Schema.UnpackProduct.fn_UPdt, new SqlParameter("@" + _Schema.UnpackProduct.fn_UPdt, SqlDbType.DateTime));
                            sqlCtx.Params.Add(_Schema.Product.fn_CartonSN, new SqlParameter("@" + _Schema.Product.fn_CartonSN, SqlDbType.VarChar));



                        }
                        else if (!String.IsNullOrEmpty(palletNo))
                        {
                            sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.UnpackProduct).Name,
                                string.Join(",", new string[] { /*_Schema.UnpackProduct.fn_BIOS, _Schema.UnpackProduct.fn_BLMAC,*/ _Schema.UnpackProduct.fn_CartonSN, 
                                _Schema.UnpackProduct.fn_CartonWeight, /*_Schema.UnpackProduct.fn_COAID,*/ _Schema.UnpackProduct.fn_CUSTSN, _Schema.UnpackProduct.fn_CVSN, 
                                _Schema.UnpackProduct.fn_DeliveryNo, _Schema.UnpackProduct.fn_ECR, /*_Schema.UnpackProduct.fn_HDVD, _Schema.UnpackProduct.fn_ICCID,  
                                _Schema.UnpackProduct.fn_IMEI, _Schema.UnpackProduct.fn_IMGVER,*/ _Schema.UnpackProduct.fn_MAC, _Schema.UnpackProduct.fn_MBECR, 
                                /*_Schema.UnpackProduct.fn_MEID,*/ _Schema.UnpackProduct.fn_MO, _Schema.UnpackProduct.fn_Model, _Schema.UnpackProduct.fn_PalletNo, 
                                _Schema.UnpackProduct.fn_PCBID, _Schema.UnpackProduct.fn_PCBModel, _Schema.UnpackProduct.fn_PizzaID, _Schema.UnpackProduct.fn_ProductID, 
                                /*_Schema.UnpackProduct.fn_TVTuner,*/ _Schema.UnpackProduct.fn_UnitWeight, _Schema.UnpackProduct.fn_UUID, /*_Schema.UnpackProduct.fn_WMAC,*/ 
                                _Schema.UnpackProduct.fn_ooaid, _Schema.UnpackProduct.fn_prsn, _Schema.UnpackProduct.fn_udt, _Schema.UnpackProduct.fn_cdt, _Schema.UnpackProduct.fn_state, _Schema.UnpackProduct.fn_UEditor, _Schema.UnpackProduct.fn_UPdt }),

                                string.Join(",", new string[] { /*_Schema.Product.fn_BIOS, _Schema.Product.fn_BLMAC,*/ _Schema.Product.fn_CartonSN,
                                 _Schema.Product.fn_CartonWeight,  /*_Schema.Product.fn_COAID,*/  _Schema.Product.fn_CUSTSN,  _Schema.Product.fn_CVSN,
                                 _Schema.Product.fn_DeliveryNo,  _Schema.Product.fn_ECR,  /*_Schema.Product.fn_HDVD,  _Schema.Product.fn_ICCID, 
                                 _Schema.Product.fn_IMEI,  _Schema.Product.fn_IMGVER,*/  _Schema.Product.fn_MAC,  _Schema.Product.fn_MBECR,
                                 /*_Schema.Product.fn_MEID,*/  _Schema.Product.fn_MO,  _Schema.Product.fn_Model,  _Schema.Product.fn_PalletNo,
                                 _Schema.Product.fn_PCBID,  _Schema.Product.fn_PCBModel,  _Schema.Product.fn_PizzaID,  _Schema.Product.fn_ProductID,
                                 /*_Schema.Product.fn_TVTuner,*/  _Schema.Product.fn_UnitWeight,  _Schema.Product.fn_UUID, /*_Schema.Product.fn_WMAC*/
                                 _Schema.Product.fn_ooaid, _Schema.Product.fn_prsn, _Schema.Product.fn_Udt, _Schema.Product.fn_Cdt, _Schema.Product.fn_state }),

                                _Schema.UnpackProduct.fn_UEditor,
                                _Schema.UnpackProduct.fn_UPdt,
                                typeof(_Schema.Product).Name,
                                _Schema.Product.fn_PalletNo);

                            sqlCtx.Params.Add(_Schema.UnpackProduct.fn_UEditor, new SqlParameter("@" + _Schema.UnpackProduct.fn_UEditor, SqlDbType.VarChar));
                            sqlCtx.Params.Add(_Schema.UnpackProduct.fn_UPdt, new SqlParameter("@" + _Schema.UnpackProduct.fn_UPdt, SqlDbType.DateTime));
                            sqlCtx.Params.Add(_Schema.Product.fn_PalletNo, new SqlParameter("@" + _Schema.Product.fn_PalletNo, SqlDbType.VarChar));



                        }
                        else if (!String.IsNullOrEmpty(dn))
                        {
                            sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.UnpackProduct).Name,
                                string.Join(",", new string[] { /*_Schema.UnpackProduct.fn_BIOS, _Schema.UnpackProduct.fn_BLMAC,*/ _Schema.UnpackProduct.fn_CartonSN, 
                                _Schema.UnpackProduct.fn_CartonWeight, /*_Schema.UnpackProduct.fn_COAID,*/ _Schema.UnpackProduct.fn_CUSTSN, _Schema.UnpackProduct.fn_CVSN, 
                                _Schema.UnpackProduct.fn_DeliveryNo, _Schema.UnpackProduct.fn_ECR, /*_Schema.UnpackProduct.fn_HDVD, _Schema.UnpackProduct.fn_ICCID,  
                                _Schema.UnpackProduct.fn_IMEI, _Schema.UnpackProduct.fn_IMGVER,*/ _Schema.UnpackProduct.fn_MAC, _Schema.UnpackProduct.fn_MBECR, 
                                /*_Schema.UnpackProduct.fn_MEID,*/ _Schema.UnpackProduct.fn_MO, _Schema.UnpackProduct.fn_Model, _Schema.UnpackProduct.fn_PalletNo, 
                                _Schema.UnpackProduct.fn_PCBID, _Schema.UnpackProduct.fn_PCBModel, _Schema.UnpackProduct.fn_PizzaID, _Schema.UnpackProduct.fn_ProductID, 
                                /*_Schema.UnpackProduct.fn_TVTuner,*/ _Schema.UnpackProduct.fn_UnitWeight, _Schema.UnpackProduct.fn_UUID, /*_Schema.UnpackProduct.fn_WMAC,*/ 
                                _Schema.UnpackProduct.fn_ooaid, _Schema.UnpackProduct.fn_prsn, _Schema.UnpackProduct.fn_udt, _Schema.UnpackProduct.fn_cdt, _Schema.UnpackProduct.fn_state, _Schema.UnpackProduct.fn_UEditor, _Schema.UnpackProduct.fn_UPdt }),

                                string.Join(",", new string[] { /*_Schema.Product.fn_BIOS, _Schema.Product.fn_BLMAC,*/ _Schema.Product.fn_CartonSN,
                                 _Schema.Product.fn_CartonWeight,  /*_Schema.Product.fn_COAID,*/  _Schema.Product.fn_CUSTSN,  _Schema.Product.fn_CVSN,
                                 _Schema.Product.fn_DeliveryNo,  _Schema.Product.fn_ECR,  /*_Schema.Product.fn_HDVD,  _Schema.Product.fn_ICCID, 
                                 _Schema.Product.fn_IMEI,  _Schema.Product.fn_IMGVER,*/  _Schema.Product.fn_MAC,  _Schema.Product.fn_MBECR,
                                 /*_Schema.Product.fn_MEID,*/  _Schema.Product.fn_MO,  _Schema.Product.fn_Model,  _Schema.Product.fn_PalletNo,
                                 _Schema.Product.fn_PCBID,  _Schema.Product.fn_PCBModel,  _Schema.Product.fn_PizzaID,  _Schema.Product.fn_ProductID,
                                 /*_Schema.Product.fn_TVTuner,*/  _Schema.Product.fn_UnitWeight,  _Schema.Product.fn_UUID, /*_Schema.Product.fn_WMAC*/ 
                                _Schema.Product.fn_ooaid, _Schema.Product.fn_prsn, _Schema.Product.fn_Udt, _Schema.Product.fn_Cdt, _Schema.Product.fn_state }),

                                _Schema.UnpackProduct.fn_UEditor,
                                _Schema.UnpackProduct.fn_UPdt,
                                typeof(_Schema.Product).Name,
                                _Schema.Product.fn_DeliveryNo);

                            sqlCtx.Params.Add(_Schema.UnpackProduct.fn_UEditor, new SqlParameter("@" + _Schema.UnpackProduct.fn_UEditor, SqlDbType.VarChar));
                            sqlCtx.Params.Add(_Schema.UnpackProduct.fn_UPdt, new SqlParameter("@" + _Schema.UnpackProduct.fn_UPdt, SqlDbType.DateTime));
                            sqlCtx.Params.Add(_Schema.Product.fn_DeliveryNo, new SqlParameter("@" + _Schema.Product.fn_DeliveryNo, SqlDbType.VarChar));



                        }
                        else
                        {
                            sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.UnpackProduct).Name,
                                string.Join(",", new string[] { /*_Schema.UnpackProduct.fn_BIOS, _Schema.UnpackProduct.fn_BLMAC,*/ _Schema.UnpackProduct.fn_CartonSN, 
                                _Schema.UnpackProduct.fn_CartonWeight, /*_Schema.UnpackProduct.fn_COAID,*/ _Schema.UnpackProduct.fn_CUSTSN, _Schema.UnpackProduct.fn_CVSN, 
                                _Schema.UnpackProduct.fn_DeliveryNo, _Schema.UnpackProduct.fn_ECR, /*_Schema.UnpackProduct.fn_HDVD, _Schema.UnpackProduct.fn_ICCID,  
                                _Schema.UnpackProduct.fn_IMEI, _Schema.UnpackProduct.fn_IMGVER,*/ _Schema.UnpackProduct.fn_MAC, _Schema.UnpackProduct.fn_MBECR, 
                                /*_Schema.UnpackProduct.fn_MEID,*/ _Schema.UnpackProduct.fn_MO, _Schema.UnpackProduct.fn_Model, _Schema.UnpackProduct.fn_PalletNo, 
                                _Schema.UnpackProduct.fn_PCBID, _Schema.UnpackProduct.fn_PCBModel, _Schema.UnpackProduct.fn_PizzaID, _Schema.UnpackProduct.fn_ProductID, 
                                /*_Schema.UnpackProduct.fn_TVTuner,*/ _Schema.UnpackProduct.fn_UnitWeight, _Schema.UnpackProduct.fn_UUID, /*_Schema.UnpackProduct.fn_WMAC,*/ 
                                _Schema.UnpackProduct.fn_ooaid, _Schema.UnpackProduct.fn_prsn, _Schema.UnpackProduct.fn_udt, _Schema.UnpackProduct.fn_cdt, _Schema.UnpackProduct.fn_state, _Schema.UnpackProduct.fn_UEditor, _Schema.UnpackProduct.fn_UPdt }),

                                string.Join(",", new string[] { /*_Schema.Product.fn_BIOS, _Schema.Product.fn_BLMAC,*/ _Schema.Product.fn_CartonSN,
                                 _Schema.Product.fn_CartonWeight,  /*_Schema.Product.fn_COAID,*/  _Schema.Product.fn_CUSTSN,  _Schema.Product.fn_CVSN,
                                 _Schema.Product.fn_DeliveryNo,  _Schema.Product.fn_ECR,  /*_Schema.Product.fn_HDVD,  _Schema.Product.fn_ICCID, 
                                 _Schema.Product.fn_IMEI,  _Schema.Product.fn_IMGVER,*/  _Schema.Product.fn_MAC,  _Schema.Product.fn_MBECR,
                                 /*_Schema.Product.fn_MEID,*/  _Schema.Product.fn_MO,  _Schema.Product.fn_Model,  _Schema.Product.fn_PalletNo,
                                 _Schema.Product.fn_PCBID,  _Schema.Product.fn_PCBModel,  _Schema.Product.fn_PizzaID,  _Schema.Product.fn_ProductID,
                                 /*_Schema.Product.fn_TVTuner,*/  _Schema.Product.fn_UnitWeight,  _Schema.Product.fn_UUID,  /*_Schema.Product.fn_WMAC*/ 
                                 _Schema.Product.fn_ooaid, _Schema.Product.fn_prsn, _Schema.Product.fn_Udt, _Schema.Product.fn_Cdt, _Schema.Product.fn_state }),

                                _Schema.UnpackProduct.fn_UEditor,
                                _Schema.UnpackProduct.fn_UPdt,
                                typeof(_Schema.Product).Name,
                                _Schema.Product.fn_ProductID);

                            sqlCtx.Params.Add(_Schema.UnpackProduct.fn_UEditor, new SqlParameter("@" + _Schema.UnpackProduct.fn_UEditor, SqlDbType.VarChar));
                            sqlCtx.Params.Add(_Schema.UnpackProduct.fn_UPdt, new SqlParameter("@" + _Schema.UnpackProduct.fn_UPdt, SqlDbType.DateTime));
                            sqlCtx.Params.Add(_Schema.Product.fn_ProductID, new SqlParameter("@" + _Schema.Product.fn_ProductID, SqlDbType.VarChar));



                        }
                    //    _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    //}
                }
                if (!String.IsNullOrEmpty(cartonSN))
                {
                    sqlCtx.Params[_Schema.UnpackProduct.fn_UEditor].Value = editor;
                    sqlCtx.Params[_Schema.UnpackProduct.fn_UPdt].Value = _Schema.SqlHelper.GetDateTime();
                    sqlCtx.Params[_Schema.Product.fn_CartonSN].Value = cartonSN;
                }
                else if (!String.IsNullOrEmpty(palletNo))
                {
                    sqlCtx.Params[_Schema.UnpackProduct.fn_UEditor].Value = editor;
                    sqlCtx.Params[_Schema.UnpackProduct.fn_UPdt].Value = _Schema.SqlHelper.GetDateTime();
                    sqlCtx.Params[_Schema.Product.fn_PalletNo].Value = palletNo;
                }
                else if (!String.IsNullOrEmpty(dn))
                {
                    sqlCtx.Params[_Schema.UnpackProduct.fn_UEditor].Value = editor;
                    sqlCtx.Params[_Schema.UnpackProduct.fn_UPdt].Value = _Schema.SqlHelper.GetDateTime();
                    sqlCtx.Params[_Schema.Product.fn_DeliveryNo].Value = dn;
                }
                else
                {
                    sqlCtx.Params[_Schema.UnpackProduct.fn_UEditor].Value = editor;
                    sqlCtx.Params[_Schema.UnpackProduct.fn_UPdt].Value = _Schema.SqlHelper.GetDateTime();
                    sqlCtx.Params[_Schema.Product.fn_ProductID].Value = productId;
                }

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void CopyProductToUnpack_ProductStatus(string cartonSN, string palletNo, string dn, string productId, string editor)
        {
            try
            {
                //bug:ITC-1268-0002 
                //reason:需要将Reworkcode字段也copy过去
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    //if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    //{
                        sqlCtx = new _Schema.SQLContext();

                        if (!String.IsNullOrEmpty(cartonSN))
                        {
                            sqlCtx.Sentence = "INSERT INTO {0} ({1}) SELECT {2},@{3},@{4} FROM {5} WHERE {6}=@{7} and {8}";
                            sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.UnpackProductStatus).Name,
                            string.Join(",", new string[] {_Schema.UnpackProductStatus.fn_ReworkCode, _Schema.UnpackProductStatus.fn_Cdt, _Schema.UnpackProductStatus.fn_Editor,
                                _Schema.UnpackProductStatus.fn_Line, _Schema.UnpackProductStatus.fn_ProductID,
                                _Schema.UnpackProductStatus.fn_Station, _Schema.UnpackProductStatus.fn_Status, _Schema.UnpackProductStatus.fn_Udt, _Schema.UnpackProductStatus.fn_testFailCount, _Schema.UnpackProductStatus.fn_UEditor, _Schema.UnpackProductStatus.fn_UPdt }),

                            string.Join(",", new string[] {_Schema.ProductStatus.fn_ReworkCode, typeof(_Schema.ProductStatus).Name + "." + _Schema.ProductStatus.fn_Cdt, _Schema.ProductStatus.fn_Editor,
                                _Schema.ProductStatus.fn_Line, typeof(_Schema.ProductStatus).Name + "." + _Schema.ProductStatus.fn_ProductID,
                                _Schema.ProductStatus.fn_Station, _Schema.ProductStatus.fn_Status, typeof(_Schema.ProductStatus).Name + "." + _Schema.ProductStatus.fn_Udt, _Schema.ProductStatus.fn_TestFailCount}),

                             _Schema.UnpackProductStatus.fn_UEditor,
                             _Schema.UnpackProductStatus.fn_UPdt,
                             typeof(_Schema.ProductStatus).Name + " , " + typeof(_Schema.Product).Name,
                             typeof(_Schema.Product).Name + "." + _Schema.Product.fn_CartonSN,
                             _Schema.Product.fn_CartonSN,
                             typeof(_Schema.ProductStatus).Name + "." + _Schema.ProductStatus.fn_ProductID + "=" + typeof(_Schema.Product).Name + "." + _Schema.Product.fn_ProductID);

                            sqlCtx.Params.Add(_Schema.UnpackProductStatus.fn_UEditor, new SqlParameter("@" + _Schema.UnpackProductStatus.fn_UEditor, SqlDbType.VarChar));
                            sqlCtx.Params.Add(_Schema.UnpackProductStatus.fn_UPdt, new SqlParameter("@" + _Schema.UnpackProductStatus.fn_UPdt, SqlDbType.DateTime));
                            sqlCtx.Params.Add(_Schema.Product.fn_CartonSN, new SqlParameter("@" + _Schema.Product.fn_CartonSN, SqlDbType.VarChar));


                        }
                        else if (!String.IsNullOrEmpty(palletNo))
                        {
                            sqlCtx.Sentence = "INSERT INTO {0} ({1}) SELECT {2},@{3},@{4} FROM {5} WHERE {6}=@{7} and {8}";
                            sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.UnpackProductStatus).Name,
                            string.Join(",", new string[] {_Schema.UnpackProductStatus.fn_ReworkCode, _Schema.UnpackProductStatus.fn_Cdt, _Schema.UnpackProductStatus.fn_Editor,
                                _Schema.UnpackProductStatus.fn_Line, _Schema.UnpackProductStatus.fn_ProductID,
                                _Schema.UnpackProductStatus.fn_Station, _Schema.UnpackProductStatus.fn_Status, _Schema.UnpackProductStatus.fn_Udt, _Schema.UnpackProductStatus.fn_testFailCount, _Schema.UnpackProductStatus.fn_UEditor, _Schema.UnpackProductStatus.fn_UPdt }),

                            string.Join(",", new string[] {_Schema.ProductStatus.fn_ReworkCode, typeof(_Schema.ProductStatus).Name + "." + _Schema.ProductStatus.fn_Cdt, _Schema.ProductStatus.fn_Editor,
                                _Schema.ProductStatus.fn_Line, typeof(_Schema.ProductStatus).Name + "." + _Schema.ProductStatus.fn_ProductID,
                                _Schema.ProductStatus.fn_Station, _Schema.ProductStatus.fn_Status, typeof(_Schema.ProductStatus).Name + "." + _Schema.ProductStatus.fn_Udt, _Schema.ProductStatus.fn_TestFailCount}),

                             _Schema.UnpackProductStatus.fn_UEditor,
                             _Schema.UnpackProductStatus.fn_UPdt,
                             typeof(_Schema.ProductStatus).Name + " , " + typeof(_Schema.Product).Name,
                             typeof(_Schema.Product).Name + "." + _Schema.Product.fn_PalletNo,
                             _Schema.Product.fn_PalletNo,
                             typeof(_Schema.ProductStatus).Name + "." + _Schema.ProductStatus.fn_ProductID + "=" + typeof(_Schema.Product).Name + "." + _Schema.Product.fn_ProductID);

                            sqlCtx.Params.Add(_Schema.UnpackProductStatus.fn_UEditor, new SqlParameter("@" + _Schema.UnpackProductStatus.fn_UEditor, SqlDbType.VarChar));
                            sqlCtx.Params.Add(_Schema.UnpackProductStatus.fn_UPdt, new SqlParameter("@" + _Schema.UnpackProductStatus.fn_UPdt, SqlDbType.DateTime));
                            sqlCtx.Params.Add(_Schema.Product.fn_PalletNo, new SqlParameter("@" + _Schema.Product.fn_PalletNo, SqlDbType.VarChar));


                        }

                        else if (!String.IsNullOrEmpty(dn))
                        {
                            sqlCtx.Sentence = "INSERT INTO {0} ({1}) SELECT {2},@{3},@{4} FROM {5} WHERE {6}=@{7} and {8}";
                            sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.UnpackProductStatus).Name,
                            string.Join(",", new string[] {_Schema.UnpackProductStatus.fn_ReworkCode, _Schema.UnpackProductStatus.fn_Cdt, _Schema.UnpackProductStatus.fn_Editor,
                                _Schema.UnpackProductStatus.fn_Line, _Schema.UnpackProductStatus.fn_ProductID,
                                _Schema.UnpackProductStatus.fn_Station, _Schema.UnpackProductStatus.fn_Status, _Schema.UnpackProductStatus.fn_Udt, _Schema.UnpackProductStatus.fn_testFailCount, _Schema.UnpackProductStatus.fn_UEditor, _Schema.UnpackProductStatus.fn_UPdt }),

                            string.Join(",", new string[] {_Schema.ProductStatus.fn_ReworkCode, typeof(_Schema.ProductStatus).Name + "." + _Schema.ProductStatus.fn_Cdt, _Schema.ProductStatus.fn_Editor,
                                _Schema.ProductStatus.fn_Line, typeof(_Schema.ProductStatus).Name + "." + _Schema.ProductStatus.fn_ProductID,
                                _Schema.ProductStatus.fn_Station, _Schema.ProductStatus.fn_Status, typeof(_Schema.ProductStatus).Name + "." + _Schema.ProductStatus.fn_Udt, _Schema.ProductStatus.fn_TestFailCount}),

                             _Schema.UnpackProductStatus.fn_UEditor,
                             _Schema.UnpackProductStatus.fn_UPdt,
                             typeof(_Schema.ProductStatus).Name + " , " + typeof(_Schema.Product).Name,
                             typeof(_Schema.Product).Name + "." + _Schema.Product.fn_DeliveryNo,
                             _Schema.Product.fn_DeliveryNo,
                             typeof(_Schema.ProductStatus).Name + "." + _Schema.ProductStatus.fn_ProductID + "=" + typeof(_Schema.Product).Name + "." + _Schema.Product.fn_ProductID);

                            sqlCtx.Params.Add(_Schema.UnpackProductStatus.fn_UEditor, new SqlParameter("@" + _Schema.UnpackProductStatus.fn_UEditor, SqlDbType.VarChar));
                            sqlCtx.Params.Add(_Schema.UnpackProductStatus.fn_UPdt, new SqlParameter("@" + _Schema.UnpackProductStatus.fn_UPdt, SqlDbType.DateTime));
                            sqlCtx.Params.Add(_Schema.Product.fn_DeliveryNo, new SqlParameter("@" + _Schema.Product.fn_DeliveryNo, SqlDbType.VarChar));


                        }
                        else
                        {
                            sqlCtx.Sentence = "INSERT INTO {0} ({1}) SELECT {2},@{3},@{4} FROM {5} WHERE {6}=@{6}";
                            sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.UnpackProductStatus).Name,
                            string.Join(",", new string[] {_Schema.UnpackProductStatus.fn_ReworkCode, _Schema.UnpackProductStatus.fn_Cdt, _Schema.UnpackProductStatus.fn_Editor,
                                _Schema.UnpackProductStatus.fn_Line, _Schema.UnpackProductStatus.fn_ProductID,
                                _Schema.UnpackProductStatus.fn_Station, _Schema.UnpackProductStatus.fn_Status, _Schema.UnpackProductStatus.fn_Udt, _Schema.UnpackProductStatus.fn_testFailCount, _Schema.UnpackProductStatus.fn_UEditor, _Schema.UnpackProductStatus.fn_UPdt  }),

                            string.Join(",", new string[] { _Schema.ProductStatus.fn_ReworkCode, _Schema.ProductStatus.fn_Cdt, _Schema.ProductStatus.fn_Editor,
                                _Schema.ProductStatus.fn_Line, _Schema.ProductStatus.fn_ProductID,
                                _Schema.ProductStatus.fn_Station, _Schema.ProductStatus.fn_Status, _Schema.ProductStatus.fn_Udt, _Schema.ProductStatus.fn_TestFailCount}),

                             _Schema.UnpackProductStatus.fn_UEditor,
                             _Schema.UnpackProductStatus.fn_UPdt,
                             typeof(_Schema.ProductStatus).Name,
                             _Schema.ProductStatus.fn_ProductID);

                            sqlCtx.Params.Add(_Schema.UnpackProductStatus.fn_UEditor, new SqlParameter("@" + _Schema.UnpackProductStatus.fn_UEditor, SqlDbType.VarChar));
                            sqlCtx.Params.Add(_Schema.UnpackProductStatus.fn_UPdt, new SqlParameter("@" + _Schema.UnpackProductStatus.fn_UPdt, SqlDbType.DateTime));
                            sqlCtx.Params.Add(_Schema.ProductStatus.fn_ProductID, new SqlParameter("@" + _Schema.ProductStatus.fn_ProductID, SqlDbType.VarChar));


                        }
                    //    _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    //}
                }

                if (!String.IsNullOrEmpty(cartonSN))
                {
                    sqlCtx.Params[_Schema.UnpackProductStatus.fn_UEditor].Value = editor;
                    sqlCtx.Params[_Schema.UnpackProductStatus.fn_UPdt].Value = _Schema.SqlHelper.GetDateTime();
                    sqlCtx.Params[_Schema.Product.fn_CartonSN].Value = cartonSN;
                }
                else if (!String.IsNullOrEmpty(palletNo))
                {
                    sqlCtx.Params[_Schema.UnpackProductStatus.fn_UEditor].Value = editor;
                    sqlCtx.Params[_Schema.UnpackProductStatus.fn_UPdt].Value = _Schema.SqlHelper.GetDateTime();
                    sqlCtx.Params[_Schema.Product.fn_PalletNo].Value = palletNo;
                }
                else if (!String.IsNullOrEmpty(dn))
                {
                    sqlCtx.Params[_Schema.UnpackProductStatus.fn_UEditor].Value = editor;
                    sqlCtx.Params[_Schema.UnpackProductStatus.fn_UPdt].Value = _Schema.SqlHelper.GetDateTime();
                    sqlCtx.Params[_Schema.Product.fn_DeliveryNo].Value = dn;
                }
                else
                {
                    sqlCtx.Params[_Schema.UnpackProductStatus.fn_UEditor].Value = editor;
                    sqlCtx.Params[_Schema.UnpackProductStatus.fn_UPdt].Value = _Schema.SqlHelper.GetDateTime();
                    sqlCtx.Params[_Schema.ProductStatus.fn_ProductID].Value = productId;
                }

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        private IList<string[]> GetProductIdsByPalletNo(string palletNo)
        {
            SqlDataReader sqlR = null;
            try
            {
                IList<string[]> ret = new List<string[]>();

                _Schema.SQLContext sqlCtx = null;
                _Schema.TableAndFields tf1 = null;
                _Schema.TableAndFields tf2 = null;
                _Schema.TableAndFields[] tblAndFldsesArray = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
                    {
                        tf1 = new _Schema.TableAndFields();
                        tf1.Table = typeof(_Schema.Product);
                        _Schema.Product cond = new _Schema.Product();
                        cond.PalletNo = palletNo;
                        tf1.equalcond = cond;
                        tf1.ToGetFieldNames.Add(_Schema.Product.fn_ProductID);
                        tf1.ToGetFieldNames.Add(_Schema.Product.fn_Model);

                        tf2 = new _Schema.TableAndFields();
                        tf2.Table = typeof(_Schema.ProductStatus);
                        tf2.ToGetFieldNames.Add(_Schema.ProductStatus.fn_Line);

                        List<_Schema.TableConnectionItem> tblCnntIs = new List<_Schema.TableConnectionItem>();
                        _Schema.TableConnectionItem tc1 = new _Schema.TableConnectionItem(tf1, _Schema.Product.fn_ProductID, tf2, _Schema.ProductStatus.fn_ProductID);
                        tblCnntIs.Add(tc1);

                        _Schema.TableConnectionCollection tblCnnts = new _Schema.TableConnectionCollection(tblCnntIs.ToArray());

                        tblAndFldsesArray = new _Schema.TableAndFields[] { tf1, tf2 };

                        _Schema.TableBiJoinedLogic tblBiJndLgc = new _Schema.TableBiJoinedLogic();
                        tblBiJndLgc.Add(tf1);
                        tblBiJndLgc.Add(_Schema.Func.LEFTJOIN);
                        tblBiJndLgc.Add(tf2);
                        tblBiJndLgc.Add(tc1);

                        sqlCtx = _Schema.Func.GetConditionedComprehensiveJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken, null, ref tblAndFldsesArray, tblCnnts, tblBiJndLgc);

                        sqlCtx.Sentence = sqlCtx.Sentence.Replace(tf1.alias + " ", string.Format("{0} WITH (UPDLOCK)", tf1.alias));
                        sqlCtx.Sentence = sqlCtx.Sentence.Replace(tf2.alias + " ", string.Format("{0} WITH (UPDLOCK)", tf2.alias));
                    }
                }
                tf1 = tblAndFldsesArray[0];
                tf2 = tblAndFldsesArray[1];

                sqlCtx.Params[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_PalletNo)].Value = palletNo;

                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                while (sqlR != null && sqlR.Read())
                {
                    string[] item = new string[3];
                    item[0] = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_ProductID)]);
                    item[1] = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_Model)]);
                    item[2] = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductStatus.fn_Line)]);
                    ret.Add(item);
                }

                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                    sqlR.Close();
            }
        }

        public void WriteProductLogByPalletNoDefered(IUnitOfWork uow, string palletNo, IMES.FisObject.FA.Product.ProductLog newLog)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), palletNo, newLog);
        }

        public void WriteProductLogByPalletNo(string palletNo, IMES.FisObject.FA.Product.ProductLog newLog)
        {
            try
            {
                SqlTransactionManager.Begin();

                bool isNeedGetLine = string.IsNullOrEmpty(newLog.Line);

                IList<string[]> prods = GetProductIdsByPalletNo(palletNo);
                if (prods != null && prods.Count > 0)
                {
                    IList<string[]> batch = new List<string[]>();
                    int i = 0;
                    foreach (string[] entry in prods)
                    {
                        batch.Add(entry);
                        if ((i + 1) % batchSQLCnt == 0 || i == prods.Count - 1)
                        {
                            WriteProductLogBatch_Inner(batch, newLog, isNeedGetLine);
                            batch.Clear();
                        }
                        i++;
                    }
                }

                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        public List<string> GetProductIDListByPalletNo(string palletNo)
        {
            try
            {
                List<string> ret = new List<string>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product equalCond = new _Schema.Product();
                        equalCond.PalletNo = palletNo;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), equalCond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_PalletNo].Value = palletNo;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        string item = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public List<string> GetCustSnListByPalletNo(string palletNo)
        {
            try
            {
                List<string> ret = new List<string>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product equalCond = new _Schema.Product();
                        equalCond.PalletNo = palletNo;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), equalCond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_PalletNo].Value = palletNo;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        string item = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void PalletUnpackDefered(IUnitOfWork uow, string palletNo)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), palletNo);
        }

        public void PalletUnpack(string palletNo)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.PalletNo = palletNo;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), new List<string>() { _Schema.Product.fn_PalletNo }, null, null, null, cond, null, null, null, null, null, null, null);

                        sqlCtx.Params[_Schema.Func.DecSV(_Schema.Product.fn_PalletNo)].Value = string.Empty;

                    }
                }
                sqlCtx.Params[_Schema.Product.fn_PalletNo].Value = palletNo;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DNUnpackDefered(IUnitOfWork uow, string cartonSN)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), cartonSN);
        }

        public void DNUnpack(string cartonSN)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.CartonSN = cartonSN;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), new List<string>() { _Schema.Product.fn_DeliveryNo }, null, null, null, cond, null, null, null, null, null, null, null);

                        //sqlCtx.Params[_Schema.Func.DecSV(_Schema.Product.fn_CartonSN)].Value = string.Empty;
                        sqlCtx.Params[_Schema.Func.DecSV(_Schema.Product.fn_DeliveryNo)].Value = string.Empty;
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_CartonSN].Value = cartonSN;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateBoxerBookDataListDefered(IUnitOfWork uow, BoxerBookData data, IList<string> productCustSNList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), data, productCustSNList);
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        public void UpdateBoxerBookDataList(BoxerBookData data, IList<string> productCustSNList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {

                UpdateBoxerBookDataList_Inner(data, productCustSNList);
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void UpdateBoxerBookDataList_Inner(BoxerBookData data, IList<string> productCustSNList)
        {

            try
            {

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.BoxerBookData insetCond = new _Schema.BoxerBookData();
                        insetCond.SerialNumber = "INSET";
                        //bug:ITC-1268-0001 
                        //GetConditionedUpdate方法使用问题
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.BoxerBookData), new List<string>() { _Schema.BoxerBookData.fn_CartonSN }, null, null, null, null, null, null, null, null, null, null, insetCond);
                    }
                }


                sqlCtx.Params[_Schema.Func.DecSV(_Schema.BoxerBookData.fn_CartonSN)].Value = data.CartonSN;

                string Sentence = sqlCtx.Sentence.Replace(_Schema.Func.DecInSet(_Schema.BoxerBookData.fn_SerialNumber), _Schema.Func.ConvertInSet(productCustSNList));

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateTestBoxDataLogListDefered(IUnitOfWork uow, TestBoxDataLog data, IList<string> productCustSNList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), data, productCustSNList);
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        public void UpdateTestBoxDataLogList(TestBoxDataLog data, IList<string> productCustSNList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {

                UpdateTestBoxDataLogList_Inner(data, productCustSNList);
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void UpdateTestBoxDataLogList_Inner(TestBoxDataLog data, IList<string> productCustSNList)
        {

            try
            {

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.TestBoxDataLog insetCond = new _Schema.TestBoxDataLog();
                        insetCond.SerialNumber = "INSET";
                        //bug:ITC-1268-0001 
                        //GetConditionedUpdate鏂规硶浣跨敤闂
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TestBoxDataLog), new List<string>() { _Schema.TestBoxDataLog.fn_CartonSn }, null, null, null, null, null, null, null, null, null, null, insetCond);
                    }
                }


                sqlCtx.Params[_Schema.Func.DecSV(_Schema.TestBoxDataLog.fn_CartonSn)].Value = data.CartonSn;

                string Sentence = sqlCtx.Sentence.Replace(_Schema.Func.DecInSet(_Schema.TestBoxDataLog.fn_SerialNumber), _Schema.Func.ConvertInSet(productCustSNList));
                logger.Error("------------------ begin UpdateTestBoxDataLogList_Inner ------------------------");
                logger.Error("Sentence=" + Sentence);
                logger.Error("CartonSN=" + data.CartonSn);
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PCA, CommandType.Text, Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                logger.Error("------------------ end UpdateTestBoxDataLogList_Inner ------------------------");
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateTestBoxDataLogListForUnpackCartonDefered(IUnitOfWork uow, IList<string> productCustSNList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productCustSNList);
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        public void UpdateTestBoxDataLogListForUnpackCarton(IList<string> productCustSNList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {

                UpdateTestBoxDataLogListForUnpackCarton_Inner(productCustSNList);
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void UpdateTestBoxDataLogListForUnpackCarton_Inner(IList<string> productCustSNList)
        {

            try
            {

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.TestBoxDataLog insetCond = new _Schema.TestBoxDataLog();
                        insetCond.SerialNumber = "INSET";
                        //bug:ITC-1268-0001 
                        //GetConditionedUpdate鏂规硶浣跨敤闂
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TestBoxDataLog), new List<string>() { _Schema.TestBoxDataLog.fn_CartonSn }, null, null, null, null, null, null, null, null, null, null, insetCond);
                    }
                }


                sqlCtx.Params[_Schema.Func.DecSV(_Schema.TestBoxDataLog.fn_CartonSn)].Value = "";

                string Sentence = sqlCtx.Sentence.Replace(_Schema.Func.DecInSet(_Schema.TestBoxDataLog.fn_SerialNumber), _Schema.Func.ConvertInSet(productCustSNList));
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PCA, CommandType.Text, Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
              
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateTestBoxDataLogListForUnpackPalletDefered(IUnitOfWork uow, IList<string> productCustSNList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {
                AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productCustSNList);
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        public void UpdateTestBoxDataLogListForUnpackPallet(IList<string> productCustSNList)
        {
            LoggingBegin(this.GetType(), MethodBase.GetCurrentMethod());
            try
            {

                UpdateTestBoxDataLogListForUnpackPallet_Inner(productCustSNList);
            }
            catch (Exception)
            {
                LoggingError(this.GetType(), MethodBase.GetCurrentMethod());
                throw;
            }
            finally
            {
                LoggingEnd(this.GetType(), MethodBase.GetCurrentMethod());
            }
        }

        private void UpdateTestBoxDataLogListForUnpackPallet_Inner(IList<string> productCustSNList)
        {

            try
            {

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.TestBoxDataLog insetCond = new _Schema.TestBoxDataLog();
                        insetCond.SerialNumber = "INSET";
                        //bug:ITC-1268-0001 
                        //GetConditionedUpdate鏂规硶浣跨敤闂
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TestBoxDataLog), new List<string>() { _Schema.TestBoxDataLog.fn_PalletSerialNo }, null, null, null, null, null, null, null, null, null, null, insetCond);
                    }
                }


                sqlCtx.Params[_Schema.Func.DecSV(_Schema.TestBoxDataLog.fn_PalletSerialNo)].Value = "";

                string Sentence = sqlCtx.Sentence.Replace(_Schema.Func.DecInSet(_Schema.TestBoxDataLog.fn_SerialNumber), _Schema.Func.ConvertInSet(productCustSNList));
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PCA, CommandType.Text, Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());

            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateTestBoxDataLogForUnpackPalletDefered(IUnitOfWork uow, string custSN)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), custSN);
        }

        public void UpdateTestBoxDataLogForUnpackPallet(string custSN)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.TestBoxDataLog cond = new _Schema.TestBoxDataLog();
                        cond.SerialNumber = custSN;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TestBoxDataLog), new List<string>() { _Schema.TestBoxDataLog.fn_PalletSerialNo }, null, null, null, cond, null, null, null, null, null, null, null);

                        //sqlCtx.Params[_Schema.Func.DecSV(_Schema.Product.fn_CartonSN)].Value = string.Empty;
                        sqlCtx.Params[_Schema.Func.DecSV(_Schema.TestBoxDataLog.fn_PalletSerialNo)].Value = string.Empty;
                    }
                }
                sqlCtx.Params[_Schema.TestBoxDataLog.fn_SerialNumber].Value = custSN;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PCA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateTestBoxDataLogForUnpackCartonDefered(IUnitOfWork uow, string custSN)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), custSN);
        }

        public void UpdateTestBoxDataLogForUnpackCarton(string custSN)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.TestBoxDataLog cond = new _Schema.TestBoxDataLog();
                        cond.SerialNumber = custSN;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.TestBoxDataLog), new List<string>() { _Schema.TestBoxDataLog.fn_CartonSn }, null, null, null, cond, null, null, null, null, null, null, null);

                        //sqlCtx.Params[_Schema.Func.DecSV(_Schema.Product.fn_CartonSN)].Value = string.Empty;
                        sqlCtx.Params[_Schema.Func.DecSV(_Schema.TestBoxDataLog.fn_CartonSn)].Value = string.Empty;
                    }
                }
                sqlCtx.Params[_Schema.TestBoxDataLog.fn_SerialNumber].Value = custSN;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PCA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }
       
        /// <summary>
        /// 根據deliveryNo獲取與之綁定的Product列表
        /// </summary>
        /// <param name="dn"></param>
        /// <returns></returns>
        public IList<IProduct> GetProductListByDeliveryNo(string dn)
        {
            try
            {
                IList<IProduct> ret = new List<IProduct>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.DeliveryNo  = dn;
                        sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), cond, null, null);
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_DeliveryNo].Value = dn;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IProduct item = new IMES.FisObject.FA.Product.Product(GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]));
                        //item.BIOS = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BIOS]);
                        item.CartonSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonSN]);
                        item.CartonWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CartonWeight]);
                        //item.COAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_COAID]);
                        item.CUSTSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                        //item.CUSTVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        item.DeliveryNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_DeliveryNo]);
                        item.ECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ECR]);
                        //item.ICCID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ICCID]);
                        //item.IMEI = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMEI]);
                        //item.IMGVER = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_IMGVER]);
                        item.MAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MAC]);
                        item.MBECR = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MBECR]);
                        //item.MEID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MEID]);
                        item.MO = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_MO]);
                        item.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Model]);
                        item.PalletNo = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PalletNo]);
                        item.PCBID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBID]);
                        item.PCBModel = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PCBModel]);
                        item.PizzaID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_PizzaID]);
                        item.UnitWeight = GetValue_Decimal(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UnitWeight]);
                        item.UUID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_UUID]);
                        //item.WMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_WMAC]);
                        //item.HDVD = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_HDVD]);
                        //item.BLMAC = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_BLMAC]);
                        //item.TVTuner = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_TVTuner]);
                        item.CVSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CVSN]);
                        item.State = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_state]);
                        item.PRSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_prsn]);
                        item.OOAID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ooaid]);
                        item.Udt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Udt]);
                        item.Cdt = GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Cdt]);
                        ((IMES.FisObject.FA.Product.Product)item).Tracker.Clear();
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void WriteProductLogByDeliveryNo(string dn, IMES.FisObject.FA.Product.ProductLog newLog)
        {
            try
            {
                SqlTransactionManager.Begin();

                bool isNeedGetLine = string.IsNullOrEmpty(newLog.Line);

                IList<string[]> prods = GetProductIdsByDeliveryNo(dn);
                if (prods != null && prods.Count > 0)
                {
                    IList<string[]> batch = new List<string[]>();
                    int i = 0;
                    foreach (string[] entry in prods)
                    {
                        batch.Add(entry);
                        if ((i + 1) % batchSQLCnt == 0 || i == prods.Count - 1)
                        {
                            WriteProductLogBatch_Inner(batch, newLog, isNeedGetLine);
                            batch.Clear();
                        }
                        i++;
                    }
                }

                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        private IList<string[]> GetProductIdsByDeliveryNo(string dn)
        {
            SqlDataReader sqlR = null;
            try
            {
                IList<string[]> ret = new List<string[]>();

                _Schema.SQLContext sqlCtx = null;
                _Schema.TableAndFields tf1 = null;
                _Schema.TableAndFields tf2 = null;
                _Schema.TableAndFields[] tblAndFldsesArray = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx, out tblAndFldsesArray))
                    {
                        tf1 = new _Schema.TableAndFields();
                        tf1.Table = typeof(_Schema.Product);
                        _Schema.Product cond = new _Schema.Product();
                        cond.DeliveryNo  = dn;
                        tf1.equalcond = cond;
                        tf1.ToGetFieldNames.Add(_Schema.Product.fn_ProductID);
                        tf1.ToGetFieldNames.Add(_Schema.Product.fn_Model);

                        tf2 = new _Schema.TableAndFields();
                        tf2.Table = typeof(_Schema.ProductStatus);
                        tf2.ToGetFieldNames.Add(_Schema.ProductStatus.fn_Line);

                        List<_Schema.TableConnectionItem> tblCnntIs = new List<_Schema.TableConnectionItem>();
                        _Schema.TableConnectionItem tc1 = new _Schema.TableConnectionItem(tf1, _Schema.Product.fn_ProductID, tf2, _Schema.ProductStatus.fn_ProductID);
                        tblCnntIs.Add(tc1);

                        _Schema.TableConnectionCollection tblCnnts = new _Schema.TableConnectionCollection(tblCnntIs.ToArray());

                        tblAndFldsesArray = new _Schema.TableAndFields[] { tf1, tf2 };

                        _Schema.TableBiJoinedLogic tblBiJndLgc = new _Schema.TableBiJoinedLogic();
                        tblBiJndLgc.Add(tf1);
                        tblBiJndLgc.Add(_Schema.Func.LEFTJOIN);
                        tblBiJndLgc.Add(tf2);
                        tblBiJndLgc.Add(tc1);

                        sqlCtx = _Schema.Func.GetConditionedComprehensiveJoinedSelect(MethodBase.GetCurrentMethod().MetadataToken, null, ref tblAndFldsesArray, tblCnnts, tblBiJndLgc);

                        sqlCtx.Sentence = sqlCtx.Sentence.Replace(tf1.alias + " ", string.Format("{0} WITH (UPDLOCK)", tf1.alias));
                        sqlCtx.Sentence = sqlCtx.Sentence.Replace(tf2.alias + " ", string.Format("{0} WITH (UPDLOCK)", tf2.alias));
                    }
                }
                tf1 = tblAndFldsesArray[0];
                tf2 = tblAndFldsesArray[1];

                sqlCtx.Params[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_DeliveryNo)].Value = dn;

                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                while (sqlR != null && sqlR.Read())
                {
                    string[] item = new string[3];
                    item[0] = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_ProductID)]);
                    item[1] = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf1.alias, _Schema.Product.fn_Model)]);
                    item[2] = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Func.DecAlias(tf2.alias, _Schema.ProductStatus.fn_Line)]);
                    ret.Add(item);
                }

                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                    sqlR.Close();
            }
        }

        public void DNUnpackForPODataDefered(IUnitOfWork uow, string dn)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dn);
        }
        public void DNUnpackForPOData(string dn)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.DeliveryNo  = dn;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), new List<string>() { _Schema.Product.fn_DeliveryNo, _Schema.Product.fn_PalletNo }, null, null, null, cond, null, null, null, null, null, null, null);

                        sqlCtx.Params[_Schema.Func.DecSV(_Schema.Product.fn_PalletNo )].Value = string.Empty;
                        sqlCtx.Params[_Schema.Func.DecSV(_Schema.Product.fn_DeliveryNo)].Value = string.Empty;
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_DeliveryNo ].Value = dn;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }
        #endregion

        public IList<IMES.FisObject.FA.Product.ProductLog> GetProductLogs(string station, int status, string line)
        {
            try
            {
                IList<IMES.FisObject.FA.Product.ProductLog> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductLog cond = new _Metas.ProductLog();
                        cond.station = station;
                        cond.status = status;
                        cond.line = line;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductLog>(tk, null, null, new ConditionCollection<_Metas.ProductLog>(new EqualCondition<_Metas.ProductLog>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.ProductLog.fn_station).Value = station;
                sqlCtx.Param(_Metas.ProductLog.fn_status).Value = status;
                sqlCtx.Param(_Metas.ProductLog.fn_line).Value = line;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.ProductLog, IMES.FisObject.FA.Product.ProductLog, IMES.FisObject.FA.Product.ProductLog>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.FisObject.FA.Product.ProductLog> GetProductLogs(string station, int status, string line, string prodId)
        {
            try
            {
                IList<IMES.FisObject.FA.Product.ProductLog> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductLog cond = new _Metas.ProductLog();
                        cond.station = station;
                        cond.status = status;
                        cond.line = line;
                        cond.productID = prodId;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductLog>(tk, null, null, new ConditionCollection<_Metas.ProductLog>(new EqualCondition<_Metas.ProductLog>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.ProductLog.fn_station).Value = station;
                sqlCtx.Param(_Metas.ProductLog.fn_status).Value = status;
                sqlCtx.Param(_Metas.ProductLog.fn_line).Value = line;
                sqlCtx.Param(_Metas.ProductLog.fn_productID).Value = prodId;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.ProductLog, IMES.FisObject.FA.Product.ProductLog, IMES.FisObject.FA.Product.ProductLog>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProductPart> GetProductPartsByPartNosAndProdId(string[] partNos, string prodId)
        {
            try
            {
                IList<IProductPart> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        Product_Part cond = new Product_Part();
                        cond.productID = prodId;

                        Product_Part cond2 = new Product_Part();
                        cond2.partNo = "[INSET]";

                        sqlCtx = FuncNew.GetConditionedSelect<Product_Part>(tk, null, null, new ConditionCollection<Product_Part>(new EqualCondition<Product_Part>(cond), new InSetCondition<Product_Part>(cond2)));
                    }
                }
                sqlCtx.Param(Product_Part.fn_productID).Value = prodId;
                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(Product_Part.fn_partNo), g.ConvertInSet(new List<string>(partNos)));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<Product_Part, ProductPart, IProductPart>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddOneIProductPart(IProductPart item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<Product_Part>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<Product_Part, ProductPart>(sqlCtx, (ProductPart)item);

                sqlCtx.Param(Product_Part.fn_cdt).Value = cmDt;
                sqlCtx.Param(Product_Part.fn_udt).Value = cmDt;

                item.ID = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_BOM, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProduct> GetProductObjListByDn(string dn)
        {
            try
            {
                IList<IProduct> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.deliveryNo = dn;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, null, null, new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_deliveryNo).Value = dn;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Product, IMES.FisObject.FA.Product.Product, IProduct>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteProductInfo(string[] prodIds, string infoType)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductInfo cond = new _Metas.ProductInfo();
                        cond.infoType = infoType;
                        _Metas.ProductInfo cond2 = new _Metas.ProductInfo();
                        cond2.productID = "[INSET]";
                        sqlCtx = FuncNew.GetConditionedDelete<_Metas.ProductInfo>(tk, new ConditionCollection<_Metas.ProductInfo>(
                             new EqualCondition<_Metas.ProductInfo>(cond),
                             new InSetCondition<_Metas.ProductInfo>(cond2)));
                    }
                }
                sqlCtx.Param(_Metas.ProductInfo.fn_infoType).Value = infoType;
                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(_Metas.ProductInfo.fn_productID), g.ConvertInSet(new List<string>(prodIds)));

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProduct> GetProductByPrSn(string prSn)
        {
            try
            {
                IList<IProduct> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.prsn = prSn;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, null, null, new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_prsn).Value = prSn;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Product, IMES.FisObject.FA.Product.Product, IProduct>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdatePizzaIdForProduct(string proId, string pizzaId)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.productID = proId;
                        _Metas.Product setv = new _Metas.Product();
                        setv.pizzaID = pizzaId;
                        setv.udt = DateTime.Now;
                        sqlCtx = FuncNew.GetConditionedUpdate<_Metas.Product>(tk, new SetValueCollection<_Metas.Product>(new CommonSetValue<_Metas.Product>(setv)), new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_productID).Value = proId;
                sqlCtx.Param(g.DecSV(_Metas.Product.fn_pizzaID)).Value = pizzaId;
                sqlCtx.Param(g.DecSV(_Metas.Product.fn_udt)).Value = _Schema.SqlHelper.GetDateTime();

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public FaSnobtdetInfo GetSnoBTDet(string productID)
        {
            try
            {
                FaSnobtdetInfo ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        Fa_Snobtdet cond = new Fa_Snobtdet();
                        cond.snoId = productID;
                        sqlCtx = FuncNew.GetConditionedSelect<Fa_Snobtdet>(tk, "TOP 1", null, new ConditionCollection<Fa_Snobtdet>(new EqualCondition<Fa_Snobtdet>(cond)));
                    }
                }
                sqlCtx.Param(Fa_Snobtdet.fn_snoId).Value = productID;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<Fa_Snobtdet, FaSnobtdetInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<LabelKittingCode> GetLabelKittingCodeListByType(string type)
        {
            try
            {
                IList<LabelKittingCode> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        LabelKitting cond = new LabelKitting();
                        cond.type = type;
                        sqlCtx = FuncNew.GetConditionedSelect<LabelKitting>(tk, null, null, new ConditionCollection<LabelKitting>(new EqualCondition<LabelKitting>(cond)), LabelKitting.fn_code);
                    }
                }
                sqlCtx.Param(LabelKitting.fn_type).Value = type;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<LabelKitting, LabelKittingCode, LabelKittingCode>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetExistLabelKittingCode(string code, string type)
        {
            try
            {
                DataTable ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        LabelKitting cond = new LabelKitting();
                        cond.code = code;
                        cond.type = type;
                        sqlCtx = FuncNew.GetConditionedSelect<LabelKitting>(tk, null, null, new ConditionCollection<LabelKitting>(new EqualCondition<LabelKitting>(cond)));
                    }
                }
                sqlCtx.Param(LabelKitting.fn_code).Value = code;
                sqlCtx.Param(LabelKitting.fn_type).Value = type;

                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);

                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void ChangeLabelKittingCode(LabelKittingCode obj, string oldCode, string oldType)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        LabelKitting cond = new LabelKitting();
                        cond.code = oldCode;
                        cond.type = oldType;

                        LabelKitting setv = FuncNew.SetColumnFromField<LabelKitting, LabelKittingCode>(obj, LabelKitting.fn_cdt);
                        setv.udt = DateTime.Now;

                        sqlCtx = FuncNew.GetConditionedUpdate<LabelKitting>(tk, new SetValueCollection<LabelKitting>(new CommonSetValue<LabelKitting>(setv)), new ConditionCollection<LabelKitting>(new EqualCondition<LabelKitting>(cond)));
                    }
                }
                sqlCtx.Param(LabelKitting.fn_code).Value = oldCode;
                sqlCtx.Param(LabelKitting.fn_type).Value = oldType;

                sqlCtx = FuncNew.SetColumnFromField<LabelKitting, LabelKittingCode>(sqlCtx, obj, true);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(LabelKitting.fn_udt)).Value = cmDt;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddLabelKittingCode(LabelKittingCode obj)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<LabelKitting>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<LabelKitting, LabelKittingCode>(sqlCtx, obj);

                sqlCtx.Param(LabelKitting.fn_cdt).Value = cmDt;
                sqlCtx.Param(LabelKitting.fn_udt).Value = cmDt;

                obj.id = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void RemoveLabelKittingCode(string code, string type)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        LabelKitting cond = new LabelKitting();
                        cond.code = code;
                        cond.type = type;
                        sqlCtx = FuncNew.GetConditionedDelete<LabelKitting>(tk, new ConditionCollection<LabelKitting>(new EqualCondition<LabelKitting>(cond)));
                    }
                }
                sqlCtx.Param(LabelKitting.fn_code).Value = code;
                sqlCtx.Param(LabelKitting.fn_type).Value = type;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public LabelKittingCode FindLabelKittingCode(string code, string type)
        {
            try
            {
                LabelKittingCode ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        LabelKitting cond = new LabelKitting();
                        cond.code = code;
                        cond.type = type;
                        sqlCtx = FuncNew.GetConditionedSelect<LabelKitting>(tk, "TOP 1", null, new ConditionCollection<LabelKitting>(new EqualCondition<LabelKitting>(cond)));
                    }
                }
                sqlCtx.Param(LabelKitting.fn_code).Value = code;
                sqlCtx.Param(LabelKitting.fn_type).Value = type;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<LabelKitting, LabelKittingCode>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<SpecialDetInfo> GetSpecialDetInfoByTpAndSnoId(string[] tps, string snoId)
        {
            try
            {
                IList<SpecialDetInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        Special_Det cond = new Special_Det();
                        cond.snoId = snoId;
                        Special_Det cond2 = new Special_Det();
                        cond2.tp = "[INSET]";
                        sqlCtx = FuncNew.GetConditionedSelect<Special_Det>(tk, null, null, new ConditionCollection<Special_Det>(new EqualCondition<Special_Det>(cond), new InSetCondition<Special_Det>(cond2)));
                    }
                }
                sqlCtx.Param(Special_Det.fn_snoId).Value = snoId;
                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(Special_Det.fn_tp), g.ConvertInSet(new List<string>(tps)));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<Special_Det, SpecialDetInfo, SpecialDetInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateSno1ForSpecialDet(string sno1, int[] ids)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        Special_Det cond = new Special_Det();
                        cond.id = 1;
                        Special_Det setv = new Special_Det();
                        setv.sno1 = sno1;
                        sqlCtx = FuncNew.GetConditionedUpdate<Special_Det>(tk, new SetValueCollection<Special_Det>(new CommonSetValue<Special_Det>(setv)), new ConditionCollection<Special_Det>(new InSetCondition<Special_Det>(cond)));
                    }
                }
                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(Special_Det.fn_id), g.ConvertInSet(new List<int>(ids)));
                sqlCtx.Param(g.DecSV(Special_Det.fn_sno1)).Value = sno1;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void InsertSpecialDet(SpecialDetInfo item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<Special_Det>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<Special_Det, SpecialDetInfo>(sqlCtx, item);

                sqlCtx.Param(Special_Det.fn_cdt).Value = cmDt;
                sqlCtx.Param(Special_Det.fn_udt).Value = cmDt;

                item.id = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetKittingCodeListFromLine(string stage)
        {
            try
            {
                DataTable ret = null;

                //select distinct(Left(rtrim(Line),1)) as Code, '' as Descr, 'Yes' as IsLine
                //from Line where Stage=@stage 
                //union 
                //select rtrim(Family) as Code, Descr, '' as IsLine 
                //from Family order by Descr, Code

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();
                        sqlCtx.Sentence = "SELECT DISTINCT(LEFT(RTRIM({2}),1)) AS Code, '' AS {3},'Yes' AS IsLine " +
                                            "FROM {0} WHERE {4}=@{4} " +
                                            "UNION " +
                                            "SELECT RTRIM({5}) AS Code,{6} AS {3},'' AS IsLine " +
                                            "FROM {7}..{1} " +
                                            "ORDER BY {3}, Code ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.Line).Name,
                                                                        typeof(_Schema.Family).Name,
                                                                        _Schema.Line.fn_line,
                                                                        _Schema.Line.fn_Descr,
                                                                        _Schema.Line.fn_Stage,
                                                                        _Schema.Family.fn_family,
                                                                        _Schema.Family.fn_Descr,
                                                                        _Schema.SqlHelper.DB_BOM);

                        sqlCtx.Params.Add(_Schema.Line.fn_Stage, new SqlParameter("@" + _Schema.Line.fn_Stage, SqlDbType.Char));
                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.Line.fn_Stage].Value = stage;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetKittingCodeList(string type)
        {
            try
            {
                DataTable ret = null;

                //SELECT RTRIM(Code),[Descr],'' AS IsLine  
                //FROM LabelKitting 
                //WHERE Type='type' 
                //ORDER BY Descr 

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();
                        sqlCtx.Sentence = "SELECT RTRIM({1}),{2},'' AS IsLine " +
                                            "FROM {0} " +
                                            "WHERE {3}=@{3} " +
                                            "ORDER BY {2} ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(_Metas.LabelKitting)),
                                                                        _Metas.LabelKitting.fn_code,
                                                                        _Metas.LabelKitting.fn_descr,
                                                                        _Metas.LabelKitting.fn_type);

                        sqlCtx.Params.Add(_Metas.LabelKitting.fn_type, new SqlParameter("@" + _Metas.LabelKitting.fn_type, SqlDbType.VarChar));
                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Metas.LabelKitting.fn_type].Value = type;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetPdLineList(string stage)
        {
            try
            {
                DataTable ret = null;

                //SELECT [Line] AS pdLine FROM Line WHERE [Stage]='stage' ORDER BY [Line] 

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();
                        sqlCtx.Sentence = "SELECT {1} AS pdLine FROM {0} WHERE {2}=@{2} ORDER BY {1} ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.Line).Name,
                                                                        _Schema.Line.fn_line,
                                                                        _Schema.Line.fn_Stage);

                        sqlCtx.Params.Add(_Schema.Line.fn_Stage, new SqlParameter("@" + _Schema.Line.fn_Stage, SqlDbType.Char));
                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.Line.fn_Stage].Value = stage;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetPdLineListForLightNo(string stage)
        {
            try
            {
                DataTable ret = null;

                //select distinct Left(rtrim(Line),1) as Code from Line (nolock) where Stage=@stage order by Code

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();
                        sqlCtx.Sentence = "SELECT DISTINCT LEFT(RTRIM({1}),1) AS Code FROM {0} WHERE {2}=@{2} ORDER BY Code";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.Line).Name,
                                                                        _Schema.Line.fn_line,
                                                                        _Schema.Line.fn_Stage);

                        sqlCtx.Params.Add(_Schema.Line.fn_Stage, new SqlParameter("@" + _Schema.Line.fn_Stage, SqlDbType.Char));
                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.Line.fn_Stage].Value = stage;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetLightNoList(string kittingType, string code)
        {
            try
            {
                DataTable ret = null;

                //SELECT DISTINCT b.Code,b.PartNo,b.Tp,b.Station,CONVERT(int,b.LightNo) AS LightNo,Qty,Sub,Safety_Stock,Max_Stock,b.Remark,b.Editor,b.Cdt,b.Udt,b.ID 
                //FROM (SELECT PartType + '%' as PartType FROM IMES2012_GetData.dbo.KitLoc WHERE PdLine=@code) a, 
                //IMES2012_FA.dbo.WipBuffer b 
                //WHERE IsNull(b.Tp,'') LIKE a.PartType 
                //AND b.Code=@code 
                //AND b.KittingType=@kittingType 
                //ORDER BY CONVERT(int,b.LightNo)

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();
                        sqlCtx.Sentence = "SELECT DISTINCT b.{1},b.{2},b.{3},b.{16},CONVERT(int,b.{4}) AS LightNo,{5},{6},{7},{8},b.{9},b.{17},b.{18},b.{19},b.{10} " +
                                            "FROM (SELECT {14} + '%' AS {14} FROM {12}..{13} WHERE {15}=@{1}) a, " +
                                            "{0} b " +
                                            "WHERE ISNULL(b.{3},'') LIKE a.{14} " +
                                            "AND b.{1}=@{1} " +
                                            "AND b.{11}=@{11} " +
                                            "ORDER BY CONVERT(int,b.{4}) ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.WipBuffer).Name,
                                                                        _Schema.WipBuffer.fn_Code,
                                                                        _Schema.WipBuffer.fn_PartNo,
                                                                        _Schema.WipBuffer.fn_Tp,
                                                                        _Schema.WipBuffer.fn_LightNo,
                                                                        _Schema.WipBuffer.fn_Qty,
                                                                        _Schema.WipBuffer.fn_Sub,
                                                                        _Schema.WipBuffer.fn_Safety_Stock,
                                                                        _Schema.WipBuffer.fn_Max_Stock,
                                                                        _Schema.WipBuffer.fn_Remark,
                                                                        _Schema.WipBuffer.fn_ID,
                                                                        _Schema.WipBuffer.fn_kittingType,
                                                                        _Schema.SqlHelper.DB_PAK,
                                                                        ToolsNew.GetTableName(typeof(_Metas.KitLoc)),
                                                                        _Metas.KitLoc.fn_partType,
                                                                        _Metas.KitLoc.fn_pdLine,
                                                                        _Schema.WipBuffer.fn_station,
                                                                        _Schema.WipBuffer.fn_Editor,
                                                                        _Schema.WipBuffer.fn_Cdt,
                                                                        _Schema.WipBuffer.fn_Udt);

                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_Code, new SqlParameter("@" + _Schema.WipBuffer.fn_Code, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_kittingType, new SqlParameter("@" + _Schema.WipBuffer.fn_kittingType, SqlDbType.VarChar));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = code;
                sqlCtx.Params[_Schema.WipBuffer.fn_kittingType].Value = kittingType;

                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetLightNoListPAK(string kittingType, string code)
        {
            try
            {
                DataTable ret = null;

                //SELECT DISTINCT b.Code,b.PartNo,b.Tp,b.Station,CONVERT(int,b.LightNo) AS LightNo,Qty,Sub,Safety_Stock,Max_Stock,b.Remark,b.Editor,b.Cdt,b.Udt,b.ID 
                //FROM (SELECT PartType + '%' as PartType FROM IMES2012_GetData.dbo.KitLoc WHERE PdLine=@code) a, 
                //IMES2012_FA.dbo.WipBuffer b 
                //WHERE ISNULL(b.Tp,'') LIKE a.PartType 
                //AND b.Code=@code 
                //AND b.KittingType=@kittingType
                //AND ISNULL(Tp,'') NOT LIKE 'DDD Kitting%' 
                //ORDER BY CONVERT(int,b.LightNo)

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();
                        sqlCtx.Sentence = "SELECT DISTINCT b.{1},b.{2},b.{3},b.{16},CONVERT(int,b.{4}) AS LightNo,{5},{6},{7},{8},b.{9},b.{17},b.{18},b.{19},b.{10} " +
                                            "FROM (SELECT {14} + '%' AS {14} FROM {12}..{13} WHERE {15}=@{1}) a, " +
                                            "{0} b " +
                                            "WHERE ISNULL(b.{3},'') LIKE a.{14} " +
                                            "AND b.{1}=@{1} " +
                                            "AND b.{11}=@{11} " +
                                            "AND ISNULL({3},'') NOT LIKE 'DDD Kitting%' " +
                                            "ORDER BY CONVERT(int,b.{4}) ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.WipBuffer).Name,
                                                                        _Schema.WipBuffer.fn_Code,
                                                                        _Schema.WipBuffer.fn_PartNo,
                                                                        _Schema.WipBuffer.fn_Tp,
                                                                        _Schema.WipBuffer.fn_LightNo,
                                                                        _Schema.WipBuffer.fn_Qty,
                                                                        _Schema.WipBuffer.fn_Sub,
                                                                        _Schema.WipBuffer.fn_Safety_Stock,
                                                                        _Schema.WipBuffer.fn_Max_Stock,
                                                                        _Schema.WipBuffer.fn_Remark,
                                                                        _Schema.WipBuffer.fn_ID,
                                                                        _Schema.WipBuffer.fn_kittingType,
                                                                        _Schema.SqlHelper.DB_PAK,
                                                                        ToolsNew.GetTableName(typeof(_Metas.KitLoc)),
                                                                        _Metas.KitLoc.fn_partType,
                                                                        _Metas.KitLoc.fn_pdLine,
                                                                        _Schema.WipBuffer.fn_station,
                                                                        _Schema.WipBuffer.fn_Editor,
                                                                        _Schema.WipBuffer.fn_Cdt,
                                                                        _Schema.WipBuffer.fn_Udt);

                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_Code, new SqlParameter("@" + _Schema.WipBuffer.fn_Code, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_kittingType, new SqlParameter("@" + _Schema.WipBuffer.fn_kittingType, SqlDbType.VarChar));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = code;
                sqlCtx.Params[_Schema.WipBuffer.fn_kittingType].Value = kittingType;

                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetLightNoListFami(string kittingType, string code)
        {
            try
            {
                DataTable ret = null;

                //SELECT DISTINCT Code,PartNo,Tp,Station,CONVERT(int,LightNo) AS LightNo,Qty,Sub,Safety_Stock,Max_Stock,Remark,Editor,Cdt,Udt,ID 
                //FROM IMES2012_FA.dbo.WipBuffer 
                //WHERE Code=@code 
                //AND KittingType=@kittingType 
                //ORDER BY CONVERT(int,LightNo)

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();
                        sqlCtx.Sentence = "SELECT DISTINCT {1},{2},{3},{12},CONVERT(int,{4}) AS LightNo,{5},{6},{7},{8},{9},{13},{14},{15},{10} " +
                                            "FROM {0} " +
                                            "WHERE {1}=@{1} " +
                                            "AND {11}=@{11} " +
                                            "ORDER BY CONVERT(int,{4}) ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.WipBuffer).Name,
                                                                        _Schema.WipBuffer.fn_Code,
                                                                        _Schema.WipBuffer.fn_PartNo,
                                                                        _Schema.WipBuffer.fn_Tp,
                                                                        _Schema.WipBuffer.fn_LightNo,
                                                                        _Schema.WipBuffer.fn_Qty,
                                                                        _Schema.WipBuffer.fn_Sub,
                                                                        _Schema.WipBuffer.fn_Safety_Stock,
                                                                        _Schema.WipBuffer.fn_Max_Stock,
                                                                        _Schema.WipBuffer.fn_Remark,
                                                                        _Schema.WipBuffer.fn_ID,
                                                                        _Schema.WipBuffer.fn_kittingType,
                                                                        _Schema.WipBuffer.fn_station,
                                                                        _Schema.WipBuffer.fn_Editor,
                                                                        _Schema.WipBuffer.fn_Cdt,
                                                                        _Schema.WipBuffer.fn_Udt);

                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_Code, new SqlParameter("@" + _Schema.WipBuffer.fn_Code, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_kittingType, new SqlParameter("@" + _Schema.WipBuffer.fn_kittingType, SqlDbType.VarChar));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = code;
                sqlCtx.Params[_Schema.WipBuffer.fn_kittingType].Value = kittingType;

                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetLightNoListFamiPAK(string kittingType, string code)
        {
            try
            {
                DataTable ret = null;

                //SELECT DISTINCT Code,PartNo,Tp,Station,CONVERT(int,LightNo) AS LightNo,Qty,Sub,Safety_Stock,Max_Stock,Remark,Editor,Cdt,Udt,ID 
                //FROM IMES2012_FA.dbo.WipBuffer 
                //WHERE Code=@code 
                //AND KittingType=@kittingType 
                //AND ISNULL(Tp,'') NOT LIKE 'DDD Kitting%' 
                //ORDER BY CONVERT(int,LightNo)

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();
                        sqlCtx.Sentence = "SELECT DISTINCT {1},{2},{3},{12},CONVERT(int,{4}) AS LightNo,{5},{6},{7},{8},{9},{13},{14},{15},{10} " +
                                            "FROM {0} " +
                                            "WHERE {1}=@{1} " +
                                            "AND {11}=@{11} " +
                                            "AND ISNULL({3},'') NOT LIKE 'DDD Kitting%' " +
                                            "ORDER BY CONVERT(int,{4}) ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, typeof(_Schema.WipBuffer).Name,
                                                                        _Schema.WipBuffer.fn_Code,
                                                                        _Schema.WipBuffer.fn_PartNo,
                                                                        _Schema.WipBuffer.fn_Tp,
                                                                        _Schema.WipBuffer.fn_LightNo,
                                                                        _Schema.WipBuffer.fn_Qty,
                                                                        _Schema.WipBuffer.fn_Sub,
                                                                        _Schema.WipBuffer.fn_Safety_Stock,
                                                                        _Schema.WipBuffer.fn_Max_Stock,
                                                                        _Schema.WipBuffer.fn_Remark,
                                                                        _Schema.WipBuffer.fn_ID,
                                                                        _Schema.WipBuffer.fn_kittingType,
                                                                        _Schema.WipBuffer.fn_station,
                                                                        _Schema.WipBuffer.fn_Editor,
                                                                        _Schema.WipBuffer.fn_Cdt,
                                                                        _Schema.WipBuffer.fn_Udt);

                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_Code, new SqlParameter("@" + _Schema.WipBuffer.fn_Code, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_kittingType, new SqlParameter("@" + _Schema.WipBuffer.fn_kittingType, SqlDbType.VarChar));

                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = code;
                sqlCtx.Params[_Schema.WipBuffer.fn_kittingType].Value = kittingType;

                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddLightNo(IMES.DataModel.WipBuffer item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<_Metas.WipBuffer>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<_Metas.WipBuffer, IMES.DataModel.WipBuffer>(sqlCtx, item);

                sqlCtx.Param(_Metas.WipBuffer.fn_cdt).Value = cmDt;
                sqlCtx.Param(_Metas.WipBuffer.fn_udt).Value = cmDt;

                item.ID = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateLightNo(IMES.DataModel.WipBuffer item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetCommonUpdate<_Metas.WipBuffer>(tk);
                    }
                }
                sqlCtx = FuncNew.SetColumnFromField<_Metas.WipBuffer, IMES.DataModel.WipBuffer>(sqlCtx, item);

                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(_Metas.WipBuffer.fn_udt).Value = cmDt;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteLightNo(int id)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.WipBuffer cond = new _Metas.WipBuffer();
                        cond.id = id;
                        sqlCtx = FuncNew.GetConditionedDelete<_Metas.WipBuffer>(tk, new ConditionCollection<_Metas.WipBuffer>(new EqualCondition<_Metas.WipBuffer>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.WipBuffer.fn_id).Value = id;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetPartInfoByPartNo(string partNo)
        {
            try
            {
                DataTable ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Part_NEW cond = new _Metas.Part_NEW();
                        cond.partNo = partNo;
                        cond.flag = 1;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Part_NEW>(tk, null, new string[] { _Metas.Part_NEW.fn_descr }, new ConditionCollection<_Metas.Part_NEW>(new EqualCondition<_Metas.Part_NEW>(cond)));

                        sqlCtx.Param(_Metas.Part_NEW.fn_flag).Value = cond.flag;
                    }
                }
                sqlCtx.Param(_Metas.Part_NEW.fn_partNo).Value = partNo;

                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_BOM, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);

                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool ExistWipBuffer(string code, string partNo, string lightNo, string kittingType)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.WipBuffer cond = new _Metas.WipBuffer();
                        cond.code = code;
                        cond.kittingType = kittingType;
                        cond.partNo = partNo;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.WipBuffer>(tk, "COUNT", new string[] { _Metas.WipBuffer.fn_id }, new ConditionCollection<_Metas.WipBuffer>(new EqualCondition<_Metas.WipBuffer>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.WipBuffer.fn_code).Value = code;
                sqlCtx.Param(_Metas.WipBuffer.fn_kittingType).Value = kittingType;
                sqlCtx.Param(_Metas.WipBuffer.fn_partNo).Value = partNo;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool ExistWipBuffer(string code, string partNo, string lightNo, string kittingType, string line)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.WipBuffer cond = new _Metas.WipBuffer();
                        cond.code = code;
                        cond.kittingType = kittingType;
                        cond.partNo = partNo;

                        _Metas.WipBuffer cond2 = new _Metas.WipBuffer();
                        cond2.line = line;

                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.WipBuffer>(tk, "COUNT", new string[] { _Metas.WipBuffer.fn_id }, new ConditionCollection<_Metas.WipBuffer>(
                            new EqualCondition<_Metas.WipBuffer>(cond), 
                            new EqualCondition<_Metas.WipBuffer>(cond2, "ISNULL({0},'')")));
                    }
                }
                sqlCtx.Param(_Metas.WipBuffer.fn_code).Value = code;
                sqlCtx.Param(_Metas.WipBuffer.fn_kittingType).Value = kittingType;
                sqlCtx.Param(_Metas.WipBuffer.fn_partNo).Value = partNo;
                sqlCtx.Param(_Metas.WipBuffer.fn_line).Value = line;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool ExistWipBufferExceptCode(string code, string partNo, string lightNo, int id, string kittingType)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.WipBuffer cond = new _Metas.WipBuffer();
                        cond.code = code;
                        cond.kittingType = kittingType;
                        cond.partNo = partNo;
                        _Metas.WipBuffer cond2 = new _Metas.WipBuffer();
                        cond2.id = id;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.WipBuffer>(tk, "COUNT", new string[] { _Metas.WipBuffer.fn_id }, new ConditionCollection<_Metas.WipBuffer>(new EqualCondition<_Metas.WipBuffer>(cond), new NotEqualCondition<_Metas.WipBuffer>(cond2)));
                    }
                }
                sqlCtx.Param(_Metas.WipBuffer.fn_code).Value = code;
                sqlCtx.Param(_Metas.WipBuffer.fn_kittingType).Value = kittingType;
                sqlCtx.Param(_Metas.WipBuffer.fn_partNo).Value = partNo;
                sqlCtx.Param(_Metas.WipBuffer.fn_id).Value = id;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool ExistWipBufferExceptCode(string code, string partNo, string lightNo, int id, string kittingType, string line)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.WipBuffer cond = new _Metas.WipBuffer();
                        cond.code = code;
                        cond.kittingType = kittingType;
                        cond.partNo = partNo;
                        _Metas.WipBuffer cond2 = new _Metas.WipBuffer();
                        cond2.id = id;
                        _Metas.WipBuffer cond3 = new _Metas.WipBuffer();
                        cond3.line = line;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.WipBuffer>(tk, "COUNT", new string[] { _Metas.WipBuffer.fn_id }, new ConditionCollection<_Metas.WipBuffer>(
                            new EqualCondition<_Metas.WipBuffer>(cond), 
                            new NotEqualCondition<_Metas.WipBuffer>(cond2),
                            new EqualCondition<_Metas.WipBuffer>(cond3, "ISNULL({0},'')")));
                    }
                }
                sqlCtx.Param(_Metas.WipBuffer.fn_code).Value = code;
                sqlCtx.Param(_Metas.WipBuffer.fn_kittingType).Value = kittingType;
                sqlCtx.Param(_Metas.WipBuffer.fn_partNo).Value = partNo;
                sqlCtx.Param(_Metas.WipBuffer.fn_id).Value = id;
                sqlCtx.Param(_Metas.WipBuffer.fn_line).Value = line;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetLightNoPartType()
        {
            try
            {
                DataTable ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.KitLoc>(tk, "DISTINCT", new string[] { _Metas.KitLoc.fn_partType }, new ConditionCollection<_Metas.KitLoc>(), _Metas.KitLoc.fn_partType);
                    }
                }
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);

                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable ExecOpKittingAutoCheck(string family, string loc, string line)
        {
            try
            {
                DataTable ret = null;
                SqlParameter[] paramsArray = new SqlParameter[3];
                paramsArray[0] = new SqlParameter("@family", SqlDbType.VarChar);
                paramsArray[0].Value = family;
                paramsArray[1] = new SqlParameter("@loc ", SqlDbType.VarChar);
                paramsArray[1].Value = loc;
                paramsArray[2] = new SqlParameter("@Line ", SqlDbType.VarChar);
                paramsArray[2].Value = line;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.StoredProcedure, "op_KittingAutoCheck", paramsArray);
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteTmpKit(string curLine, string type)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.TmpKit cond = new _Metas.TmpKit();
                        cond.pdLine = curLine;
                        cond.type = type;
                        sqlCtx = FuncNew.GetConditionedDelete<_Metas.TmpKit>(tk, new ConditionCollection<_Metas.TmpKit>(new EqualCondition<_Metas.TmpKit>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.TmpKit.fn_pdLine).Value = curLine;
                sqlCtx.Param(_Metas.TmpKit.fn_type).Value = type;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void ImportTmpKit(IList<IMES.DataModel.TmpKitInfoDef> items)
        {
            SqlTransactionManager.Begin();
            try
            {
                if (items != null && items.Count > 0)
                {
                    for (int i = 0; i < items.Count; i++)
                    {
                        TmpKitInfoDef item = items[i];
                        SQLContextNew sqlCtx = ComposeForImportTmpKit(item);
                        item.ID = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
                    }
                }
                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        private SQLContextNew ComposeForImportTmpKit(IMES.DataModel.TmpKitInfoDef item)
        {
            try
            {
                 MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<_Metas.TmpKit>(tk);
                    }
                }
                sqlCtx = FuncNew.SetColumnFromField<_Metas.TmpKit, IMES.DataModel.TmpKitInfoDef>(sqlCtx, item);
                return sqlCtx;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable ExecOpKittingLocCheck(string pdline, string type)
        {
            try
            {
                DataTable ret = null;
                SqlParameter[] paramsArray = new SqlParameter[2];
                paramsArray[0] = new SqlParameter("@pdline", SqlDbType.VarChar);
                paramsArray[0].Value = pdline;
                paramsArray[1] = new SqlParameter("@type", SqlDbType.VarChar);
                paramsArray[1].Value = type;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.StoredProcedure, "op_KittingLocCheck", paramsArray);
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable ExecOpPAKKitLocFV(string pdline)
        {
            try
            {
                DataTable ret = null;
                SqlParameter[] paramsArray = new SqlParameter[1];
                paramsArray[0] = new SqlParameter("@pdline", SqlDbType.VarChar);
                paramsArray[0].Value = pdline;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.StoredProcedure, "op_PAKKitLoc_FV", paramsArray);
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<FAFloatLocationInfo> GetFAFloatLocationList()
        {
            try
            {
                IList<FAFloatLocationInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.KitLoc>(tk, null, null, new ConditionCollection<_Metas.KitLoc>(), _Metas.KitLoc.fn_family, _Metas.KitLoc.fn_partType);
                    }
                }
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.KitLoc, FAFloatLocationInfo, FAFloatLocationInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<FAFloatLocationInfo> GetFAFloatLocListByFamily(string family)
        {
            try
            {
                IList<FAFloatLocationInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.KitLoc cond = new _Metas.KitLoc();
                        cond.family = family;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.KitLoc>(tk, null, null, new ConditionCollection<_Metas.KitLoc>(new EqualCondition<_Metas.KitLoc>(cond)), _Metas.KitLoc.fn_partType);
                    }
                }
                sqlCtx.Param(_Metas.KitLoc.fn_family).Value = family;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.KitLoc, FAFloatLocationInfo, FAFloatLocationInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public FAFloatLocationInfo GetFAFloatLocationInfo(int id)
        {
            try
            {
                FAFloatLocationInfo ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.KitLoc cond = new _Metas.KitLoc();
                        cond.id = id;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.KitLoc>(tk, "TOP 1", null, new ConditionCollection<_Metas.KitLoc>(new EqualCondition<_Metas.KitLoc>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.KitLoc.fn_id).Value = id;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.KitLoc, FAFloatLocationInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddFAFloatLocationInfo(FAFloatLocationInfo item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<_Metas.KitLoc>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<_Metas.KitLoc, FAFloatLocationInfo>(sqlCtx, item);

                sqlCtx.Param(_Metas.KitLoc.fn_cdt).Value = cmDt;
                sqlCtx.Param(_Metas.KitLoc.fn_udt).Value = cmDt;

                item.id = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateFAFloatLocationInfo(FAFloatLocationInfo item, int id)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.KitLoc cond = new _Metas.KitLoc();
                        cond.id = id;

                        _Metas.KitLoc setv = FuncNew.SetColumnFromField<_Metas.KitLoc, FAFloatLocationInfo>(item, _Metas.KitLoc.fn_id, _Metas.KitLoc.fn_cdt);
                        setv.udt = DateTime.Now;

                        sqlCtx = FuncNew.GetConditionedUpdate<_Metas.KitLoc>(tk, new SetValueCollection<_Metas.KitLoc>(new CommonSetValue<_Metas.KitLoc>(setv)), new ConditionCollection<_Metas.KitLoc>(new EqualCondition<_Metas.KitLoc>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.KitLoc.fn_id).Value = id;

                sqlCtx = FuncNew.SetColumnFromField<_Metas.KitLoc, FAFloatLocationInfo>(sqlCtx, item, true);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(_Metas.KitLoc.fn_udt)).Value = cmDt;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteFAFloatLocationInfo(int id)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.KitLoc cond = new _Metas.KitLoc();
                        cond.id = id;
                        sqlCtx = FuncNew.GetConditionedDelete<_Metas.KitLoc>(tk, new ConditionCollection<_Metas.KitLoc>(new EqualCondition<_Metas.KitLoc>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.KitLoc.fn_id).Value = id;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<PAKitLoc> GetPAKitlocByPdLine(string pdline)
        {
            try
            {
                IList<PAKitLoc> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        Pakitloc cond = new Pakitloc();
                        cond.pdLine = pdline;
                        sqlCtx = FuncNew.GetConditionedSelect<Pakitloc>(tk, null, null, new ConditionCollection<Pakitloc>(new EqualCondition<Pakitloc>(cond)), Pakitloc.fn_partNo);
                    }
                }
                sqlCtx.Param(Pakitloc.fn_pdLine).Value = pdline;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<Pakitloc, PAKitLoc, PAKitLoc>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddPAKitLoc(PAKitLoc item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<Pakitloc>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<Pakitloc, PAKitLoc>(sqlCtx, item);

                sqlCtx.Param(Pakitloc.fn_cdt).Value = cmDt;
                sqlCtx.Param(Pakitloc.fn_udt).Value = cmDt;

                item.id = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdatePAKitLoc(PAKitLoc item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetCommonUpdate<Pakitloc>(tk);
                    }
                }
                sqlCtx.Param(Pakitloc.fn_id).Value = item.id;
                sqlCtx.Param(Pakitloc.fn_editor).Value = item.editor;

                sqlCtx = FuncNew.SetColumnFromField<Pakitloc, PAKitLoc>(sqlCtx, item);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(Pakitloc.fn_udt).Value = cmDt;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdatePAKitLoc(PAKitLoc setValue, PAKitLoc condition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                Pakitloc cond = FuncNew.SetColumnFromField<Pakitloc, PAKitLoc>(condition);
                Pakitloc setv = FuncNew.SetColumnFromField<Pakitloc, PAKitLoc>(setValue);
                setv.udt = DateTime.Now;

                sqlCtx = FuncNew.GetConditionedUpdate<Pakitloc>(new SetValueCollection<Pakitloc>(new CommonSetValue<Pakitloc>(setv)), new ConditionCollection<Pakitloc>(new EqualCondition<Pakitloc>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<Pakitloc, PAKitLoc>(sqlCtx, condition);
                sqlCtx = FuncNew.SetColumnFromField<Pakitloc, PAKitLoc>(sqlCtx, setValue, true);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(_Metas.Pakitloc.fn_udt)).Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeletePAKitLoc(int id)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetCommonDelete<Pakitloc>(tk);
                    }
                }
                sqlCtx.Param(Pakitloc.fn_id).Value = id;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProduct> GetProductByLineStage(string stage)
        {
            try
            {
                IList<IProduct> ret = null;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields tf3 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.Product>();

                        tf2 = new TableAndFields<_Metas.ProductStatus>();
                        tf2.ClearToGetFieldNames();

                        tf3 = new TableAndFields<_Metas.Line>();
                        tf3.SubDBCalalog = _Schema.SqlHelper.DB_GetData;
                        _Metas.Line cond = new _Metas.Line();
                        cond.stage = stage;
                        tf3.Conditions.Add(new EqualCondition<_Metas.Line>(cond));
                        tf3.ClearToGetFieldNames();

                        tafa = new ITableAndFields[] { tf1, tf2, tf3 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.Product, _Metas.ProductStatus>(tf1, _Metas.Product.fn_productID, tf2, _Metas.ProductStatus.fn_productID),
                            new TableConnectionItem<_Metas.ProductStatus, _Metas.Line>(tf2, _Metas.ProductStatus.fn_line, tf3, _Metas.Line.fn_line));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, "DISTINCT", tafa, tblCnnts);
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];
                tf3 = tafa[2];

                sqlCtx.Param(g.DecAlias(tf3.Alias, Line.fn_stage)).Value = stage;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Product, IMES.FisObject.FA.Product.Product, IProduct>(ret, sqlR, sqlCtx, tf1.Alias);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProduct> GetProductByLineStage(string stage, string station)
        {
            try
            {
                IList<IProduct> ret = null;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields tf3 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.Product>();

                        tf2 = new TableAndFields<_Metas.ProductStatus>();
                        _Metas.ProductStatus cond0 = new _Metas.ProductStatus();
                        cond0.station = station;
                        tf2.Conditions.Add(new EqualCondition<_Metas.ProductStatus>(cond0));
                        tf2.ClearToGetFieldNames();

                        tf3 = new TableAndFields<_Metas.Line>();
                        tf3.SubDBCalalog = _Schema.SqlHelper.DB_GetData;
                        _Metas.Line cond = new _Metas.Line();
                        cond.stage = stage;
                        tf3.Conditions.Add(new EqualCondition<_Metas.Line>(cond));
                        tf3.ClearToGetFieldNames();

                        tafa = new ITableAndFields[] { tf1, tf2, tf3 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.Product, _Metas.ProductStatus>(tf1, _Metas.Product.fn_productID, tf2, _Metas.ProductStatus.fn_productID),
                            new TableConnectionItem<_Metas.ProductStatus, _Metas.Line>(tf2, _Metas.ProductStatus.fn_line, tf3, _Metas.Line.fn_line));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, "DISTINCT", tafa, tblCnnts);
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];
                tf3 = tafa[2];

                sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.ProductStatus.fn_station)).Value = station;
                sqlCtx.Param(g.DecAlias(tf3.Alias, _Metas.Line.fn_stage)).Value = stage;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Product, IMES.FisObject.FA.Product.Product, IProduct>(ret, sqlR, sqlCtx, tf1.Alias);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductBTInfo> GetProductBT(string productId)
        {
            try
            {
                IList<ProductBTInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        ProductBT cond = new ProductBT();
                        cond.productID = productId;
                        sqlCtx = FuncNew.GetConditionedSelect<ProductBT>(tk, null, null, new ConditionCollection<ProductBT>(new EqualCondition<ProductBT>(cond)), ProductBT.fn_id);
                    }
                }
                sqlCtx.Param(ProductBT.fn_productID).Value = productId;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<ProductBT, ProductBTInfo, ProductBTInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void InsertProductBT(IMES.DataModel.ProductBTInfo item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<_Metas.ProductBT>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<_Metas.ProductBT, IMES.DataModel.ProductBTInfo>(sqlCtx, item);

                sqlCtx.Param(_Metas.ProductBT.fn_cdt).Value = cmDt;
                sqlCtx.Param(_Metas.ProductBT.fn_udt).Value = cmDt;

                item.id = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteProductBTByObjAndCondition(ProductBTInfo condition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                        ProductBT cond = FuncNew.SetColumnFromField<ProductBT, ProductBTInfo>(condition);
                        sqlCtx = FuncNew.GetConditionedDelete<ProductBT>(new ConditionCollection<ProductBT>(new EqualCondition<ProductBT>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<ProductBT, ProductBTInfo>(sqlCtx, condition);

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void CallRpt_ITCNDTS_SET_IMAGEDOWN_14(string cpqsno, string flag, string version)
        {
            try
            {
                SqlParameter[] paramsArray = new SqlParameter[3];

                paramsArray[0] = new SqlParameter("@cpqsno", SqlDbType.Char);
                paramsArray[0].Value = cpqsno;
                paramsArray[1] = new SqlParameter("@flag", SqlDbType.Char);
                paramsArray[1].Value = flag;
                paramsArray[2] = new SqlParameter("@version", SqlDbType.VarChar);
                paramsArray[2].Value = version;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.StoredProcedure, "rpt_ITCNDTS_SET_IMAGEDOWN_14", paramsArray);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IMES.DataModel.WipBuffer FindWipBufferById(int id)
        {
            try
            {
                IMES.DataModel.WipBuffer ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.WipBuffer cond = new _Metas.WipBuffer();
                        cond.id = id;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.WipBuffer>(tk, "TOP 1", null, new ConditionCollection<_Metas.WipBuffer>(new EqualCondition<_Metas.WipBuffer>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.WipBuffer.fn_id).Value = id;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.WipBuffer, IMES.DataModel.WipBuffer>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetRealModelData(string pdLine, string type)
        {
            try
            {
                DataTable ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.TmpKit cond = new _Metas.TmpKit();
                        cond.pdLine = pdLine;
                        cond.type = type;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.TmpKit>(tk, null, new string[] { _Metas.TmpKit.fn_model }, new ConditionCollection<_Metas.TmpKit>(new EqualCondition<_Metas.TmpKit>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.TmpKit.fn_pdLine).Value = pdLine;
                sqlCtx.Param(_Metas.TmpKit.fn_type).Value = type;

                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);

                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteRealModelData(string pdline, string type)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.TmpKit cond = new _Metas.TmpKit();
                        cond.pdLine = pdline;
                        cond.type = type;

                        _Metas.TmpKit cond2 = new _Metas.TmpKit();
                        cond2.model = "[MODEL]";

                        sqlCtx = FuncNew.GetConditionedDelete<_Metas.TmpKit>(tk, new ConditionCollection<_Metas.TmpKit>(new EqualCondition<_Metas.TmpKit>(cond), new AnySoloCondition<_Metas.TmpKit>(cond2, string.Format("{0} NOT IN(SELECT {1} FROM {2})", "{0}", _Metas.Model.fn_model, ToolsNew.GetTableName(typeof(_Metas.Model))))));
                    }
                }
                sqlCtx.Param(_Metas.TmpKit.fn_pdLine).Value = pdline;
                sqlCtx.Param(_Metas.TmpKit.fn_type).Value = type;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public ProductQCStatus GetNewestProductQCStatus(string id)
        {
            try
            {
                ProductQCStatus ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Qcstatus cond = new _Metas.Qcstatus();
                        cond.productID = id;
                        cond.tp = "PAQC";

                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Qcstatus>(tk, "TOP 1", null, new ConditionCollection<_Metas.Qcstatus>(
                            new EqualCondition<_Metas.Qcstatus>(cond)), _Metas.Qcstatus.fn_udt + FuncNew.DescendOrder);

                        sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = cond.tp;
                    }
                }
                sqlCtx.Param(_Metas.Qcstatus.fn_productID).Value = id;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Qcstatus, ProductQCStatus>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetProductIDListNeedToCheck(string dn)
        {
            try
            {
                IList<string> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Qcstatus cond = new _Metas.Qcstatus();
                        cond.productID = dn;

                        _Metas.Qcstatus cond2 = new _Metas.Qcstatus();
                        cond2.tp = "PAQC";

                        _Metas.Qcstatus cond3 = new _Metas.Qcstatus();
                        cond3.status = "[INSET]";

                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Qcstatus>(tk, "DISTINCT", new string[] { _Metas.Qcstatus.fn_productID }, new ConditionCollection<_Metas.Qcstatus>(
                            new AnyCondition<_Metas.Qcstatus>(cond, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", _Metas.Product.fn_productID, ToolsNew.GetTableName(typeof(_Metas.Product)), _Metas.Product.fn_deliveryNo, "{1}")),
                            new EqualCondition<_Metas.Qcstatus>(cond2),
                            new InSetCondition<_Metas.Qcstatus>(cond3)), _Metas.Qcstatus.fn_productID);

                        sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = cond2.tp;
                        sqlCtx.Sentence = sqlCtx.Sentence.Replace(g.DecInSet(_Metas.Qcstatus.fn_status), g.ConvertInSet(new string[] { "8", "A" }));
                    }
                }
                sqlCtx.Param(g.DecAny(_Metas.Qcstatus.fn_productID)).Value = dn;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string>();
                        while (sqlR.Read())
                        {
                            string item = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Qcstatus.fn_productID));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<fons.ProductLog> GetProductLogs(string prodId, string station)
        {
            try
            {
                IList<fons.ProductLog> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductLog cond = new _Metas.ProductLog();
                        cond.productID = prodId;
                        cond.station = station;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductLog>(tk, null, null, new ConditionCollection<_Metas.ProductLog>(new EqualCondition<_Metas.ProductLog>(cond)), _Metas.ProductLog.fn_cdt);
                    }
                }
                sqlCtx.Param(_Metas.ProductLog.fn_productID).Value = prodId;
                sqlCtx.Param(_Metas.ProductLog.fn_station).Value = station;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.ProductLog, fons.ProductLog, fons.ProductLog>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ModelStatistics> GetByModelStatisticsFromProductLog(int status, string station, DateTime begin, DateTime end, string line)
        {
            try
            {
                IList<ModelStatistics> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductLog cond = new _Metas.ProductLog();
                        cond.status = status;
                        cond.station = station;
                        cond.line = line;
                        _Metas.ProductLog cond2 = new _Metas.ProductLog();
                        cond2.cdt = DateTime.Now;
                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.ProductLog>(tk, null, new string[][] { new string[] { _Metas.ProductLog.fn_model, _Metas.ProductLog.fn_model }, new string[] { _Metas.ProductLog.fn_id, string.Format("COUNT({0})", _Metas.ProductLog.fn_id) } }, new ConditionCollection<_Metas.ProductLog>(new EqualCondition<_Metas.ProductLog>(cond),
                            new BetweenCondition<_Metas.ProductLog>(cond2)));
                    }
                }
                sqlCtx.Param(_Metas.ProductLog.fn_status).Value = status;
                sqlCtx.Param(_Metas.ProductLog.fn_station).Value = station;
                sqlCtx.Param(_Metas.ProductLog.fn_line).Value = line;
                sqlCtx.Param(g.DecBeg(_Metas.ProductLog.fn_cdt)).Value = begin;
                sqlCtx.Param(g.DecEnd(_Metas.ProductLog.fn_cdt)).Value = end;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<ModelStatistics>();
                        while (sqlR.Read())
                        {
                            ModelStatistics item = new ModelStatistics();
                            item.Model = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.ProductLog.fn_model));
                            item.Qty = g.GetValue_Int32(sqlR, sqlCtx.Indexes(_Metas.ProductLog.fn_id));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<dtmdns::WipBuffer> GetWipBufferByKittingTypeAndCode(string kittingType, string code)
        {
            try
            {
                IList<dtmdns::WipBuffer> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.WipBuffer cond = new _Metas.WipBuffer();
                        cond.kittingType = kittingType;
                        cond.code = code;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.WipBuffer>(tk, null, null, new ConditionCollection<_Metas.WipBuffer>(new EqualCondition<_Metas.WipBuffer>(cond)), _Metas.WipBuffer.fn_cdt);
                    }
                }
                sqlCtx.Param(_Metas.WipBuffer.fn_kittingType).Value = kittingType;
                sqlCtx.Param(_Metas.WipBuffer.fn_code).Value = code;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.WipBuffer, dtmdns::WipBuffer, dtmdns::WipBuffer>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public string GetKittingCodeFromProcuctAndModelAndModelInfo(string modelInfoName, string productId)
        {
            try
            {
                string ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        sqlCtx.Sentence = "SELECT RTRIM(a.{4}) + '-' + CASE(CHARINDEX(' ', b.{5}) - 1) WHEN -1 THEN b.{5} " +
                                            "ELSE SUBSTRING(b.{5}, 1, (CHARINDEX(' ', b.{5}) - 1)) END AS [KittingCode] " +
                                            "FROM {0} a,{1} b,{2}..{3} c " +
                                            "WHERE a.{6} = b.{7} " +
                                            "AND a.{8} = @{8} " +
                                            "AND b.{7} = c.{9} " +
                                            "AND c.{10} = @{10} ";
                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(_Metas.ModelInfo)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Model)),
                                                                         _Schema.SqlHelper.DB_FA,
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         _Metas.ModelInfo.fn_value,
                                                                         _Metas.Model.fn_family,
                                                                         _Metas.ModelInfo.fn_model,
                                                                         _Metas.Model.fn_model,
                                                                         _Metas.ModelInfo.fn_name,
                                                                         _Metas.Product.fn_model,
                                                                         _Metas.Product.fn_productID
                                                                         );

                        sqlCtx.AddParam(_Metas.ModelInfo.fn_name, new SqlParameter("@" + _Metas.ModelInfo.fn_name, ToolsNew.GetDBFieldType<_Metas.ModelInfo>(_Metas.ModelInfo.fn_name)));
                        sqlCtx.AddParam(_Metas.Product.fn_productID, new SqlParameter("@" + _Metas.Product.fn_productID, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_productID)));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.ModelInfo.fn_name).Value = modelInfoName;
                sqlCtx.Param(_Metas.Product.fn_productID).Value = productId;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_BOM, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Str(sqlR, 0);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckExistKittingCodeByCodeAndType(string code, string type)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.KittingCode cond = new _Metas.KittingCode();
                        cond.code = code;
                        cond.type = type;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.KittingCode>(tk, "COUNT", new string[] { _Metas.KittingCode.fn_code }, new ConditionCollection<_Metas.KittingCode>(new EqualCondition<_Metas.KittingCode>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.KittingCode.fn_code).Value = code;
                sqlCtx.Param(_Metas.KittingCode.fn_type).Value = type;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetMaterialPositionInfoByCodeAndProdID(string code, string prodId)
        {
            DataTable ret = new DataTable();
            return ret;
            //throw new NotImplementedException();
            //try
            //{
            //    DataTable ret = null;

            //    ITableAndFields tf1 = null;
            //    ITableAndFields tf2 = null;
            //    ITableAndFields[] tafa = null;

            //    MethodBase mthObj = MethodBase.GetCurrentMethod();
            //    int tk = mthObj.MetadataToken;
            //    SQLContextNew sqlCtx = null;
            //    lock (mthObj)
            //    {
            //        if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
            //        {
            //            tf1 = new TableAndFields<_Metas.MoBOM_NEW>();
            //            _Metas.MoBOM_NEW cond = new _Metas.MoBOM_NEW();
            //            cond.productID = prodId;
            //            cond.status = status;
            //            tf1.Conditions.Add(new EqualCondition<_Metas.ProductRepair>(cond));
            //            tf1.ClearToGetFieldNames();

            //            tf2 = new TableAndFields<_Metas.WipBuffer>();
            //            _Metas.WipBuffer cond2 = new _Metas.WipBuffer();
            //            tf2.AddRangeToGetFieldNames(_Metas.ProductRepair_DefectInfo.fn_returnStn);

            //            tafa = new ITableAndFields[] { tf1, tf2 };

            //            TableConnectionCollection tblCnnts = new TableConnectionCollection(
            //                new TableConnectionItem<_Metas.MoBOM_NEW, _Metas.WipBuffer>(tf1, _Metas.MoBOM.fn_p, tf2, _Metas.WipBuffer.fn_partNo));

            //            sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, "DISTINCT", tafa, tblCnnts, g.DecAliasInner("t2", _Metas.ProductRepair_DefectInfo.fn_returnStn));
            //        }
            //    }
            //    tafa = sqlCtx.TableFields;
            //    tf1 = tafa[0];
            //    tf2 = tafa[1];

            //    sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.ProductRepair.fn_productID)).Value = prodId;
            //    sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.ProductRepair.fn_status)).Value = status;

            //    using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
            //    {
            //        if (sqlR != null)
            //        {
            //            ret = new List<string>();
            //            while (sqlR.Read())
            //            {
            //                string item = g.GetValue_Str(sqlR, sqlCtx.Indexes(g.DecAlias(tf2.Alias, _Metas.ProductRepair_DefectInfo.fn_returnStn)));
            //                ret.Add(item);
            //            }
            //        }
            //    }
            //    return ret;
            //}
            //catch (Exception)
            //{
            //    throw;
            //}
        }

        public int GetCountOfQCStatusByTpAndPdLineAndPnoToday(string tp, string pdLine, string pno)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Qcstatus cond = new _Metas.Qcstatus();
                        cond.tp = tp;
                        cond.line = pdLine;
                        cond.model = pno;
                        _Metas.Qcstatus cond2 = new _Metas.Qcstatus();
                        cond2.cdt = DateTime.Now;
                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.Qcstatus>(tk, "COUNT", new string[][] { new string[] { _Metas.Qcstatus.fn_id, string.Format("DISTINCT {0}", _Metas.Qcstatus.fn_productID) } }, new ConditionCollection<_Metas.Qcstatus>(
                            new EqualCondition<_Metas.Qcstatus>(cond),
                            //new AnySoloCondition<_Metas.Qcstatus>(cond2, "CONVERT(CHAR(10),{0},111)=CONVERT(CHAR(10),GETDATE(),111)")
                            new GreaterOrEqualCondition<_Metas.Qcstatus>(cond2),
                            new SmallerCondition<_Metas.Qcstatus>(cond2)
                            ));
                    }
                }
                sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = tp;
                sqlCtx.Param(_Metas.Qcstatus.fn_line).Value = pdLine;
                sqlCtx.Param(_Metas.Qcstatus.fn_model).Value = pno;

                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                DateTime begin, end;
                begin = end = DateTime.Now;
                if (cmDt.Hour >= 12)
                {
                    begin = new DateTime(cmDt.Year, cmDt.Month, cmDt.Day, 12, 0, 0, 0);
                    end = begin.AddDays(1);
                }
                else
                {
                    end = new DateTime(cmDt.Year, cmDt.Month, cmDt.Day, 12, 0, 0, 0);
                    begin = end.AddDays(-1);
                }

                sqlCtx.Param(g.DecGE(_Metas.Qcstatus.fn_cdt)).Value = begin;
                sqlCtx.Param(g.DecS(_Metas.Qcstatus.fn_cdt)).Value = end;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetCountOfQCStatusByTpAndPdLineAndModelToday(string tp, string pdLine)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Qcstatus cond = new _Metas.Qcstatus();
                        cond.tp = tp;
                        cond.line = pdLine;

                        _Metas.Qcstatus cond2 = new _Metas.Qcstatus();
                        cond2.cdt = DateTime.Now;

                        _Metas.Qcstatus cond3 = new _Metas.Qcstatus();
                        cond3.model = "[LIKE STRING]";

                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.Qcstatus>(tk, "COUNT", new string[][] { new string[] { _Metas.Qcstatus.fn_id, string.Format("DISTINCT {0}", _Metas.Qcstatus.fn_productID) } }, new ConditionCollection<_Metas.Qcstatus>(
                            new EqualCondition<_Metas.Qcstatus>(cond),
                            //new AnySoloCondition<_Metas.Qcstatus>(cond2, "CONVERT(CHAR(10),{0},111)=CONVERT(CHAR(10),GETDATE(),111)"),
                            new GreaterOrEqualCondition<_Metas.Qcstatus>(cond2),
                            new SmallerCondition<_Metas.Qcstatus>(cond2),
                            new AnySoloCondition<_Metas.Qcstatus>(cond3, "{0} LIKE 'PC____[0-9]_____' AND RIGHT(RTRIM({0}), 3) NOT IN ('29Y','39Y')")));
                    }
                }
                sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = tp;
                sqlCtx.Param(_Metas.Qcstatus.fn_line).Value = pdLine;
                //sqlCtx.Param(_Metas.Qcstatus.fn_model).Value = pno;

                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                DateTime begin, end;
                begin = end = DateTime.Now;
                if (cmDt.Hour >= 12)
                {
                    begin = new DateTime(cmDt.Year, cmDt.Month, cmDt.Day, 12, 0, 0, 0);
                    end = begin.AddDays(1);
                }
                else
                {
                    end = new DateTime(cmDt.Year, cmDt.Month, cmDt.Day, 12, 0, 0, 0);
                    begin = end.AddDays(-1);
                }

                sqlCtx.Param(g.DecGE(_Metas.Qcstatus.fn_cdt)).Value = begin;
                sqlCtx.Param(g.DecS(_Metas.Qcstatus.fn_cdt)).Value = end;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetCountOfQCStatusByTpAndPdLineAndModelToday(string tp, string pdLine, string model)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Qcstatus cond = new _Metas.Qcstatus();
                        cond.tp = tp;
                        cond.line = pdLine;

                        _Metas.Qcstatus cond2 = new _Metas.Qcstatus();
                        cond2.cdt = DateTime.Now;

                        _Metas.Qcstatus cond3 = new _Metas.Qcstatus();
                        cond3.model = "[LIKE STRING]";

                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.Qcstatus>(tk, "COUNT", new string[][] { new string[] { _Metas.Qcstatus.fn_id, string.Format("DISTINCT {0}", _Metas.Qcstatus.fn_productID) } }, new ConditionCollection<_Metas.Qcstatus>(
                            new EqualCondition<_Metas.Qcstatus>(cond),
                            //new AnySoloCondition<_Metas.Qcstatus>(cond2, "CONVERT(CHAR(10),{0},111)=CONVERT(CHAR(10),GETDATE(),111)"),
                            new GreaterOrEqualCondition<_Metas.Qcstatus>(cond2),
                            new SmallerCondition<_Metas.Qcstatus>(cond2),
                            new AnyCondition<_Metas.Qcstatus>(cond3, "{0} LIKE 'PC____[0-9]_____' AND SUBSTRING(RTRIM(Model), 10, 2)=SUBSTRING(RTRIM({1}), 10, 2)")));
                    }
                }
                sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = tp;
                sqlCtx.Param(_Metas.Qcstatus.fn_line).Value = pdLine;
                sqlCtx.Param(g.DecAny(_Metas.Qcstatus.fn_model)).Value = model;

                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                DateTime begin, end;
                begin = end = DateTime.Now;
                if (cmDt.Hour >= 12)
                {
                    begin = new DateTime(cmDt.Year, cmDt.Month, cmDt.Day, 12, 0, 0, 0);
                    end = begin.AddDays(1);
                }
                else
                {
                    end = new DateTime(cmDt.Year, cmDt.Month, cmDt.Day, 12, 0, 0, 0);
                    begin = end.AddDays(-1);
                }

                sqlCtx.Param(g.DecGE(_Metas.Qcstatus.fn_cdt)).Value = begin;
                sqlCtx.Param(g.DecS(_Metas.Qcstatus.fn_cdt)).Value = end;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteMPInterface(object key)
        {
            throw new NotImplementedException();
        }

        public int GetProductInfoCountByInfoValue(string infoType, string infoValue)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductInfo cond = new _Metas.ProductInfo();
                        cond.infoType = infoType;
                        cond.infoValue = infoValue;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductInfo>(tk, "COUNT", new string[] { _Metas.ProductInfo.fn_id }, new ConditionCollection<_Metas.ProductInfo>(new EqualCondition<_Metas.ProductInfo>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.ProductInfo.fn_infoType).Value = infoType;
                sqlCtx.Param(_Metas.ProductInfo.fn_infoValue).Value = infoValue;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public FAFloatLocationInfo GetFAFloatLocation(string family, string pType, string pdLine)
        {
            try
            {
                FAFloatLocationInfo ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.KitLoc cond = new _Metas.KitLoc();
                        cond.family = family;
                        cond.partType = pType;
                        cond.pdLine = pdLine;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.KitLoc>(tk, "TOP 1", null, new ConditionCollection<_Metas.KitLoc>(new EqualCondition<_Metas.KitLoc>(cond)), _Metas.KitLoc.fn_id + FuncNew.DescendOrder);
                    }
                }
                sqlCtx.Param(_Metas.KitLoc.fn_family).Value = family;
                sqlCtx.Param(_Metas.KitLoc.fn_partType).Value = pType;
                sqlCtx.Param(_Metas.KitLoc.fn_pdLine).Value = pdLine;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.KitLoc, FAFloatLocationInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductModel> GetProductListByPalletNoOrderByCustSN(string palletNo)
        {
            try
            {
                IList<IMES.DataModel.ProductModel> ret = new List<IMES.DataModel.ProductModel>();

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product cond = new _Schema.Product();
                        cond.PalletNo = palletNo;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), null, new List<string>() { _Schema.Product.fn_CUSTSN, _Schema.Product.fn_Model, _Schema.Product.fn_ProductID }, cond, null, null, null, null, null, null, null);
                        sqlCtx.Sentence = sqlCtx.Sentence + string.Format(_Schema.Func.OrderBy, _Schema.Product.fn_CUSTSN); 
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_PalletNo].Value = palletNo;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        IMES.DataModel.ProductModel item = new IMES.DataModel.ProductModel();
                        item.CustSN = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_CUSTSN]);
                        item.Model = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_Model]);
                        item.ProductID = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product.fn_ProductID]);
                        ret.Add(item);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateUnPackProductStatusByDeliveryNo(IMES.FisObject.FA.Product.ProductStatus newStatus, string dn)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        //sqlCtx.Sentence = "UPDATE {0} SET {2}=@{2},{4}=@{4},{5}=@{5},{6}=GETDATE() " +
                        //                    "FROM {0} AS S INNER JOIN {1} AS P ON S.{7}=P.{8} " +
                        //                    "WHERE P.{9}=@{9} AND ({10} LIKE 'PC%' OR {10} LIKE 'QC%')";
                        sqlCtx.Sentence = "UPDATE {0} SET {2}=@{2},{4}=@{4},{5}=@{5},{6}=GETDATE() " +
                                       "FROM {0} AS S INNER JOIN {1} AS P ON S.{7}=P.{8} " +
                                       "WHERE P.{9}=@{9}";
                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(_Metas.ProductStatus)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         _Metas.ProductStatus.fn_status,
                                                                         _Metas.ProductStatus.fn_line,
                                                                         _Metas.ProductStatus.fn_station,
                                                                         _Metas.ProductStatus.fn_editor,
                                                                         _Metas.ProductStatus.fn_udt,
                                                                         _Metas.ProductStatus.fn_productID,
                                                                         _Metas.Product.fn_productID,
                                                                         _Metas.Product.fn_deliveryNo,
                                                                         _Metas.Product.fn_model
                                                                         );

                        sqlCtx.AddParam(_Metas.ProductStatus.fn_status, new SqlParameter("@" + _Metas.ProductStatus.fn_status, ToolsNew.GetDBFieldType<_Metas.ProductStatus>(_Metas.ProductStatus.fn_status)));
                        //sqlCtx.AddParam(_Metas.ProductStatus.fn_line, new SqlParameter("@" + _Metas.ProductStatus.fn_line, ToolsNew.GetDBFieldType<_Metas.ProductStatus>(_Metas.ProductStatus.fn_line)));
                        sqlCtx.AddParam(_Metas.ProductStatus.fn_station, new SqlParameter("@" + _Metas.ProductStatus.fn_station, ToolsNew.GetDBFieldType<_Metas.ProductStatus>(_Metas.ProductStatus.fn_station)));
                        sqlCtx.AddParam(_Metas.ProductStatus.fn_editor, new SqlParameter("@" + _Metas.ProductStatus.fn_editor, ToolsNew.GetDBFieldType<_Metas.ProductStatus>(_Metas.ProductStatus.fn_editor)));
                        sqlCtx.AddParam(_Metas.Product.fn_deliveryNo, new SqlParameter("@" + _Metas.Product.fn_deliveryNo, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_deliveryNo)));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.ProductStatus.fn_status).Value = newStatus.Status;
                //sqlCtx.Param(_Metas.ProductStatus.fn_line).Value = newStatus.Line;
                sqlCtx.Param(_Metas.ProductStatus.fn_station).Value = newStatus.StationId;
                sqlCtx.Param(_Metas.ProductStatus.fn_editor).Value = newStatus.Editor;
                sqlCtx.Param(_Metas.Product.fn_deliveryNo).Value = dn;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateUnPackProductStatusByDn(IMES.FisObject.FA.Product.ProductStatus newStatus, string dn)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        sqlCtx.Sentence = "UPDATE {0} SET {2}=@{2},{4}=@{4},{5}=@{5},{6}=GETDATE() " +
                                            "FROM {0} AS S INNER JOIN {1} AS P ON S.{7}=P.{8} " +
                                            "WHERE P.{9}=@{9}";
                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(_Metas.ProductStatus)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         _Metas.ProductStatus.fn_status,
                                                                         _Metas.ProductStatus.fn_line,
                                                                         _Metas.ProductStatus.fn_station,
                                                                         _Metas.ProductStatus.fn_editor,
                                                                         _Metas.ProductStatus.fn_udt,
                                                                         _Metas.ProductStatus.fn_productID,
                                                                         _Metas.Product.fn_productID,
                                                                         _Metas.Product.fn_deliveryNo
                                                                         );

                        sqlCtx.AddParam(_Metas.ProductStatus.fn_status, new SqlParameter("@" + _Metas.ProductStatus.fn_status, ToolsNew.GetDBFieldType<_Metas.ProductStatus>(_Metas.ProductStatus.fn_status)));
                        //sqlCtx.AddParam(_Metas.ProductStatus.fn_line, new SqlParameter("@" + _Metas.ProductStatus.fn_line, ToolsNew.GetDBFieldType<_Metas.ProductStatus>(_Metas.ProductStatus.fn_line)));
                        sqlCtx.AddParam(_Metas.ProductStatus.fn_station, new SqlParameter("@" + _Metas.ProductStatus.fn_station, ToolsNew.GetDBFieldType<_Metas.ProductStatus>(_Metas.ProductStatus.fn_station)));
                        sqlCtx.AddParam(_Metas.ProductStatus.fn_editor, new SqlParameter("@" + _Metas.ProductStatus.fn_editor, ToolsNew.GetDBFieldType<_Metas.ProductStatus>(_Metas.ProductStatus.fn_editor)));
                        sqlCtx.AddParam(_Metas.Product.fn_deliveryNo, new SqlParameter("@" + _Metas.Product.fn_deliveryNo, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_deliveryNo)));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.ProductStatus.fn_status).Value = newStatus.Status;
                //sqlCtx.Param(_Metas.ProductStatus.fn_line).Value = newStatus.Line;
                sqlCtx.Param(_Metas.ProductStatus.fn_station).Value = newStatus.StationId;
                sqlCtx.Param(_Metas.ProductStatus.fn_editor).Value = newStatus.Editor;
                sqlCtx.Param(_Metas.Product.fn_deliveryNo).Value = dn;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void WriteUnPackProductLogByDeliveryNo(string dn, IMES.FisObject.FA.Product.ProductLog newLog)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        //sqlCtx.Sentence =   "INSERT INTO {0}({2},{3},{4},{5},{6},{7},{8}) " +
                        //                    "SELECT @{2},{9},{10},@{5},@{6},@{7},GETDATE() " +
                        //                    "FROM {1} WHERE {11}=@{11} AND ({9} LIKE 'PC%' OR {9} LIKE 'QC%') ";
                        sqlCtx.Sentence = "INSERT INTO {0}({2},{3},{4},{5},{6},{7},{8}) " +
                                          "SELECT @{2},{9},{10},@{5},@{6},@{7},GETDATE() " +
                                          "FROM {1} WHERE {11}=@{11} ";
                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(_Metas.ProductLog)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         _Metas.ProductLog.fn_line,
                                                                         _Metas.ProductLog.fn_model,
                                                                         _Metas.ProductLog.fn_productID,
                                                                         _Metas.ProductLog.fn_station,
                                                                         _Metas.ProductLog.fn_status,
                                                                         _Metas.ProductLog.fn_editor,
                                                                         _Metas.ProductLog.fn_cdt,
                                                                         _Metas.Product.fn_model,
                                                                         _Metas.Product.fn_productID,
                                                                         _Metas.Product.fn_deliveryNo
                                                                         );

                        sqlCtx.AddParam(_Metas.ProductLog.fn_line, new SqlParameter("@" + _Metas.ProductLog.fn_line, ToolsNew.GetDBFieldType<_Metas.ProductLog>(_Metas.ProductLog.fn_line)));
                        sqlCtx.AddParam(_Metas.ProductLog.fn_station, new SqlParameter("@" + _Metas.ProductLog.fn_station, ToolsNew.GetDBFieldType<_Metas.ProductLog>(_Metas.ProductLog.fn_station)));
                        sqlCtx.AddParam(_Metas.ProductLog.fn_status, new SqlParameter("@" + _Metas.ProductLog.fn_status, ToolsNew.GetDBFieldType<_Metas.ProductLog>(_Metas.ProductLog.fn_status)));
                        sqlCtx.AddParam(_Metas.ProductLog.fn_editor, new SqlParameter("@" + _Metas.ProductLog.fn_editor, ToolsNew.GetDBFieldType<_Metas.ProductLog>(_Metas.ProductLog.fn_editor)));
                        sqlCtx.AddParam(_Metas.Product.fn_deliveryNo, new SqlParameter("@" + _Metas.Product.fn_deliveryNo, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_deliveryNo)));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.ProductLog.fn_line).Value = newLog.Line;
                sqlCtx.Param(_Metas.ProductLog.fn_station).Value = newLog.Station;
                sqlCtx.Param(_Metas.ProductLog.fn_status).Value = Convert.ToInt32(newLog.Status);
                sqlCtx.Param(_Metas.ProductLog.fn_editor).Value = newLog.Editor;
                sqlCtx.Param(_Metas.Product.fn_deliveryNo).Value = dn;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void WriteUnPackProductLogByDn(string dn, IMES.FisObject.FA.Product.ProductLog newLog)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        sqlCtx.Sentence = "INSERT INTO {0}({2},{3},{4},{5},{6},{7},{8}) " +
                                            "SELECT @{2},{9},{10},@{5},@{6},@{7},GETDATE() " +
                                            "FROM {1} WHERE {11}=@{11}";
                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(_Metas.ProductLog)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         _Metas.ProductLog.fn_line,
                                                                         _Metas.ProductLog.fn_model,
                                                                         _Metas.ProductLog.fn_productID,
                                                                         _Metas.ProductLog.fn_station,
                                                                         _Metas.ProductLog.fn_status,
                                                                         _Metas.ProductLog.fn_editor,
                                                                         _Metas.ProductLog.fn_cdt,
                                                                         _Metas.Product.fn_model,
                                                                         _Metas.Product.fn_productID,
                                                                         _Metas.Product.fn_deliveryNo
                                                                         );

                        sqlCtx.AddParam(_Metas.ProductLog.fn_line, new SqlParameter("@" + _Metas.ProductLog.fn_line, ToolsNew.GetDBFieldType<_Metas.ProductLog>(_Metas.ProductLog.fn_line)));
                        sqlCtx.AddParam(_Metas.ProductLog.fn_station, new SqlParameter("@" + _Metas.ProductLog.fn_station, ToolsNew.GetDBFieldType<_Metas.ProductLog>(_Metas.ProductLog.fn_station)));
                        sqlCtx.AddParam(_Metas.ProductLog.fn_status, new SqlParameter("@" + _Metas.ProductLog.fn_status, ToolsNew.GetDBFieldType<_Metas.ProductLog>(_Metas.ProductLog.fn_status)));
                        sqlCtx.AddParam(_Metas.ProductLog.fn_editor, new SqlParameter("@" + _Metas.ProductLog.fn_editor, ToolsNew.GetDBFieldType<_Metas.ProductLog>(_Metas.ProductLog.fn_editor)));
                        sqlCtx.AddParam(_Metas.Product.fn_deliveryNo, new SqlParameter("@" + _Metas.Product.fn_deliveryNo, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_deliveryNo)));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.ProductLog.fn_line).Value = newLog.Line;
                sqlCtx.Param(_Metas.ProductLog.fn_station).Value = newLog.Station;
                sqlCtx.Param(_Metas.ProductLog.fn_status).Value = Convert.ToInt32(newLog.Status);
                sqlCtx.Param(_Metas.ProductLog.fn_editor).Value = newLog.Editor;
                sqlCtx.Param(_Metas.Product.fn_deliveryNo).Value = dn;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UnPackProductInfoByDeliveryNo(string infoType, string dn)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        //sqlCtx.Sentence =   "DELETE {0} FROM {0} AS I INNER JOIN {1} AS P ON I.{2}=P.{4} " +
                        //                    "WHERE I.{3}=@{3} AND P.{5}=@{5} AND (P.{6} LIKE 'PC%' OR P.{6} LIKE 'QC%') ";
                        sqlCtx.Sentence = "DELETE {0} FROM {0} AS I INNER JOIN {1} AS P ON I.{2}=P.{4} " +
                                           "WHERE I.{3}=@{3} AND P.{5}=@{5} ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(_Metas.ProductInfo)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         _Metas.ProductInfo.fn_productID,
                                                                         _Metas.ProductInfo.fn_infoType,
                                                                         _Metas.Product.fn_productID,
                                                                         _Metas.Product.fn_deliveryNo,
                                                                         _Metas.Product.fn_model
                                                                         );

                        sqlCtx.AddParam(_Metas.ProductInfo.fn_infoType, new SqlParameter("@" + _Metas.ProductInfo.fn_infoType, ToolsNew.GetDBFieldType<_Metas.ProductLog>(_Metas.ProductInfo.fn_infoType)));
                        sqlCtx.AddParam(_Metas.Product.fn_deliveryNo, new SqlParameter("@" + _Metas.Product.fn_deliveryNo, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_deliveryNo)));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.ProductInfo.fn_infoType).Value = infoType;
                sqlCtx.Param(_Metas.Product.fn_deliveryNo).Value = dn;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UnPackProductInfoByDeliveryNoAndInfoType(string infoType, string dn)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        sqlCtx.Sentence = "DELETE {0} FROM {0} AS I INNER JOIN {1} AS P ON I.{2}=P.{4} " +
                                            "WHERE I.{3}=@{3} AND P.{5}=@{5} ";
                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(_Metas.ProductInfo)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         _Metas.ProductInfo.fn_productID,
                                                                         _Metas.ProductInfo.fn_infoType,
                                                                         _Metas.Product.fn_productID,
                                                                         _Metas.Product.fn_deliveryNo
                                                                         );

                        sqlCtx.AddParam(_Metas.ProductInfo.fn_infoType, new SqlParameter("@" + _Metas.ProductInfo.fn_infoType, ToolsNew.GetDBFieldType<_Metas.ProductLog>(_Metas.ProductInfo.fn_infoType)));
                        sqlCtx.AddParam(_Metas.Product.fn_deliveryNo, new SqlParameter("@" + _Metas.Product.fn_deliveryNo, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_deliveryNo)));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.ProductInfo.fn_infoType).Value = infoType;
                sqlCtx.Param(_Metas.Product.fn_deliveryNo).Value = dn;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UnPackProductByDeliveryNo(string dn)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns.Product cond = new mtns.Product();
                        cond.deliveryNo = dn;

                        mtns.Product cond2 = new mtns.Product();
                        cond2.model = "model";

                        mtns.Product setv = new mtns.Product();
                        setv.deliveryNo = string.Empty;
                        setv.palletNo = string.Empty;
                        setv.cartonSN = string.Empty;
                        setv.cartonWeight = 0;
                        setv.unitWeight = 0;
                        setv.udt = DateTime.Now;

                        //sqlCtx = FuncNew.GetConditionedUpdate<mtns.Product>(tk, new SetValueCollection<mtns.Product>(new CommonSetValue<mtns.Product>(setv)), new ConditionCollection<mtns.Product>(
                        //    new EqualCondition<mtns.Product>(cond),
                        //    new AnySoloCondition<mtns.Product>(cond2, "({0} LIKE 'PC%' OR {0} LIKE 'QC%' OR {0} LIKE 'SC%')")));

                        sqlCtx = FuncNew.GetConditionedUpdate<mtns.Product>(tk, new SetValueCollection<mtns.Product>(new CommonSetValue<mtns.Product>(setv)), new ConditionCollection<mtns.Product>(
                                     new EqualCondition<mtns.Product>(cond)));

                        sqlCtx.Param(g.DecSV(mtns.Product.fn_deliveryNo)).Value = setv.deliveryNo;
                        sqlCtx.Param(g.DecSV(mtns.Product.fn_palletNo)).Value = setv.palletNo;
                        sqlCtx.Param(g.DecSV(mtns.Product.fn_cartonSN)).Value = setv.cartonSN;
                        sqlCtx.Param(g.DecSV(mtns.Product.fn_cartonWeight)).Value = setv.cartonWeight;
                        sqlCtx.Param(g.DecSV(mtns.Product.fn_unitWeight)).Value = setv.unitWeight;
                    }
                }
                sqlCtx.Param(mtns.Product.fn_deliveryNo).Value = dn;

                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(Pak_Wh_Locmas.fn_udt)).Value = cmDt;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UnPackProductByDn(string dn)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns.Product cond = new mtns.Product();
                        cond.deliveryNo = dn;

                        mtns.Product setv = new mtns.Product();
                        setv.deliveryNo = string.Empty;
                        setv.palletNo = string.Empty;
                        setv.cartonSN = string.Empty;
                        setv.cartonWeight = 0;
                        setv.unitWeight = 0;
                        setv.udt = DateTime.Now;

                        sqlCtx = FuncNew.GetConditionedUpdate<mtns.Product>(tk, new SetValueCollection<mtns.Product>(new CommonSetValue<mtns.Product>(setv)), new ConditionCollection<mtns.Product>(
                            new EqualCondition<mtns.Product>(cond)));

                        sqlCtx.Param(g.DecSV(mtns.Product.fn_deliveryNo)).Value = setv.deliveryNo;
                        sqlCtx.Param(g.DecSV(mtns.Product.fn_palletNo)).Value = setv.palletNo;
                        sqlCtx.Param(g.DecSV(mtns.Product.fn_cartonSN)).Value = setv.cartonSN;
                        sqlCtx.Param(g.DecSV(mtns.Product.fn_cartonWeight)).Value = setv.cartonWeight;
                        sqlCtx.Param(g.DecSV(mtns.Product.fn_unitWeight)).Value = setv.unitWeight;
                    }
                }
                sqlCtx.Param(mtns.Product.fn_deliveryNo).Value = dn;

                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(Pak_Wh_Locmas.fn_udt)).Value = cmDt;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UnPackProductByDnWithoutCartonSN(string dn)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns.Product cond = new mtns.Product();
                        cond.deliveryNo = dn;

                        mtns.Product setv = new mtns.Product();
                        setv.deliveryNo = string.Empty;
                        setv.palletNo = string.Empty;
                        setv.cartonWeight = 0;
                        setv.unitWeight = 0;
                        setv.udt = DateTime.Now;

                        sqlCtx = FuncNew.GetConditionedUpdate<mtns.Product>(tk, new SetValueCollection<mtns.Product>(new CommonSetValue<mtns.Product>(setv)), new ConditionCollection<mtns.Product>(
                            new EqualCondition<mtns.Product>(cond)));

                        sqlCtx.Param(g.DecSV(mtns.Product.fn_deliveryNo)).Value = setv.deliveryNo;
                        sqlCtx.Param(g.DecSV(mtns.Product.fn_palletNo)).Value = setv.palletNo;
                        sqlCtx.Param(g.DecSV(mtns.Product.fn_cartonWeight)).Value = setv.cartonWeight;
                        sqlCtx.Param(g.DecSV(mtns.Product.fn_unitWeight)).Value = setv.unitWeight;
                    }
                }
                sqlCtx.Param(mtns.Product.fn_deliveryNo).Value = dn;

                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(Pak_Wh_Locmas.fn_udt)).Value = cmDt;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProduct> GetProductListByPalletNo2(string plt)
        {
            try
            {
                IList<IProduct> ret = new List<IProduct>();

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.palletNo = plt;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, null, null, new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_palletNo).Value = plt;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Product, fons.Product, IProduct>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public RunInTimeControlInfoMaintain GetRunInTimeControlByTypeCodeAndStation(string type, string code, string station)
        {
            try
            {
                RunInTimeControlInfoMaintain ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.RunInTimeControl cond = new _Metas.RunInTimeControl();
                        cond.type = type;
                        cond.code = code;
                        cond.testStation = station;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.RunInTimeControl>(tk, "TOP 1", null, new ConditionCollection<_Metas.RunInTimeControl>(new EqualCondition<_Metas.RunInTimeControl>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.RunInTimeControl.fn_type).Value = type;
                sqlCtx.Param(_Metas.RunInTimeControl.fn_code).Value = code;
                sqlCtx.Param(_Metas.RunInTimeControl.fn_testStation).Value = station;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.RunInTimeControl, RunInTimeControlInfoMaintain>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public RunInTimeControlInfoMaintain GetRunInTimeControlExceptId(string type, string code, string testStation, int id)
        {
            try
            {
                RunInTimeControlInfoMaintain ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.RunInTimeControl cond = new _Metas.RunInTimeControl();
                        cond.type = type;
                        cond.code = code;
                        cond.testStation = testStation;
                        _Metas.RunInTimeControl cond2 = new _Metas.RunInTimeControl();
                        cond2.id = id;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.RunInTimeControl>(tk, "TOP 1", null, new ConditionCollection<_Metas.RunInTimeControl>(
                            new EqualCondition<_Metas.RunInTimeControl>(cond),
                            new NotEqualCondition<_Metas.RunInTimeControl>(cond2)));
                    }
                }
                sqlCtx.Param(_Metas.RunInTimeControl.fn_type).Value = type;
                sqlCtx.Param(_Metas.RunInTimeControl.fn_code).Value = code;
                sqlCtx.Param(_Metas.RunInTimeControl.fn_testStation).Value = testStation;
                sqlCtx.Param(_Metas.RunInTimeControl.fn_id).Value = id;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.RunInTimeControl, RunInTimeControlInfoMaintain>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetCombinedQtyByShipmentNo(string shipmentNo)
        {
            try
            {
                int ret = 0;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.Delivery>();
                        _Metas.Delivery cond = new _Metas.Delivery();
                        cond.shipmentNo = shipmentNo;
                        tf1.Conditions.Add(new EqualCondition<_Metas.Delivery>(cond));
                        tf1.ClearToGetFieldNames();

                        tf2 = new TableAndFields<_Metas.Product>();
                        tf2.SubDBCalalog = _Schema.SqlHelper.DB_FA;
                        tf2.AddRangeToGetFieldNames(_Metas.Product.fn_productID);

                        tafa = new ITableAndFields[] { tf1, tf2 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.Delivery, _Metas.Product>(tf1, _Metas.Delivery.fn_deliveryNo, tf2, _Metas.Product.fn_deliveryNo));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, "COUNT", tafa, tblCnnts);
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];

                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.Delivery.fn_shipmentNo)).Value = shipmentNo;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void InsertTSModel(TsModelInfo item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<mtns::Tsmodel>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<mtns::Tsmodel, TsModelInfo>(sqlCtx, item);

                sqlCtx.Param(mtns::Tsmodel.fn_cdt).Value = cmDt;

                item.id = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<TsModelInfo> GetTsModelList(TsModelInfo condition)
        {
            try
            {
                IList<TsModelInfo> ret = null;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                mtns::SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                mtns::Tsmodel cond = mtns::FuncNew.SetColumnFromField<mtns::Tsmodel, TsModelInfo>(condition);
                sqlCtx = mtns::FuncNew.GetConditionedSelect<mtns::Tsmodel>(null, null, new mtns::ConditionCollection<mtns::Tsmodel>(new mtns::EqualCondition<mtns::Tsmodel>(cond)), mtns::Tsmodel.fn_id);
                //    }
                //}
                sqlCtx = mtns::FuncNew.SetColumnFromField<mtns::Tsmodel, TsModelInfo>(sqlCtx, condition);

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = mtns::FuncNew.SetFieldFromColumn<mtns::Tsmodel, TsModelInfo, TsModelInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteTsModel(string mark, string model)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Tsmodel cond = new _Metas.Tsmodel();
                        cond.mark = mark;
                        cond.model = model;
                        sqlCtx = FuncNew.GetConditionedDelete<_Metas.Tsmodel>(tk, new ConditionCollection<_Metas.Tsmodel>(new EqualCondition<_Metas.Tsmodel>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Tsmodel.fn_mark).Value = mark;
                sqlCtx.Param(_Metas.Tsmodel.fn_model).Value = model;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.FisObject.FA.Product.RunInTimeControl> GetRunInTimeControlByTypeAndTestStation(string type, string testStation, string code)
        {
            try
            {
                IList<IMES.FisObject.FA.Product.RunInTimeControl> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.RunInTimeControl cond = new _Metas.RunInTimeControl();
                        cond.type = type;
                        cond.testStation = testStation;
                        cond.code = code;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.RunInTimeControl>(tk, null, null, new ConditionCollection<_Metas.RunInTimeControl>(new EqualCondition<_Metas.RunInTimeControl>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.RunInTimeControl.fn_type).Value = type;
                sqlCtx.Param(_Metas.RunInTimeControl.fn_testStation).Value = testStation;
                sqlCtx.Param(_Metas.RunInTimeControl.fn_code).Value = code;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<IMES.FisObject.FA.Product.RunInTimeControl>();

                        while (sqlR.Read())
                        {
                            var item = new IMES.FisObject.FA.Product.RunInTimeControl();
                            item.Cdt = g.GetValue_DateTime(sqlR, sqlCtx.Indexes(_Metas.RunInTimeControl.fn_cdt));
                            item.Code = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.RunInTimeControl.fn_code));
                            item.ControlType = g.GetValue_Bit(sqlR, sqlCtx.Indexes(_Metas.RunInTimeControl.fn_controlType));
                            item.Editor = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.RunInTimeControl.fn_editor));
                            item.Hour = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.RunInTimeControl.fn_hour));
                            item.ID = g.GetValue_Int32(sqlR, sqlCtx.Indexes(_Metas.RunInTimeControl.fn_id));
                            item.Remark = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.RunInTimeControl.fn_remark));
                            item.TestStation = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.RunInTimeControl.fn_testStation));
                            item.Type = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.RunInTimeControl.fn_type));
                            item.Udt = g.GetValue_DateTime(sqlR, sqlCtx.Indexes(_Metas.RunInTimeControl.fn_udt));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductModel> GetProductListByPalletNoListOrderByCustSN(IList<string> palletNoLst)
        {
            try
            {
                IList<ProductModel> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.palletNo = "[INSET]";
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, null, new string[] { _Metas.Product.fn_model, _Metas.Product.fn_custsn, _Metas.Product.fn_productID }, new ConditionCollection<_Metas.Product>(new InSetCondition<_Metas.Product>(cond)), _Metas.Product.fn_custsn);
                    }
                }
                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(mtns::Product.fn_palletNo), g.ConvertInSet(palletNoLst));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<ProductModel>();

                        while (sqlR.Read())
                        {
                            var item = new ProductModel();
                            item.CustSN = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Product.fn_custsn));
                            item.Model = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Product.fn_model));
                            item.ProductID = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Product.fn_productID));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductModel> GetproductlistOrderByCustSN(IList<string> prodNoList)
        {
            try
            {
                IList<ProductModel> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.productID = "[INSET]";
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, null, new string[] { _Metas.Product.fn_model, _Metas.Product.fn_custsn, _Metas.Product.fn_productID }, new ConditionCollection<_Metas.Product>(new InSetCondition<_Metas.Product>(cond)), _Metas.Product.fn_custsn);
                    }
                }
                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(mtns::Product.fn_productID), g.ConvertInSet(prodNoList));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<ProductModel>();

                        while (sqlR.Read())
                        {
                            var item = new ProductModel();
                            item.CustSN = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Product.fn_custsn));
                            item.Model = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Product.fn_model));
                            item.ProductID = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Product.fn_productID));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetProductInfoCountByInfoType(string infoType)
        {
            try
            {
                int ret = 0;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.ProductInfo equalCond = new _Schema.ProductInfo();
                        equalCond.InfoType = infoType;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.ProductInfo), "COUNT", new List<string>() { _Schema.ProductInfo.fn_InfoValue }, equalCond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.ProductInfo.fn_InfoType].Value = infoType;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<AstRuleInfo> GetAstRuleByCodeAndStationAndCheckTp(string code, string station, string checkTp)
        {
            try
            {
                IList<AstRuleInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.AstRule cond = new _Metas.AstRule();
                        cond.code = code;
                        cond.station = station;
                        cond.checkTp = checkTp;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.AstRule>(tk, null, null, new ConditionCollection<_Metas.AstRule>(new EqualCondition<_Metas.AstRule>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.AstRule.fn_code).Value = code;
                sqlCtx.Param(_Metas.AstRule.fn_station).Value = station;
                sqlCtx.Param(_Metas.AstRule.fn_checkTp).Value = checkTp;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.AstRule, AstRuleInfo, AstRuleInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<AstRuleInfo> GetAstRuleByCodeAndStationAndCust(string code, string station, string custName)
        {
            try
            {
                IList<AstRuleInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.AstRule cond = new _Metas.AstRule();
                        cond.code = code;
                        cond.station = station;
                        cond.custName = custName;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.AstRule>(tk, null, null, new ConditionCollection<_Metas.AstRule>(new EqualCondition<_Metas.AstRule>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.AstRule.fn_code).Value = code;
                sqlCtx.Param(_Metas.AstRule.fn_station).Value = station;
                sqlCtx.Param(_Metas.AstRule.fn_custName).Value = custName;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.AstRule, AstRuleInfo, AstRuleInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable ExistAstRule(IMES.DataModel.AstRuleInfo condition)
        {
            try
            {
                DataTable ret = null;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                        AstRule cond = FuncNew.SetColumnFromField<AstRule, AstRuleInfo>(condition);
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.AstRule>(null, new string[] { _Metas.AstRule.fn_id }, new ConditionCollection<_Metas.AstRule>(new EqualCondition<_Metas.AstRule>(cond)), _Metas.AstRule.fn_id);
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<AstRule, AstRuleInfo>(sqlCtx, condition);

                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);

                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddAstRuleInfo(AstRuleInfo item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<_Metas.AstRule>(tk);
                    }
                }

                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<_Metas.AstRule, AstRuleInfo>(sqlCtx, item);

                sqlCtx.Param(_Metas.AstRule.fn_cdt).Value = cmDt;
                sqlCtx.Param(_Metas.AstRule.fn_udt).Value = cmDt;

                item.id = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteAstRuleRule(AstRuleInfo condition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                AstRule cond = FuncNew.SetColumnFromField<AstRule, AstRuleInfo>(condition);
                sqlCtx = FuncNew.GetConditionedDelete<AstRule>(new ConditionCollection<AstRule>(new EqualCondition<AstRule>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<AstRule, AstRuleInfo>(sqlCtx, condition);

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public string GetProductInfoValue(string prodId, string infoType)
        {
            try
            {
                string ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductInfo cond = new _Metas.ProductInfo();
                        cond.productID = prodId;
                        cond.infoType = infoType;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductInfo>(tk, "TOP 1", new string[] { _Metas.ProductInfo.fn_infoValue }, new ConditionCollection<_Metas.ProductInfo>(new EqualCondition<_Metas.ProductInfo>(cond)), _Metas.ProductInfo.fn_cdt + FuncNew.DescendOrder);
                    }
                }
                sqlCtx.Param(_Metas.ProductInfo.fn_productID).Value = prodId;
                sqlCtx.Param(_Metas.ProductInfo.fn_infoType).Value = infoType;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.ProductInfo.fn_infoValue));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public string GetMaxIdexFromSupplierCodeByVendor(string vendor)
        {
            try
            {
                string ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.SupplierCode cond = new _Metas.SupplierCode();
                        cond.vendor = vendor;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.SupplierCode>(tk, "MAX", new string[] { _Metas.SupplierCode.fn_idex }, new ConditionCollection<_Metas.SupplierCode>(new EqualCondition<_Metas.SupplierCode>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.SupplierCode.fn_vendor).Value = vendor;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Str(sqlR, sqlCtx.Indexes("MAX"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<SpecialCombinationInfo> GetSpecialDetSpecialMaintainInfoList(string snoId, string swc)
        {
            try
            {
                IList<SpecialCombinationInfo> ret = null;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.Special_Det>();
                        _Metas.Special_Det cond = new _Metas.Special_Det();
                        cond.snoId = snoId;
                        tf1.Conditions.Add(new EqualCondition<_Metas.Special_Det>(cond));

                        tf2 = new TableAndFields<_Metas.Special_Maintain>();
                        _Metas.Special_Maintain cond2 = new _Metas.Special_Maintain();
                        cond2.swc = swc;
                        tf2.Conditions.Add(new EqualCondition<_Metas.Special_Maintain>(cond2));

                        tafa = new ITableAndFields[] { tf1, tf2 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.Special_Det, _Metas.Special_Maintain>(tf1, _Metas.Special_Det.fn_tp, tf2, _Metas.Special_Maintain.fn_type));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, null, tafa, tblCnnts, g.DecAliasInner("t2", _Metas.Special_Maintain.fn_type), g.DecAliasInner("t2", _Metas.Special_Maintain.fn_tp));
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];

                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.Special_Det.fn_snoId)).Value = snoId;
                sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.Special_Maintain.fn_swc)).Value = swc;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<SpecialCombinationInfo>();
                        while (sqlR.Read())
                        {
                            SpecialCombinationInfo item = new SpecialCombinationInfo();
                            item.detInfo = FuncNew.SetFieldFromColumn<_Metas.Special_Det, SpecialDetInfo>(item.detInfo, sqlR, sqlCtx, tf1.Alias);
                            item.maintainInfo = FuncNew.SetFieldFromColumn<_Metas.Special_Maintain, SpecialMaintainInfo>(item.maintainInfo, sqlR, sqlCtx, tf2.Alias);
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckProductInPrintLogRange(string productId)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.PrintLog begCond = new _Metas.PrintLog();
                        begCond.begNo = productId;

                        _Metas.PrintLog endCond = new _Metas.PrintLog();
                        endCond.endNo = productId;

                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.PrintLog>(tk, "COUNT", new string[] { _Metas.PrintLog.fn_id }, new ConditionCollection<PrintLog>(new GreaterOrEqualCondition<PrintLog>(begCond), new SmallerOrEqualCondition<PrintLog>(endCond)));
                    }
                }
                sqlCtx.Param(_Schema.Func.DecGE(_Metas.PrintLog.fn_begNo)).Value = productId;
                sqlCtx.Param(_Schema.Func.DecSE(_Metas.PrintLog.fn_endNo)).Value = productId;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProduct> GetProductlistByMac(string mac)
        {
            try
            {
                IList<IProduct> ret = new List<IProduct>();

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.mac = mac;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, null, null, new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_mac).Value = mac;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Product, fons.Product, IProduct>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckExistSpecialDet(string tp, string snoid)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Special_Det cond = new _Metas.Special_Det();
                        cond.tp = tp;
                        cond.snoId = snoid;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Special_Det>(tk, "COUNT", new string[] { _Metas.Special_Det.fn_id }, new ConditionCollection<Special_Det>(new EqualCondition<Special_Det>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Special_Det.fn_tp).Value = tp;
                sqlCtx.Param(_Metas.Special_Det.fn_snoId).Value = snoid;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateSpecialDetSno1(string sno1, string tp, string snoid)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Special_Det cond = new _Metas.Special_Det();
                        cond.tp = tp;
                        cond.snoId = snoid;

                        _Metas.Special_Det setv = new _Metas.Special_Det();
                        setv.sno1 = sno1;
                        setv.udt = DateTime.Now;

                        sqlCtx = FuncNew.GetConditionedUpdate<_Metas.Special_Det>(tk, new SetValueCollection<_Metas.Special_Det>(new CommonSetValue<_Metas.Special_Det>(setv)), new ConditionCollection<_Metas.Special_Det>(new EqualCondition<_Metas.Special_Det>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Special_Det.fn_tp).Value = tp;
                sqlCtx.Param(_Metas.Special_Det.fn_snoId).Value = snoid;

                sqlCtx.Param(g.DecSV(_Metas.Special_Det.fn_sno1)).Value = sno1;
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(_Metas.Special_Det.fn_udt)).Value = cmDt;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddSpecialDetInfo(SpecialDetInfo item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<mtns::Special_Det>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<mtns::Special_Det, SpecialDetInfo>(sqlCtx, item);

                sqlCtx.Param(mtns::Special_Det.fn_cdt).Value = cmDt;
                sqlCtx.Param(mtns::Special_Det.fn_udt).Value = cmDt;
                item.id = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckExistProductPart(string prodId, string bomNodeType)
        {
            try
            {
                bool ret = false;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.Product_Part>();
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = prodId;
                        tf1.Conditions.Add(new EqualCondition<_Metas.Product_Part>(cond));
                        tf1.AddRangeToGetFieldNames(_Metas.Product_Part.fn_id);

                        tf2 = new TableAndFields<_Metas.Part_NEW>();
                        _Metas.Part_NEW cond2 = new _Metas.Part_NEW();
                        cond2.bomNodeType = bomNodeType;
                        cond2.flag = 1;
                        tf2.Conditions.Add(new EqualCondition<_Metas.Part_NEW>(cond2));
                        tf2.ClearToGetFieldNames();
                        tf2.SubDBCalalog = _Schema.SqlHelper.DB_BOM;

                        tafa = new ITableAndFields[] { tf1, tf2 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.Product_Part, _Metas.Part_NEW>(tf1, _Metas.Product_Part.fn_partNo, tf2, _Metas.Part_NEW.fn_partNo));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, "COUNT", tafa, tblCnnts);

                        sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.Part_NEW.fn_flag)).Value = cond2.flag;
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];

                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.Product_Part.fn_productID)).Value = prodId;
                sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.Part_NEW.fn_bomNodeType)).Value = bomNodeType;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetMessageListFromSpecialDetAndSpecialMaintain(string snoId, string swc)
        {
            try
            {
                IList<string> ret = null;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.Special_Det>();
                        _Metas.Special_Det cond = new _Metas.Special_Det();
                        cond.snoId = snoId;
                        tf1.Conditions.Add(new EqualCondition<_Metas.Special_Det>(cond));
                        tf1.ClearToGetFieldNames();

                        tf2 = new TableAndFields<_Metas.Special_Maintain>();
                        _Metas.Special_Maintain cond2 = new _Metas.Special_Maintain();
                        cond2.swc = swc;
                        tf2.Conditions.Add(new EqualCondition<_Metas.Special_Maintain>(cond2));
                        tf2.AddRangeToGetFieldNames(_Metas.Special_Maintain.fn_message);

                        tafa = new ITableAndFields[] { tf1, tf2 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.Special_Det, _Metas.Special_Maintain>(tf1, _Metas.Special_Det.fn_tp, tf2, _Metas.Special_Maintain.fn_type));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, null, tafa, tblCnnts, g.DecAliasInner("t2", _Metas.Special_Maintain.fn_type), g.DecAliasInner("t2", _Metas.Special_Maintain.fn_tp));
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];

                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.Special_Det.fn_snoId)).Value = snoId;
                sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.Special_Maintain.fn_swc)).Value = swc;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string>();
                        while (sqlR.Read())
                        {
                            string item = g.GetValue_Str(sqlR, sqlCtx.Indexes(g.DecAlias(tf2.Alias, _Metas.Special_Maintain.fn_message)));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<dtmdns.WipBuffer> GetWipBufferByPnoListAndCode(string[] pnoList, string code)
        {
            try
            {
                IList<dtmdns.WipBuffer> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.WipBuffer cond = new _Metas.WipBuffer();
                        cond.code = code;
                        _Metas.WipBuffer cond2 = new _Metas.WipBuffer();
                        cond2.partNo = "[INSET]";

                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.WipBuffer>(tk, null, null, new ConditionCollection<_Metas.WipBuffer>(
                            new EqualCondition<_Metas.WipBuffer>(cond, null, "RTRIM({0})"),
                            new InSetCondition<_Metas.WipBuffer>(cond2)));
                    }
                }
                sqlCtx.Param(_Metas.WipBuffer.fn_code).Value = code;
                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(mtns::WipBuffer.fn_partNo), g.ConvertInSet(pnoList));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.WipBuffer, dtmdns.WipBuffer, dtmdns.WipBuffer>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetLightNoFromWipBufferByPnoListAndCode(string[] pnoList, string code)
        {
            try
            {
                IList<string> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.WipBuffer cond = new _Metas.WipBuffer();
                        cond.code = code;
                        _Metas.WipBuffer cond2 = new _Metas.WipBuffer();
                        cond2.partNo = "[INSET]";

                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.WipBuffer>(tk, null, new string[]{ _Metas.WipBuffer.fn_lightNo }, new ConditionCollection<_Metas.WipBuffer>(
                            new EqualCondition<_Metas.WipBuffer>(cond, null, "RTRIM({0})"),
                            new InSetCondition<_Metas.WipBuffer>(cond2)));
                    }
                }
                sqlCtx.Param(_Metas.WipBuffer.fn_code).Value = code;
                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(mtns::WipBuffer.fn_partNo), g.ConvertInSet(pnoList));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string>();
                        while(sqlR.Read())
                        {
                            string item = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.WipBuffer.fn_lightNo));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProduct> GetProductListByDeliveryNoAndPalletNo(string deliveryNo, string palletNo)
        {
            try
            {
                IList<IProduct> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.deliveryNo = deliveryNo;
                        cond.palletNo = palletNo;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, null, null, new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_deliveryNo).Value = deliveryNo;
                sqlCtx.Param(_Metas.Product.fn_palletNo).Value = palletNo;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Product, IMES.FisObject.FA.Product.Product, IProduct>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateRunInTimeControlByTypeCodeAndTestStation(IMES.FisObject.FA.Product.RunInTimeControl runInTimeControl, string type, string code, string testStation)
        {
            try
            {
                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.RunInTimeControl cond = new _Schema.RunInTimeControl();
                        cond.type = type;
                        cond.code = code;
                        cond.testStation = testStation;
                        sqlCtx = _Schema.Func.GetConditionedUpdate(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.RunInTimeControl), new List<string>() { _Schema.RunInTimeControl.fn_hour, _Schema.RunInTimeControl.fn_remark, _Schema.RunInTimeControl.fn_editor, _Schema.RunInTimeControl.fn_code, _Schema.RunInTimeControl.fn_controlType, _Schema.RunInTimeControl.fn_testStation, _Schema.RunInTimeControl.fn_type, _Schema.RunInTimeControl.fn_code }, null, null, null, cond, null, null, null, null, null, null, null);
                    }
                }
                sqlCtx.Params[_Schema.RunInTimeControl.fn_type].Value = type;
                sqlCtx.Params[_Schema.RunInTimeControl.fn_code].Value = code;
                sqlCtx.Params[_Schema.RunInTimeControl.fn_testStation].Value = testStation;
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_hour)].Value = runInTimeControl.Hour;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_remark)].Value = runInTimeControl.Remark;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_editor)].Value = runInTimeControl.Editor;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_code)].Value = runInTimeControl.Code;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_controlType)].Value = runInTimeControl.ControlType;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_testStation)].Value = runInTimeControl.TestStation;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_type)].Value = runInTimeControl.Type;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_code)].Value = runInTimeControl.Code;
                sqlCtx.Params[_Schema.Func.DecSV(_Schema.RunInTimeControl.fn_udt)].Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateProductsForUnbound(string dn)
        {
            try  
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns.Product cond = new mtns.Product();
                        cond.deliveryNo = dn;

                        mtns.Product cond2 = new mtns.Product();
                        cond2.model = "model";

                        mtns.Product setv = new mtns.Product();
                        setv.deliveryNo = string.Empty;
                        setv.palletNo = string.Empty;
                        setv.cartonSN = string.Empty;
                        setv.cartonWeight = 0;
                        setv.pizzaID = string.Empty;
                        setv.udt = DateTime.Now;

                        sqlCtx = FuncNew.GetConditionedUpdate<mtns.Product>(tk, new SetValueCollection<mtns.Product>(new CommonSetValue<mtns.Product>(setv)), new ConditionCollection<mtns.Product>(
                            new EqualCondition<mtns.Product>(cond)));

                        sqlCtx.Param(g.DecSV(mtns.Product.fn_deliveryNo)).Value = setv.deliveryNo;
                        sqlCtx.Param(g.DecSV(mtns.Product.fn_palletNo)).Value = setv.palletNo;
                        sqlCtx.Param(g.DecSV(mtns.Product.fn_cartonSN)).Value = setv.cartonSN;
                        sqlCtx.Param(g.DecSV(mtns.Product.fn_cartonWeight)).Value = setv.cartonWeight;
                        sqlCtx.Param(g.DecSV(mtns.Product.fn_pizzaID)).Value = setv.pizzaID;
                    }
                }
                sqlCtx.Param(mtns.Product.fn_deliveryNo).Value = dn;

                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(Pak_Wh_Locmas.fn_udt)).Value = cmDt;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteProductInfoForUnbound(string infoType, string dn)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        sqlCtx.Sentence = "DELETE {0} FROM {0} AS I INNER JOIN {1} AS P ON I.{2}=P.{4} " +
                                            "WHERE I.{3}=@{3} AND P.{5}=@{5} ";
                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(_Metas.ProductInfo)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         _Metas.ProductInfo.fn_productID,
                                                                         _Metas.ProductInfo.fn_infoType,
                                                                         _Metas.Product.fn_productID,
                                                                         _Metas.Product.fn_deliveryNo
                                                                         );

                        sqlCtx.AddParam(_Metas.ProductInfo.fn_infoType, new SqlParameter("@" + _Metas.ProductInfo.fn_infoType, ToolsNew.GetDBFieldType<_Metas.ProductLog>(_Metas.ProductInfo.fn_infoType)));
                        sqlCtx.AddParam(_Metas.Product.fn_deliveryNo, new SqlParameter("@" + _Metas.Product.fn_deliveryNo, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_deliveryNo)));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.ProductInfo.fn_infoType).Value = infoType;
                sqlCtx.Param(_Metas.Product.fn_deliveryNo).Value = dn;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteProductPartByPartTypeAndDescrLike(string prodId, string partType, string descrLike)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        sqlCtx.Sentence = "DELETE {0} FROM {0} AS I INNER JOIN {7}..{1} AS P ON I.{3} = P.{4} " +
                                            "WHERE I.{2}=@{2} AND P.{5}=@{5} AND P.{6} LIKE @{6} ";
                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(_Metas.Product_Part)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Part_NEW)),
                                                                         _Metas.Product_Part.fn_productID,
                                                                         _Metas.Product_Part.fn_partNo,
                                                                         _Metas.Part_NEW.fn_partNo,
                                                                         _Metas.Part_NEW.fn_partType,
                                                                         _Metas.Part_NEW.fn_descr,
                                                                         _Schema.SqlHelper.DB_BOM
                                                                         );

                        sqlCtx.AddParam(_Metas.Product_Part.fn_productID, new SqlParameter("@" + _Metas.Product_Part.fn_productID, ToolsNew.GetDBFieldType<_Metas.Product_Part>(_Metas.Product_Part.fn_productID)));
                        sqlCtx.AddParam(_Metas.Part_NEW.fn_partType, new SqlParameter("@" + _Metas.Part_NEW.fn_partType, ToolsNew.GetDBFieldType<_Metas.Part_NEW>(_Metas.Part_NEW.fn_partType)));
                        sqlCtx.AddParam(_Metas.Part_NEW.fn_descr, new SqlParameter("@" + _Metas.Part_NEW.fn_descr, ToolsNew.GetDBFieldType<_Metas.Part_NEW>(_Metas.Part_NEW.fn_descr)));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = prodId;
                sqlCtx.Param(_Metas.Part_NEW.fn_partType).Value = partType;
                sqlCtx.Param(_Metas.Part_NEW.fn_descr).Value = descrLike;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteProductPartByLikePartType(string prodId, string partTypePrefix)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        sqlCtx.Sentence = "DELETE {0} FROM {0} AS I INNER JOIN {6}..{1} AS P ON I.{3} = P.{4} " +
                                            "WHERE I.{2}=@{2} AND P.{5} LIKE @{5} ";
                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(_Metas.Product_Part)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Part_NEW)),
                                                                         _Metas.Product_Part.fn_productID,
                                                                         _Metas.Product_Part.fn_partNo,
                                                                         _Metas.Part_NEW.fn_partNo,
                                                                         _Metas.Part_NEW.fn_partType,
                                                                         _Schema.SqlHelper.DB_BOM
                                                                         );

                        sqlCtx.AddParam(_Metas.Product_Part.fn_productID, new SqlParameter("@" + _Metas.Product_Part.fn_productID, ToolsNew.GetDBFieldType<_Metas.Product_Part>(_Metas.Product_Part.fn_productID)));
                        sqlCtx.AddParam(_Metas.Part_NEW.fn_partType, new SqlParameter("@" + _Metas.Part_NEW.fn_partType, ToolsNew.GetDBFieldType<_Metas.Part_NEW>(_Metas.Part_NEW.fn_partType)));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = prodId;
                sqlCtx.Param(_Metas.Part_NEW.fn_partType).Value = partTypePrefix + "%";

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductPart> GetProductPartByPartTypeAndDescrLike(string prodId, string partType, string descrLike)
        {
            try
            {
                IList<ProductPart> ret = null;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.Product_Part>();
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = prodId;
                        tf1.Conditions.Add(new EqualCondition<_Metas.Product_Part>(cond));

                        tf2 = new TableAndFields<_Metas.Part_NEW>();
                        _Metas.Part_NEW cond2 = new _Metas.Part_NEW();
                        cond2.partType = partType;
                        cond2.flag = 1;
                        tf2.Conditions.Add(new EqualCondition<_Metas.Part_NEW>(cond2));
                        _Metas.Part_NEW cond3 = new _Metas.Part_NEW();
                        cond3.descr = descrLike + "%";
                        tf2.Conditions.Add(new LikeCondition<_Metas.Part_NEW>(cond3));
                        tf2.ClearToGetFieldNames();
                        tf2.SubDBCalalog = _Schema.SqlHelper.DB_BOM;

                        tafa = new ITableAndFields[] { tf1, tf2 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.Product_Part, _Metas.Part_NEW>(tf1, _Metas.Product_Part.fn_partNo, tf2, _Metas.Part_NEW.fn_partNo));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, null, tafa, tblCnnts);

                        sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.Part_NEW.fn_flag)).Value = cond2.flag;
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];

                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.Product_Part.fn_productID)).Value = prodId;
                sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.Part_NEW.fn_partType)).Value = partType;
                sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.Part_NEW.fn_descr)).Value = descrLike + "%";

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Product_Part, ProductPart, ProductPart>(ret, sqlR, sqlCtx, tf1.Alias);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductPart> GetProductPartByBomNodeTypeAndDescrLike(string prodId, string bomNodeType, string descrLike)
        {
            try
            {
                IList<ProductPart> ret = null;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.Product_Part>();
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = prodId;
                        tf1.Conditions.Add(new EqualCondition<_Metas.Product_Part>(cond));

                        tf2 = new TableAndFields<_Metas.Part_NEW>();
                        _Metas.Part_NEW cond2 = new _Metas.Part_NEW();
                        cond2.bomNodeType = bomNodeType;
                        cond2.flag = 1;
                        tf2.Conditions.Add(new EqualCondition<_Metas.Part_NEW>(cond2));
                        _Metas.Part_NEW cond3 = new _Metas.Part_NEW();
                        cond3.descr = descrLike + "%";
                        tf2.Conditions.Add(new LikeCondition<_Metas.Part_NEW>(cond3));
                        tf2.ClearToGetFieldNames();
                        tf2.SubDBCalalog = _Schema.SqlHelper.DB_BOM;

                        tafa = new ITableAndFields[] { tf1, tf2 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.Product_Part, _Metas.Part_NEW>(tf1, _Metas.Product_Part.fn_partNo, tf2, _Metas.Part_NEW.fn_partNo));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, null, tafa, tblCnnts);

                        sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.Part_NEW.fn_flag)).Value = cond2.flag;
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];

                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.Product_Part.fn_productID)).Value = prodId;
                sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.Part_NEW.fn_bomNodeType)).Value = bomNodeType;
                sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.Part_NEW.fn_descr)).Value = descrLike + "%";

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Product_Part, ProductPart, ProductPart>(ret, sqlR, sqlCtx, tf1.Alias);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductPart> GetProductPartByBomNodeTypeAndPartSnLike(string prodId, string bomNodeType, string partSnLike)
        {
            try
            {
                IList<ProductPart> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = prodId; 
                        cond.bomNodeType = bomNodeType;

                        _Metas.Product_Part cond3 = new _Metas.Product_Part();
                        cond3.partSn = partSnLike + "%";

                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.Product_Part>(tk, null, null, new ConditionCollection<_Metas.Product_Part>(
                            new EqualCondition<_Metas.Product_Part>(cond),
                            new LikeCondition<_Metas.Product_Part>(cond3)
                            ));
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = prodId;
                sqlCtx.Param(_Metas.Product_Part.fn_bomNodeType).Value = bomNodeType;
                sqlCtx.Param(_Metas.Product_Part.fn_partSn).Value = partSnLike + "%";

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Product_Part, ProductPart, ProductPart>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductPart> GetProductPartByPartTypeLike(string prodId, string partTypeLike)
        {
            try
            {
                IList<ProductPart> ret = null;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.Product_Part>();
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = prodId;
                        tf1.Conditions.Add(new EqualCondition<_Metas.Product_Part>(cond));

                        tf2 = new TableAndFields<_Metas.Part_NEW>();
                        _Metas.Part_NEW cond1 = new _Metas.Part_NEW();
                        cond1.flag = 1;
                        tf2.Conditions.Add(new EqualCondition<_Metas.Part_NEW>(cond1));
                        _Metas.Part_NEW cond2 = new _Metas.Part_NEW();
                        cond2.partType = partTypeLike + "%";
                        tf2.Conditions.Add(new LikeCondition<_Metas.Part_NEW>(cond2));
                        tf2.ClearToGetFieldNames();
                        tf2.SubDBCalalog = _Schema.SqlHelper.DB_BOM;

                        tafa = new ITableAndFields[] { tf1, tf2 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.Product_Part, _Metas.Part_NEW>(tf1, _Metas.Product_Part.fn_partNo, tf2, _Metas.Part_NEW.fn_partNo));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, null, tafa, tblCnnts);

                        sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.Part_NEW.fn_flag)).Value = cond1.flag;
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];

                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.Product_Part.fn_productID)).Value = prodId;
                sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.Part_NEW.fn_partType)).Value = partTypeLike + "%";

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Product_Part, ProductPart, ProductPart>(ret, sqlR, sqlCtx, tf1.Alias);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductPart> GetProductPartByDescrLike(string prodId, string descrLike)
        {
            try
            {
                IList<ProductPart> ret = null;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.Product_Part>();
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = prodId;
                        tf1.Conditions.Add(new EqualCondition<_Metas.Product_Part>(cond));

                        tf2 = new TableAndFields<_Metas.Part_NEW>();
                        _Metas.Part_NEW cond1 = new _Metas.Part_NEW();
                        cond1.flag = 1;
                        tf2.Conditions.Add(new EqualCondition<_Metas.Part_NEW>(cond1));
                        _Metas.Part_NEW cond2 = new _Metas.Part_NEW();
                        cond2.descr = descrLike + "%";
                        tf2.Conditions.Add(new LikeCondition<_Metas.Part_NEW>(cond2));
                        tf2.ClearToGetFieldNames();
                        tf2.SubDBCalalog = _Schema.SqlHelper.DB_BOM;

                        tafa = new ITableAndFields[] { tf1, tf2 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.Product_Part, _Metas.Part_NEW>(tf1, _Metas.Product_Part.fn_partNo, tf2, _Metas.Part_NEW.fn_partNo));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, null, tafa, tblCnnts);

                        sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.Part_NEW.fn_flag)).Value = cond1.flag;
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];

                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.Product_Part.fn_productID)).Value = prodId;
                sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.Part_NEW.fn_descr)).Value = descrLike + "%";

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Product_Part, ProductPart, ProductPart>(ret, sqlR, sqlCtx, tf1.Alias);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductPart> GetProductPartList(ProductPart condition)
        {
            try
            {
                IList<ProductPart> ret = null;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                mtns::SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                mtns::Product_Part cond = mtns::FuncNew.SetColumnFromField<mtns::Product_Part, ProductPart>(condition);
                sqlCtx = mtns::FuncNew.GetConditionedSelect<mtns::Product_Part>(null, null, new mtns::ConditionCollection<mtns::Product_Part>(new mtns::EqualCondition<mtns::Product_Part>(cond)), mtns::Product_Part.fn_udt + FuncNew.DescendOrder);
                //    }
                //}
                sqlCtx = mtns::FuncNew.SetColumnFromField<mtns::Product_Part, ProductPart>(sqlCtx, condition);

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = mtns::FuncNew.SetFieldFromColumn<mtns::Product_Part, ProductPart, ProductPart>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetCodeListFromKittingCode(IMES.DataModel.KittingCode condition)
        {
            try
            {
                IList<string> ret = null;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                mtns::SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                mtns::KittingCode cond = mtns::FuncNew.SetColumnFromField<mtns::KittingCode, IMES.DataModel.KittingCode>(condition);
                sqlCtx = mtns::FuncNew.GetConditionedSelect<mtns::KittingCode>(null, new string[] { mtns::KittingCode.fn_code }, new mtns::ConditionCollection<mtns::KittingCode>(new mtns::EqualCondition<mtns::KittingCode>(cond)), mtns::KittingCode.fn_code);
                //    }
                //}
                sqlCtx = mtns::FuncNew.SetColumnFromField<mtns::KittingCode, IMES.DataModel.KittingCode>(sqlCtx, condition);

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string>();
                        while (sqlR.Read())
                        {
                            string item = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.KittingCode.fn_code));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<CdsiastInfo> GetCdsiastInfoList(CdsiastInfo condition)
        {
            try
            {
                IList<CdsiastInfo> ret = null;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                mtns::SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                mtns::Cdsiast cond = mtns::FuncNew.SetColumnFromField<mtns::Cdsiast, CdsiastInfo>(condition);
                sqlCtx = mtns::FuncNew.GetConditionedSelect<mtns::Cdsiast>(null, null, new mtns::ConditionCollection<mtns::Cdsiast>(new mtns::EqualCondition<mtns::Cdsiast>(cond)), mtns::Cdsiast.fn_id);
                //    }
                //}
                sqlCtx = mtns::FuncNew.SetColumnFromField<mtns::Cdsiast, CdsiastInfo>(sqlCtx, condition);

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = mtns::FuncNew.SetFieldFromColumn<mtns::Cdsiast, CdsiastInfo, CdsiastInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.WipBuffer> GetWipBuffersByStaCodeType(string station, string code, string kitType)
        {
            try
            {
                IList<dtmdns::WipBuffer> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.WipBuffer cond = new _Metas.WipBuffer();
                        cond.kittingType = kitType;
                        cond.station = station;
                        cond.code = code;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.WipBuffer>(tk, null, null, new ConditionCollection<_Metas.WipBuffer>(new EqualCondition<_Metas.WipBuffer>(cond)), _Metas.WipBuffer.fn_cdt);
                    }
                }
                sqlCtx.Param(_Metas.WipBuffer.fn_kittingType).Value = kitType;
                sqlCtx.Param(_Metas.WipBuffer.fn_station).Value = station;
                sqlCtx.Param(_Metas.WipBuffer.fn_code).Value = code;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.WipBuffer, dtmdns::WipBuffer, dtmdns::WipBuffer>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteRunInTimeControlByTypeCodeAndTeststation(string type, string code, string teststation)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.RunInTimeControl cond = new _Metas.RunInTimeControl();
                        cond.type = type;
                        cond.code = code;
                        cond.testStation = teststation;
                        sqlCtx = FuncNew.GetConditionedDelete<_Metas.RunInTimeControl>(tk, new ConditionCollection<_Metas.RunInTimeControl>(new EqualCondition<_Metas.RunInTimeControl>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.RunInTimeControl.fn_type).Value = type;
                sqlCtx.Param(_Metas.RunInTimeControl.fn_code).Value = code;
                sqlCtx.Param(_Metas.RunInTimeControl.fn_testStation).Value = teststation;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }
        
        public bool PreQueryForChangeToBTDeffered(string modelName)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        sqlCtx.Sentence =   "SELECT COUNT(1) FROM {0} AS P " +
                                            "INNER JOIN {1} AS S ON P.{4}=S.{5} " +
                                            "INNER JOIN {3}..{2} AS L ON L.{6}=S.{7} " +
                                            "WHERE P.{8}=@{8} AND ((L.{9}='FA') OR (L.{9}='PAK' AND S.{10}='69')) ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.ProductStatus)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Line)),
                                                                         _Schema.SqlHelper.DB_GetData,
                                                                         _Metas.Product.fn_productID,
                                                                         _Metas.ProductStatus.fn_productID,
                                                                         _Metas.Line.fn_line,
                                                                         _Metas.ProductStatus.fn_line,
                                                                         _Metas.Product.fn_model,
                                                                         _Metas.Line.fn_stage,
                                                                         _Metas.ProductStatus.fn_station
                                                                         );
                        sqlCtx.AddParam(_Metas.Product.fn_model, new SqlParameter("@" + _Metas.Product.fn_model, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_model)));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_model).Value = modelName;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, 0);
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }
        
        public void ChangeToBTDeffered(string modelName, string editor, string bt)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        sqlCtx.Sentence =   "INSERT INTO {0}({5},{6},{7},{8},{9}) " +
                                            "SELECT P.{10},@{6},@{7},GETDATE(),GETDATE() FROM {1} AS P " +
                                            "INNER JOIN {2} AS S ON P.{10}=S.{11} " +
                                            "INNER JOIN {4}..{3} AS L ON L.{12}=S.{13} " +
                                            "WHERE P.{14}=@{14} AND ((L.{15}='FA') OR (L.{15}='PAK' AND S.{16}='69')) ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(_Metas.ProductBT)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.ProductStatus)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Line)),
                                                                         _Schema.SqlHelper.DB_GetData,
                                                                         _Metas.ProductBT.fn_productID,
                                                                         _Metas.ProductBT.fn_bt,
                                                                         _Metas.ProductBT.fn_editor,
                                                                         _Metas.ProductBT.fn_cdt,
                                                                         _Metas.ProductBT.fn_udt,
                                                                         _Metas.Product.fn_productID,
                                                                         _Metas.ProductStatus.fn_productID,
                                                                         _Metas.Line.fn_line,
                                                                         _Metas.ProductStatus.fn_line,
                                                                         _Metas.Product.fn_model,
                                                                         _Metas.Line.fn_stage,
                                                                         _Metas.ProductStatus.fn_station
                                                                         );

                        sqlCtx.AddParam(_Metas.ProductBT.fn_bt, new SqlParameter("@" + _Metas.ProductBT.fn_bt, ToolsNew.GetDBFieldType<_Metas.ProductBT>(_Metas.ProductBT.fn_bt)));
                        sqlCtx.AddParam(_Metas.ProductBT.fn_editor, new SqlParameter("@" + _Metas.ProductBT.fn_editor, ToolsNew.GetDBFieldType<_Metas.ProductBT>(_Metas.ProductBT.fn_editor)));
                        sqlCtx.AddParam(_Metas.Product.fn_model, new SqlParameter("@" + _Metas.Product.fn_model, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_model)));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.ProductBT.fn_bt).Value = bt;
                sqlCtx.Param(_Metas.ProductBT.fn_editor).Value = editor;
                sqlCtx.Param(_Metas.Product.fn_model).Value = modelName;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool PreQueryForChangeToNonBT(string modelName)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        sqlCtx.Sentence =   "SELECT COUNT(1) FROM {11} AS B " +
                                            "INNER JOIN {0} AS P ON B.{12}=P.{4} " +
                                            "INNER JOIN {1} AS S ON P.{4}=S.{5} " +
                                            "INNER JOIN {3}..{2} AS L ON L.{6}=S.{7} " +
                                            "WHERE P.{8}=@{8} AND ((L.{9}='FA') OR (L.{9}='PAK' AND S.{10}='69')) ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.ProductStatus)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Line)),
                                                                         _Schema.SqlHelper.DB_GetData,
                                                                         _Metas.Product.fn_productID,
                                                                         _Metas.ProductStatus.fn_productID,
                                                                         _Metas.Line.fn_line,
                                                                         _Metas.ProductStatus.fn_line,
                                                                         _Metas.Product.fn_model,
                                                                         _Metas.Line.fn_stage,
                                                                         _Metas.ProductStatus.fn_station,
                                                                         ToolsNew.GetTableName(typeof(_Metas.ProductBT)),
                                                                         _Metas.ProductBT.fn_productID
                                                                         );
                        sqlCtx.AddParam(_Metas.Product.fn_model, new SqlParameter("@" + _Metas.Product.fn_model, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_model)));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_model).Value = modelName;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, 0);
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void ChangeToNonBT(string modelName)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        sqlCtx.Sentence = "DELETE {0} FROM {0} AS B INNER JOIN {1} AS P ON B.{5}=P.{6} " +
                                            "INNER JOIN {2} AS S ON P.{6}=S.{7} " +
                                            "INNER JOIN {4}..{3} AS L ON L.{8}=S.{9} " +
                                            "WHERE P.{10}=@{10} AND ((L.{11}='FA') OR (L.{11}='PAK' AND S.Station='69')) ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(_Metas.ProductBT)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.ProductStatus)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Line)),
                                                                         _Schema.SqlHelper.DB_GetData,
                                                                         _Metas.ProductBT.fn_productID,
                                                                         _Metas.Product.fn_productID,
                                                                         _Metas.ProductStatus.fn_productID,
                                                                         _Metas.Line.fn_line,
                                                                         _Metas.ProductStatus.fn_line,
                                                                         _Metas.Product.fn_model,
                                                                         _Metas.Line.fn_stage,
                                                                         _Metas.ProductStatus.fn_station);
                        sqlCtx.AddParam(_Metas.Product.fn_model, new SqlParameter("@" + _Metas.Product.fn_model, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_model)));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_model).Value = modelName;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<FaPaLightstInfo> GetAllFaPaLightStations()
        {
            try
            {
                IList<FaPaLightstInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Fa_Pa_Lightst>(tk, null, null, new ConditionCollection<_Metas.Fa_Pa_Lightst>(), _Metas.Fa_Pa_Lightst.fn_pno);//ITC-1361-0049
                    }
                }
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Fa_Pa_Lightst, FaPaLightstInfo, FaPaLightstInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<FaPaLightstInfo> CheckFaPaLightStationExist(string iecpn, string family, string lightStation)
        {
            try
            {
                IList<FaPaLightstInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Fa_Pa_Lightst cond = new _Metas.Fa_Pa_Lightst();
                        cond.pno = iecpn;
                        cond.family = family;
                        cond.stn = lightStation;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Fa_Pa_Lightst>(tk, null, null, new ConditionCollection<Fa_Pa_Lightst>(new EqualCondition<Fa_Pa_Lightst>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Fa_Pa_Lightst.fn_pno).Value = iecpn;
                sqlCtx.Param(_Metas.Fa_Pa_Lightst.fn_family).Value = family;
                sqlCtx.Param(_Metas.Fa_Pa_Lightst.fn_stn).Value = lightStation;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Fa_Pa_Lightst, FaPaLightstInfo, FaPaLightstInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddFaPaLightStationItem(FaPaLightstInfo item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<mtns::Fa_Pa_Lightst>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<mtns::Fa_Pa_Lightst, FaPaLightstInfo>(sqlCtx, item);

                sqlCtx.Param(mtns::Fa_Pa_Lightst.fn_cdt).Value = cmDt;
                sqlCtx.Param(mtns::Fa_Pa_Lightst.fn_udt).Value = cmDt;

                item.id = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteFaPaLightStationItem(int id)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetCommonDelete<Fa_Pa_Lightst>(tk);
                    }
                }
                sqlCtx.Param(Fa_Pa_Lightst.fn_id).Value = id;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateFaPaLightStationItem(FaPaLightstInfo item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Fa_Pa_Lightst cond = new _Metas.Fa_Pa_Lightst();
                        cond.id = item.id;

                        Fa_Pa_Lightst setv = FuncNew.SetColumnFromField<Fa_Pa_Lightst, FaPaLightstInfo>(item, Fa_Pa_Lightst.fn_id);
                        setv.udt = DateTime.Now;

                        sqlCtx = FuncNew.GetConditionedUpdate<_Metas.Fa_Pa_Lightst>(tk, new SetValueCollection<_Metas.Fa_Pa_Lightst>(new CommonSetValue<_Metas.Fa_Pa_Lightst>(setv)), new ConditionCollection<_Metas.Fa_Pa_Lightst>(new EqualCondition<_Metas.Fa_Pa_Lightst>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Fa_Pa_Lightst.fn_id).Value = item.id;
                sqlCtx = FuncNew.SetColumnFromField<mtns::Fa_Pa_Lightst, FaPaLightstInfo>(sqlCtx, item, true);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(_Metas.Fa_Pa_Lightst.fn_udt)).Value = cmDt;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddKittingBoxSNItem(KittingBoxSNInfo item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetCommonInsert<mtns::Fakittingboxsn>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<mtns::Fakittingboxsn, KittingBoxSNInfo>(sqlCtx, item);

                sqlCtx.Param(mtns::Fakittingboxsn.fn_cdt).Value = cmDt;
                sqlCtx.Param(mtns::Fakittingboxsn.fn_udt).Value = cmDt;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckExistProductByPartSnAndStations(string partSn, string[] stations)
        {
            try
            {
                bool ret = false;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields tf3 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.Product_Part>();
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.partSn = partSn;
                        tf1.Conditions.Add(new EqualCondition<_Metas.Product_Part>(cond));
                        tf1.ClearToGetFieldNames();

                        tf2 = new TableAndFields<_Metas.Product>();
                        tf2.AddRangeToGetFieldNames(_Metas.Product.fn_productID);

                        tf3 = new TableAndFields<_Metas.ProductStatus>();
                        _Metas.ProductStatus cond2 = new _Metas.ProductStatus();
                        cond2.station = "[INSET]";
                        tf3.Conditions.Add(new InSetCondition<_Metas.ProductStatus>(cond2));
                        tf3.ClearToGetFieldNames();

                        tafa = new ITableAndFields[] { tf1, tf2, tf3 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.Product_Part, _Metas.Product>(tf1, _Metas.Product_Part.fn_productID, tf2, _Metas.Product.fn_productID),
                            new TableConnectionItem<_Metas.ProductStatus, _Metas.Product>(tf3, _Metas.ProductStatus.fn_productID, tf2, _Metas.Product.fn_productID));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, "COUNT", tafa, tblCnnts);
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];
                tf3 = tafa[2];

                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.Product_Part.fn_partSn)).Value = partSn;
                string Sentence = sqlCtx.Sentence.Replace(g.DecAlias(tf3.Alias,g.DecInSet(mtns::ProductStatus.fn_station)), g.ConvertInSet(stations));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckExistProductByPartSnAndStationsWithPizzaPart(string partSn, string[] stations)
        {
            try
            {
                bool ret = false;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields tf3 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.Pizza_Part>();
                        tf1.SubDBCalalog = _Schema.SqlHelper.DB_PAK;
                        _Metas.Pizza_Part cond = new _Metas.Pizza_Part();
                        cond.partSn = partSn;
                        tf1.Conditions.Add(new EqualCondition<_Metas.Pizza_Part>(cond));
                        tf1.ClearToGetFieldNames();

                        tf2 = new TableAndFields<_Metas.Product>();
                        tf2.AddRangeToGetFieldNames(_Metas.Product.fn_productID);

                        tf3 = new TableAndFields<_Metas.ProductStatus>();
                        _Metas.ProductStatus cond2 = new _Metas.ProductStatus();
                        cond2.station = "[INSET]";
                        tf3.Conditions.Add(new InSetCondition<_Metas.ProductStatus>(cond2));
                        tf3.ClearToGetFieldNames();

                        tafa = new ITableAndFields[] { tf1, tf2, tf3 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.Pizza_Part, _Metas.Product>(tf1, _Metas.Pizza_Part.fn_pizzaID, tf2, _Metas.Product.fn_pizzaID),
                            new TableConnectionItem<_Metas.ProductStatus, _Metas.Product>(tf3, _Metas.ProductStatus.fn_productID, tf2, _Metas.Product.fn_productID));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, "COUNT", tafa, tblCnnts);
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];
                tf3 = tafa[2];

                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.Pizza_Part.fn_partSn)).Value = partSn;
                string Sentence = sqlCtx.Sentence.Replace(g.DecAlias(tf3.Alias, g.DecInSet(mtns::ProductStatus.fn_station)), g.ConvertInSet(stations));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductAndCustInfo> GetProductAndCustInfoListByPartSn(string partSn)
        {
            try
            {
                IList<ProductAndCustInfo> ret = null;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields tf3 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.Product_Part>();
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.partSn = partSn;
                        tf1.Conditions.Add(new EqualCondition<_Metas.Product_Part>(cond));
                        tf1.ClearToGetFieldNames();

                        tf2 = new TableAndFields<_Metas.Product>();
                        tf2.AddRangeToGetFieldNames(_Metas.Product.fn_productID, _Metas.Product.fn_custsn);

                        tf3 = new TableAndFields<_Metas.Model>();
                        tf3.SubDBCalalog = _Schema.SqlHelper.DB_BOM;
                        tf3.AddRangeToGetFieldNames(_Metas.Model.fn_custPN);

                        tafa = new ITableAndFields[] { tf1, tf2, tf3 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.Product_Part, _Metas.Product>(tf1, _Metas.Product_Part.fn_productID, tf2, _Metas.Product.fn_productID),
                            new TableConnectionItem<_Metas.Model, _Metas.Product>(tf3, _Metas.Model.fn_model, tf2, _Metas.Product.fn_model));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, null, tafa, tblCnnts);
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];
                tf3 = tafa[2];

                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.Product_Part.fn_partSn)).Value = partSn;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<ProductAndCustInfo>();
                        while (sqlR.Read())
                        {
                            ProductAndCustInfo item = new ProductAndCustInfo();
                            item.custPno = g.GetValue_Str(sqlR, sqlCtx.Indexes(g.DecAlias(tf3.Alias, _Metas.Model.fn_custPN)));
                            item.custSn = g.GetValue_Str(sqlR, sqlCtx.Indexes(g.DecAlias(tf2.Alias,_Metas.Product.fn_custsn)));
                            item.productId = g.GetValue_Str(sqlR, sqlCtx.Indexes(g.DecAlias(tf2.Alias, _Metas.Product.fn_productID)));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteProductPartByPartSn(string prodId, string partSn)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = prodId;
                        cond.partSn = partSn;
                        sqlCtx = FuncNew.GetConditionedDelete<_Metas.Product_Part>(tk, new ConditionCollection<_Metas.Product_Part>(new EqualCondition<_Metas.Product_Part>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = prodId;
                sqlCtx.Param(_Metas.Product_Part.fn_partSn).Value = partSn;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string[]> GetCheckItemListFromITCNDCheckSetting(string line)
        {
            try
            {
                IList<string[]> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Itcndchecksetting cond = new _Metas.Itcndchecksetting();
                        cond.line = line;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Itcndchecksetting>(tk, "DISTINCT", new string[] { _Metas.Itcndchecksetting.fn_checkItem, _Metas.Itcndchecksetting.fn_checkType, _Metas.Itcndchecksetting.fn_checkCondition }, new ConditionCollection<_Metas.Itcndchecksetting>(new EqualCondition<_Metas.Itcndchecksetting>(cond)), _Metas.Itcndchecksetting.fn_checkItem, _Metas.Itcndchecksetting.fn_checkType, _Metas.Itcndchecksetting.fn_checkCondition);
                    }
                }
                sqlCtx.Param(_Metas.Itcndchecksetting.fn_line).Value = line;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string[]>();
                        while (sqlR.Read())
                        {
                            string item = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Itcndchecksetting.fn_checkItem));
                            string type = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Itcndchecksetting.fn_checkType));
                            string cond = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Itcndchecksetting.fn_checkCondition));
                            ret.Add(new string[] { item, type, cond });
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.WipBuffer> GetWipBufferListByPnoListAndCode(string[] pnoList, string code)
        {
            try
            {
                IList<IMES.DataModel.WipBuffer> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.WipBuffer cond = new _Metas.WipBuffer();
                        cond.code = code;
                        _Metas.WipBuffer cond2 = new _Metas.WipBuffer();
                        cond2.partNo = "[INSET]";

                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.WipBuffer>(tk, null, null, new ConditionCollection<_Metas.WipBuffer>(
                            new EqualCondition<_Metas.WipBuffer>(cond, null, "RTRIM({0})"),
                            new InSetCondition<_Metas.WipBuffer>(cond2)), _Metas.WipBuffer.fn_partNo, _Metas.WipBuffer.fn_lightNo);
                    }
                }
                sqlCtx.Param(_Metas.WipBuffer.fn_code).Value = code;
                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(mtns::WipBuffer.fn_partNo), g.ConvertInSet(pnoList));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.WipBuffer, IMES.DataModel.WipBuffer, IMES.DataModel.WipBuffer>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProduct> GetProductListByModel(string model)
        {
            try
            {
                IList<IProduct> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.model = model;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, null, null, new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_model).Value = model;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Product, IMES.FisObject.FA.Product.Product, IProduct>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetReturnStnListFromProductRepair(string prodId, int status)
        {
            try
            {
                IList<string> ret = null;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.ProductRepair>();
                        _Metas.ProductRepair cond = new _Metas.ProductRepair();
                        cond.productID = prodId;
                        cond.status = status;
                        tf1.Conditions.Add(new EqualCondition<_Metas.ProductRepair>(cond));
                        tf1.ClearToGetFieldNames();

                        tf2 = new TableAndFields<_Metas.ProductRepair_DefectInfo>();
                        //_Metas.ProductRepair_DefectInfo cond2 = new _Metas.ProductRepair_DefectInfo();
                        tf2.AddRangeToGetFieldNames(_Metas.ProductRepair_DefectInfo.fn_returnStn);

                        tafa = new ITableAndFields[] { tf1, tf2 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.ProductRepair, _Metas.ProductRepair_DefectInfo>(tf1, _Metas.ProductRepair.fn_id, tf2, _Metas.ProductRepair_DefectInfo.fn_productRepairID));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, "DISTINCT", tafa, tblCnnts, g.DecAliasInner("t2", _Metas.ProductRepair_DefectInfo.fn_returnStn));
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];

                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.ProductRepair.fn_productID)).Value = prodId;
                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.ProductRepair.fn_status)).Value = status;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string>();
                        while (sqlR.Read())
                        {
                            string item = g.GetValue_Str(sqlR, sqlCtx.Indexes(g.DecAlias(tf2.Alias, _Metas.ProductRepair_DefectInfo.fn_returnStn)));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public SupplierCodeInfo GetSupplierCodeByVendor(string vendor)
        {
            try
            {
                SupplierCodeInfo ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        SupplierCode cond = new SupplierCode();
                        cond.vendor = vendor;
                         sqlCtx = FuncNew.GetConditionedSelect<SupplierCode>(tk, "TOP 1", null, new ConditionCollection<SupplierCode>(new EqualCondition<SupplierCode>(cond)), SupplierCode.fn_idex);
                    }
                }
                sqlCtx.Param(SupplierCode.fn_vendor).Value = vendor;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<SupplierCode, SupplierCodeInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public SupplierCodeInfo GetSupplierCodeByVendor(string vendor, string idex)
        {
            try
            {
                SupplierCodeInfo ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        SupplierCode cond = new SupplierCode();
                        cond.vendor = vendor;
                        SupplierCode cond2 = new SupplierCode();
                        cond2.idex = idex;
                        sqlCtx = FuncNew.GetConditionedSelect<SupplierCode>(tk, "TOP 1", null, new ConditionCollection<SupplierCode>(
                            new EqualCondition<SupplierCode>(cond),
                            new GreaterCondition<SupplierCode>(cond2)), SupplierCode.fn_idex);
                    }
                }
                sqlCtx.Param(SupplierCode.fn_vendor).Value = vendor;
                sqlCtx.Param(g.DecG(SupplierCode.fn_idex)).Value = idex;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<SupplierCode, SupplierCodeInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public SupplierCodeInfo GetSupplierCodeByVendorAndCodeLength(string vendor, string ast)
        {
            try
            {
                SupplierCodeInfo ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        SupplierCode cond = new SupplierCode();
                        cond.vendor = vendor;
                        SupplierCode cond2 = new SupplierCode();
                        cond2.code = ast;
                        sqlCtx = FuncNew.GetConditionedSelect<SupplierCode>(tk, "TOP 1", null, new ConditionCollection<SupplierCode>(
                            new EqualCondition<SupplierCode>(cond),
                            new EqualCondition<SupplierCode>(cond2, "LEN(RTRIM({0}))", "LEN({0})")), SupplierCode.fn_idex);
                    }
                }
                sqlCtx.Param(SupplierCode.fn_vendor).Value = vendor;
                sqlCtx.Param(SupplierCode.fn_code).Value = ast;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<SupplierCode, SupplierCodeInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckExistProductInfoWhoseInfoValueBeenOccupiedByAnotherProduct(string productId, string infoType)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductInfo cond = new _Metas.ProductInfo();
                        cond.infoType = infoType;
                        _Metas.ProductInfo cond2 = new _Metas.ProductInfo();
                        cond2.productID = productId;
                        _Metas.ProductInfo cond3 = new _Metas.ProductInfo();
                        cond3.infoValue = "[INSET]";
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductInfo>(tk, "COUNT", new string[] { _Metas.ProductInfo.fn_id }, new ConditionCollection<_Metas.ProductInfo>(
                            new EqualCondition<_Metas.ProductInfo>(cond),
                            new NotEqualCondition<_Metas.ProductInfo>(cond2),
                            new AnyCondition<_Metas.ProductInfo>(cond3, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}=@{3} AND {4}=@{4})", "{0}", _Metas.ProductInfo.fn_infoValue, ToolsNew.GetTableName(typeof(_Metas.ProductInfo)),_Metas.ProductInfo.fn_infoType, _Metas.ProductInfo.fn_productID) )));
                    }
                }
                sqlCtx.Param(_Metas.ProductInfo.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.ProductInfo.fn_infoType).Value = infoType;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckExistProductInfo(string productId, string infoType)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductInfo cond = new _Metas.ProductInfo();
                        cond.productID = productId;
                        cond.infoType = infoType;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductInfo>(tk, "COUNT", new string[] { _Metas.ProductInfo.fn_id }, new ConditionCollection<_Metas.ProductInfo>(new EqualCondition<_Metas.ProductInfo>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.ProductInfo.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.ProductInfo.fn_infoType).Value = infoType;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IMES.FisObject.FA.Product.ProductLog GetLatestFailLog(string productId) 
        {
            try
            {
                IMES.FisObject.FA.Product.ProductLog ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductLog cond = new _Metas.ProductLog();
                        cond.productID = productId;
                        cond.status = 0;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductLog>(tk, "TOP 1", null, new ConditionCollection<_Metas.ProductLog>(new EqualCondition<_Metas.ProductLog>(cond)), _Metas.ProductLog.fn_cdt + FuncNew.DescendOrder);
                        sqlCtx.Param(_Metas.ProductLog.fn_status).Value = cond.status;
                    }
                }
                sqlCtx.Param(_Metas.ProductLog.fn_productID).Value = productId;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.ProductLog, IMES.FisObject.FA.Product.ProductLog>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteProductPartByPartNo(string prodId, string partNo)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = prodId;
                        cond.partNo = partNo;
                        sqlCtx = FuncNew.GetConditionedDelete<_Metas.Product_Part>(tk, new ConditionCollection<_Metas.Product_Part>(new EqualCondition<_Metas.Product_Part>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = prodId;
                sqlCtx.Param(_Metas.Product_Part.fn_partNo).Value = partNo;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductPart> GetProductPartsByPartSn(string partSn)
        {
            try
            {
                IList<ProductPart> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.partSn = partSn;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product_Part>(tk, null, null, new ConditionCollection<_Metas.Product_Part>(new EqualCondition<_Metas.Product_Part>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_partSn).Value = partSn;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Product_Part, ProductPart, ProductPart>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetLabelKittingCodeList(string type)
        {
            try
            {
                IList<string> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns.LabelKitting cond = new mtns.LabelKitting();
                        cond.type = type;

                        sqlCtx = FuncNew.GetConditionedSelect<mtns.LabelKitting>(tk, null, new string[] { mtns.LabelKitting.fn_code }, new ConditionCollection<mtns.LabelKitting>(new EqualCondition<mtns.LabelKitting>(cond)), mtns.LabelKitting.fn_code);
                    }
                }
                sqlCtx.Param(mtns.LabelKitting.fn_type).Value = type;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string>();
                        while (sqlR.Read())
                        {
                            string item = g.GetValue_Str(sqlR, sqlCtx.Indexes(mtns.LabelKitting.fn_code));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckExistProductBT(string productId)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductBT cond = new _Metas.ProductBT();
                        cond.productID = productId;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductBT>(tk, "COUNT", new string[] { _Metas.ProductBT.fn_id }, new ConditionCollection<_Metas.ProductBT>(new EqualCondition<_Metas.ProductBT>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.ProductBT.fn_productID).Value = productId;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.DataModel.WipBuffer> GetWipBufferListFromWipBuffer(string code, string kittingType)
        {
            try
            {
                IList<IMES.DataModel.WipBuffer> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns.WipBuffer cond = new mtns.WipBuffer();
                        cond.code = code;
                        cond.kittingType = kittingType;
                        sqlCtx = FuncNew.GetConditionedSelect<mtns.WipBuffer>(tk, null, null, new ConditionCollection<mtns.WipBuffer>(new EqualCondition<mtns.WipBuffer>(cond)), mtns.WipBuffer.fn_partNo);
                    }
                }
                sqlCtx.Param(mtns.WipBuffer.fn_code).Value = code;
                sqlCtx.Param(mtns.WipBuffer.fn_kittingType).Value = kittingType;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<mtns.WipBuffer, IMES.DataModel.WipBuffer, IMES.DataModel.WipBuffer>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateProductStatuses(IMES.FisObject.FA.Product.ProductStatus setValue, string[] prodIds)
        {
            try
            {
                UpdateProductStatuses(setValue, prodIds, int.MinValue, StationStatus.NULL);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateProductStatuses(IMES.FisObject.FA.Product.ProductStatus setValue, string[] prodIds, int newTestFailCount, StationStatus newStatus)
        {
            try
            {
                if (prodIds != null)
                {
                    foreach (string prodId in prodIds)
                    {
                        UpdateProductStatuses_Inner(setValue, newTestFailCount, newStatus, prodId);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void UpdateProductStatuses_Inner(IMES.FisObject.FA.Product.ProductStatus setValue, int testFailCount, StationStatus status, string prodId)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                mtns::SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns::ProductStatus cond = new mtns::ProductStatus();
                        cond.productID = prodId;
                        mtns::ProductStatus setv = mtns::FuncNew.SetColumnFromField<mtns::ProductStatus, IMES.FisObject.FA.Product.ProductStatus>(setValue);
                        setv.udt = DateTime.Now;
                        setv.testFailCount = testFailCount;
                        if (status == StationStatus.NULL)
                            setv.status = int.MinValue;
                        else
                            setv.status = Convert.ToInt32(status);
                        sqlCtx = mtns::FuncNew.GetConditionedUpdate<mtns::ProductStatus>(tk, new mtns::SetValueCollection<mtns::ProductStatus>(new mtns::CommonSetValue<mtns::ProductStatus>(setv)), new mtns::ConditionCollection<mtns::ProductStatus>(new mtns::EqualCondition<mtns::ProductStatus>(cond)));
                    }
                }
                sqlCtx.Param(mtns::ProductStatus.fn_productID).Value = prodId;
                sqlCtx = mtns::FuncNew.SetColumnFromField<mtns::ProductStatus, IMES.FisObject.FA.Product.ProductStatus>(sqlCtx, setValue, true);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(mtns::ProductStatus.fn_udt)).Value = cmDt;
                if (testFailCount != int.MinValue)
                    sqlCtx.Param(g.DecSV(mtns::ProductStatus.fn_testFailCount)).Value = testFailCount;
                if (status != StationStatus.NULL)
                    sqlCtx.Param(g.DecSV(mtns::ProductStatus.fn_status)).Value = Convert.ToInt32(status);
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void InsertProductLogs(IMES.FisObject.FA.Product.ProductLog[] items)
        {
            try
            {
                if (items != null)
                {
                    foreach (IMES.FisObject.FA.Product.ProductLog item in items)
                    {
                        InsertProductLog_Inner(item);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void InsertProductLog_Inner(IMES.FisObject.FA.Product.ProductLog item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<mtns.ProductLog>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<mtns.ProductLog, IMES.FisObject.FA.Product.ProductLog>(sqlCtx, item);

                sqlCtx.Param(mtns.ProductLog.fn_cdt).Value = cmDt;

                item.Id = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateProducts(IMES.FisObject.FA.Product.Product setValue, string[] prodIds)
        {
            try
            {
                UpdateProducts(setValue, prodIds, decimal.MinValue, decimal.MinValue);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateProducts(IMES.FisObject.FA.Product.Product setValue, string[] prodIds, decimal newCartonWeight, decimal newUnitWeight)
        {
            try
            {
                if (prodIds != null)
                {
                    foreach (string prodId in prodIds)
                    {
                        UpdateProducts_Inner(setValue, newCartonWeight, newUnitWeight, prodId);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void UpdateProducts_Inner(IMES.FisObject.FA.Product.Product setValue, decimal cartonWeight, decimal unitWeight, string prodId)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                mtns::SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                        mtns::Product cond = new mtns::Product();
                        cond.productID = prodId;
                        mtns::Product setv = mtns::FuncNew.SetColumnFromField<mtns::Product, IMES.FisObject.FA.Product.Product>(setValue);
                        setv.udt = DateTime.Now;
                        setv.cartonWeight = cartonWeight;
                        setv.unitWeight = unitWeight;
                        sqlCtx = mtns::FuncNew.GetConditionedUpdate<mtns::Product>(new mtns::SetValueCollection<mtns::Product>(new mtns::CommonSetValue<mtns::Product>(setv)), new mtns::ConditionCollection<mtns::Product>(new mtns::EqualCondition<mtns::Product>(cond)));
                //    }
                //}
                sqlCtx.Param(mtns::Product.fn_productID).Value = prodId;
                sqlCtx = mtns::FuncNew.SetColumnFromField<mtns::Product, IMES.FisObject.FA.Product.Product>(sqlCtx, setValue, true);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(mtns::Product.fn_udt)).Value = cmDt;
                if (cartonWeight != decimal.MinValue)
                    sqlCtx.Param(g.DecSV(mtns::Product.fn_cartonWeight)).Value = cartonWeight;
                if (unitWeight != decimal.MinValue)
                    sqlCtx.Param(g.DecSV(mtns::Product.fn_unitWeight)).Value = unitWeight;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteProductParts(string[] prodIds, ProductPart otherCondition)
        {
            try
            {
                if (prodIds != null)
                {
                    foreach (string prodId in prodIds)
                    {
                        DeleteProductParts_Inner(prodId, otherCondition);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void DeleteProductParts_Inner(string prodId, ProductPart otherCondition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                        Product_Part cond = FuncNew.SetColumnFromField<Product_Part, ProductPart>(otherCondition);
                        cond.productID = prodId;
                        sqlCtx = FuncNew.GetConditionedDelete<Product_Part>(new ConditionCollection<Product_Part>(new EqualCondition<Product_Part>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<Product_Part, ProductPart>(sqlCtx, otherCondition);
                sqlCtx.Param(Product_Part.fn_productID).Value = prodId;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool IsRealEPIAReflow(string productID, string tp, string remark)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Qcstatus cond = new _Metas.Qcstatus();
                        cond.productID = productID;
                        cond.tp = tp;
                        cond.remark = remark;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Qcstatus>(tk, "COUNT", new string[] { _Metas.Qcstatus.fn_id }, new ConditionCollection<_Metas.Qcstatus>(new EqualCondition<_Metas.Qcstatus>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Qcstatus.fn_productID).Value = productID;
                sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = tp;
                sqlCtx.Param(_Metas.Qcstatus.fn_remark).Value = remark;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private bool IsRealEPIAReflow_OnTrans(string productID, string tp, string remark)
        {
            SqlDataReader sqlR = null;
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Qcstatus cond = new _Metas.Qcstatus();
                        cond.productID = productID;
                        cond.tp = tp;
                        cond.remark = remark;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Qcstatus>(tk, "COUNT", new string[] { _Metas.Qcstatus.fn_id }, new ConditionCollection<_Metas.Qcstatus>(new EqualCondition<_Metas.Qcstatus>(cond)));
                        sqlCtx.Sentence = sqlCtx.Sentence.Replace("WHERE", "WITH (NOLOCK) WHERE");
                    }
                }
                sqlCtx.Param(_Metas.Qcstatus.fn_productID).Value = productID;
                sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = tp;
                sqlCtx.Param(_Metas.Qcstatus.fn_remark).Value = remark;
                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
                if (sqlR != null && sqlR.Read())
                {
                    int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                    ret = cnt > 0;
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                {
                    sqlR.Close();
                }
            }
        }

        public bool AddQCStatusWithConditionOfIsRealEPIAReflow(ProductQCStatus item, string productID, string tp, string remark)
        {
            bool ret = false;
            try
            {
                SqlTransactionManager.Begin();
                ret = IsRealEPIAReflow_OnTrans(productID, tp, remark);
                if (ret) //Real EPIA                     //InspectionStation = "73";
                {
                    item.Remark = "1";
                    item.Status = "2";
                    this.PersistInsertQCStatuses(item);
                }
                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
            return ret;
        }

        public DateTime GetQCStartTime()
        {
            try
            {
                return GetQCStartTime(new DateTime(2012, 5, 25, 7, 50, 0));
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DateTime GetQCStartTime(DateTime t)
        {
            try
            {
                DateTime ret = DateTime.Now;
                DateTime yest = ret.AddDays(-1);
                //DateTime yestThresh = new DateTime(yest.Year, yest.Month, yest.Day, 7, 50, 0, 0);
                //DateTime todayThresh = new DateTime(ret.Year, ret.Month, ret.Day, 7, 50, 0, 0);
                DateTime yestThresh = new DateTime(yest.Year, yest.Month, yest.Day, t.Hour, t.Minute, 0, 0);
                DateTime todayThresh = new DateTime(ret.Year, ret.Month, ret.Day, t.Hour, t.Minute, 0, 0);
                if (ret < todayThresh)
                    ret = yestThresh;
                else
                    ret = todayThresh;
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        //public int GetCTOSampleCount(string tp, DateTime qcStartTime, string prodModel, string syscode)
        //{
        //    try
        //    {
        //        int ret = 0;

        //        MethodBase mthObj = MethodBase.GetCurrentMethod();
        //        int tk = mthObj.MetadataToken;
        //        SQLContextNew sqlCtx = null;
        //        lock (mthObj)
        //        {
        //            if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
        //            {
        //                _Metas.Qcstatus cond = new _Metas.Qcstatus();
        //                cond.tp = tp;
        //                _Metas.Qcstatus cond2 = new _Metas.Qcstatus();
        //                cond2.cdt = qcStartTime;
        //                _Metas.Qcstatus cond3 = new _Metas.Qcstatus();
        //                cond3.model = prodModel;
        //                _Metas.Qcstatus cond4 = new _Metas.Qcstatus();
        //                cond4.model = syscode;
        //                sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.Qcstatus>(tk, "COUNT", new string[][] { new string[] { _Metas.Qcstatus.fn_productID, string.Format("DISTINCT {0}", _Metas.Qcstatus.fn_productID) } }, new ConditionCollection<_Metas.Qcstatus>(
        //                    new EqualCondition<_Metas.Qcstatus>(cond),
        //                    new GreaterOrEqualCondition<_Metas.Qcstatus>(cond2),
        //                    new EqualCondition<_Metas.Qcstatus>(cond3, "SUBSTRING({0},10,2)", "SUBSTRING({0},10,2)"),
        //                    new AnyCondition<_Metas.Qcstatus>(cond4, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", Bom_Code.fn_part_number, ToolsNew.GetTableName(typeof(Bom_Code)), Bom_Code.fn_os_code, "{1}"))));
        //            }
        //        }
        //        sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = tp;
        //        sqlCtx.Param(g.DecGE(_Metas.Qcstatus.fn_cdt)).Value = qcStartTime;
        //        sqlCtx.Param(_Metas.Qcstatus.fn_model).Value = prodModel;
        //        sqlCtx.Param(g.DecAny(_Metas.Qcstatus.fn_model)).Value = syscode;
        //        using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
        //        {
        //            if (sqlR != null && sqlR.Read())
        //            {
        //                ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
        //            }
        //        }
        //        return ret;
        //    }
        //    catch (Exception)
        //    {
        //        throw;
        //    }
        //}

        public int GetCTOSampleCount(string tp, DateTime qcStartTime, string prodModel)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Qcstatus cond = new _Metas.Qcstatus();
                        cond.tp = tp;
                        _Metas.Qcstatus cond2 = new _Metas.Qcstatus();
                        cond2.cdt = qcStartTime;
                        _Metas.Qcstatus cond3 = new _Metas.Qcstatus();
                        cond3.model = prodModel;
                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.Qcstatus>(tk, "COUNT", new string[][] { new string[] { _Metas.Qcstatus.fn_productID, string.Format("DISTINCT {0}", _Metas.Qcstatus.fn_productID) } }, new ConditionCollection<_Metas.Qcstatus>(
                            new EqualCondition<_Metas.Qcstatus>(cond),
                            new GreaterOrEqualCondition<_Metas.Qcstatus>(cond2),
                            new EqualCondition<_Metas.Qcstatus>(cond3, "SUBSTRING({0},10,2)", "SUBSTRING({0},10,2)")));
                    }
                }
                sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = tp;
                sqlCtx.Param(g.DecGE(_Metas.Qcstatus.fn_cdt)).Value = qcStartTime;
                sqlCtx.Param(_Metas.Qcstatus.fn_model).Value = prodModel;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private int GetCTOSampleCount_OnTrans(string tp, DateTime qcStartTime, string prodModel)
        {
            SqlDataReader sqlR = null;
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Qcstatus cond = new _Metas.Qcstatus();
                        cond.tp = tp;
                        _Metas.Qcstatus cond2 = new _Metas.Qcstatus();
                        cond2.cdt = qcStartTime;
                        _Metas.Qcstatus cond3 = new _Metas.Qcstatus();
                        cond3.model = prodModel;
                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.Qcstatus>(tk, "COUNT", new string[][] { new string[] { _Metas.Qcstatus.fn_productID, string.Format("DISTINCT {0}", _Metas.Qcstatus.fn_productID) } }, new ConditionCollection<_Metas.Qcstatus>(
                            new EqualCondition<_Metas.Qcstatus>(cond),
                            new GreaterOrEqualCondition<_Metas.Qcstatus>(cond2),
                            new EqualCondition<_Metas.Qcstatus>(cond3, "SUBSTRING({0},10,2)", "SUBSTRING({0},10,2)")));
                        sqlCtx.Sentence = sqlCtx.Sentence.Replace("WHERE", "WITH (NOLOCK) WHERE");
                    }
                }
                sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = tp;
                sqlCtx.Param(g.DecGE(_Metas.Qcstatus.fn_cdt)).Value = qcStartTime;
                sqlCtx.Param(_Metas.Qcstatus.fn_model).Value = prodModel;
                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
                if (sqlR != null && sqlR.Read())
                {
                    ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                {
                    sqlR.Close();
                }
            }
        }

        public void AddQCStatusWithConditionOfGetCTOSampleCount(ProductQCStatus item, int eoqcRatio, string tp, DateTime qcStartTime, string prodModel)
        {
            try
            {
                SqlTransactionManager.Begin();

                var cnt = GetCTOSampleCount_OnTrans(tp, qcStartTime, prodModel);

                if (cnt % eoqcRatio == 0) //Real EPIA                     //InspectionStation = "73";
                {
                    item.Remark = "1";
                    item.Status = "2";
                    this.PersistInsertQCStatuses(item);
                }
                else    //QC Pass       //InspectionStation = "79";
                {
                    item.Remark = null;
                    item.Status = "1";
                    this.PersistInsertQCStatuses(item);
                }

                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        public int GetCTOSampleCount(string tp, DateTime qcStartTime, string prodModel, string prodFamily)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Qcstatus cond = new _Metas.Qcstatus();
                        cond.tp = tp;
                        _Metas.Qcstatus cond2 = new _Metas.Qcstatus();
                        cond2.cdt = qcStartTime;
                        _Metas.Qcstatus cond3 = new _Metas.Qcstatus();
                        cond3.model = prodModel;
                        _Metas.Qcstatus cond4 = new _Metas.Qcstatus();
                        cond4.model = prodFamily;
                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.Qcstatus>(tk, "COUNT", new string[][] { new string[] { _Metas.Qcstatus.fn_productID, string.Format("DISTINCT {0}", _Metas.Qcstatus.fn_productID) } }, new ConditionCollection<_Metas.Qcstatus>(
                            new EqualCondition<_Metas.Qcstatus>(cond),
                            new GreaterOrEqualCondition<_Metas.Qcstatus>(cond2),
                            new EqualCondition<_Metas.Qcstatus>(cond3, "SUBSTRING({0},10,2)", "SUBSTRING({0},10,2)"),
                            new AnyCondition<_Metas.Qcstatus>(cond4, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", _Metas.Model.fn_model, ToolsNew.GetTableName(typeof(_Metas.Model)), _Metas.Model.fn_family, "{1}"))));
                    }
                }
                sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = tp;
                sqlCtx.Param(g.DecGE(_Metas.Qcstatus.fn_cdt)).Value = qcStartTime;
                sqlCtx.Param(_Metas.Qcstatus.fn_model).Value = prodModel;
                sqlCtx.Param(g.DecAny(_Metas.Qcstatus.fn_model)).Value = prodFamily;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private int GetCTOSampleCount_OnTrans(string tp, DateTime qcStartTime, string prodModel, string prodFamily)
        {
            SqlDataReader sqlR = null;
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Qcstatus cond = new _Metas.Qcstatus();
                        cond.tp = tp;
                        _Metas.Qcstatus cond2 = new _Metas.Qcstatus();
                        cond2.cdt = qcStartTime;
                        _Metas.Qcstatus cond3 = new _Metas.Qcstatus();
                        cond3.model = prodModel;
                        _Metas.Qcstatus cond4 = new _Metas.Qcstatus();
                        cond4.model = prodFamily;
                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.Qcstatus>(tk, "COUNT", new string[][] { new string[] { _Metas.Qcstatus.fn_productID, string.Format("DISTINCT {0}", _Metas.Qcstatus.fn_productID) } }, new ConditionCollection<_Metas.Qcstatus>(
                            new EqualCondition<_Metas.Qcstatus>(cond),
                            new GreaterOrEqualCondition<_Metas.Qcstatus>(cond2),
                            new EqualCondition<_Metas.Qcstatus>(cond3, "SUBSTRING({0},10,2)", "SUBSTRING({0},10,2)"),
                            new AnyCondition<_Metas.Qcstatus>(cond4, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", _Metas.Model.fn_model, ToolsNew.GetTableName(typeof(_Metas.Model)), _Metas.Model.fn_family, "{1}"))));
                        sqlCtx.Sentence = sqlCtx.Sentence.Replace("WHERE", "WITH (NOLOCK) WHERE"); 
                    }
                }
                sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = tp;
                sqlCtx.Param(g.DecGE(_Metas.Qcstatus.fn_cdt)).Value = qcStartTime;
                sqlCtx.Param(_Metas.Qcstatus.fn_model).Value = prodModel;
                sqlCtx.Param(g.DecAny(_Metas.Qcstatus.fn_model)).Value = prodFamily;
                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
                if (sqlR != null && sqlR.Read())
                {
                    ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                {
                    sqlR.Close();
                }
            }
        }

        public void AddQCStatusWithConditionOfGetCTOSampleCount(ProductQCStatus item, int eoqcRatio, string tp, DateTime qcStartTime, string prodModel, string prodFamily)
        {
            try
            {
                SqlTransactionManager.Begin();

                var cnt = GetCTOSampleCount_OnTrans(tp, qcStartTime, prodModel, prodFamily);

                if (cnt % eoqcRatio == 0) //Real EPIA                     //InspectionStation = "73";
                {
                    item.Remark = "1";
                    item.Status = "2";
                    this.PersistInsertQCStatuses(item);
                }
                else    //QC Pass       //InspectionStation = "79";
                {
                    item.Remark = null;
                    item.Status = "1";
                    this.PersistInsertQCStatuses(item);
                }

                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        public int GetNCTOSampleCount(string tp, DateTime qcStartTime)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Qcstatus cond = new _Metas.Qcstatus();
                        cond.tp = tp;
                        _Metas.Qcstatus cond2 = new _Metas.Qcstatus();
                        cond2.cdt = qcStartTime;
                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.Qcstatus>(tk, "COUNT", new string[][] { new string[] { _Metas.Qcstatus.fn_productID, string.Format("DISTINCT {0}", _Metas.Qcstatus.fn_productID) } }, new ConditionCollection<_Metas.Qcstatus>(
                            new EqualCondition<_Metas.Qcstatus>(cond),
                            new GreaterOrEqualCondition<_Metas.Qcstatus>(cond2)));
                    }
                }
                sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = tp;
                sqlCtx.Param(g.DecGE(_Metas.Qcstatus.fn_cdt)).Value = qcStartTime;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetSampleCount(string tp, DateTime qcStartTime, string line)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Qcstatus cond = new _Metas.Qcstatus();
                        cond.tp = tp;
                        cond.line = line;
                        _Metas.Qcstatus cond2 = new _Metas.Qcstatus();
                        cond2.cdt = qcStartTime;
                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.Qcstatus>(tk, "COUNT", new string[][] { new string[] { _Metas.Qcstatus.fn_productID, string.Format("DISTINCT {0}", _Metas.Qcstatus.fn_productID) } }, new ConditionCollection<_Metas.Qcstatus>(
                            new EqualCondition<_Metas.Qcstatus>(cond),
                            new GreaterCondition<_Metas.Qcstatus>(cond2)));
                    }
                }
                sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = tp;
                sqlCtx.Param(_Metas.Qcstatus.fn_line).Value = line;
                sqlCtx.Param(g.DecG(_Metas.Qcstatus.fn_cdt)).Value = qcStartTime;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetSampleCount(string tp, string line)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        //_Metas.Qcstatus cond = new _Metas.Qcstatus();
                        //cond.tp = tp;
                        //_Metas.Qcstatus cond2 = new _Metas.Qcstatus();
                        //cond2.line = line;
                        //sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.Qcstatus>(tk, "COUNT", new string[][] { new string[] { _Metas.Qcstatus.fn_productID, string.Format("DISTINCT {0}", _Metas.Qcstatus.fn_productID) } }, new ConditionCollection<_Metas.Qcstatus>(
                        //    new EqualCondition<_Metas.Qcstatus>(cond),
                        //    new EqualCondition<_Metas.Qcstatus>(cond2, "LEFT({0},1)", "LEFT({0},1)")));
                        sqlCtx = new SQLContextNew();
                        sqlCtx.Sentence =  "SELECT COUNT(DISTINCT ProductID) FROM QCStatus WHERE Line like @Line  AND Tp=@Tp";
                        sqlCtx.AddParam(_Metas.Qcstatus.fn_tp, new SqlParameter("@" + _Metas.Qcstatus.fn_tp, SqlDbType.VarChar));
                        sqlCtx.AddParam(_Metas.Qcstatus.fn_line, new SqlParameter("@" + _Metas.Qcstatus.fn_line, SqlDbType.VarChar));
                     
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = tp;
                sqlCtx.Param(_Metas.Qcstatus.fn_line).Value = line.Substring(0,1) + "%";

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        //ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = g.GetValue_Int32(sqlR, 0);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetPartNoAndLightNoFromWipBuffer(string family, string line)
        {
            try
            {
                DataTable ret = null;

                /// SELECT PartNo,LightNo,Sub 
                /// FROM [WipBuffer] where [Code] = @family
                /// UNION
                /// SELECT distinct PartNo,LightNo,Sub 
                /// FROM [KitLoc] a,[WipBuffer] b 
                /// where a.PdLine=b.Code 
                /// and b.Tp like a.PartType+'%'
                /// and a.Family=@family 
                /// and LEFT(a.PdLine,1)=LEFT(@line,1) 

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();
                        sqlCtx.Sentence = "SELECT {0},{1},{10} " +
                                            "FROM {2} WHERE {3}=@{3} AND ISNULL(Line,'')='' " +
                                            "UNION " +
                                            "SELECT DISTINCT {0},{1},{10}  " +
                                            "FROM {4} a, {2} b  " +
                                            "WHERE a.{5}=b.{3} " +
                                            "AND b.{6} LIKE a.{7}+'%' " +
                                            "AND a.{8}=@{8} " +
                                            "AND LEFT(a.{9},1)=LEFT(@{9},1) ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, _Schema.WipBuffer.fn_PartNo,
                                                                        _Schema.WipBuffer.fn_LightNo,
                                                                        typeof(_Schema.WipBuffer).Name,
                                                                        _Schema.WipBuffer.fn_Code,
                                                                        typeof(_Schema.KitLoc).Name,
                                                                        _Schema.KitLoc.fn_pdLine,
                                                                        _Schema.WipBuffer.fn_Tp,
                                                                        _Schema.KitLoc.fn_partType,
                                                                        _Schema.KitLoc.fn_family,
                                                                        _Schema.KitLoc.fn_pdLine,
                                                                        _Schema.WipBuffer.fn_Sub);

                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_Code, new SqlParameter("@" + _Schema.WipBuffer.fn_Code, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.KitLoc.fn_family, new SqlParameter("@" + _Schema.KitLoc.fn_family, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.KitLoc.fn_pdLine, new SqlParameter("@" + _Schema.KitLoc.fn_pdLine, SqlDbType.VarChar));
                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = family;
                sqlCtx.Params[_Schema.KitLoc.fn_family].Value = family;
                sqlCtx.Params[_Schema.KitLoc.fn_pdLine].Value = line;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetPartNoAndLightNoFromWipBufferWithLine(string family, string line)
        {
            try
            {
                DataTable ret = null;

                /// SELECT PartNo,LightNo,Sub 
                /// FROM [WipBuffer] where [Code] = @family AND Line=@Line 
                /// UNION
                /// SELECT distinct PartNo,LightNo,Sub 
                /// FROM [KitLoc] a,[WipBuffer] b 
                /// where a.PdLine=b.Code 
                /// and b.Tp like a.PartType+'%'
                /// and a.Family=@family 
                /// and LEFT(a.PdLine,1)=LEFT(@line,1)  

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();
                        sqlCtx.Sentence = "SELECT {0},{1},{11} " +
                                            "FROM {2} WHERE {3}=@{3} AND {9}=@{9} " +
                                            "UNION " +
                                            "SELECT DISTINCT {0},{1},{11} " +
                                            "FROM {4} a, {2} b  " +
                                            "WHERE a.{5}=b.{3} " +
                                            "AND b.{6} LIKE a.{7}+'%' " +
                                            "AND a.{8}=@{8} " +
                                            "AND LEFT(a.{10},1)=LEFT(@{10},1) ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, _Schema.WipBuffer.fn_PartNo,
                                                                        _Schema.WipBuffer.fn_LightNo,
                                                                        typeof(_Schema.WipBuffer).Name,
                                                                        _Schema.WipBuffer.fn_Code,
                                                                        typeof(_Schema.KitLoc).Name,
                                                                        _Schema.KitLoc.fn_pdLine,
                                                                        _Schema.WipBuffer.fn_Tp,
                                                                        _Schema.KitLoc.fn_partType,
                                                                        _Schema.KitLoc.fn_family,
                                                                        _Schema.WipBuffer.fn_line,
                                                                        _Schema.KitLoc.fn_pdLine,
                                                                        _Schema.WipBuffer.fn_Sub);

                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_Code, new SqlParameter("@" + _Schema.WipBuffer.fn_Code, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.KitLoc.fn_family, new SqlParameter("@" + _Schema.KitLoc.fn_family, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_line, new SqlParameter("@" + _Schema.WipBuffer.fn_line, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.KitLoc.fn_pdLine, new SqlParameter("@" + _Schema.KitLoc.fn_pdLine, SqlDbType.VarChar));
                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = family;
                sqlCtx.Params[_Schema.KitLoc.fn_family].Value = family;
                sqlCtx.Params[_Schema.WipBuffer.fn_line].Value = line;
                sqlCtx.Params[_Schema.KitLoc.fn_pdLine].Value = line;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetPartNoAndLightNoFromWipBufferForDoubleLine(string family, string line)
        {
            try
            {
                DataTable ret = null;

                /// SELECT PartNo,LightNo,Sub 
                /// FROM [WipBuffer] where [Code] = @family
                /// UNION
                /// SELECT distinct PartNo,LightNo,Sub 
                /// FROM [KitLoc] a,[WipBuffer] b 
                /// where a.PdLine=b.Code 
                /// and b.Tp like a.PartType+'%'
                /// and a.Family=@family 
                /// and b.Line=@Line 
                /// and LEFT(a.PdLine,1)=LEFT(@line,1)  

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();
                        sqlCtx.Sentence = "SELECT {0},{1},{11} " +
                                            "FROM {2} WHERE {3}=@{3} AND ISNULL(Line,'')='' " +
                                            "UNION " +
                                            "SELECT DISTINCT {0},{1},{11} " +
                                            "FROM {4} a, {2} b  " +
                                            "WHERE a.{5}=b.{3} " +
                                            "AND b.{6} LIKE a.{7}+'%' " +
                                            "AND a.{8}=@{8} " +
                                            "AND b.{9}=@{9} " +
                                            "AND LEFT(a.{10},1)=LEFT(@{10},1) ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, _Schema.WipBuffer.fn_PartNo,
                                                                        _Schema.WipBuffer.fn_LightNo,
                                                                        typeof(_Schema.WipBuffer).Name,
                                                                        _Schema.WipBuffer.fn_Code,
                                                                        typeof(_Schema.KitLoc).Name,
                                                                        _Schema.KitLoc.fn_pdLine,
                                                                        _Schema.WipBuffer.fn_Tp,
                                                                        _Schema.KitLoc.fn_partType,
                                                                        _Schema.KitLoc.fn_family,
                                                                        _Schema.WipBuffer.fn_line,
                                                                        _Schema.KitLoc.fn_pdLine,
                                                                        _Schema.WipBuffer.fn_Sub);

                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_Code, new SqlParameter("@" + _Schema.WipBuffer.fn_Code, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.KitLoc.fn_family, new SqlParameter("@" + _Schema.KitLoc.fn_family, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_line, new SqlParameter("@" + _Schema.WipBuffer.fn_line, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.KitLoc.fn_pdLine, new SqlParameter("@" + _Schema.KitLoc.fn_pdLine, SqlDbType.VarChar));
                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = family;
                sqlCtx.Params[_Schema.KitLoc.fn_family].Value = family;
                sqlCtx.Params[_Schema.WipBuffer.fn_line].Value = line;
                sqlCtx.Params[_Schema.KitLoc.fn_pdLine].Value = line;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetPartNoAndLightNoFromWipBufferWithLineForDoubleLine(string family, string line)
        {
            try
            {
                DataTable ret = null;

                /// SELECT PartNo,LightNo,Sub 
                /// FROM [WipBuffer] where [Code] = @family AND Line=@Line 
                /// UNION
                /// SELECT distinct PartNo,LightNo,Sub  
                /// FROM [KitLoc] a,[WipBuffer] b 
                /// where a.PdLine=b.Code 
                /// and b.Tp like a.PartType+'%' 
                /// and a.Family= @family 
                /// and b.Line=@Line 
                /// and LEFT(a.PdLine,1)=LEFT(@line,1)  

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();
                        sqlCtx.Sentence =   "SELECT {0},{1},{11} " +
                                            "FROM {2} WHERE {3}=@{3} AND {9}=@{9} " +
                                            "UNION " +
                                            "SELECT DISTINCT {0},{1},{11}  " +
                                            "FROM {4} a, {2} b  " +
                                            "WHERE a.{5}=b.{3} " +
                                            "AND b.{6} LIKE a.{7}+'%' " +
                                            "AND a.{8}=@{8} " +
                                            "AND b.{9}=@{9} " +
                                            "AND LEFT(a.{10},1)=LEFT(@{10},1) ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, _Schema.WipBuffer.fn_PartNo,
                                                                        _Schema.WipBuffer.fn_LightNo,
                                                                        typeof(_Schema.WipBuffer).Name,
                                                                        _Schema.WipBuffer.fn_Code,
                                                                        typeof(_Schema.KitLoc).Name,
                                                                        _Schema.KitLoc.fn_pdLine,
                                                                        _Schema.WipBuffer.fn_Tp,
                                                                        _Schema.KitLoc.fn_partType,
                                                                        _Schema.KitLoc.fn_family,
                                                                        _Schema.WipBuffer.fn_line,
                                                                        _Schema.KitLoc.fn_pdLine,
                                                                        _Schema.WipBuffer.fn_Sub);

                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_Code, new SqlParameter("@" + _Schema.WipBuffer.fn_Code, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.KitLoc.fn_family, new SqlParameter("@" + _Schema.KitLoc.fn_family, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_line, new SqlParameter("@" + _Schema.WipBuffer.fn_line, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.KitLoc.fn_pdLine, new SqlParameter("@" + _Schema.KitLoc.fn_pdLine, SqlDbType.VarChar));
                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = family;
                sqlCtx.Params[_Schema.KitLoc.fn_family].Value = family;
                sqlCtx.Params[_Schema.WipBuffer.fn_line].Value = line;
                sqlCtx.Params[_Schema.KitLoc.fn_pdLine].Value = line;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckExistLightNoFromKitLocAndWipBuffer(string family, string line)
        {
            try
            {
                bool ret = false;

                /// SELECT distinct PartNo,LightNo  
                /// FROM [KitLoc] a,[WipBuffer] b 
                /// where a.PdLine=b.Code 
                /// and a.Family= @family 
                /// and b.Tp like a.PartType+'%' 
                /// and b.Line=@Line 
                /// and LEFT(a.PdLine,1)=LEFT(@line,1)  

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        sqlCtx = new _Schema.SQLContext();
                        sqlCtx.Sentence =   "SELECT COUNT({0}{1}) " +
                                            "FROM {4} a, {2} b  " +
                                            "WHERE a.{5}=b.{3} " +
                                            "AND b.{6} LIKE a.{7}+'%' " +
                                            "AND a.{8}=@{8} " +
                                            "AND b.{9}=@{9} " +
                                            "AND LEFT(a.{10},1)=LEFT(@{10},1) ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, "1", //_Schema.WipBuffer.fn_PartNo,
                                                                        "",//_Schema.WipBuffer.fn_LightNo,
                                                                        typeof(_Schema.WipBuffer).Name,
                                                                        _Schema.WipBuffer.fn_Code,
                                                                        typeof(_Schema.KitLoc).Name,
                                                                        _Schema.KitLoc.fn_pdLine,
                                                                        _Schema.WipBuffer.fn_Tp,
                                                                        _Schema.KitLoc.fn_partType,
                                                                        _Schema.KitLoc.fn_family,
                                                                        _Schema.WipBuffer.fn_line,
                                                                        _Schema.KitLoc.fn_pdLine);

                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_Code, new SqlParameter("@" + _Schema.WipBuffer.fn_Code, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.KitLoc.fn_family, new SqlParameter("@" + _Schema.KitLoc.fn_family, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.WipBuffer.fn_line, new SqlParameter("@" + _Schema.WipBuffer.fn_line, SqlDbType.VarChar));
                        sqlCtx.Params.Add(_Schema.KitLoc.fn_pdLine, new SqlParameter("@" + _Schema.KitLoc.fn_pdLine, SqlDbType.VarChar));
                        _Schema.Func.InsertIntoCache(MethodBase.GetCurrentMethod().MetadataToken, sqlCtx);
                    }
                }
                sqlCtx.Params[_Schema.WipBuffer.fn_Code].Value = family;
                sqlCtx.Params[_Schema.KitLoc.fn_family].Value = family;
                sqlCtx.Params[_Schema.WipBuffer.fn_line].Value = line;
                sqlCtx.Params[_Schema.KitLoc.fn_pdLine].Value = line;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                         int cnt = g.GetValue_Int32(sqlR, 0);
                         ret = cnt > 0 ? true : false;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<RepairInfo> GetOQCProdRepairList(string prodId, int status, string type)
        {
            try
            {
                IList<RepairInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        ProductRepair_DefectInfo cond = new ProductRepair_DefectInfo();
                        cond.productRepairID = status;

                        ProductRepair_DefectInfo cond2 = new ProductRepair_DefectInfo();
                        cond2.defectCode = type;

                        sqlCtx = FuncNew.GetConditionedSelect<ProductRepair_DefectInfo>(tk, null, null, new ConditionCollection<ProductRepair_DefectInfo>(
                            new AnyCondition<ProductRepair_DefectInfo>(cond, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}=@{3} AND {4}={5}) ", "{0}", ProductRepair.fn_id, ToolsNew.GetTableName(typeof(ProductRepair)), ProductRepair.fn_productID, ProductRepair.fn_status, "{1}")),
                            new AnyCondition<ProductRepair_DefectInfo>(cond2, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", DefectCode.fn_defect, ToolsNew.GetTableName(typeof(DefectCode)), DefectCode.fn_type, "{1}"))));

                        sqlCtx.AddParam(ProductRepair.fn_productID, new SqlParameter("@" + _Metas.ProductRepair.fn_productID, ToolsNew.GetDBFieldType<_Metas.ProductRepair>(_Metas.ProductRepair.fn_productID)));
                    }
                }
                sqlCtx.Param(ProductRepair.fn_productID).Value = prodId;
                sqlCtx.Param(g.DecAny(ProductRepair_DefectInfo.fn_productRepairID)).Value = status;
                sqlCtx.Param(g.DecAny(ProductRepair_DefectInfo.fn_defectCode)).Value = type;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<RepairInfo>();
                        while(sqlR.Read())
                        {
                            RepairInfo item = null;
                            item = FuncNew.SetFieldFromColumnWithoutReadReader<_Metas.ProductRepair_DefectInfo, RepairInfo>(item, sqlR, sqlCtx);
                            item.repairID = g.GetValue_Int32(sqlR, sqlCtx.Indexes(ProductRepair_DefectInfo.fn_productRepairID)).ToString();
                            item.id = g.GetValue_Int32(sqlR, sqlCtx.Indexes(ProductRepair_DefectInfo.fn_id)).ToString();
                            item.isManual = g.GetValue_Int32(sqlR, sqlCtx.Indexes(ProductRepair_DefectInfo.fn_isManual)).ToString();
                            ret.Add(item);  
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProduct(string productId, string uEditor)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.productID = productId;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.Product, _Metas.UnpackProduct>(tk,
                            new string[][]{
                                new string[]{_Metas.Product.fn_cartonSN,_Metas.UnpackProduct.fn_cartonSN},
                                new string[]{_Metas.Product.fn_cartonWeight,_Metas.UnpackProduct.fn_cartonWeight},
                                new string[]{_Metas.Product.fn_cdt,_Metas.UnpackProduct.fn_cdt},
                                new string[]{_Metas.Product.fn_custsn,_Metas.UnpackProduct.fn_custsn},
                                new string[]{_Metas.Product.fn_cvsn,_Metas.UnpackProduct.fn_cvsn},
                                new string[]{_Metas.Product.fn_deliveryNo,_Metas.UnpackProduct.fn_deliveryNo},
                                new string[]{_Metas.Product.fn_ecr,_Metas.UnpackProduct.fn_ecr},
                                new string[]{_Metas.Product.fn_mac,_Metas.UnpackProduct.fn_mac},
                                new string[]{_Metas.Product.fn_mbecr,_Metas.UnpackProduct.fn_mbecr},
                                new string[]{_Metas.Product.fn_mo,_Metas.UnpackProduct.fn_mo},
                                new string[]{_Metas.Product.fn_model,_Metas.UnpackProduct.fn_model},
                                new string[]{_Metas.Product.fn_ooaid,_Metas.UnpackProduct.fn_ooaid},
                                new string[]{_Metas.Product.fn_palletNo,_Metas.UnpackProduct.fn_palletNo},
                                new string[]{_Metas.Product.fn_pcbid,_Metas.UnpackProduct.fn_pcbid},
                                new string[]{_Metas.Product.fn_pcbmodel,_Metas.UnpackProduct.fn_pcbmodel},
                                new string[]{_Metas.Product.fn_pizzaID,_Metas.UnpackProduct.fn_pizzaID},
                                new string[]{_Metas.Product.fn_productID,_Metas.UnpackProduct.fn_productID},
                                new string[]{_Metas.Product.fn_prsn,_Metas.UnpackProduct.fn_prsn},
                                new string[]{_Metas.Product.fn_state,_Metas.UnpackProduct.fn_state},
                                new string[]{_Metas.Product.fn_udt,_Metas.UnpackProduct.fn_udt},
                                new string[]{_Metas.Product.fn_unitWeight,_Metas.UnpackProduct.fn_unitWeight},
                                new string[]{_Metas.Product.fn_uuid,_Metas.UnpackProduct.fn_uuid},
                                new string[]{string.Format("@{0}",_Metas.UnpackProduct.fn_ueditor), _Metas.UnpackProduct.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProduct.fn_updt}
                            },
                            new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond)));
                        sqlCtx.AddParam(_Metas.UnpackProduct.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProduct.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProduct>(_Metas.UnpackProduct.fn_ueditor)));
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.UnpackProduct.fn_ueditor).Value = uEditor;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductStatus(string productId, string uEditor)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductStatus cond = new _Metas.ProductStatus();
                        cond.productID = productId;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.ProductStatus, _Metas.UnpackProductStatus>(tk,
                            new string[][]{
                                new string[]{_Metas.ProductStatus.fn_cdt,_Metas.UnpackProductStatus.fn_cdt},
                                new string[]{_Metas.ProductStatus.fn_editor,_Metas.UnpackProductStatus.fn_editor},
                                new string[]{_Metas.ProductStatus.fn_line,_Metas.UnpackProductStatus.fn_line},
                                new string[]{_Metas.ProductStatus.fn_productID,_Metas.UnpackProductStatus.fn_productID},
                                new string[]{_Metas.ProductStatus.fn_reworkCode,_Metas.UnpackProductStatus.fn_reworkCode},
                                new string[]{_Metas.ProductStatus.fn_station,_Metas.UnpackProductStatus.fn_station},
                                new string[]{_Metas.ProductStatus.fn_status,_Metas.UnpackProductStatus.fn_status},
                                new string[]{_Metas.ProductStatus.fn_testFailCount,_Metas.UnpackProductStatus.fn_testFailCount},
                                new string[]{_Metas.ProductStatus.fn_udt,_Metas.UnpackProductStatus.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProductStatus.fn_ueditor), _Metas.UnpackProductStatus.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProductStatus.fn_updt}
                            },
                            new ConditionCollection<_Metas.ProductStatus>(new EqualCondition<_Metas.ProductStatus>(cond)));
                        sqlCtx.AddParam(_Metas.UnpackProductStatus.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProductStatus.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProductStatus>(_Metas.UnpackProductStatus.fn_ueditor)));
                    }
                }
                sqlCtx.Param(_Metas.ProductStatus.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.UnpackProductStatus.fn_ueditor).Value = uEditor;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductPart(string productId, string uEditor, string partType, string descrLike)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = productId;
                        _Metas.Product_Part cond2 = new _Metas.Product_Part();
                        cond2.partNo = partType;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.Product_Part, _Metas.UnpackProduct_Part>(tk,
                            new string[][]{
                                new string[]{_Metas.Product_Part.fn_bomNodeType,_Metas.UnpackProduct_Part.fn_bomNodeType},
                                new string[]{_Metas.Product_Part.fn_cdt,_Metas.UnpackProduct_Part.fn_cdt},
                                new string[]{_Metas.Product_Part.fn_checkItemType,_Metas.UnpackProduct_Part.fn_checkItemType},
                                new string[]{_Metas.Product_Part.fn_custmerPn,_Metas.UnpackProduct_Part.fn_custmerPn},
                                new string[]{_Metas.Product_Part.fn_editor,_Metas.UnpackProduct_Part.fn_editor},
                                new string[]{_Metas.Product_Part.fn_id,_Metas.UnpackProduct_Part.fn_product_PartID},
                                new string[]{_Metas.Product_Part.fn_iecpn,_Metas.UnpackProduct_Part.fn_iecpn},
                                new string[]{_Metas.Product_Part.fn_partNo,_Metas.UnpackProduct_Part.fn_partNo},
                                new string[]{_Metas.Product_Part.fn_partSn,_Metas.UnpackProduct_Part.fn_partSn},
                                new string[]{_Metas.Product_Part.fn_partType,_Metas.UnpackProduct_Part.fn_partType},
                                new string[]{_Metas.Product_Part.fn_productID,_Metas.UnpackProduct_Part.fn_productID},
                                new string[]{_Metas.Product_Part.fn_station,_Metas.UnpackProduct_Part.fn_station},
                                new string[]{_Metas.Product_Part.fn_udt,_Metas.UnpackProduct_Part.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProduct_Part.fn_ueditor), _Metas.UnpackProduct_Part.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProduct_Part.fn_updt}
                            },
                            new ConditionCollection<_Metas.Product_Part>(
                                new EqualCondition<_Metas.Product_Part>(cond),
                                new AnyCondition<_Metas.Product_Part>(cond2, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4} AND {5} LIKE @{5} )", "{0}", _Metas.Part_NEW.fn_partNo, ToolsNew.GetTableName(typeof(_Metas.Part_NEW)), _Metas.Part_NEW.fn_partType, "{1}", _Metas.Part_NEW.fn_descr))));
                        sqlCtx.AddParam(_Metas.UnpackProduct_Part.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProduct_Part.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProduct_Part>(_Metas.UnpackProduct_Part.fn_ueditor)));
                        sqlCtx.AddParam(_Metas.Part_NEW.fn_descr, new SqlParameter(string.Format("@{0}", _Metas.Part_NEW.fn_descr), ToolsNew.GetDBFieldType<_Metas.Part_NEW>(_Metas.Part_NEW.fn_descr)));
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.UnpackProductStatus.fn_ueditor).Value = uEditor;
                sqlCtx.Param(g.DecAny(_Metas.Product_Part.fn_partNo)).Value = partType;
                sqlCtx.Param(_Metas.Part_NEW.fn_descr).Value = descrLike;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductPart(string[] prodIds, ProductPart otherCondition, string uEditor)
        {    
            try
            {
                if (prodIds != null)
                {
                    var sqlCtx = ComposeForBackUpProductPart("prodId", otherCondition);
                    sqlCtx.Param(_Metas.UnpackProductStatus.fn_ueditor).Value = uEditor;
                    foreach (string prodId in prodIds)
                    {
                        sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = prodId;
                        _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
                    }
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        private SQLContextNew ComposeForBackUpProductPart(string prodId, ProductPart otherCondition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                        Product_Part cond = FuncNew.SetColumnFromField<Product_Part, ProductPart>(otherCondition);
                        cond.productID = prodId;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.Product_Part, _Metas.UnpackProduct_Part>(
                            new string[][]{
                                new string[]{_Metas.Product_Part.fn_bomNodeType,_Metas.UnpackProduct_Part.fn_bomNodeType},
                                new string[]{_Metas.Product_Part.fn_cdt,_Metas.UnpackProduct_Part.fn_cdt},
                                new string[]{_Metas.Product_Part.fn_checkItemType,_Metas.UnpackProduct_Part.fn_checkItemType},
                                new string[]{_Metas.Product_Part.fn_custmerPn,_Metas.UnpackProduct_Part.fn_custmerPn},
                                new string[]{_Metas.Product_Part.fn_editor,_Metas.UnpackProduct_Part.fn_editor},
                                new string[]{_Metas.Product_Part.fn_id,_Metas.UnpackProduct_Part.fn_product_PartID},
                                new string[]{_Metas.Product_Part.fn_iecpn,_Metas.UnpackProduct_Part.fn_iecpn},
                                new string[]{_Metas.Product_Part.fn_partNo,_Metas.UnpackProduct_Part.fn_partNo},
                                new string[]{_Metas.Product_Part.fn_partSn,_Metas.UnpackProduct_Part.fn_partSn},
                                new string[]{_Metas.Product_Part.fn_partType,_Metas.UnpackProduct_Part.fn_partType},
                                new string[]{_Metas.Product_Part.fn_productID,_Metas.UnpackProduct_Part.fn_productID},
                                new string[]{_Metas.Product_Part.fn_station,_Metas.UnpackProduct_Part.fn_station},
                                new string[]{_Metas.Product_Part.fn_udt,_Metas.UnpackProduct_Part.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProduct_Part.fn_ueditor), _Metas.UnpackProduct_Part.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProduct_Part.fn_updt}
                            },
                            new ConditionCollection<_Metas.Product_Part>(
                                new EqualCondition<_Metas.Product_Part>(cond)), _Schema.SqlHelper.DB_FA);
                        sqlCtx.AddParam(_Metas.UnpackProduct_Part.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProduct_Part.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProduct_Part>(_Metas.UnpackProduct_Part.fn_ueditor)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<Product_Part, ProductPart>(sqlCtx, otherCondition);
                return sqlCtx;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void RemoveProductPartByPartTypeAndDescrLike(string productId, string partType, string descrLike)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = productId;
                        _Metas.Product_Part cond2 = new _Metas.Product_Part();
                        cond2.partNo = partType;
                        sqlCtx = FuncNew.GetConditionedDelete<_Metas.Product_Part>(tk, new ConditionCollection<_Metas.Product_Part>(
                            new EqualCondition<_Metas.Product_Part>(cond),
                               new AnyCondition<_Metas.Product_Part>(cond2, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4} AND {5} LIKE @{5} )", "{0}", _Metas.Part_NEW.fn_partNo, ToolsNew.GetTableName(typeof(_Metas.Part_NEW)), _Metas.Part_NEW.fn_partType, "{1}", _Metas.Part_NEW.fn_descr))));
                        sqlCtx.AddParam(_Metas.Part_NEW.fn_descr, new SqlParameter(string.Format("@{0}", _Metas.Part_NEW.fn_descr), ToolsNew.GetDBFieldType<_Metas.Part_NEW>(_Metas.Part_NEW.fn_descr)));
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = productId;
                sqlCtx.Param(g.DecAny(_Metas.Product_Part.fn_partNo)).Value = partType;
                sqlCtx.Param(_Metas.Part_NEW.fn_descr).Value = descrLike;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductPart(string productId, string uEditor)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = productId;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.Product_Part, _Metas.UnpackProduct_Part>(tk,
                            new string[][]{
                                new string[]{_Metas.Product_Part.fn_bomNodeType,_Metas.UnpackProduct_Part.fn_bomNodeType},
                                new string[]{_Metas.Product_Part.fn_cdt,_Metas.UnpackProduct_Part.fn_cdt},
                                new string[]{_Metas.Product_Part.fn_checkItemType,_Metas.UnpackProduct_Part.fn_checkItemType},
                                new string[]{_Metas.Product_Part.fn_custmerPn,_Metas.UnpackProduct_Part.fn_custmerPn},
                                new string[]{_Metas.Product_Part.fn_editor,_Metas.UnpackProduct_Part.fn_editor},
                                new string[]{_Metas.Product_Part.fn_id,_Metas.UnpackProduct_Part.fn_product_PartID},
                                new string[]{_Metas.Product_Part.fn_iecpn,_Metas.UnpackProduct_Part.fn_iecpn},
                                new string[]{_Metas.Product_Part.fn_partNo,_Metas.UnpackProduct_Part.fn_partNo},
                                new string[]{_Metas.Product_Part.fn_partSn,_Metas.UnpackProduct_Part.fn_partSn},
                                new string[]{_Metas.Product_Part.fn_partType,_Metas.UnpackProduct_Part.fn_partType},
                                new string[]{_Metas.Product_Part.fn_productID,_Metas.UnpackProduct_Part.fn_productID},
                                new string[]{_Metas.Product_Part.fn_station,_Metas.UnpackProduct_Part.fn_station},
                                new string[]{_Metas.Product_Part.fn_udt,_Metas.UnpackProduct_Part.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProduct_Part.fn_ueditor), _Metas.UnpackProduct_Part.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProduct_Part.fn_updt}
                            },
                            new ConditionCollection<_Metas.Product_Part>(
                                new EqualCondition<_Metas.Product_Part>(cond)));
                        sqlCtx.AddParam(_Metas.UnpackProduct_Part.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProduct_Part.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProduct_Part>(_Metas.UnpackProduct_Part.fn_ueditor)));
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.UnpackProductStatus.fn_ueditor).Value = uEditor;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductInfo(string productId, string uEditor, string infoTypeName)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductInfo cond = new _Metas.ProductInfo();
                        cond.productID = productId;
                        cond.infoType = infoTypeName;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.ProductInfo, _Metas.UnpackProductInfo>(tk,
                            new string[][]{
                                new string[]{_Metas.ProductInfo.fn_cdt,_Metas.UnpackProductInfo.fn_cdt},
                                new string[]{_Metas.ProductInfo.fn_editor,_Metas.UnpackProductInfo.fn_editor},
                                new string[]{_Metas.ProductInfo.fn_id,_Metas.UnpackProductInfo.fn_productInfoID},
                                new string[]{_Metas.ProductInfo.fn_infoType,_Metas.UnpackProductInfo.fn_infoType},
                                new string[]{_Metas.ProductInfo.fn_infoValue,_Metas.UnpackProductInfo.fn_infoValue},
                                new string[]{_Metas.ProductInfo.fn_productID,_Metas.UnpackProductInfo.fn_productID},
                                new string[]{_Metas.ProductInfo.fn_udt,_Metas.UnpackProductInfo.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProductInfo.fn_ueditor), _Metas.UnpackProductInfo.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProductInfo.fn_updt}
                            },
                            new ConditionCollection<_Metas.ProductInfo>(new EqualCondition<_Metas.ProductInfo>(cond)));
                        sqlCtx.AddParam(_Metas.UnpackProductInfo.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProductInfo.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProductInfo>(_Metas.UnpackProductInfo.fn_ueditor)));
                    }
                }
                sqlCtx.Param(_Metas.ProductInfo.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.ProductInfo.fn_infoType).Value = infoTypeName;
                sqlCtx.Param(_Metas.UnpackProductInfo.fn_ueditor).Value = uEditor;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductInfo(string productId, string uEditor)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductInfo cond = new _Metas.ProductInfo();
                        cond.productID = productId;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.ProductInfo, _Metas.UnpackProductInfo>(tk,
                            new string[][]{
                                new string[]{_Metas.ProductInfo.fn_cdt,_Metas.UnpackProductInfo.fn_cdt},
                                new string[]{_Metas.ProductInfo.fn_editor,_Metas.UnpackProductInfo.fn_editor},
                                new string[]{_Metas.ProductInfo.fn_id,_Metas.UnpackProductInfo.fn_productInfoID},
                                new string[]{_Metas.ProductInfo.fn_infoType,_Metas.UnpackProductInfo.fn_infoType},
                                new string[]{_Metas.ProductInfo.fn_infoValue,_Metas.UnpackProductInfo.fn_infoValue},
                                new string[]{_Metas.ProductInfo.fn_productID,_Metas.UnpackProductInfo.fn_productID},
                                new string[]{_Metas.ProductInfo.fn_udt,_Metas.UnpackProductInfo.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProductInfo.fn_ueditor), _Metas.UnpackProductInfo.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProductInfo.fn_updt}
                            },
                            new ConditionCollection<_Metas.ProductInfo>(new EqualCondition<_Metas.ProductInfo>(cond)));
                        sqlCtx.AddParam(_Metas.UnpackProductInfo.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProductInfo.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProductInfo>(_Metas.UnpackProductInfo.fn_ueditor)));
                    }
                }
                sqlCtx.Param(_Metas.ProductInfo.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.UnpackProductInfo.fn_ueditor).Value = uEditor;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IMES.FisObject.FA.Product.ProductLog GetLatestLogByWcAndStatus(string productId, string station, int status)
        {
            try
            {
                IMES.FisObject.FA.Product.ProductLog ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductLog cond = new _Metas.ProductLog();
                        cond.productID = productId;
                        cond.station = station;
                        cond.status = status;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductLog>(tk, "TOP 1", null, new ConditionCollection<_Metas.ProductLog>(new EqualCondition<_Metas.ProductLog>(cond)), _Metas.ProductLog.fn_cdt + FuncNew.DescendOrder);
                    }
                }
                sqlCtx.Param(_Metas.ProductLog.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.ProductLog.fn_station).Value = station;
                sqlCtx.Param(_Metas.ProductLog.fn_status).Value = status;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.ProductLog, IMES.FisObject.FA.Product.ProductLog>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }  
        }

        public void BackUpProductByDn(string dn, string uEditor)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.deliveryNo = dn;
                        _Metas.Product cond2 = new _Metas.Product();
                        cond2.model = "[LIKE]";
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.Product, _Metas.UnpackProduct>(tk,
                            new string[][]{
                                new string[]{_Metas.Product.fn_cartonSN,_Metas.UnpackProduct.fn_cartonSN},
                                new string[]{_Metas.Product.fn_cartonWeight,_Metas.UnpackProduct.fn_cartonWeight},
                                new string[]{_Metas.Product.fn_cdt,_Metas.UnpackProduct.fn_cdt},
                                new string[]{_Metas.Product.fn_custsn,_Metas.UnpackProduct.fn_custsn},
                                new string[]{_Metas.Product.fn_cvsn,_Metas.UnpackProduct.fn_cvsn},
                                new string[]{_Metas.Product.fn_deliveryNo,_Metas.UnpackProduct.fn_deliveryNo},
                                new string[]{_Metas.Product.fn_ecr,_Metas.UnpackProduct.fn_ecr},
                                new string[]{_Metas.Product.fn_mac,_Metas.UnpackProduct.fn_mac},
                                new string[]{_Metas.Product.fn_mbecr,_Metas.UnpackProduct.fn_mbecr},
                                new string[]{_Metas.Product.fn_mo,_Metas.UnpackProduct.fn_mo},
                                new string[]{_Metas.Product.fn_model,_Metas.UnpackProduct.fn_model},
                                new string[]{_Metas.Product.fn_ooaid,_Metas.UnpackProduct.fn_ooaid},
                                new string[]{_Metas.Product.fn_palletNo,_Metas.UnpackProduct.fn_palletNo},
                                new string[]{_Metas.Product.fn_pcbid,_Metas.UnpackProduct.fn_pcbid},
                                new string[]{_Metas.Product.fn_pcbmodel,_Metas.UnpackProduct.fn_pcbmodel},
                                new string[]{_Metas.Product.fn_pizzaID,_Metas.UnpackProduct.fn_pizzaID},
                                new string[]{_Metas.Product.fn_productID,_Metas.UnpackProduct.fn_productID},
                                new string[]{_Metas.Product.fn_prsn,_Metas.UnpackProduct.fn_prsn},
                                new string[]{_Metas.Product.fn_state,_Metas.UnpackProduct.fn_state},
                                new string[]{_Metas.Product.fn_udt,_Metas.UnpackProduct.fn_udt},
                                new string[]{_Metas.Product.fn_unitWeight,_Metas.UnpackProduct.fn_unitWeight},
                                new string[]{_Metas.Product.fn_uuid,_Metas.UnpackProduct.fn_uuid},
                                new string[]{string.Format("@{0}",_Metas.UnpackProduct.fn_ueditor), _Metas.UnpackProduct.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProduct.fn_updt}
                            },
                            //new ConditionCollection<_Metas.Product>(
                            //    new EqualCondition<_Metas.Product>(cond),
                            //    new AnySoloCondition<_Metas.Product>(cond2, "({0} LIKE 'PC%' OR {0} LIKE 'QC%')")));
                                new ConditionCollection<_Metas.Product>(
                                new EqualCondition<_Metas.Product>(cond)));
                        sqlCtx.AddParam(_Metas.UnpackProduct.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProduct.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProduct>(_Metas.UnpackProduct.fn_ueditor)));
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_deliveryNo).Value = dn;
                sqlCtx.Param(_Metas.UnpackProduct.fn_ueditor).Value = uEditor;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductStatusByDn(string dn, string uEditor)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductStatus cond = new _Metas.ProductStatus();
                        cond.productID = dn;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.ProductStatus, _Metas.UnpackProductStatus>(tk,
                            new string[][]{
                                new string[]{_Metas.ProductStatus.fn_cdt,_Metas.UnpackProductStatus.fn_cdt},
                                new string[]{_Metas.ProductStatus.fn_editor,_Metas.UnpackProductStatus.fn_editor},
                                new string[]{_Metas.ProductStatus.fn_line,_Metas.UnpackProductStatus.fn_line},
                                new string[]{_Metas.ProductStatus.fn_productID,_Metas.UnpackProductStatus.fn_productID},
                                new string[]{_Metas.ProductStatus.fn_reworkCode,_Metas.UnpackProductStatus.fn_reworkCode},
                                new string[]{_Metas.ProductStatus.fn_station,_Metas.UnpackProductStatus.fn_station},
                                new string[]{_Metas.ProductStatus.fn_status,_Metas.UnpackProductStatus.fn_status},
                                new string[]{_Metas.ProductStatus.fn_testFailCount,_Metas.UnpackProductStatus.fn_testFailCount},
                                new string[]{_Metas.ProductStatus.fn_udt,_Metas.UnpackProductStatus.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProductStatus.fn_ueditor), _Metas.UnpackProductStatus.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProductStatus.fn_updt}
                            },
                            new ConditionCollection<_Metas.ProductStatus>(
                               // new AnyCondition<_Metas.ProductStatus>(cond, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4} AND ({5} LIKE 'PC%' OR {5} LIKE 'QC%'))", "{0}", _Metas.Product.fn_productID, ToolsNew.GetTableName(typeof(_Metas.Product)), _Metas.Product.fn_deliveryNo, "{1}", _Metas.Product.fn_model))));
                                new AnyCondition<_Metas.ProductStatus>(cond, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", _Metas.Product.fn_productID, ToolsNew.GetTableName(typeof(_Metas.Product)), _Metas.Product.fn_deliveryNo, "{1}", _Metas.Product.fn_model))));
                        
                               sqlCtx.AddParam(_Metas.UnpackProductStatus.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProductStatus.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProductStatus>(_Metas.UnpackProductStatus.fn_ueditor)));
                    }
                }
                sqlCtx.Param(g.DecAny(_Metas.ProductStatus.fn_productID)).Value = dn;
                sqlCtx.Param(_Metas.UnpackProductStatus.fn_ueditor).Value = uEditor;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductPartByDn(string dn, string uEditor)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = dn;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.Product_Part, _Metas.UnpackProduct_Part>(tk,
                            new string[][]{
                                new string[]{_Metas.Product_Part.fn_bomNodeType,_Metas.UnpackProduct_Part.fn_bomNodeType},
                                new string[]{_Metas.Product_Part.fn_cdt,_Metas.UnpackProduct_Part.fn_cdt},
                                new string[]{_Metas.Product_Part.fn_checkItemType,_Metas.UnpackProduct_Part.fn_checkItemType},
                                new string[]{_Metas.Product_Part.fn_custmerPn,_Metas.UnpackProduct_Part.fn_custmerPn},
                                new string[]{_Metas.Product_Part.fn_editor,_Metas.UnpackProduct_Part.fn_editor},
                                new string[]{_Metas.Product_Part.fn_id,_Metas.UnpackProduct_Part.fn_product_PartID},
                                new string[]{_Metas.Product_Part.fn_iecpn,_Metas.UnpackProduct_Part.fn_iecpn},
                                new string[]{_Metas.Product_Part.fn_partNo,_Metas.UnpackProduct_Part.fn_partNo},
                                new string[]{_Metas.Product_Part.fn_partSn,_Metas.UnpackProduct_Part.fn_partSn},
                                new string[]{_Metas.Product_Part.fn_partType,_Metas.UnpackProduct_Part.fn_partType},
                                new string[]{_Metas.Product_Part.fn_productID,_Metas.UnpackProduct_Part.fn_productID},
                                new string[]{_Metas.Product_Part.fn_station,_Metas.UnpackProduct_Part.fn_station},
                                new string[]{_Metas.Product_Part.fn_udt,_Metas.UnpackProduct_Part.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProduct_Part.fn_ueditor), _Metas.UnpackProduct_Part.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProduct_Part.fn_updt}
                            },
                            new ConditionCollection<_Metas.Product_Part>(
                       //         new AnyCondition<_Metas.Product_Part>(cond, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4} AND ({5} LIKE 'PC%' OR {5} LIKE 'QC%'))", "{0}", _Metas.Product.fn_productID, ToolsNew.GetTableName(typeof(_Metas.Product)), _Metas.Product.fn_deliveryNo, "{1}", _Metas.Product.fn_model))));
                                new AnyCondition<_Metas.Product_Part>(cond, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", _Metas.Product.fn_productID, ToolsNew.GetTableName(typeof(_Metas.Product)), _Metas.Product.fn_deliveryNo, "{1}", _Metas.Product.fn_model))));
                  
                        sqlCtx.AddParam(_Metas.UnpackProduct_Part.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProduct_Part.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProduct_Part>(_Metas.UnpackProduct_Part.fn_ueditor)));
                    }
                }
                sqlCtx.Param(g.DecAny(_Metas.Product_Part.fn_productID)).Value = dn;
                sqlCtx.Param(_Metas.UnpackProductStatus.fn_ueditor).Value = uEditor;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductPartByDn(string uEditor, ProductPart eqCondition, ProductPart neqCondition)
        {
            try
            {
                if (eqCondition == null)
                    eqCondition = new ProductPart();
                if (neqCondition == null)
                    neqCondition = new ProductPart();

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                _Metas.Product_Part cond = FuncNew.SetColumnFromField<_Metas.Product_Part, ProductPart>(eqCondition);
                _Metas.Product_Part cond2 = FuncNew.SetColumnFromField<_Metas.Product_Part, ProductPart>(neqCondition);

                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.Product_Part, _Metas.UnpackProduct_Part>(//tk,
                            new string[][]{
                                new string[]{_Metas.Product_Part.fn_bomNodeType,_Metas.UnpackProduct_Part.fn_bomNodeType},
                                new string[]{_Metas.Product_Part.fn_cdt,_Metas.UnpackProduct_Part.fn_cdt},
                                new string[]{_Metas.Product_Part.fn_checkItemType,_Metas.UnpackProduct_Part.fn_checkItemType},
                                new string[]{_Metas.Product_Part.fn_custmerPn,_Metas.UnpackProduct_Part.fn_custmerPn},
                                new string[]{_Metas.Product_Part.fn_editor,_Metas.UnpackProduct_Part.fn_editor},
                                new string[]{_Metas.Product_Part.fn_id,_Metas.UnpackProduct_Part.fn_product_PartID},
                                new string[]{_Metas.Product_Part.fn_iecpn,_Metas.UnpackProduct_Part.fn_iecpn},
                                new string[]{_Metas.Product_Part.fn_partNo,_Metas.UnpackProduct_Part.fn_partNo},
                                new string[]{_Metas.Product_Part.fn_partSn,_Metas.UnpackProduct_Part.fn_partSn},
                                new string[]{_Metas.Product_Part.fn_partType,_Metas.UnpackProduct_Part.fn_partType},
                                new string[]{_Metas.Product_Part.fn_productID,_Metas.UnpackProduct_Part.fn_productID},
                                new string[]{_Metas.Product_Part.fn_station,_Metas.UnpackProduct_Part.fn_station},
                                new string[]{_Metas.Product_Part.fn_udt,_Metas.UnpackProduct_Part.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProduct_Part.fn_ueditor), _Metas.UnpackProduct_Part.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProduct_Part.fn_updt}
                            },
                            new ConditionCollection<_Metas.Product_Part>(
                                new EqualCondition<_Metas.Product_Part>(cond),new NotEqualCondition<_Metas.Product_Part>(cond2)));
                        sqlCtx.AddParam(_Metas.UnpackProduct_Part.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProduct_Part.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProduct_Part>(_Metas.UnpackProduct_Part.fn_ueditor)));
                        var sqlCtx2 = FuncNew.GetConditionedSelect<_Metas.Product_Part>(null, new string[] { _Metas.Product_Part.fn_id }, new ConditionCollection<_Metas.Product_Part>(new NotEqualCondition<_Metas.Product_Part>(cond2))); 
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<_Metas.Product_Part, ProductPart>(sqlCtx, eqCondition);
                sqlCtx2 = FuncNew.SetColumnFromField<_Metas.Product_Part, ProductPart>(sqlCtx2, neqCondition);
                sqlCtx.OverrideParams(sqlCtx2);

                sqlCtx.Param(_Metas.UnpackProductStatus.fn_ueditor).Value = uEditor;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductInfoByDn(string dn, string uEditor, IList<string> infoTypeNames)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductInfo cond = new _Metas.ProductInfo();
                        cond.productID = dn;
                        _Metas.ProductInfo cond2 = new _Metas.ProductInfo();
                        cond2.infoType = "[INSET]";
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.ProductInfo, _Metas.UnpackProductInfo>(tk,
                            new string[][]{
                                new string[]{_Metas.ProductInfo.fn_cdt,_Metas.UnpackProductInfo.fn_cdt},
                                new string[]{_Metas.ProductInfo.fn_editor,_Metas.UnpackProductInfo.fn_editor},
                                new string[]{_Metas.ProductInfo.fn_id,_Metas.UnpackProductInfo.fn_productInfoID},
                                new string[]{_Metas.ProductInfo.fn_infoType,_Metas.UnpackProductInfo.fn_infoType},
                                new string[]{_Metas.ProductInfo.fn_infoValue,_Metas.UnpackProductInfo.fn_infoValue},
                                new string[]{_Metas.ProductInfo.fn_productID,_Metas.UnpackProductInfo.fn_productID},
                                new string[]{_Metas.ProductInfo.fn_udt,_Metas.UnpackProductInfo.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProductInfo.fn_ueditor), _Metas.UnpackProductInfo.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProductInfo.fn_updt}
                            },
                            new ConditionCollection<_Metas.ProductInfo>(
                              //  new AnyCondition<_Metas.ProductInfo>(cond, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4} AND ({5} LIKE 'PC%' OR {5} LIKE 'QC%'))", "{0}", _Metas.Product.fn_productID, ToolsNew.GetTableName(typeof(_Metas.Product)), _Metas.Product.fn_deliveryNo, "{1}", _Metas.Product.fn_model)),
                                new AnyCondition<_Metas.ProductInfo>(cond, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", _Metas.Product.fn_productID, ToolsNew.GetTableName(typeof(_Metas.Product)), _Metas.Product.fn_deliveryNo, "{1}", _Metas.Product.fn_model)),
                                
                              new InSetCondition<_Metas.ProductInfo>(cond2)));
                        sqlCtx.AddParam(_Metas.UnpackProductInfo.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProductInfo.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProductInfo>(_Metas.UnpackProductInfo.fn_ueditor)));
                    }
                }
                sqlCtx.Param(g.DecAny(_Metas.ProductInfo.fn_productID)).Value = dn;
                sqlCtx.Param(_Metas.UnpackProductInfo.fn_ueditor).Value = uEditor;
                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(_Metas.ProductInfo.fn_infoType), g.ConvertInSet(infoTypeNames));
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductPartByBomNodeTypeAndDescrLike(string productId, string uEditor, string bomNodeType, string descrLike)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = productId;
                        cond.bomNodeType = bomNodeType;
                        _Metas.Product_Part cond2 = new _Metas.Product_Part();
                        cond2.partNo = descrLike;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.Product_Part, _Metas.UnpackProduct_Part>(tk,
                            new string[][]{
                                new string[]{_Metas.Product_Part.fn_bomNodeType,_Metas.UnpackProduct_Part.fn_bomNodeType},
                                new string[]{_Metas.Product_Part.fn_cdt,_Metas.UnpackProduct_Part.fn_cdt},
                                new string[]{_Metas.Product_Part.fn_checkItemType,_Metas.UnpackProduct_Part.fn_checkItemType},
                                new string[]{_Metas.Product_Part.fn_custmerPn,_Metas.UnpackProduct_Part.fn_custmerPn},
                                new string[]{_Metas.Product_Part.fn_editor,_Metas.UnpackProduct_Part.fn_editor},
                                new string[]{_Metas.Product_Part.fn_id,_Metas.UnpackProduct_Part.fn_product_PartID},
                                new string[]{_Metas.Product_Part.fn_iecpn,_Metas.UnpackProduct_Part.fn_iecpn},
                                new string[]{_Metas.Product_Part.fn_partNo,_Metas.UnpackProduct_Part.fn_partNo},
                                new string[]{_Metas.Product_Part.fn_partSn,_Metas.UnpackProduct_Part.fn_partSn},
                                new string[]{_Metas.Product_Part.fn_partType,_Metas.UnpackProduct_Part.fn_partType},
                                new string[]{_Metas.Product_Part.fn_productID,_Metas.UnpackProduct_Part.fn_productID},
                                new string[]{_Metas.Product_Part.fn_station,_Metas.UnpackProduct_Part.fn_station},
                                new string[]{_Metas.Product_Part.fn_udt,_Metas.UnpackProduct_Part.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProduct_Part.fn_ueditor), _Metas.UnpackProduct_Part.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProduct_Part.fn_updt}
                            },
                            new ConditionCollection<_Metas.Product_Part>(
                                new EqualCondition<_Metas.Product_Part>(cond),
                                new AnySoloCondition<_Metas.Product_Part>(cond2, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3} LIKE @{3})", "{0}", _Metas.Part_NEW.fn_partNo, ToolsNew.GetTableName(typeof(_Metas.Part_NEW)), _Metas.Part_NEW.fn_descr))));
                        sqlCtx.AddParam(_Metas.UnpackProduct_Part.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProduct_Part.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProduct_Part>(_Metas.UnpackProduct_Part.fn_ueditor)));
                        sqlCtx.AddParam(_Metas.Part_NEW.fn_descr, new SqlParameter(string.Format("@{0}", _Metas.Part_NEW.fn_descr), ToolsNew.GetDBFieldType<_Metas.Part_NEW>(_Metas.Part_NEW.fn_descr)));
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.UnpackProductStatus.fn_ueditor).Value = uEditor;
                sqlCtx.Param(_Metas.Part_NEW.fn_descr).Value = descrLike;
                sqlCtx.Param(_Metas.Product_Part.fn_bomNodeType).Value = bomNodeType;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void RemoveProductPartByBomNodeTypeAndDescrLike(string productId, string bomNodeType, string descrLike)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = productId;
                        cond.bomNodeType = bomNodeType;
                        _Metas.Product_Part cond2 = new _Metas.Product_Part();
                        cond2.partNo = descrLike;
                        sqlCtx = FuncNew.GetConditionedDelete<_Metas.Product_Part>(tk, new ConditionCollection<_Metas.Product_Part>(
                            new EqualCondition<_Metas.Product_Part>(cond),
                            new AnySoloCondition<_Metas.Product_Part>(cond2, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3} LIKE @{3})", "{0}", _Metas.Part_NEW.fn_partNo, ToolsNew.GetTableName(typeof(_Metas.Part_NEW)), _Metas.Part_NEW.fn_descr))));
                        sqlCtx.AddParam(_Metas.Part_NEW.fn_descr, new SqlParameter(string.Format("@{0}", _Metas.Part_NEW.fn_descr), ToolsNew.GetDBFieldType<_Metas.Part_NEW>(_Metas.Part_NEW.fn_descr)));
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.Part_NEW.fn_descr).Value = descrLike;
                sqlCtx.Param(_Metas.Product_Part.fn_bomNodeType).Value = bomNodeType;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductPartByBomNodeType(string productId, string uEditor, string bomNodeType)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = productId;
                        cond.bomNodeType = bomNodeType;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.Product_Part, _Metas.UnpackProduct_Part>(tk,
                            new string[][]{
                                new string[]{_Metas.Product_Part.fn_bomNodeType,_Metas.UnpackProduct_Part.fn_bomNodeType},
                                new string[]{_Metas.Product_Part.fn_cdt,_Metas.UnpackProduct_Part.fn_cdt},
                                new string[]{_Metas.Product_Part.fn_checkItemType,_Metas.UnpackProduct_Part.fn_checkItemType},
                                new string[]{_Metas.Product_Part.fn_custmerPn,_Metas.UnpackProduct_Part.fn_custmerPn},
                                new string[]{_Metas.Product_Part.fn_editor,_Metas.UnpackProduct_Part.fn_editor},
                                new string[]{_Metas.Product_Part.fn_id,_Metas.UnpackProduct_Part.fn_product_PartID},
                                new string[]{_Metas.Product_Part.fn_iecpn,_Metas.UnpackProduct_Part.fn_iecpn},
                                new string[]{_Metas.Product_Part.fn_partNo,_Metas.UnpackProduct_Part.fn_partNo},
                                new string[]{_Metas.Product_Part.fn_partSn,_Metas.UnpackProduct_Part.fn_partSn},
                                new string[]{_Metas.Product_Part.fn_partType,_Metas.UnpackProduct_Part.fn_partType},
                                new string[]{_Metas.Product_Part.fn_productID,_Metas.UnpackProduct_Part.fn_productID},
                                new string[]{_Metas.Product_Part.fn_station,_Metas.UnpackProduct_Part.fn_station},
                                new string[]{_Metas.Product_Part.fn_udt,_Metas.UnpackProduct_Part.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProduct_Part.fn_ueditor), _Metas.UnpackProduct_Part.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProduct_Part.fn_updt}
                            },
                            new ConditionCollection<_Metas.Product_Part>(
                                new EqualCondition<_Metas.Product_Part>(cond)));
                        sqlCtx.AddParam(_Metas.UnpackProduct_Part.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProduct_Part.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProduct_Part>(_Metas.UnpackProduct_Part.fn_ueditor)));
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.UnpackProductStatus.fn_ueditor).Value = uEditor;
                sqlCtx.Param(_Metas.Product_Part.fn_bomNodeType).Value = bomNodeType;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void RemoveProductPartByBomNodeType(string productId, string bomNodeType)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = productId;
                        cond.bomNodeType = bomNodeType;
                        sqlCtx = FuncNew.GetConditionedDelete<_Metas.Product_Part>(tk, new ConditionCollection<_Metas.Product_Part>(
                            new EqualCondition<_Metas.Product_Part>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.Product_Part.fn_bomNodeType).Value = bomNodeType;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductPartByPartType(string productId, string uEditor, string partType)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = productId;
                        _Metas.Product_Part cond2 = new _Metas.Product_Part();
                        cond2.partNo = partType;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.Product_Part, _Metas.UnpackProduct_Part>(tk,
                            new string[][]{
                                new string[]{_Metas.Product_Part.fn_bomNodeType,_Metas.UnpackProduct_Part.fn_bomNodeType},
                                new string[]{_Metas.Product_Part.fn_cdt,_Metas.UnpackProduct_Part.fn_cdt},
                                new string[]{_Metas.Product_Part.fn_checkItemType,_Metas.UnpackProduct_Part.fn_checkItemType},
                                new string[]{_Metas.Product_Part.fn_custmerPn,_Metas.UnpackProduct_Part.fn_custmerPn},
                                new string[]{_Metas.Product_Part.fn_editor,_Metas.UnpackProduct_Part.fn_editor},
                                new string[]{_Metas.Product_Part.fn_id,_Metas.UnpackProduct_Part.fn_product_PartID},
                                new string[]{_Metas.Product_Part.fn_iecpn,_Metas.UnpackProduct_Part.fn_iecpn},
                                new string[]{_Metas.Product_Part.fn_partNo,_Metas.UnpackProduct_Part.fn_partNo},
                                new string[]{_Metas.Product_Part.fn_partSn,_Metas.UnpackProduct_Part.fn_partSn},
                                new string[]{_Metas.Product_Part.fn_partType,_Metas.UnpackProduct_Part.fn_partType},
                                new string[]{_Metas.Product_Part.fn_productID,_Metas.UnpackProduct_Part.fn_productID},
                                new string[]{_Metas.Product_Part.fn_station,_Metas.UnpackProduct_Part.fn_station},
                                new string[]{_Metas.Product_Part.fn_udt,_Metas.UnpackProduct_Part.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProduct_Part.fn_ueditor), _Metas.UnpackProduct_Part.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProduct_Part.fn_updt}
                            },
                            new ConditionCollection<_Metas.Product_Part>(
                                new EqualCondition<_Metas.Product_Part>(cond),
                                new AnyCondition<_Metas.Product_Part>(cond2, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", _Metas.Part_NEW.fn_partNo, ToolsNew.GetTableName(typeof(_Metas.Part_NEW)), _Metas.Part_NEW.fn_partType, "{1}"))));
                        sqlCtx.AddParam(_Metas.UnpackProduct_Part.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProduct_Part.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProduct_Part>(_Metas.UnpackProduct_Part.fn_ueditor)));
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.UnpackProductStatus.fn_ueditor).Value = uEditor;
                sqlCtx.Param(g.DecAny(_Metas.Product_Part.fn_partNo)).Value = partType;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void RemoveProductPartByPartType(string productId, string partType)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = productId;
                        _Metas.Product_Part cond2 = new _Metas.Product_Part();
                        cond2.partNo = partType;
                        sqlCtx = FuncNew.GetConditionedDelete<_Metas.Product_Part>(tk, new ConditionCollection<_Metas.Product_Part>(
                            new EqualCondition<_Metas.Product_Part>(cond),
                               new AnyCondition<_Metas.Product_Part>(cond2, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", _Metas.Part_NEW.fn_partNo, ToolsNew.GetTableName(typeof(_Metas.Part_NEW)), _Metas.Part_NEW.fn_partType, "{1}"))));
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = productId;
                sqlCtx.Param(g.DecAny(_Metas.Product_Part.fn_partNo)).Value = partType;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductPartByDescrLike(string productId, string uEditor, string descrLike)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = productId;
                        _Metas.Product_Part cond2 = new _Metas.Product_Part();
                        cond2.partNo = descrLike;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.Product_Part, _Metas.UnpackProduct_Part>(tk,
                            new string[][]{
                                new string[]{_Metas.Product_Part.fn_bomNodeType,_Metas.UnpackProduct_Part.fn_bomNodeType},
                                new string[]{_Metas.Product_Part.fn_cdt,_Metas.UnpackProduct_Part.fn_cdt},
                                new string[]{_Metas.Product_Part.fn_checkItemType,_Metas.UnpackProduct_Part.fn_checkItemType},
                                new string[]{_Metas.Product_Part.fn_custmerPn,_Metas.UnpackProduct_Part.fn_custmerPn},
                                new string[]{_Metas.Product_Part.fn_editor,_Metas.UnpackProduct_Part.fn_editor},
                                new string[]{_Metas.Product_Part.fn_id,_Metas.UnpackProduct_Part.fn_product_PartID},
                                new string[]{_Metas.Product_Part.fn_iecpn,_Metas.UnpackProduct_Part.fn_iecpn},
                                new string[]{_Metas.Product_Part.fn_partNo,_Metas.UnpackProduct_Part.fn_partNo},
                                new string[]{_Metas.Product_Part.fn_partSn,_Metas.UnpackProduct_Part.fn_partSn},
                                new string[]{_Metas.Product_Part.fn_partType,_Metas.UnpackProduct_Part.fn_partType},
                                new string[]{_Metas.Product_Part.fn_productID,_Metas.UnpackProduct_Part.fn_productID},
                                new string[]{_Metas.Product_Part.fn_station,_Metas.UnpackProduct_Part.fn_station},
                                new string[]{_Metas.Product_Part.fn_udt,_Metas.UnpackProduct_Part.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProduct_Part.fn_ueditor), _Metas.UnpackProduct_Part.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProduct_Part.fn_updt}
                            },
                            new ConditionCollection<_Metas.Product_Part>(
                                new EqualCondition<_Metas.Product_Part>(cond),
                                new AnySoloCondition<_Metas.Product_Part>(cond2, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3} LIKE @{3})", "{0}", _Metas.Part_NEW.fn_partNo, ToolsNew.GetTableName(typeof(_Metas.Part_NEW)), _Metas.Part_NEW.fn_descr))));
                        sqlCtx.AddParam(_Metas.UnpackProduct_Part.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProduct_Part.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProduct_Part>(_Metas.UnpackProduct_Part.fn_ueditor)));
                        sqlCtx.AddParam(_Metas.Part_NEW.fn_descr, new SqlParameter(string.Format("@{0}", _Metas.Part_NEW.fn_descr), ToolsNew.GetDBFieldType<_Metas.Part_NEW>(_Metas.Part_NEW.fn_descr)));
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.UnpackProductStatus.fn_ueditor).Value = uEditor;
                sqlCtx.Param(_Metas.Part_NEW.fn_descr).Value = descrLike;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void RemoveProductPartByDescrLike(string productId, string descrLike)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = productId;
                         _Metas.Product_Part cond2 = new _Metas.Product_Part();
                        cond2.partNo = descrLike;
                        sqlCtx = FuncNew.GetConditionedDelete<_Metas.Product_Part>(tk, new ConditionCollection<_Metas.Product_Part>(
                            new EqualCondition<_Metas.Product_Part>(cond),
                            new AnySoloCondition<_Metas.Product_Part>(cond2, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3} LIKE @{3})", "{0}", _Metas.Part_NEW.fn_partNo, ToolsNew.GetTableName(typeof(_Metas.Part_NEW)), _Metas.Part_NEW.fn_descr))));
                        sqlCtx.AddParam(_Metas.Part_NEW.fn_descr, new SqlParameter(string.Format("@{0}", _Metas.Part_NEW.fn_descr), ToolsNew.GetDBFieldType<_Metas.Part_NEW>(_Metas.Part_NEW.fn_descr)));
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.Part_NEW.fn_descr).Value = descrLike;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateProductStatusByPallet(string palletSN, IMES.FisObject.FA.Product.ProductStatus newStatus, int newTestFailCount, StationStatus newStationStatus)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                //mtns.ProductStatus cond = FuncNew.SetColumnFromField<IqcKp, IqcKpDef>(condition);
                mtns.ProductStatus cond = new mtns.ProductStatus();
                cond.productID = "[INSET]";
                mtns.ProductStatus setv = FuncNew.SetColumnFromField<mtns.ProductStatus, IMES.FisObject.FA.Product.ProductStatus>(newStatus);
                setv.udt = DateTime.Now;
                if (newTestFailCount >= -1)
                    setv.testFailCount = newTestFailCount;
                else
                    setv.testFailCount = int.MinValue;
                if (newStationStatus != StationStatus.NULL)
                    setv.status = Convert.ToInt32(newStationStatus);
                else
                    setv.status = int.MinValue;

                sqlCtx = FuncNew.GetConditionedUpdate<mtns.ProductStatus>(new SetValueCollection<mtns.ProductStatus>(new CommonSetValue<mtns.ProductStatus>(setv)), new ConditionCollection<mtns.ProductStatus>(
                    new AnyCondition<mtns.ProductStatus>(cond, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", mtns.Product.fn_productID, ToolsNew.GetTableName(typeof(mtns.Product)), mtns.Product.fn_palletNo, "{1}"))));
                //    }
                //}
                //sqlCtx = FuncNew.SetColumnFromField<IqcKp, IqcKpDef>(sqlCtx, condition);
                sqlCtx.Param(g.DecAny(_Metas.ProductStatus.fn_productID)).Value = palletSN;

                sqlCtx = FuncNew.SetColumnFromField<mtns.ProductStatus, IMES.FisObject.FA.Product.ProductStatus>(sqlCtx, newStatus, true);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(_Metas.ProductStatus.fn_udt)).Value = cmDt;
                if (newTestFailCount >= -1)
                    sqlCtx.Param(g.DecSV(_Metas.ProductStatus.fn_testFailCount)).Value = setv.testFailCount;
                if (newStationStatus != StationStatus.NULL)
                    sqlCtx.Param(g.DecSV(_Metas.ProductStatus.fn_status)).Value = setv.status;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteKittingBoxSNItem(KittingBoxSNInfo condition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                Fakittingboxsn cond = FuncNew.SetColumnFromField<Fakittingboxsn, KittingBoxSNInfo>(condition);
                sqlCtx = FuncNew.GetConditionedDelete<Fakittingboxsn>(new ConditionCollection<Fakittingboxsn>(new EqualCondition<Fakittingboxsn>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<Fakittingboxsn, KittingBoxSNInfo>(sqlCtx, condition);

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateProductPart(ProductPart setValue, ProductPart condition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                Product_Part cond = FuncNew.SetColumnFromField<Product_Part, ProductPart>(condition);
                Product_Part setv = FuncNew.SetColumnFromField<Product_Part, ProductPart>(setValue);
                setv.udt = DateTime.Now;

                sqlCtx = FuncNew.GetConditionedUpdate<Product_Part>(new SetValueCollection<Product_Part>(new CommonSetValue<Product_Part>(setv)), new ConditionCollection<Product_Part>(new EqualCondition<Product_Part>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<Product_Part, ProductPart>(sqlCtx, condition);
                sqlCtx = FuncNew.SetColumnFromField<Product_Part, ProductPart>(sqlCtx, setValue, true);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(_Metas.Product_Part.fn_udt)).Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckExistWipBuffer(IMES.DataModel.WipBuffer condition)
        {
            try
            {
                bool ret = false;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                mtns::SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                mtns::WipBuffer cond = mtns::FuncNew.SetColumnFromField<mtns::WipBuffer, dtmdns.WipBuffer>(condition);
                sqlCtx = mtns::FuncNew.GetConditionedSelect<mtns::WipBuffer>("COUNT", new string[] { mtns.WipBuffer.fn_id }, new mtns::ConditionCollection<mtns::WipBuffer>(new mtns::EqualCondition<mtns::WipBuffer>(cond)));
                //    }
                //}
                sqlCtx = mtns::FuncNew.SetColumnFromField<mtns::WipBuffer, dtmdns.WipBuffer>(sqlCtx, condition);

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0 ? true : false;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<PAKitLoc> GetPAKitlocByStation(string station)
        {
            try
            {
                IList<PAKitLoc> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        Pakitloc cond = new Pakitloc();
                        cond.station = station;
                        sqlCtx = FuncNew.GetConditionedSelect<Pakitloc>(tk, null, null, new ConditionCollection<Pakitloc>(new EqualCondition<Pakitloc>(cond)), Pakitloc.fn_partNo);
                    }
                }
                sqlCtx.Param(Pakitloc.fn_station).Value = station;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<Pakitloc, PAKitLoc, PAKitLoc>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<PAKitLoc> GetPAKitlocByStationAndPdLine(string station,string pdline)
        {
            try
            {
                IList<PAKitLoc> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        Pakitloc cond = new Pakitloc();
                        cond.station = station;
                        cond.pdLine = pdline;
                        sqlCtx = FuncNew.GetConditionedSelect<Pakitloc>(tk, null, null, new ConditionCollection<Pakitloc>(new EqualCondition<Pakitloc>(cond)), Pakitloc.fn_partNo);
                    }
                }
                sqlCtx.Param(Pakitloc.fn_station).Value = station;
                sqlCtx.Param(Pakitloc.fn_pdLine).Value = pdline;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<Pakitloc, PAKitLoc, PAKitLoc>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }
        
        public void UpdateProductRepairDefectInfo(RepairInfo setValue, RepairInfo condition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                ProductRepair_DefectInfo cond = FuncNew.SetColumnFromField<ProductRepair_DefectInfo, RepairInfo>(condition);
                ProductRepair_DefectInfo setv = FuncNew.SetColumnFromField<ProductRepair_DefectInfo, RepairInfo>(setValue);
                setv.udt = DateTime.Now;

                sqlCtx = FuncNew.GetConditionedUpdate<ProductRepair_DefectInfo>(new SetValueCollection<ProductRepair_DefectInfo>(new CommonSetValue<ProductRepair_DefectInfo>(setv)), new ConditionCollection<ProductRepair_DefectInfo>(new EqualCondition<ProductRepair_DefectInfo>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<ProductRepair_DefectInfo, RepairInfo>(sqlCtx, condition);
                sqlCtx = FuncNew.SetColumnFromField<ProductRepair_DefectInfo, RepairInfo>(sqlCtx, setValue, true);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(_Metas.ProductRepair_DefectInfo.fn_udt)).Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<fons.ProductInfo> GetProductInfoListByKeyAndValue(string infoType, string infoValue)
        {
            try
            {
                IList<fons.ProductInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns.ProductInfo cond = new mtns.ProductInfo();
                        cond.infoType = infoType;
                        cond.infoValue = infoValue;
                        sqlCtx = FuncNew.GetConditionedSelect<mtns.ProductInfo>(tk, null, null, new ConditionCollection<mtns.ProductInfo>(new EqualCondition<mtns.ProductInfo>(cond)), mtns.ProductInfo.fn_productID);
                    }
                }
                sqlCtx.Param(mtns.ProductInfo.fn_infoType).Value = infoType;
                sqlCtx.Param(mtns.ProductInfo.fn_infoValue).Value = infoValue;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<mtns.ProductInfo, fons.ProductInfo, fons.ProductInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.FisObject.FA.Product.ProductLog> GetProductLogsOrderByCdtDesc(string prodId, string station)
        {
            try
            {
                IList<IMES.FisObject.FA.Product.ProductLog> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductLog cond = new _Metas.ProductLog();
                        cond.station = station;
                        cond.productID = prodId;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductLog>(tk, null, null, new ConditionCollection<_Metas.ProductLog>(new EqualCondition<_Metas.ProductLog>(cond)), _Metas.ProductLog.fn_cdt + _Metas.FuncNew.DescendOrder);
                    }
                }
                sqlCtx.Param(_Metas.ProductLog.fn_station).Value = station;
                sqlCtx.Param(_Metas.ProductLog.fn_productID).Value = prodId;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.ProductLog, IMES.FisObject.FA.Product.ProductLog, IMES.FisObject.FA.Product.ProductLog>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.FisObject.FA.Product.ProductLog> GetProductLogsOrderByCdtDesc(string prodId, string station, int status)
        {
            try
            {
                IList<IMES.FisObject.FA.Product.ProductLog> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductLog cond = new _Metas.ProductLog();
                        cond.station = station;
                        cond.productID = prodId;
                        cond.status = status;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductLog>(tk, null, null, new ConditionCollection<_Metas.ProductLog>(new EqualCondition<_Metas.ProductLog>(cond)), _Metas.ProductLog.fn_cdt + _Metas.FuncNew.DescendOrder);
                    }
                }
                sqlCtx.Param(_Metas.ProductLog.fn_station).Value = station;
                sqlCtx.Param(_Metas.ProductLog.fn_productID).Value = prodId;
                sqlCtx.Param(_Metas.ProductLog.fn_status).Value = status;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.ProductLog, IMES.FisObject.FA.Product.ProductLog, IMES.FisObject.FA.Product.ProductLog>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetBTOSampleCount(string tp, DateTime qcStartTime, string prodModel)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Qcstatus cond = new _Metas.Qcstatus();
                        cond.tp = tp;
                        cond.model = prodModel;
                        _Metas.Qcstatus cond2 = new _Metas.Qcstatus();
                        cond2.cdt = qcStartTime;
                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.Qcstatus>(tk, "COUNT", new string[][] { new string[] { _Metas.Qcstatus.fn_productID, string.Format("DISTINCT {0}", _Metas.Qcstatus.fn_productID) } }, new ConditionCollection<_Metas.Qcstatus>(
                            new EqualCondition<_Metas.Qcstatus>(cond),
                            new GreaterOrEqualCondition<_Metas.Qcstatus>(cond2)));
                    }
                }
                sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = tp;
                sqlCtx.Param(_Metas.Qcstatus.fn_model).Value = prodModel;
                sqlCtx.Param(g.DecGE(_Metas.Qcstatus.fn_cdt)).Value = qcStartTime;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private int GetBTOSampleCount_OnTrans(string tp, DateTime qcStartTime, string prodModel)
        {
            SqlDataReader sqlR = null;
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Qcstatus cond = new _Metas.Qcstatus();
                        cond.tp = tp;
                        cond.model = prodModel;
                        _Metas.Qcstatus cond2 = new _Metas.Qcstatus();
                        cond2.cdt = qcStartTime;
                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.Qcstatus>(tk, "COUNT", new string[][] { new string[] { _Metas.Qcstatus.fn_productID, string.Format("DISTINCT {0}", _Metas.Qcstatus.fn_productID) } }, new ConditionCollection<_Metas.Qcstatus>(
                            new EqualCondition<_Metas.Qcstatus>(cond),
                            new GreaterOrEqualCondition<_Metas.Qcstatus>(cond2)));
                        sqlCtx.Sentence = sqlCtx.Sentence.Replace("WHERE", "WITH (NOLOCK) WHERE");
                    }
                }
                sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = tp;
                sqlCtx.Param(_Metas.Qcstatus.fn_model).Value = prodModel;
                sqlCtx.Param(g.DecGE(_Metas.Qcstatus.fn_cdt)).Value = qcStartTime;

                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
                if (sqlR != null && sqlR.Read())
                {
                    ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                {
                    sqlR.Close();
                }
            }
        }

        public void AddQCStatusWithConditionOfGetBTOSampleCount(ProductQCStatus item, int eoqcRatio, string tp, DateTime qcStartTime, string prodModel)
        {
            try
            {
                SqlTransactionManager.Begin();

                var cnt = GetBTOSampleCount_OnTrans(tp, qcStartTime, prodModel);

                if (cnt % eoqcRatio == 0) //Real EPIA                     //InspectionStation = "73";
                {
                    item.Remark = "1";
                    item.Status = "2";
                    this.PersistInsertQCStatuses(item);
                }
                else    //QC Pass       //InspectionStation = "79";
                {
                    item.Remark = null;
                    item.Status = "1";
                    this.PersistInsertQCStatuses(item);
                }

                SqlTransactionManager.Commit();
            }
            catch (Exception)
            {
                SqlTransactionManager.Rollback();
                throw;
            }
            finally
            {
                SqlTransactionManager.Dispose();
                SqlTransactionManager.End();
            }
        }

        public void InsertKittingLogInfo(KittingLogInfo item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<_Metas.KittingLog>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<_Metas.KittingLog, IMES.DataModel.KittingLogInfo>(sqlCtx, item);

                sqlCtx.Param(_Metas.KittingLog.fn_cdt).Value = cmDt;

                item.id = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void InsertKittingLogInfosFromKittingLocationFaX(KittingLogInfo item, KittingLocationFaXInfo condition, int[] proritySet)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                mtns::SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                mtns::Kitting_Location_FA_A cond = mtns::FuncNew.SetColumnFromField<mtns::Kitting_Location_FA_A, KittingLocationFaXInfo>(condition);
                mtns::Kitting_Location_FA_A cond2 = null;
                if (proritySet != null && proritySet.Length > 0)
                {
                    cond2 = new Kitting_Location_FA_A();
                    cond2.priority = 1;
                }

                ConditionCollection<mtns::Kitting_Location_FA_A> conditions = null;
                if (cond2 != null)
                    conditions = new mtns::ConditionCollection<mtns::Kitting_Location_FA_A>(
                        new mtns::EqualCondition<mtns::Kitting_Location_FA_A>(cond),
                        new mtns::InSetCondition<mtns::Kitting_Location_FA_A>(cond2));
                else
                    conditions = new mtns::ConditionCollection<mtns::Kitting_Location_FA_A>(
                        new mtns::EqualCondition<mtns::Kitting_Location_FA_A>(cond));

                //    }
                //}

                sqlCtx = mtns::FuncNew.GetConditionedForBackupInsert<mtns::Kitting_Location_FA_A, mtns.KittingLog>(new string[][]
                {
                    new string[]{string.Format("@{0}",_Metas.KittingLog.fn_boxId), mtns.KittingLog.fn_boxId},
                    new string[]{"GETDATE()", mtns.KittingLog.fn_cdt},
                    new string[]{mtns::Kitting_Location_FA_A.fn_configedLEDStatus, mtns.KittingLog.fn_configedLEDStatus},
                    new string[]{mtns::Kitting_Location_FA_A.fn_editor, mtns.KittingLog.fn_editor},
                    //new string[]{, mtns.KittingLog.fn_id},
                    new string[]{mtns::Kitting_Location_FA_A.fn_ledvalues, mtns.KittingLog.fn_ledvalues},
                    new string[]{string.Format("@{0}",_Metas.KittingLog.fn_line), mtns.KittingLog.fn_line},
                    new string[]{mtns::Kitting_Location_FA_A.fn_priority, mtns.KittingLog.fn_priority},
                    new string[]{string.Format("@{0}",_Metas.KittingLog.fn_productID), mtns.KittingLog.fn_productID},
                    new string[]{mtns::Kitting_Location_FA_A.fn_runningLEDStatus, mtns.KittingLog.fn_runningLEDStatus},
                    new string[]{string.Format("@{0}",_Metas.KittingLog.fn_tableName), mtns.KittingLog.fn_tableName},
                    new string[]{mtns::Kitting_Location_FA_A.fn_tagID, mtns.KittingLog.fn_tagID},
                    new string[]{string.Format("@{0}",_Metas.KittingLog.fn_time), mtns.KittingLog.fn_time},
                }, conditions, _Schema.SqlHelper.DB_KIT);

                sqlCtx.AddParam(_Metas.KittingLog.fn_boxId, new SqlParameter(string.Format("@{0}", _Metas.KittingLog.fn_boxId), ToolsNew.GetDBFieldType<_Metas.KittingLog>(_Metas.KittingLog.fn_boxId)));
                sqlCtx.AddParam(_Metas.KittingLog.fn_line, new SqlParameter(string.Format("@{0}", _Metas.KittingLog.fn_line), ToolsNew.GetDBFieldType<_Metas.KittingLog>(_Metas.KittingLog.fn_line)));
                sqlCtx.AddParam(_Metas.KittingLog.fn_productID, new SqlParameter(string.Format("@{0}", _Metas.KittingLog.fn_productID), ToolsNew.GetDBFieldType<_Metas.KittingLog>(_Metas.KittingLog.fn_productID)));
                sqlCtx.AddParam(_Metas.KittingLog.fn_tableName, new SqlParameter(string.Format("@{0}", _Metas.KittingLog.fn_tableName), ToolsNew.GetDBFieldType<_Metas.KittingLog>(_Metas.KittingLog.fn_tableName)));
                sqlCtx.AddParam(_Metas.KittingLog.fn_time, new SqlParameter(string.Format("@{0}", _Metas.KittingLog.fn_time), ToolsNew.GetDBFieldType<_Metas.KittingLog>(_Metas.KittingLog.fn_time)));

                sqlCtx = mtns::FuncNew.SetColumnFromField<mtns::Kitting_Location_FA_A, KittingLocationFaXInfo>(sqlCtx, condition);
                sqlCtx.Param(_Metas.KittingLog.fn_boxId).Value = item.boxId;
                sqlCtx.Param(_Metas.KittingLog.fn_line).Value = item.line;
                sqlCtx.Param(_Metas.KittingLog.fn_productID).Value = item.productID;
                sqlCtx.Param(_Metas.KittingLog.fn_tableName).Value = condition.tableNameEpilogue;
                sqlCtx.Param(_Metas.KittingLog.fn_time).Value = item.time;

                if (proritySet != null && proritySet.Length > 0)
                    sqlCtx.Sentence = sqlCtx.Sentence.Replace(g.DecInSet(mtns.Kitting_Location_FA_A.fn_priority), g.ConvertInSet(proritySet));

                string tableName = ToolsNew.GetTableName(typeof(mtns::Kitting_Location_FA_A));
                string newTableName = tableName.TrimEnd('A') + condition.tableNameEpilogue;

                sqlCtx.Sentence = sqlCtx.Sentence.Replace(tableName, newTableName);

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProduct> GetProductByPalletNo(string palletNo)
        {
            try
            {
                IList<IProduct> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.palletNo = palletNo;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, null, null, new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond)));
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_palletNo).Value = palletNo;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Product, IMES.FisObject.FA.Product.Product, IProduct>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckExistItcndCheckQcHold(string isHold, string[] codes)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Itcndcheckqchold cond = new _Metas.Itcndcheckqchold();
                        cond.isHold = isHold;
                        _Metas.Itcndcheckqchold cond2 = new _Metas.Itcndcheckqchold();
                        cond2.code = "[INSET]";
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Itcndcheckqchold>(tk, "COUNT", new string[] { _Metas.Itcndcheckqchold.fn_code }, new ConditionCollection<_Metas.Itcndcheckqchold>(new EqualCondition<_Metas.Itcndcheckqchold>(cond), new InSetCondition<_Metas.Itcndcheckqchold>(cond2)));
                    }
                }
                sqlCtx.Param(_Metas.Itcndcheckqchold.fn_isHold).Value = isHold;
                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(_Metas.Itcndcheckqchold.fn_code), g.ConvertInSet(codes));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ITCNDCheckQCHoldDef> GetITCNDCheckQCHoldList()
        {
            try
            {
                IList<ITCNDCheckQCHoldDef> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetCommonSelect<Itcndcheckqchold>(tk, Itcndcheckqchold.fn_code);
                    }
                }
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<Itcndcheckqchold, ITCNDCheckQCHoldDef, ITCNDCheckQCHoldDef>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ITCNDCheckQCHoldDef> GetExistITCNDCheckQCHold(ITCNDCheckQCHoldDef condition)
        {
            try
            {
                IList<ITCNDCheckQCHoldDef> ret = null;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                mtns::SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                mtns::Itcndcheckqchold cond = mtns::FuncNew.SetColumnFromField<mtns::Itcndcheckqchold, ITCNDCheckQCHoldDef>(condition);
                sqlCtx = mtns::FuncNew.GetConditionedSelect<mtns::Itcndcheckqchold>(null, null, new mtns::ConditionCollection<mtns::Itcndcheckqchold>(new mtns::EqualCondition<mtns::Itcndcheckqchold>(cond)), mtns::Itcndcheckqchold.fn_code);
                //    }
                //}
                sqlCtx = mtns::FuncNew.SetColumnFromField<mtns::Itcndcheckqchold, ITCNDCheckQCHoldDef>(sqlCtx, condition);

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = mtns::FuncNew.SetFieldFromColumn<mtns::Itcndcheckqchold, ITCNDCheckQCHoldDef, ITCNDCheckQCHoldDef>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddITCNDCheckQCHold(ITCNDCheckQCHoldDef item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetCommonInsert<mtns::Itcndcheckqchold>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<mtns::Itcndcheckqchold, ITCNDCheckQCHoldDef>(sqlCtx, item);

                sqlCtx.Param(mtns::Itcndcheckqchold.fn_cdt).Value = cmDt;
                sqlCtx.Param(mtns::Itcndcheckqchold.fn_udt).Value = cmDt;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void RemoveITCNDCheckQCHold(ITCNDCheckQCHoldDef condition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                Itcndcheckqchold cond = FuncNew.SetColumnFromField<Itcndcheckqchold, ITCNDCheckQCHoldDef>(condition);
                sqlCtx = FuncNew.GetConditionedDelete<Itcndcheckqchold>(new ConditionCollection<Itcndcheckqchold>(new EqualCondition<Itcndcheckqchold>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<Itcndcheckqchold, ITCNDCheckQCHoldDef>(sqlCtx, condition);

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void ChangeITCNDCheckQCHold(ITCNDCheckQCHoldDef setValue, ITCNDCheckQCHoldDef condition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                Itcndcheckqchold cond = FuncNew.SetColumnFromField<Itcndcheckqchold, ITCNDCheckQCHoldDef>(condition);
                Itcndcheckqchold setv = FuncNew.SetColumnFromField<Itcndcheckqchold, ITCNDCheckQCHoldDef>(setValue);
                setv.udt = DateTime.Now;

                sqlCtx = FuncNew.GetConditionedUpdate<Itcndcheckqchold>(new SetValueCollection<Itcndcheckqchold>(new CommonSetValue<Itcndcheckqchold>(setv)), new ConditionCollection<Itcndcheckqchold>(new EqualCondition<Itcndcheckqchold>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<Itcndcheckqchold, ITCNDCheckQCHoldDef>(sqlCtx, condition);
                sqlCtx = FuncNew.SetColumnFromField<Itcndcheckqchold, ITCNDCheckQCHoldDef>(sqlCtx, setValue, true);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(_Metas.Itcndcheckqchold.fn_udt)).Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ITCNDCheckSettingDef> GetExistITCNDCheckSetting(ITCNDCheckSettingDef condition)
        {
            try
            {
                IList<ITCNDCheckSettingDef> ret = null;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                mtns::SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                mtns::Itcndchecksetting cond = mtns::FuncNew.SetColumnFromField<mtns::Itcndchecksetting, ITCNDCheckSettingDef>(condition);
                sqlCtx = mtns::FuncNew.GetConditionedSelect<mtns::Itcndchecksetting>(null, null, new mtns::ConditionCollection<mtns::Itcndchecksetting>(new mtns::EqualCondition<mtns::Itcndchecksetting>(cond)), mtns::Itcndchecksetting.fn_id);
                //    }
                //}
                sqlCtx = mtns::FuncNew.SetColumnFromField<mtns::Itcndchecksetting, ITCNDCheckSettingDef>(sqlCtx, condition);

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = mtns::FuncNew.SetFieldFromColumn<mtns::Itcndchecksetting, ITCNDCheckSettingDef, ITCNDCheckSettingDef>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddITCNDCheckSetting(ITCNDCheckSettingDef item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<mtns::Itcndchecksetting>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<mtns::Itcndchecksetting, ITCNDCheckSettingDef>(sqlCtx, item);

                sqlCtx.Param(mtns::Itcndchecksetting.fn_cdt).Value = cmDt;
                sqlCtx.Param(mtns::Itcndchecksetting.fn_udt).Value = cmDt;

                item.id = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void RemoveITCNDCheckSetting(ITCNDCheckSettingDef condition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                Itcndchecksetting cond = FuncNew.SetColumnFromField<Itcndchecksetting, ITCNDCheckSettingDef>(condition);
                sqlCtx = FuncNew.GetConditionedDelete<Itcndchecksetting>(new ConditionCollection<Itcndchecksetting>(new EqualCondition<Itcndchecksetting>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<Itcndchecksetting, ITCNDCheckSettingDef>(sqlCtx, condition);

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void ChangeITCNDCheckSetting(ITCNDCheckSettingDef setValue, ITCNDCheckSettingDef condition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                Itcndchecksetting cond = FuncNew.SetColumnFromField<Itcndchecksetting, ITCNDCheckSettingDef>(condition);
                Itcndchecksetting setv = FuncNew.SetColumnFromField<Itcndchecksetting, ITCNDCheckSettingDef>(setValue);
                setv.udt = DateTime.Now;

                sqlCtx = FuncNew.GetConditionedUpdate<Itcndchecksetting>(new SetValueCollection<Itcndchecksetting>(new CommonSetValue<Itcndchecksetting>(setv)), new ConditionCollection<Itcndchecksetting>(new EqualCondition<Itcndchecksetting>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<Itcndchecksetting, ITCNDCheckSettingDef>(sqlCtx, condition);
                sqlCtx = FuncNew.SetColumnFromField<Itcndchecksetting, ITCNDCheckSettingDef>(sqlCtx, setValue, true);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(_Metas.Itcndchecksetting.fn_udt)).Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable Callop_FAKitting_MiddleWare(string pid, string boxId, string editor, string kitPdLine)
        {
            try
            {
                DataTable ret = null;
                SqlParameter[] paramsArray = new SqlParameter[4];
                paramsArray[0] = new SqlParameter("@pid", SqlDbType.Char);
                paramsArray[0].Value = pid;
                paramsArray[1] = new SqlParameter("@boxid", SqlDbType.Char);
                paramsArray[1].Value = boxId;
                paramsArray[2] = new SqlParameter("@editor", SqlDbType.Char);
                paramsArray[2].Value = editor;
                paramsArray[3] = new SqlParameter("@kitpdline", SqlDbType.Char);
                paramsArray[3].Value = kitPdLine;
                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_FA, CommandType.StoredProcedure, "op_FAKitting_MiddleWare", paramsArray);
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<SnoDetPoMoInfo> GetSnoDetPoMoInfoList(SnoDetPoMoInfo condition)
        {
            try
            {
                IList<SnoDetPoMoInfo> ret = null;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                mtns::SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                mtns::SnoDet_PoMo cond = mtns::FuncNew.SetColumnFromField<mtns::SnoDet_PoMo, SnoDetPoMoInfo>(condition);
                sqlCtx = mtns::FuncNew.GetConditionedSelect<mtns::SnoDet_PoMo>(null, null, new mtns::ConditionCollection<mtns::SnoDet_PoMo>(new mtns::EqualCondition<mtns::SnoDet_PoMo>(cond)), mtns::SnoDet_PoMo.fn_snoId);
                //    }
                //}
                sqlCtx = mtns::FuncNew.SetColumnFromField<mtns::SnoDet_PoMo, SnoDetPoMoInfo>(sqlCtx, condition);

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = mtns::FuncNew.SetFieldFromColumn<mtns::SnoDet_PoMo, SnoDetPoMoInfo, SnoDetPoMoInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void AddSnoDetPoMoInfo(SnoDetPoMoInfo item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetCommonInsert<mtns::SnoDet_PoMo>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<mtns::SnoDet_PoMo, SnoDetPoMoInfo>(sqlCtx, item);

                sqlCtx.Param(mtns::SnoDet_PoMo.fn_cdt).Value = cmDt;
                sqlCtx.Param(mtns::SnoDet_PoMo.fn_udt).Value = cmDt;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteSnoDetPoMoInfo(SnoDetPoMoInfo condition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                SnoDet_PoMo cond = FuncNew.SetColumnFromField<SnoDet_PoMo, SnoDetPoMoInfo>(condition);
                sqlCtx = FuncNew.GetConditionedDelete<SnoDet_PoMo>(new ConditionCollection<SnoDet_PoMo>(new EqualCondition<SnoDet_PoMo>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<SnoDet_PoMo, SnoDetPoMoInfo>(sqlCtx, condition);

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateSnoDetPoMoInfo(SnoDetPoMoInfo setValue, SnoDetPoMoInfo condition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                SnoDet_PoMo cond = FuncNew.SetColumnFromField<SnoDet_PoMo, SnoDetPoMoInfo>(condition);
                SnoDet_PoMo setv = FuncNew.SetColumnFromField<SnoDet_PoMo, SnoDetPoMoInfo>(setValue);
                setv.udt = DateTime.Now;

                sqlCtx = FuncNew.GetConditionedUpdate<SnoDet_PoMo>(new SetValueCollection<SnoDet_PoMo>(new CommonSetValue<SnoDet_PoMo>(setv)), new ConditionCollection<SnoDet_PoMo>(new EqualCondition<SnoDet_PoMo>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<SnoDet_PoMo, SnoDetPoMoInfo>(sqlCtx, condition);
                sqlCtx = FuncNew.SetColumnFromField<SnoDet_PoMo, SnoDetPoMoInfo>(sqlCtx, setValue, true);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(_Metas.SnoDet_PoMo.fn_udt)).Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckExistSnoDetPoMoInfo(SnoDetPoMoInfo condition)
        {
            try
            {
                bool ret = false;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                mtns::SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                mtns::SnoDet_PoMo cond = mtns::FuncNew.SetColumnFromField<mtns::SnoDet_PoMo, SnoDetPoMoInfo>(condition);
                sqlCtx = mtns::FuncNew.GetConditionedSelect<mtns::SnoDet_PoMo>("COUNT", new string[]{ mtns::SnoDet_PoMo.fn_snoId }, new mtns::ConditionCollection<mtns::SnoDet_PoMo>(new mtns::EqualCondition<mtns::SnoDet_PoMo>(cond)));
                //    }
                //}
                sqlCtx = mtns::FuncNew.SetColumnFromField<mtns::SnoDet_PoMo, SnoDetPoMoInfo>(sqlCtx, condition);

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ModelPassQty> GetModelPassQty(string line, string station)
        {
            try
            {
                IList<ModelPassQty> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns.ProductLog cond = new mtns.ProductLog();
                        cond.line = line;
                        cond.station = station;

                        mtns.ProductLog cond2 = new mtns.ProductLog();
                        cond2.cdt = DateTime.Now;

                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<mtns.ProductLog>(tk, null, new string[][]{
                        new string[]{mtns.ProductLog.fn_model, mtns.ProductLog.fn_model},
                        new string[]{mtns.ProductLog.fn_productID, string.Format("COUNT(DISTINCT {0})", mtns.ProductLog.fn_productID)},
                        }, new ConditionCollection<mtns.ProductLog>(
                            new EqualCondition<mtns.ProductLog>(cond),
                            new AnyCondition<mtns.ProductLog>(cond2, "{0}>CONVERT(CHAR(10),{1},111)")), mtns.ProductLog.fn_model);
                    }
                }
                sqlCtx.Param(mtns.ProductLog.fn_line).Value = line;
                sqlCtx.Param(mtns.ProductLog.fn_station).Value = station;
                sqlCtx.Param(g.DecAny(mtns.ProductLog.fn_cdt)).Value = _Schema.SqlHelper.GetDateTime();

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<ModelPassQty>();
                        while (sqlR.Read())
                        {
                            ModelPassQty item = new ModelPassQty();
                            item.model = g.GetValue_Str(sqlR, sqlCtx.Indexes(mtns.ProductLog.fn_model));
                            item.qty = g.GetValue_Int32(sqlR, sqlCtx.Indexes(mtns.ProductLog.fn_productID));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool IsSpecialCTO(string prodModel)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Ctobom cond = new _Metas.Ctobom();
                        cond.mpno = prodModel;
                        _Metas.Ctobom cond2 = new _Metas.Ctobom();
                        cond2.tp = "[TPE]";
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Ctobom>(tk, "COUNT", new string[] { _Metas.Ctobom.fn_id }, new ConditionCollection<_Metas.Ctobom>(
                            new EqualCondition<_Metas.Ctobom>(cond),
                            new AnySoloCondition<_Metas.Ctobom>(cond2, "RTRIM(ISNULL({0},''))<>''")));
                    }
                }
                sqlCtx.Param(_Metas.Ctobom.fn_mpno).Value = prodModel;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_BOM, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateProductInfo(fons.ProductInfo setValue, fons.ProductInfo condition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                _Metas.ProductInfo cond = FuncNew.SetColumnFromField<_Metas.ProductInfo, fons.ProductInfo>(condition);
                _Metas.ProductInfo setv = FuncNew.SetColumnFromField<_Metas.ProductInfo, fons.ProductInfo>(setValue);
                setv.udt = DateTime.Now;

                sqlCtx = FuncNew.GetConditionedUpdate<_Metas.ProductInfo>(new SetValueCollection<_Metas.ProductInfo>(new CommonSetValue<_Metas.ProductInfo>(setv)), new ConditionCollection<_Metas.ProductInfo>(new EqualCondition<_Metas.ProductInfo>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<_Metas.ProductInfo, fons.ProductInfo>(sqlCtx, condition);
                sqlCtx = FuncNew.SetColumnFromField<_Metas.ProductInfo, fons.ProductInfo>(sqlCtx, setValue, true);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(_Metas.ProductInfo.fn_udt)).Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void InsertProductInfo(IMES.FisObject.FA.Product.ProductInfo item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<_Metas.ProductInfo>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<_Metas.ProductInfo, IMES.FisObject.FA.Product.ProductInfo>(sqlCtx, item);

                sqlCtx.Param(_Metas.ProductInfo.fn_cdt).Value = cmDt;
                sqlCtx.Param(_Metas.ProductInfo.fn_udt).Value = cmDt;

                item.ID = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void InsertQcStatus(ProductQCStatus item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<_Metas.Qcstatus>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<_Metas.Qcstatus, IMES.FisObject.FA.Product.ProductQCStatus>(sqlCtx, item);

                sqlCtx.Param(_Metas.Qcstatus.fn_cdt).Value = cmDt;
                sqlCtx.Param(_Metas.Qcstatus.fn_udt).Value = cmDt;

                item.ID = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetFactCartonQtyByPalletNo(string palletNo)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.palletNo = palletNo;
                        _Metas.Product cond2 = new _Metas.Product();
                        cond2.cartonSN = "cartonSN";
                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.Product>(tk, "COUNT", new string[][] { new string[] { _Metas.Product.fn_cartonSN, string.Format("DISTINCT {0}", _Metas.Product.fn_cartonSN) } }, new ConditionCollection<_Metas.Product>(
                            new EqualCondition<_Metas.Product>(cond),
                            new AnySoloCondition<_Metas.Product>(cond2, "ISNULL({0},'')<>''")));
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_palletNo).Value = palletNo;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetCombinedQtyByDN_WithCartonSNNotNull(string dn)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.deliveryNo = dn;
                        _Metas.Product cond2 = new _Metas.Product();
                        cond2.cartonSN = "cartonSN";
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, "COUNT", new string[]{_Metas.Product.fn_productID}, new ConditionCollection<_Metas.Product>(
                            new EqualCondition<_Metas.Product>(cond),
                            new AnySoloCondition<_Metas.Product>(cond2, "ISNULL({0},'')<>''")));
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_deliveryNo).Value = dn;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetCountOfProductLogByMo(string station, string mo)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductLog cond = new _Metas.ProductLog();
                        cond.station = station;
                        _Metas.ProductLog cond2 = new _Metas.ProductLog();
                        cond2.productID = mo;
                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.ProductLog>(tk, "COUNT", new string[][] { new string[] { _Metas.ProductLog.fn_productID, string.Format("DISTINCT {0}", _Metas.ProductLog.fn_productID) } }, new ConditionCollection<_Metas.ProductLog>(
                            new EqualCondition<_Metas.ProductLog>(cond),
                            new AnyCondition<_Metas.ProductLog>(cond2, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", _Metas.Product.fn_productID, ToolsNew.GetTableName(typeof(_Metas.Product)), _Metas.Product.fn_mo, "{1}"))));
                    }
                }
                sqlCtx.Param(_Metas.ProductLog.fn_station).Value = station;
                sqlCtx.Param(g.DecAny(_Metas.ProductLog.fn_productID)).Value = mo;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductQCStatus> GetQCStatusOrderByCdtDesc(string productID, string[] tps)
        {
            try
            {
                IList<ProductQCStatus> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns.Qcstatus cond = new mtns.Qcstatus();
                        cond.productID = productID;

                        mtns.Qcstatus cond2 = new mtns.Qcstatus();
                        cond2.tp = "[INSET]";

                        sqlCtx = FuncNew.GetConditionedSelect<mtns.Qcstatus>(tk, null, null, new ConditionCollection<mtns.Qcstatus>(
                            new EqualCondition<mtns.Qcstatus>(cond),
                            new InSetCondition<mtns.Qcstatus>(cond2)), mtns.Qcstatus.fn_cdt + FuncNew.DescendOrder);
                    }
                }
                sqlCtx.Param(mtns.Qcstatus.fn_productID).Value = productID;

                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(_Metas.Qcstatus.fn_tp), g.ConvertInSet(tps));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<mtns.Qcstatus, ProductQCStatus, ProductQCStatus>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductQCStatus> GetQCStatusOrderByUdt(string productID, string[] tps)
        {
            try
            {
                IList<ProductQCStatus> ret = null;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                        mtns.Qcstatus cond = new mtns.Qcstatus();
                        cond.productID = productID;

                        var condSet = new ConditionCollection<mtns.Qcstatus>();
                        condSet.Add(new EqualCondition<mtns.Qcstatus>(cond));

                        if (tps != null && tps.Length > 0)
                        {
                            mtns.Qcstatus cond2 = new mtns.Qcstatus();
                            cond2.tp = "[INSET]";
                            condSet.Add(new InSetCondition<mtns.Qcstatus>(cond2));
                        }
                        sqlCtx = FuncNew.GetConditionedSelect<mtns.Qcstatus>(null, null, condSet, mtns.Qcstatus.fn_udt);
                //    }
                //}
                sqlCtx.Param(mtns.Qcstatus.fn_productID).Value = productID;

                string Sentence = string.Empty;
                if (tps != null && tps.Length > 0)
                    Sentence = sqlCtx.Sentence.Replace(g.DecInSet(_Metas.Qcstatus.fn_tp), g.ConvertInSet(tps));
                else
                    Sentence = sqlCtx.Sentence;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<mtns.Qcstatus, ProductQCStatus, ProductQCStatus>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductQCStatus> GetQCStatusOrderByUdtDesc(string productID, string[] tps)
        {
            try
            {
                IList<ProductQCStatus> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns.Qcstatus cond = new mtns.Qcstatus();
                        cond.productID = productID;

                        mtns.Qcstatus cond2 = new mtns.Qcstatus();
                        cond2.tp = "[INSET]";

                        sqlCtx = FuncNew.GetConditionedSelect<mtns.Qcstatus>(tk, null, null, new ConditionCollection<mtns.Qcstatus>(
                            new EqualCondition<mtns.Qcstatus>(cond),
                            new InSetCondition<mtns.Qcstatus>(cond2)), mtns.Qcstatus.fn_udt + FuncNew.DescendOrder);
                    }
                }
                sqlCtx.Param(mtns.Qcstatus.fn_productID).Value = productID;

                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(_Metas.Qcstatus.fn_tp), g.ConvertInSet(tps));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<mtns.Qcstatus, ProductQCStatus, ProductQCStatus>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductQCStatus> GetQCStatusOrderByUdtDesc(string productID)
        {
            try
            {
                IList<ProductQCStatus> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns.Qcstatus cond = new mtns.Qcstatus();
                        cond.productID = productID;

                        sqlCtx = FuncNew.GetConditionedSelect<mtns.Qcstatus>(tk, null, null, new ConditionCollection<mtns.Qcstatus>(
                            new EqualCondition<mtns.Qcstatus>(cond)), mtns.Qcstatus.fn_udt + FuncNew.DescendOrder);
                    }
                }
                sqlCtx.Param(mtns.Qcstatus.fn_productID).Value = productID;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<mtns.Qcstatus, ProductQCStatus, ProductQCStatus>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateForBindDNAndPallet(fons.Product item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns.Product cond = new mtns.Product();
                        cond.productID = item.ProId;

                        mtns.Product cond2 = new mtns.Product();
                        cond2.cartonSN = "[Empty]";

                        mtns.Product setv = FuncNew.SetColumnFromField<mtns.Product, fons.Product>(item, mtns.Product.fn_productID);
                        setv.udt = DateTime.Now;

                        sqlCtx = FuncNew.GetConditionedUpdate<mtns.Product>(tk, new SetValueCollection<mtns.Product>(new CommonSetValue<mtns.Product>(setv)), new ConditionCollection<mtns.Product>(
                            new EqualCondition<mtns.Product>(cond),
                            new AnySoloCondition<mtns.Product>(cond2, "ISNULL({0},'')=''")));
                    }
                }
                sqlCtx.Param(mtns.Product.fn_productID).Value = item.ProId;

                sqlCtx = FuncNew.SetColumnFromField<mtns.Product, fons.Product>(sqlCtx, item, true);

                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(mtns.Product.fn_udt)).Value = cmDt;

                int res = _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
                if (res > 0)
                {
                }
                else
                {
                    List<string> err = new List<string>();
                    err.Add(item.ProId);
                    var ex =  new FisException("CHK150", err);
                    //var ex2 = new FisException("CHK876", new List<string>());
                    throw ex;
                }
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.FisObject.FA.Product.ProductInfo> GetProductInfoList(string proid, IList<string> itemTypes)
        {
            try
            {
                IList<fons.ProductInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns.ProductInfo cond = new mtns.ProductInfo();
                        cond.productID = proid;

                        mtns.ProductInfo cond2 = new mtns.ProductInfo();
                        cond2.infoType = "[INSET]";

                        sqlCtx = FuncNew.GetConditionedSelect<mtns.ProductInfo>(tk, null, null, new ConditionCollection<mtns.ProductInfo>(
                            new EqualCondition<mtns.ProductInfo>(cond),
                            new InSetCondition<mtns.ProductInfo>(cond2)), mtns.ProductInfo.fn_infoType);
                    }
                }
                sqlCtx.Param(mtns.ProductInfo.fn_productID).Value = proid;
                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(mtns.ProductInfo.fn_infoType), g.ConvertInSet(itemTypes));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<mtns.ProductInfo, fons.ProductInfo, fons.ProductInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetPartSnPrefixListFromProductPart(ProductPart condition)
        {
            try
            {
                IList<string> ret = null;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                mtns::SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                mtns::Product_Part cond = mtns::FuncNew.SetColumnFromField<mtns::Product_Part, ProductPart>(condition);
                sqlCtx = mtns::FuncNew.GetConditionedSelectForFuncedField<mtns::Product_Part>("DISTINCT", new string[][] { new string[] { mtns::Product_Part.fn_partSn, string.Format("LEFT({0},5)", mtns::Product_Part.fn_partSn) } }, new mtns::ConditionCollection<mtns::Product_Part>(new mtns::EqualCondition<mtns::Product_Part>(cond)));
                //    }
                //}
                sqlCtx = mtns::FuncNew.SetColumnFromField<mtns::Product_Part, ProductPart>(sqlCtx, condition);

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string>();
                        while (sqlR.Read())
                        {
                            string item = g.GetValue_Str(sqlR, sqlCtx.Indexes(mtns.Product_Part.fn_partSn));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetInfoValuePrefixFromProductInfo(string[] prodIds, string infoType)
        {
            try
            {
                IList<string> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductInfo cond = new _Metas.ProductInfo();
                        cond.infoType = infoType;

                        _Metas.ProductInfo cond2 = new _Metas.ProductInfo();
                        cond2.productID = "[INSET]";

                        _Metas.ProductInfo cond3 = new _Metas.ProductInfo();
                        cond3.infoValue = "[Any]";

                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.ProductInfo>(tk, "DISTINCT", new string[][] { new string[] { _Metas.ProductInfo.fn_infoValue, string.Format("LEFT({0},CHARINDEX('M',{0})-3)", _Metas.ProductInfo.fn_infoValue) } }, new ConditionCollection<_Metas.ProductInfo>(
                            new EqualCondition<_Metas.ProductInfo>(cond),
                            new InSetCondition<_Metas.ProductInfo>(cond2,"RTRIM({0})"),
                            new AnySoloCondition<_Metas.ProductInfo>(cond3, "CHARINDEX('M',{0})>3")
                            ));
                    }
                }
                sqlCtx.Param(_Metas.ProductInfo.fn_infoType).Value = infoType;

                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(_Metas.ProductInfo.fn_productID), g.ConvertInSet(prodIds));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string>();
                        while (sqlR.Read())
                        {
                            string item = g.GetValue_Str(sqlR, sqlCtx.Indexes(mtns.ProductInfo.fn_infoValue));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetPartSnPrefixFromProductPart(string[] prodIds, string bomNodeType)
        {
            try
            {
                IList<string> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.bomNodeType = bomNodeType;

                        _Metas.Product_Part cond2 = new _Metas.Product_Part();
                        cond2.productID = "[INSET]";

                        _Metas.Product_Part cond3 = new _Metas.Product_Part();
                        cond3.partSn = "[Any]";

                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.Product_Part>(tk, "DISTINCT", new string[][] { new string[] { _Metas.Product_Part.fn_partSn, string.Format("LEFT({0},CHARINDEX('M',{0})-3)", _Metas.Product_Part.fn_partSn) } }, new ConditionCollection<_Metas.Product_Part>(
                            new EqualCondition<_Metas.Product_Part>(cond),
                            new InSetCondition<_Metas.Product_Part>(cond2, "RTRIM({0})"),
                            new AnySoloCondition<_Metas.Product_Part>(cond3, "CHARINDEX('M',{0})>3")
                            ));
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_bomNodeType).Value = bomNodeType;

                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(_Metas.Product_Part.fn_productID), g.ConvertInSet(prodIds));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string>();
                        while (sqlR.Read())
                        {
                            string item = g.GetValue_Str(sqlR, sqlCtx.Indexes(mtns.Product_Part.fn_partSn));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetCountOfProductByModelAndStation(string model, string station)
        {
            try
            {
                int ret = 0;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.Product>();
                        _Metas.Product cond = new _Metas.Product();
                        cond.model = model;
                        tf1.Conditions.Add(new EqualCondition<_Metas.Product>(cond));
                        _Metas.Product cond0 = new _Metas.Product();
                        cond0.custsn = string.Empty;
                        tf1.Conditions.Add(new NotEqualCondition<_Metas.Product>(cond0));
                        tf1.AddRangeToGetFieldNames(_Metas.Product.fn_productID);

                        tf2 = new TableAndFields<_Metas.ProductStatus>();
                        _Metas.ProductStatus cond2 = new _Metas.ProductStatus();
                        cond2.station = station;
                        cond2.status = 1;
                        tf2.Conditions.Add(new EqualCondition<_Metas.ProductStatus>(cond2));
                        tf2.ClearToGetFieldNames();

                        tafa = new ITableAndFields[] { tf1, tf2 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.Product, _Metas.ProductStatus>(tf1, _Metas.Product.fn_productID, tf2, _Metas.ProductStatus.fn_productID));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, "COUNT", tafa, tblCnnts);

                        sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.Product.fn_custsn)).Value = cond0.custsn;
                        sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.ProductStatus.fn_status)).Value = cond2.status;
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];

                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.Product.fn_model)).Value = model;
                sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.ProductStatus.fn_station)).Value = station;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetProductIdsByModelAndStation(string model, string station, int count)
        {
            try
            {
                IList<string> ret = null;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.Product>();
                        _Metas.Product cond = new _Metas.Product();
                        cond.model = model;
                        tf1.Conditions.Add(new EqualCondition<_Metas.Product>(cond));
                        _Metas.Product cond0 = new _Metas.Product();
                        cond0.custsn = string.Empty;
                        tf1.Conditions.Add(new NotEqualCondition<_Metas.Product>(cond0));
                        tf1.AddRangeToGetFieldNames(_Metas.Product.fn_productID);

                        tf2 = new TableAndFields<_Metas.ProductStatus>();
                        _Metas.ProductStatus cond2 = new _Metas.ProductStatus();
                        cond2.station = station;
                        cond2.status = 1;
                        tf2.Conditions.Add(new EqualCondition<_Metas.ProductStatus>(cond2));
                        tf2.ClearToGetFieldNames();

                        tafa = new ITableAndFields[] { tf1, tf2 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.Product, _Metas.ProductStatus>(tf1, _Metas.Product.fn_productID, tf2, _Metas.ProductStatus.fn_productID));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, "TOP @COUNT", tafa, tblCnnts, "t1." + _Metas.Product.fn_udt + FuncNew.DescendOrder);

                        sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.Product.fn_custsn)).Value = cond0.custsn;
                        sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.ProductStatus.fn_status)).Value = cond2.status;
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];

                string Sentence = sqlCtx.Sentence.Replace("TOP @COUNT", "TOP " + count.ToString());

                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.Product.fn_model)).Value = model;
                sqlCtx.Param(g.DecAlias(tf2.Alias, _Metas.ProductStatus.fn_station)).Value = station;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string>();
                        while (sqlR.Read())
                        {
                            string item = g.GetValue_Str(sqlR, sqlCtx.Indexes(g.DecAlias(tf1.Alias, _Metas.Product.fn_productID)));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DateTime GetNewestCdtFromProductInfo(string productId, string[] infoTypes)
        {
            try
            {
                DateTime ret = DateTime.MinValue;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductInfo cond = new _Metas.ProductInfo();
                        cond.productID = productId;
                        _Metas.ProductInfo cond2 = new _Metas.ProductInfo();
                        cond2.infoType = "[INSET]";
                        //sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductInfo>(tk, "MAX", new string[] { _Metas.ProductInfo.fn_cdt }, new ConditionCollection<_Metas.ProductInfo>(new EqualCondition<_Metas.ProductInfo>(cond), new InSetCondition<_Metas.ProductInfo>(cond2)));
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductInfo>(tk, "MAX", new string[] { _Metas.ProductInfo.fn_udt }, new ConditionCollection<_Metas.ProductInfo>(new EqualCondition<_Metas.ProductInfo>(cond), new InSetCondition<_Metas.ProductInfo>(cond2)));
                    }
                }
                sqlCtx.Param(_Metas.ProductInfo.fn_productID).Value = productId;

                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(_Metas.ProductInfo.fn_infoType), g.ConvertInSet(infoTypes));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_DateTime(sqlR, sqlCtx.Indexes("MAX"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DateTime GetNewestCdtFromProductLog(string productId, string station, int status)
        {
            try
            {
                DateTime ret = DateTime.MinValue;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductLog cond = new _Metas.ProductLog();
                        cond.productID = productId;
                        cond.station = station;
                        cond.status = status;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductLog>(tk, "TOP 1", new string[] { _Metas.ProductLog.fn_cdt }, new ConditionCollection<_Metas.ProductLog>(new EqualCondition<_Metas.ProductLog>(cond)), _Metas.ProductLog.fn_cdt + FuncNew.DescendOrder);
                    }
                }
                sqlCtx.Param(_Metas.ProductLog.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.ProductLog.fn_station).Value = station;
                sqlCtx.Param(_Metas.ProductLog.fn_status).Value = status;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_DateTime(sqlR, sqlCtx.Indexes(_Metas.ProductLog.fn_cdt));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProduct> GetProductListByCartonNo(string cartonNo)
        {
            try
            {
                IList<IProduct> ret = new List<IProduct>();

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.cartonSN = cartonNo;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, null, null, new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond)), _Metas.Product.fn_productID);
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_cartonSN).Value = cartonNo;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<_Metas.Product, fons.Product, IProduct>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable ExecSpForQuery(string dbConnString, string spName, params SqlParameter[] paramsArray)
        {
            try
            {
                DataTable ret = null;
                ret = _Schema.SqlHelper.ExecuteDataFillConsiderOutParams(dbConnString, CommandType.StoredProcedure, spName, paramsArray);
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void ExecSpForNonQuery(string dbConnString, string spName, params SqlParameter[] paramsArray)
        {
            try
            {
                _Schema.SqlHelper.ExecuteNonQueryConsiderOutParams(dbConnString, CommandType.StoredProcedure, spName, paramsArray);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetDefectForProductRepair(int repairId)
        {
            try
            {
                IList<string> ret = null;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields tf3 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.ProductRepair>();
                        _Metas.ProductRepair cond = new _Metas.ProductRepair();
                        cond.id = repairId;
                        tf1.Conditions.Add(new EqualCondition<_Metas.ProductRepair>(cond));
                        tf1.ClearToGetFieldNames();

                        tf2 = new TableAndFields<_Metas.ProductRepair_DefectInfo>();
                        tf2.ClearToGetFieldNames();

                        tf3 = new TableAndFields<_Metas.DefectCode>();
                        tf3.SubDBCalalog = _Schema.SqlHelper.DB_GetData;
                        tf3.AddRangeToGetFieldNames(_Metas.DefectCode.fn_defect, _Metas.DefectCode.fn_descr);

                        tafa = new ITableAndFields[] { tf1, tf2, tf3 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(
                            new TableConnectionItem<_Metas.ProductRepair, _Metas.ProductRepair_DefectInfo>(tf1, _Metas.ProductRepair.fn_id, tf2, _Metas.ProductRepair_DefectInfo.fn_productRepairID),
                            new TableConnectionItem<_Metas.ProductRepair_DefectInfo, _Metas.DefectCode>(tf2, _Metas.ProductRepair_DefectInfo.fn_defectCode, tf3, _Metas.DefectCode.fn_defect));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, null, tafa, tblCnnts);
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];
                tf3 = tafa[2];

                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.ProductRepair.fn_id)).Value = repairId;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string>();
                        while (sqlR.Read())
                        {
                            string item = string.Format("{0}    {1}",
                                g.GetValue_Str(sqlR, sqlCtx.Indexes(g.DecAlias(tf3.Alias, _Metas.DefectCode.fn_defect))),
                                g.GetValue_Str(sqlR, sqlCtx.Indexes(g.DecAlias(tf3.Alias, _Metas.DefectCode.fn_descr))));
                            ret.Add(item);
                        }
                     }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetRemarkListOfProductRepairDefectInfo(int repairId)
        {
            try
            {
                IList<string> ret = null;

                ITableAndFields tf1 = null;
                ITableAndFields tf2 = null;
                ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        tf1 = new TableAndFields<_Metas.ProductRepair>();
                        _Metas.ProductRepair cond = new _Metas.ProductRepair();
                        cond.id = repairId;
                        tf1.Conditions.Add(new EqualCondition<_Metas.ProductRepair>(cond));
                        tf1.ClearToGetFieldNames();

                        tf2 = new TableAndFields<_Metas.ProductRepair_DefectInfo>();
                        tf2.AddRangeToGetFieldNames(_Metas.ProductRepair_DefectInfo.fn_remark);

                        tafa = new ITableAndFields[] { tf1, tf2 };

                        TableConnectionCollection tblCnnts = new TableConnectionCollection(new TableConnectionItem<_Metas.ProductRepair, _Metas.ProductRepair_DefectInfo>(tf1, _Metas.ProductRepair.fn_id, tf2, _Metas.ProductRepair_DefectInfo.fn_productRepairID));

                        sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, "DISTINCT", tafa, tblCnnts, "t2." + _Metas.ProductRepair_DefectInfo.fn_remark);
                    }
                }
                tafa = sqlCtx.TableFields;
                tf1 = tafa[0];
                tf2 = tafa[1];

                sqlCtx.Param(g.DecAlias(tf1.Alias, _Metas.ProductRepair.fn_id)).Value = repairId;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string>();
                        while (sqlR.Read())
                        {
                            string item = g.GetValue_Str(sqlR, sqlCtx.Indexes(g.DecAlias(tf2.Alias, _Metas.ProductRepair_DefectInfo.fn_remark)));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetNewestProductRepairId(string productId)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductRepair cond = new _Metas.ProductRepair();
                        cond.productID = productId;
                        cond.status = 1;

                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductRepair>(tk, "TOP 1", new string[] { _Metas.ProductRepair.fn_id }, new ConditionCollection<_Metas.ProductRepair>(
                            new EqualCondition<_Metas.ProductRepair>(cond)), ProductRepair.fn_udt + FuncNew.DescendOrder);

                        sqlCtx.Param(_Metas.ProductRepair.fn_status).Value = cond.status;
                    }
                }
                sqlCtx.Param(_Metas.ProductRepair.fn_productID).Value = productId;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes(_Metas.ProductRepair.fn_id));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetNewestProductRepairIdRegardlessStatus(string productId)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductRepair cond = new _Metas.ProductRepair();
                        cond.productID = productId;

                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductRepair>(tk, "TOP 1", new string[] { _Metas.ProductRepair.fn_id }, new ConditionCollection<_Metas.ProductRepair>(
                            new EqualCondition<_Metas.ProductRepair>(cond)), ProductRepair.fn_udt + FuncNew.DescendOrder);
                    }
                }
                sqlCtx.Param(_Metas.ProductRepair.fn_productID).Value = productId;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes(_Metas.ProductRepair.fn_id));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        //2013-01-09: Vincent Change SQL Statement
        public int GetCountOfCurrentDayByModelAndStation(string model, string station)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        //_Metas.ProductLog cond = new _Metas.ProductLog();
                        //cond.model = model;
                        //cond.station = station;
                        //_Metas.ProductLog cond2 = new _Metas.ProductLog();
                        //cond2.cdt = DateTime.Now;
                        //sqlCtx = FuncNew.GetConditionedSelectForFuncedField<_Metas.ProductLog>(tk, "COUNT", new string[][] { new string[] { _Metas.ProductLog.fn_productID, string.Format("DISTINCT {0}", _Metas.ProductLog.fn_productID) } }, new ConditionCollection<_Metas.ProductLog>(
                        //    new EqualCondition<_Metas.ProductLog>(cond),
                        //    new EqualCondition<_Metas.ProductLog>(cond2, "CONVERT(CHAR(10),{0},121)", "CONVERT(CHAR(10),{0},121)")));

                        sqlCtx = new SQLContextNew();
                        sqlCtx.Sentence = @"SELECT COUNT(DISTINCT ProductID) 
                                                            FROM ProductLog 
                                                             WHERE Cdt >=@Cdt1 and
                                                                            Cdt < @Cdt2 and 
                                                                            Model=@Model AND 
                                                                            Station=@Station";


                        sqlCtx.AddParam("Cdt1", new SqlParameter("@Cdt1", SqlDbType.DateTime));
                        sqlCtx.AddParam("Cdt2", new SqlParameter("@Cdt2", SqlDbType.DateTime));
                        sqlCtx.AddParam("Model", new SqlParameter("@Model" , SqlDbType.VarChar));
                        sqlCtx.AddParam("Station", new SqlParameter("@Station" , SqlDbType.VarChar));

                        SQLCache.InsertIntoCache(tk, sqlCtx);

                    }
                }

                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param("Cdt1").Value =new DateTime(cmDt.Year,cmDt.Month,cmDt.Day);
                sqlCtx.Param("Cdt2").Value = new DateTime(cmDt.AddDays(1).Year, cmDt.AddDays(1).Month, cmDt.AddDays(1).Day);


                sqlCtx.Param("Model").Value = model;
                sqlCtx.Param("Station").Value = station;
                
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, 
                                                                                                                             CommandType.Text, 
                                                                                                                             sqlCtx.Sentence, 
                                                                                                                             sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        //ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                        ret = g.GetValue_Int32(sqlR, 0);
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public decimal GetAverageModelWeightOfCurrentDay(string model, string station)
        {
            try
            {
                decimal ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.productID = "[INSET]";

                        var subS = ComposeForGetAverageModelWeightOfCurrentDay(model, station);

                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, "AVG", new string[] { _Metas.Product.fn_unitWeight }, new ConditionCollection<_Metas.Product>(new InSetCondition<_Metas.Product>(cond)));

                        sqlCtx.Sentence = sqlCtx.Sentence.Replace(g.DecInSet(_Metas.Product.fn_productID), subS.Sentence);

                        SQLContextNew.CopyParams(sqlCtx, subS);
                    }
                }
                sqlCtx.Param(_Metas.ProductLog.fn_model).Value = model;
                sqlCtx.Param(_Metas.ProductLog.fn_station).Value = station;
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(_Metas.ProductLog.fn_cdt).Value = cmDt;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Decimal(sqlR, sqlCtx.Indexes("AVG"));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private SQLContextNew ComposeForGetAverageModelWeightOfCurrentDay(string model, string station)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductLog cond = new _Metas.ProductLog();
                        cond.model = model;
                        cond.station = station;
                        _Metas.ProductLog cond2 = new _Metas.ProductLog();
                        cond2.cdt = DateTime.Now;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductLog>(tk, "DISTINCT", new string[] { _Metas.ProductLog.fn_productID }, new ConditionCollection<_Metas.ProductLog>(
                            new EqualCondition<_Metas.ProductLog>(cond),
                            new EqualCondition<_Metas.ProductLog>(cond2, "CONVERT(CHAR(10),{0},121)", "CONVERT(CHAR(10),{0},121)")));
                    }
                }
                return sqlCtx;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProduct(string uEditor, IMES.FisObject.FA.Product.Product eqCondition, IMES.FisObject.FA.Product.Product neqCondition)
        {
            try
            {
                if (eqCondition == null)
                    eqCondition = new fons.Product();
                if (neqCondition == null)
                    neqCondition = new fons.Product();

                //eqCondition.CartonWeight = neqCondition.UnitWeight = decimal.MinValue;
                //neqCondition.CartonWeight = eqCondition.UnitWeight = decimal.MinValue;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                        _Metas.Product cond = FuncNew.SetColumnFromField<_Metas.Product, fons.Product>(eqCondition);

                        _Metas.Product cond2 = FuncNew.SetColumnFromField<_Metas.Product, fons.Product>(neqCondition);

                        cond.cartonWeight = cond2.unitWeight = decimal.MinValue;
                        cond2.cartonWeight = cond.unitWeight = decimal.MinValue;

                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.Product, _Metas.UnpackProduct>(
                            new string[][]{
                                new string[]{_Metas.Product.fn_cartonSN,_Metas.UnpackProduct.fn_cartonSN},
                                new string[]{_Metas.Product.fn_cartonWeight,_Metas.UnpackProduct.fn_cartonWeight},
                                new string[]{_Metas.Product.fn_cdt,_Metas.UnpackProduct.fn_cdt},
                                new string[]{_Metas.Product.fn_custsn,_Metas.UnpackProduct.fn_custsn},
                                new string[]{_Metas.Product.fn_cvsn,_Metas.UnpackProduct.fn_cvsn},
                                new string[]{_Metas.Product.fn_deliveryNo,_Metas.UnpackProduct.fn_deliveryNo},
                                new string[]{_Metas.Product.fn_ecr,_Metas.UnpackProduct.fn_ecr},
                                new string[]{_Metas.Product.fn_mac,_Metas.UnpackProduct.fn_mac},
                                new string[]{_Metas.Product.fn_mbecr,_Metas.UnpackProduct.fn_mbecr},
                                new string[]{_Metas.Product.fn_mo,_Metas.UnpackProduct.fn_mo},
                                new string[]{_Metas.Product.fn_model,_Metas.UnpackProduct.fn_model},
                                new string[]{_Metas.Product.fn_ooaid,_Metas.UnpackProduct.fn_ooaid},
                                new string[]{_Metas.Product.fn_palletNo,_Metas.UnpackProduct.fn_palletNo},
                                new string[]{_Metas.Product.fn_pcbid,_Metas.UnpackProduct.fn_pcbid},
                                new string[]{_Metas.Product.fn_pcbmodel,_Metas.UnpackProduct.fn_pcbmodel},
                                new string[]{_Metas.Product.fn_pizzaID,_Metas.UnpackProduct.fn_pizzaID},
                                new string[]{_Metas.Product.fn_productID,_Metas.UnpackProduct.fn_productID},
                                new string[]{_Metas.Product.fn_prsn,_Metas.UnpackProduct.fn_prsn},
                                new string[]{_Metas.Product.fn_state,_Metas.UnpackProduct.fn_state},
                                new string[]{_Metas.Product.fn_udt,_Metas.UnpackProduct.fn_udt},
                                new string[]{_Metas.Product.fn_unitWeight,_Metas.UnpackProduct.fn_unitWeight},
                                new string[]{_Metas.Product.fn_uuid,_Metas.UnpackProduct.fn_uuid},
                                new string[]{string.Format("@{0}",_Metas.UnpackProduct.fn_ueditor), _Metas.UnpackProduct.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProduct.fn_updt}
                            },
                            new ConditionCollection<_Metas.Product>(
                                new EqualCondition<_Metas.Product>(cond),
                                new NotEqualCondition<_Metas.Product>(cond2)));
                        sqlCtx.AddParam(_Metas.UnpackProduct.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProduct.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProduct>(_Metas.UnpackProduct.fn_ueditor)));

                        var sqlCtx2 = FuncNew.GetConditionedSelect<_Metas.Product>(null, new string[] { _Metas.Product.fn_productID }, new ConditionCollection<_Metas.Product>(new NotEqualCondition<_Metas.Product>(cond2)));
                    //}
                //}

                sqlCtx = FuncNew.SetColumnFromField<_Metas.Product, fons.Product>(sqlCtx, eqCondition);
                sqlCtx2 = FuncNew.SetColumnFromField<_Metas.Product, fons.Product>(sqlCtx2, neqCondition);
                sqlCtx.OverrideParams(sqlCtx2);

                sqlCtx.Param(_Metas.UnpackProduct.fn_ueditor).Value = uEditor;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductInfo(string uEditor, IMES.FisObject.FA.Product.ProductInfo eqCondition, IMES.FisObject.FA.Product.ProductInfo neqCondition)
        {
            try
            {
                if (eqCondition == null)
                    eqCondition = new fons.ProductInfo();
                if (neqCondition == null)
                    neqCondition = new fons.ProductInfo();

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                _Metas.ProductInfo cond = FuncNew.SetColumnFromField<_Metas.ProductInfo, fons.ProductInfo>(eqCondition);

                _Metas.ProductInfo cond2 = FuncNew.SetColumnFromField<_Metas.ProductInfo, fons.ProductInfo>(neqCondition);

                sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.ProductInfo, _Metas.UnpackProductInfo>(
                    new string[][]{
                                new string[]{_Metas.ProductInfo.fn_cdt,_Metas.UnpackProductInfo.fn_cdt},
                                new string[]{_Metas.ProductInfo.fn_editor,_Metas.UnpackProductInfo.fn_editor},
                                new string[]{_Metas.ProductInfo.fn_id,_Metas.UnpackProductInfo.fn_productInfoID},
                                new string[]{_Metas.ProductInfo.fn_infoType,_Metas.UnpackProductInfo.fn_infoType},
                                new string[]{_Metas.ProductInfo.fn_infoValue,_Metas.UnpackProductInfo.fn_infoValue},
                                new string[]{_Metas.ProductInfo.fn_productID,_Metas.UnpackProductInfo.fn_productID},
                                new string[]{_Metas.ProductInfo.fn_udt,_Metas.UnpackProductInfo.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProductInfo.fn_ueditor), _Metas.UnpackProductInfo.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProductInfo.fn_updt}
                            },
                    new ConditionCollection<_Metas.ProductInfo>(
                        new EqualCondition<_Metas.ProductInfo>(cond),
                        new NotEqualCondition<_Metas.ProductInfo>(cond2)));
                sqlCtx.AddParam(_Metas.UnpackProductInfo.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProductInfo.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProductInfo>(_Metas.UnpackProductInfo.fn_ueditor)));

                var sqlCtx2 = FuncNew.GetConditionedSelect<_Metas.ProductInfo>(null, new string[] { _Metas.ProductInfo.fn_id }, new ConditionCollection<_Metas.ProductInfo>(new NotEqualCondition<_Metas.ProductInfo>(cond2)));
                //}
                //}

                sqlCtx = FuncNew.SetColumnFromField<_Metas.ProductInfo, fons.ProductInfo>(sqlCtx, eqCondition);
                sqlCtx2 = FuncNew.SetColumnFromField<_Metas.ProductInfo, fons.ProductInfo>(sqlCtx2, neqCondition);
                sqlCtx.OverrideParams(sqlCtx2);

                sqlCtx.Param(_Metas.UnpackProductInfo.fn_ueditor).Value = uEditor;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductPart(string uEditor, ProductPart eqCondition, ProductPart neqCondition)
        {
            try
            {
                if (eqCondition == null)
                    eqCondition = new ProductPart();
                if (neqCondition == null)
                    neqCondition = new ProductPart();

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                _Metas.Product_Part cond = FuncNew.SetColumnFromField<_Metas.Product_Part, ProductPart>(eqCondition);

                _Metas.Product_Part cond2 = FuncNew.SetColumnFromField<_Metas.Product_Part, ProductPart>(neqCondition);

                sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.Product_Part, _Metas.UnpackProduct_Part>(
                    new string[][]{
                                new string[]{_Metas.Product_Part.fn_bomNodeType,_Metas.UnpackProduct_Part.fn_bomNodeType},
                                new string[]{_Metas.Product_Part.fn_cdt,_Metas.UnpackProduct_Part.fn_cdt},
                                new string[]{_Metas.Product_Part.fn_checkItemType,_Metas.UnpackProduct_Part.fn_checkItemType},
                                new string[]{_Metas.Product_Part.fn_custmerPn,_Metas.UnpackProduct_Part.fn_custmerPn},
                                new string[]{_Metas.Product_Part.fn_editor,_Metas.UnpackProduct_Part.fn_editor},
                                new string[]{_Metas.Product_Part.fn_id,_Metas.UnpackProduct_Part.fn_product_PartID},
                                new string[]{_Metas.Product_Part.fn_iecpn,_Metas.UnpackProduct_Part.fn_iecpn},
                                new string[]{_Metas.Product_Part.fn_partNo,_Metas.UnpackProduct_Part.fn_partNo},
                                new string[]{_Metas.Product_Part.fn_partSn,_Metas.UnpackProduct_Part.fn_partSn},
                                new string[]{_Metas.Product_Part.fn_partType,_Metas.UnpackProduct_Part.fn_partType},
                                new string[]{_Metas.Product_Part.fn_productID,_Metas.UnpackProduct_Part.fn_productID},
                                new string[]{_Metas.Product_Part.fn_station,_Metas.UnpackProduct_Part.fn_station},
                                new string[]{_Metas.Product_Part.fn_udt,_Metas.UnpackProduct_Part.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProduct_Part.fn_ueditor), _Metas.UnpackProduct_Part.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProduct_Part.fn_updt}
                            },
                    new ConditionCollection<_Metas.Product_Part>(
                        new EqualCondition<_Metas.Product_Part>(cond),
                        new NotEqualCondition<_Metas.Product_Part>(cond2)));
                sqlCtx.AddParam(_Metas.UnpackProduct_Part.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProduct_Part.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProduct_Part>(_Metas.UnpackProduct_Part.fn_ueditor)));

                var sqlCtx2 = FuncNew.GetConditionedSelect<_Metas.Product_Part>(null, new string[] { _Metas.Product_Part.fn_id }, new ConditionCollection<_Metas.Product_Part>(new NotEqualCondition<_Metas.Product_Part>(cond2)));
                //}
                //}

                sqlCtx = FuncNew.SetColumnFromField<_Metas.Product_Part, ProductPart>(sqlCtx, eqCondition);
                sqlCtx2 = FuncNew.SetColumnFromField<_Metas.Product_Part, ProductPart>(sqlCtx2, neqCondition);
                sqlCtx.OverrideParams(sqlCtx2);

                sqlCtx.Param(_Metas.UnpackProduct_Part.fn_ueditor).Value = uEditor;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteProductInfo(IMES.FisObject.FA.Product.ProductInfo eqCondition, IMES.FisObject.FA.Product.ProductInfo neqCondition)
        {
            try
            {
                if (eqCondition == null)
                    eqCondition = new fons.ProductInfo();
                if (neqCondition == null)
                    neqCondition = new fons.ProductInfo();

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {

                _Metas.ProductInfo cond = FuncNew.SetColumnFromField<_Metas.ProductInfo, fons.ProductInfo>(eqCondition);
                _Metas.ProductInfo cond2 = FuncNew.SetColumnFromField<_Metas.ProductInfo, fons.ProductInfo>(neqCondition);

                sqlCtx = FuncNew.GetConditionedDelete<_Metas.ProductInfo>(new ConditionCollection<_Metas.ProductInfo>(new EqualCondition<_Metas.ProductInfo>(cond), new NotEqualCondition<_Metas.ProductInfo>(cond2)));
                var sqlCtx2 = FuncNew.GetConditionedSelect<_Metas.ProductInfo>(null, new string[] { _Metas.ProductInfo.fn_id }, new ConditionCollection<_Metas.ProductInfo>(new NotEqualCondition<_Metas.ProductInfo>(cond2)));
                
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<_Metas.ProductInfo, fons.ProductInfo>(sqlCtx, eqCondition);
                sqlCtx2 = FuncNew.SetColumnFromField<_Metas.ProductInfo, fons.ProductInfo>(sqlCtx2, neqCondition);
                sqlCtx.OverrideParams(sqlCtx2);

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteProductPart(ProductPart eqCondition, ProductPart neqCondition)
        {
            try
            {
                if (eqCondition == null)
                    eqCondition = new ProductPart();
                if (neqCondition == null)
                    neqCondition = new ProductPart();

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {

                _Metas.Product_Part cond = FuncNew.SetColumnFromField<_Metas.Product_Part, ProductPart>(eqCondition);
                _Metas.Product_Part cond2 = FuncNew.SetColumnFromField<_Metas.Product_Part, ProductPart>(neqCondition);

                sqlCtx = FuncNew.GetConditionedDelete<_Metas.Product_Part>(new ConditionCollection<_Metas.Product_Part>(new EqualCondition<_Metas.Product_Part>(cond), new NotEqualCondition<_Metas.Product_Part>(cond2)));
                var sqlCtx2 = FuncNew.GetConditionedSelect<_Metas.Product_Part>(null, new string[] { _Metas.Product_Part.fn_id }, new ConditionCollection<_Metas.Product_Part>(new NotEqualCondition<_Metas.Product_Part>(cond2)));

                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<_Metas.Product_Part, ProductPart>(sqlCtx, eqCondition);
                sqlCtx2 = FuncNew.SetColumnFromField<_Metas.Product_Part, ProductPart>(sqlCtx2, neqCondition);
                sqlCtx.OverrideParams(sqlCtx2);

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void InsertUnitWeightLog(IMES.DataModel.UnitWeightLog item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<_Metas.UnitWeightLog>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<_Metas.UnitWeightLog, IMES.DataModel.UnitWeightLog>(sqlCtx, item);

                sqlCtx.Param(_Metas.UnitWeightLog.fn_cdt).Value = cmDt;
                //sqlCtx.Param(_Metas.UnitWeightLog.fn_udt).Value = cmDt;

                item.id = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void InsertFaItCnDefectCheckInfo(FaItCnDefectCheckInfo item)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetAquireIdInsert<_Metas.Fa_Itcndefect_Check>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();

                sqlCtx = FuncNew.SetColumnFromField<_Metas.Fa_Itcndefect_Check, IMES.DataModel.FaItCnDefectCheckInfo>(sqlCtx, item);

                sqlCtx.Param(_Metas.Fa_Itcndefect_Check.fn_cdt).Value = cmDt;
                sqlCtx.Param(_Metas.Fa_Itcndefect_Check.fn_udt).Value = cmDt;

                item.id = _Schema.SqlHelper.ExecuteScalarForAquireIdInsert(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteFaItCnDefectCheckInfo(FaItCnDefectCheckInfo condition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                Fa_Itcndefect_Check cond = FuncNew.SetColumnFromField<Fa_Itcndefect_Check, FaItCnDefectCheckInfo>(condition);
                sqlCtx = FuncNew.GetConditionedDelete<Fa_Itcndefect_Check>(new ConditionCollection<Fa_Itcndefect_Check>(new EqualCondition<Fa_Itcndefect_Check>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<Fa_Itcndefect_Check, FaItCnDefectCheckInfo>(sqlCtx, condition);

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateFaItCnDefectCheckInfo(FaItCnDefectCheckInfo setValue, FaItCnDefectCheckInfo condition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                _Metas.Fa_Itcndefect_Check cond = FuncNew.SetColumnFromField<_Metas.Fa_Itcndefect_Check, FaItCnDefectCheckInfo>(condition);
                _Metas.Fa_Itcndefect_Check setv = FuncNew.SetColumnFromField<_Metas.Fa_Itcndefect_Check, FaItCnDefectCheckInfo>(setValue);
                setv.udt = DateTime.Now;

                sqlCtx = FuncNew.GetConditionedUpdate<_Metas.Fa_Itcndefect_Check>(new SetValueCollection<_Metas.Fa_Itcndefect_Check>(new CommonSetValue<_Metas.Fa_Itcndefect_Check>(setv)), new ConditionCollection<_Metas.Fa_Itcndefect_Check>(new EqualCondition<_Metas.Fa_Itcndefect_Check>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<_Metas.Fa_Itcndefect_Check, FaItCnDefectCheckInfo>(sqlCtx, condition);
                sqlCtx = FuncNew.SetColumnFromField<_Metas.Fa_Itcndefect_Check, FaItCnDefectCheckInfo>(sqlCtx, setValue, true);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(_Metas.Fa_Itcndefect_Check.fn_udt)).Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<FaItCnDefectCheckInfo> GetFaItCnDefectCheckInfoList(FaItCnDefectCheckInfo condition)
        {
            try
            {
                IList<FaItCnDefectCheckInfo> ret = null;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                mtns::SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                mtns::Fa_Itcndefect_Check cond = mtns::FuncNew.SetColumnFromField<mtns::Fa_Itcndefect_Check, FaItCnDefectCheckInfo>(condition);
                sqlCtx = mtns::FuncNew.GetConditionedSelect<mtns::Fa_Itcndefect_Check>(null, null, new mtns::ConditionCollection<mtns::Fa_Itcndefect_Check>(new mtns::EqualCondition<mtns::Fa_Itcndefect_Check>(cond)), mtns::Fa_Itcndefect_Check.fn_id);
                //    }
                //}
                sqlCtx = mtns::FuncNew.SetColumnFromField<mtns::Fa_Itcndefect_Check, FaItCnDefectCheckInfo>(sqlCtx, condition);

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = mtns::FuncNew.SetFieldFromColumn<mtns::Fa_Itcndefect_Check, FaItCnDefectCheckInfo, FaItCnDefectCheckInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetCauseListByProductRepairId(int repId)
        {
            try
            {
                IList<string> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                mtns::SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns::ProductRepair_DefectInfo cond = new mtns::ProductRepair_DefectInfo();
                        cond.productRepairID = repId;
                        sqlCtx = mtns::FuncNew.GetConditionedSelect<mtns::ProductRepair_DefectInfo>(tk, "DISTINCT", new string[] { mtns::ProductRepair_DefectInfo.fn_cause }, new mtns::ConditionCollection<mtns::ProductRepair_DefectInfo>(new mtns::EqualCondition<mtns::ProductRepair_DefectInfo>(cond)), mtns::ProductRepair_DefectInfo.fn_cause);
                    }
                }
                sqlCtx.Param(_Metas.ProductRepair_DefectInfo.fn_productRepairID).Value = repId;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string>();
                        while (sqlR.Read())
                        {
                            string item = g.GetValue_Str(sqlR, sqlCtx.Indexes(mtns.ProductRepair_DefectInfo.fn_cause));
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.FisObject.FA.Product.ProductLog> GetProductLogList(IMES.FisObject.FA.Product.ProductLog eqCondition, string[] neqStations)
        {
            try
            {
                IList<fons.ProductLog> ret = null;

                if (eqCondition == null)
                    eqCondition = new fons.ProductLog();

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {

                _Metas.ProductLog cond = FuncNew.SetColumnFromField<_Metas.ProductLog, fons.ProductLog>(eqCondition);
                if (eqCondition.Status == StationStatus.NULL)
                    cond.status = int.MinValue;
                _Metas.ProductLog cond2 = new _Metas.ProductLog();
                cond2.station = "[NOTINSET]";

                sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductLog>(null, null, new ConditionCollection<_Metas.ProductLog>(
                    new EqualCondition<_Metas.ProductLog>(cond), 
                    new NotInSetCondition<_Metas.ProductLog>(cond2)), _Metas.ProductLog.fn_cdt + FuncNew.DescendOrder);
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<_Metas.ProductLog, fons.ProductLog>(sqlCtx, eqCondition);

                sqlCtx.Sentence = sqlCtx.Sentence.Replace(g.DecInSet(_Metas.ProductLog.fn_station), g.ConvertInSet(neqStations));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = mtns::FuncNew.SetFieldFromColumn<mtns::ProductLog, fons.ProductLog, fons.ProductLog>(ret, sqlR, sqlCtx);
                }

                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int CreateAlarmWithSpecifiedDefectForFA(AlarmSettingInfo alarmSetting)
        {
            int ret = -1;
            try
            {
                var sCurTime = "curTime";

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        sqlCtx.Sentence = "INSERT {0}({26},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37}) " + 
                                           "SELECT	'FA', DATEADD(HOUR, -@{20}, @{19}), @{19}, @{23}, a.{6}, " + 
                                                  "a.{7}, d.{18}, b.{11}  AS Defect, 'ALM2' AS ReasonCode, " +
                                                  "'Defect: '+b.{11}+' / Qty:'+ CONVERT(VARCHAR,COUNT(a.{8}))+' >= '+ STR(@{22}) AS Reason, 'Created', @{19} " +
                                           "FROM {1} a " + 
                                           "LEFT OUTER JOIN {2} b " + 
                                           "ON a.{8}=b.{12} " + 
                                           "INNER JOIN {3} c " + 
                                           "ON a.{9}=c.{15} " + 
                                           "INNER JOIN {4}..{5} d " + 
                                           "ON c.{16}=d.{17} " + 
                                           "WHERE a.{10}=0 " + 
                                           "AND DATEDIFF(HOUR, a.{13}, @{19})<=@{20} " + 
                                           "AND a.{7}=@{24} " + 
                                           "AND b.{14}<>1 " +
                                           "AND charindex(RTRIM(b.{11})+',',@{21}) > 0 " +
                                           "AND d.{18}=@{25} " +
                                           "GROUP BY a.{6}, a.{7}, d.{18}, b.{11} " +
                                           "HAVING COUNT(a.{8})>=@{22}; SELECT @@IDENTITY; ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(Alarm)),
                                                                        ToolsNew.GetTableName(typeof(ProductTestLogBack)),
                                                                        ToolsNew.GetTableName(typeof(ProductTestLogBack_DefectInfo)),
                                                                        ToolsNew.GetTableName(typeof(mtns.Product)),
                                                                        _Schema.SqlHelper.DB_GetData,
                                                                        ToolsNew.GetTableName(typeof(mtns.Model)),
                                                                        ProductTestLogBack.fn_line,
                                                                        ProductTestLogBack.fn_station,
                                                                        ProductTestLogBack.fn_id,
                                                                        ProductTestLogBack.fn_productID,
                                                                        ProductTestLogBack.fn_status,
                                                                        ProductTestLogBack_DefectInfo.fn_defectCodeID,
                                                                        ProductTestLogBack_DefectInfo.fn_productTestLogBackID,
                                                                        ProductTestLogBack.fn_cdt,
                                                                        ProductTestLogBack_DefectInfo.fn_triggerAlarm,
                                                                        mtns.Product.fn_productID,
                                                                        mtns.Product.fn_model,
                                                                        mtns.Model.fn_model,
                                                                        mtns.Model.fn_family,
                                                                        sCurTime,
                                                                        AlarmSetting.fn_period,
                                                                        AlarmSetting.fn_defects,
                                                                        AlarmSetting.fn_defectQty,
                                                                        AlarmSetting.fn_id,
                                                                        AlarmSetting.fn_station,
                                                                        AlarmSetting.fn_family,
                                                                        Alarm.fn_stage,
                                                                        Alarm.fn_startTime,
                                                                        Alarm.fn_endTime,
                                                                        Alarm.fn_alarmSettingID,
                                                                        Alarm.fn_line,
                                                                        Alarm.fn_station,
                                                                        Alarm.fn_family,
                                                                        Alarm.fn_defect,
                                                                        Alarm.fn_reasonCode,
                                                                        Alarm.fn_reason,
                                                                        Alarm.fn_status,
                                                                        Alarm.fn_cdt
                                                                        );

                        sqlCtx.AddParam(mtns.AlarmSetting.fn_station, new SqlParameter("@" + mtns.AlarmSetting.fn_station, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_station)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_family, new SqlParameter("@" + mtns.AlarmSetting.fn_family, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_family)));
                        sqlCtx.AddParam(sCurTime, new SqlParameter("@" + sCurTime, SqlDbType.DateTime));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_period, new SqlParameter("@" + mtns.AlarmSetting.fn_period, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_period)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_defects, new SqlParameter("@" + mtns.AlarmSetting.fn_defects, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_defects)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_defectQty, new SqlParameter("@" + mtns.AlarmSetting.fn_defectQty, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_defectQty)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_id, new SqlParameter("@" + mtns.AlarmSetting.fn_id, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_id)));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.AlarmSetting.fn_station).Value = alarmSetting.Station;
                sqlCtx.Param(_Metas.AlarmSetting.fn_family).Value = alarmSetting.Family;
                if (alarmSetting.CurrTime == DateTime.MinValue)
                {
                    DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                    alarmSetting.CurrTime = cmDt;
                }
                sqlCtx.Param(sCurTime).Value = alarmSetting.CurrTime;
                sqlCtx.Param(_Metas.AlarmSetting.fn_period).Value = alarmSetting.Period;
                sqlCtx.Param(_Metas.AlarmSetting.fn_defects).Value = alarmSetting.Defects;
                sqlCtx.Param(_Metas.AlarmSetting.fn_defectQty).Value = alarmSetting.DefectQty;
                sqlCtx.Param(_Metas.AlarmSetting.fn_id).Value = alarmSetting.Id;

                //_Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
                ret = _Schema.SqlHelper.ExecuteScalarForAquireIdInsertWithTry(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateForCreateAlarmWithDefectForFA(AlarmSettingInfo alarmSetting, int alarm_id)
        {
            try
            {
                var sCurTime = "curTime";

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        //sqlCtx.Sentence =  "UPDATE {0} " +
                        //                   "SET {6}=1 " +
                        //                   "WHERE {7} IN " + 
                        //                   "( " +
                        //                       "SELECT a.{7} " + 
                        //                       "FROM {1} b " + 
                        //                       "LEFT OUTER JOIN {2} c " + 
                        //                       "ON b.{10}=c.{16} " + 
                        //                       "AND b.{11}=c.{17} " + 
                        //                       "LEFT OUTER JOIN {0} a " + 
                        //                       "ON a.{8}=c.{18} " + 
                        //                       "INNER JOIN {3} d " + 
                        //                       "ON d.{22}=c.{19} " + 
                        //                       "INNER JOIN {4}..{5} e " + 
                        //                       "ON d.{23}=e.{24} " + 
                        //                       "WHERE b.{12}='FA' " +
                        //                       "AND b.{13}>@{26} " + 
                        //                       "AND c.{20}=0 " + 
                        //                       "AND c.{21}>=DATEADD(HOUR, -@{27}, @{26}) " + 
                        //                       "AND c.{21}<=@{26} " + 
                        //                       "AND a.{9}=b.{14} " + 
                        //                       "AND e.{25}=b.{15} " +
                        //                   ") ";
                    sqlCtx.Sentence = "UPDATE {0} " +
                                       "SET {6}=1 " +
                                       "WHERE {7} IN " +
                                       "( " +
                                           "SELECT a.{7} " +
                                           "FROM {1} b " +
                                           "LEFT OUTER JOIN {2} c " +
                                           "ON b.{10}=c.{15} " +
                                           "AND b.{11}=c.{16} " +
                                           "LEFT OUTER JOIN {0} a " +
                                           "ON a.{8}=c.{17} " +
                                           "INNER JOIN {3} d " +
                                           "ON d.{21}=c.{18} " +
                                           "INNER JOIN {4}..{5} e " +
                                           "ON d.{22}=e.{23} " +
                                           "WHERE b.{12}={27} " +
                                           "AND c.{19}=0 " +
                                           "AND c.{20}>=DATEADD(HOUR, -@{26}, @{25}) " +
                                           "AND c.{20}<=@{25} " +
                                           "AND a.{9}=b.{13} " +
                                           "AND e.{24}=b.{14} " +
                                       ") ";
                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(ProductTestLogBack_DefectInfo)),  //0
                                                                        ToolsNew.GetTableName(typeof(Alarm)),                           //1
                                                                        ToolsNew.GetTableName(typeof(ProductTestLogBack)),              //2
                                                                        ToolsNew.GetTableName(typeof(mtns.Product)),                    //3
                                                                        _Schema.SqlHelper.DB_GetData,                                   //4
                                                                        ToolsNew.GetTableName(typeof(mtns.Model)),                      //5
                                                                        ProductTestLogBack_DefectInfo.fn_triggerAlarm,                  //6
                                                                        ProductTestLogBack_DefectInfo.fn_id,                            //7
                                                                        ProductTestLogBack_DefectInfo.fn_productTestLogBackID,          //8
                                                                        ProductTestLogBack_DefectInfo.fn_defectCodeID,                  //9
                                                                        Alarm.fn_line,                                                  //10
                                                                        Alarm.fn_station,                                               //11
                                                                        Alarm.fn_id,                                                    //12
                                                                        Alarm.fn_defect,                                                //13
                                                                        Alarm.fn_family,                                                //14
                                                                        ProductTestLogBack.fn_line,                                     //15
                                                                        ProductTestLogBack.fn_station,                                  //16
                                                                        ProductTestLogBack.fn_id,                                       //17
                                                                        ProductTestLogBack.fn_productID,                                //18
                                                                        ProductTestLogBack.fn_status,                                   //19
                                                                        ProductTestLogBack.fn_cdt,                                      //20
                                                                        mtns.Product.fn_productID,                                      //21
                                                                        mtns.Product.fn_model,                                          //22
                                                                        mtns.Model.fn_model,                                            //23
                                                                        mtns.Model.fn_family,                                           //24
                                                                        sCurTime,                                                       //25
                                                                        AlarmSetting.fn_period,                                         //26
                                                                        alarm_id                                                        //27
                                                                        );


                        //sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(Pcbtestlogback_Defectinfo)),  //0
                        //                                                ToolsNew.GetTableName(typeof(Alarm)),                       //1
                        //                                                ToolsNew.GetTableName(typeof(Pcbtestlogback)),              //2
                        //                                                ToolsNew.GetTableName(typeof(mtns.Pcb)),                    //3
                        //                                                _Schema.SqlHelper.DB_GetData,                               //4
                        //                                                ToolsNew.GetTableName(typeof(mtns.Part_NEW)),               //5
                        //                                                Pcbtestlogback_Defectinfo.fn_triggerAlarm,                  //6
                        //                                                Pcbtestlogback_Defectinfo.fn_id,                            //7
                        //                                                Pcbtestlogback_Defectinfo.fn_pcbtestlogbackid,              //8
                        //                                                Pcbtestlogback_Defectinfo.fn_defectCodeID,                  //9
                        //                                                Alarm.fn_line,                                              //10
                        //                                                Alarm.fn_station,                                           //11
                        //                                                Alarm.fn_id,                                                //12
                        //                                                Alarm.fn_defect,                                            //13
                        //                                                Alarm.fn_family,                                            //14
                        //                                                Pcbtestlogback.fn_line,                                     //15
                        //                                                Pcbtestlogback.fn_station,                                  //16
                        //                                                Pcbtestlogback.fn_id,                                       //17
                        //                                                Pcbtestlogback.fn_pcbno,                                    //18
                        //                                                Pcbtestlogback.fn_status,                                   //19
                        //                                                Pcbtestlogback.fn_cdt,                                      //20
                        //                                                mtns.Pcb.fn_pcbno,                                          //21
                        //                                                mtns.Pcb.fn_pcbmodelid,                                     //22
                        //                                                mtns.Part_NEW.fn_partNo,                                    //23
                        //                                                mtns.Part_NEW.fn_descr,                                     //24
                        //                                                sCurTime,                                                   //25
                        //                                                AlarmSetting.fn_period,                                     //26
                        //                                                alarm_id                                                    //27
                        //                                                );

                        sqlCtx.AddParam(sCurTime, new SqlParameter("@" + sCurTime, SqlDbType.DateTime));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_period, new SqlParameter("@" + mtns.AlarmSetting.fn_period, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_period)));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                if (alarmSetting.CurrTime == DateTime.MinValue)
                {
                    DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                    alarmSetting.CurrTime = cmDt;
                }
                sqlCtx.Param(sCurTime).Value = alarmSetting.CurrTime;
                sqlCtx.Param(_Metas.AlarmSetting.fn_period).Value = alarmSetting.Period;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int CreateAlarmWithExcludedDefectForFA(AlarmSettingInfo alarmSetting)
        {
            int ret = -1;
            try
            {
                var sCurTime = "curTime";

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        sqlCtx.Sentence = "INSERT {0}({26},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37}) " +
                                           "SELECT	'FA', DATEADD(HOUR, -@{20}, @{19}), @{19}, @{23}, a.{6}, " +
                                                  "a.{7}, d.{18}, b.{11}  AS Defect, 'ALM2' AS ReasonCode, " +
                                                  "'Defect: '+b.{11}+' / Qty:'+ CONVERT(VARCHAR,COUNT(a.{8}))+' >= '+ STR(@{22}) AS Reason, 'Created', @{19} " +
                                           "FROM {1} a " +
                                           "LEFT OUTER JOIN {2} b " +
                                           "ON a.{8}=b.{12} " +
                                           "INNER JOIN {3} c " +
                                           "ON a.{9}=c.{15} " +
                                           "INNER JOIN {4}..{5} d " +
                                           "ON c.{16}=d.{17} " +
                                           "WHERE a.{10}=0 " +
                                           "AND DATEDIFF(HOUR, a.{13}, @{19})<=@{20} " +
                                           "AND a.{7}=@{24} " +
                                           "AND b.{14}<>1 " +
                                           "AND charindex(RTRIM(b.{11})+',',@{21})=0 " +
                                           "AND d.{18}=@{25} " +
                                           "GROUP BY a.{6}, a.{7}, d.{18}, b.{11} " +
                                           "HAVING COUNT(a.{8})>=@{22}; SELECT @@IDENTITY; ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(Alarm)),
                                                                        ToolsNew.GetTableName(typeof(ProductTestLogBack)),
                                                                        ToolsNew.GetTableName(typeof(ProductTestLogBack_DefectInfo)),
                                                                        ToolsNew.GetTableName(typeof(mtns.Product)),
                                                                        _Schema.SqlHelper.DB_GetData,
                                                                        ToolsNew.GetTableName(typeof(mtns.Model)),
                                                                        ProductTestLogBack.fn_line,
                                                                        ProductTestLogBack.fn_station,
                                                                        ProductTestLogBack.fn_id,
                                                                        ProductTestLogBack.fn_productID,
                                                                        ProductTestLogBack.fn_status,
                                                                        ProductTestLogBack_DefectInfo.fn_defectCodeID,
                                                                        ProductTestLogBack_DefectInfo.fn_productTestLogBackID,
                                                                        ProductTestLogBack.fn_cdt,
                                                                        ProductTestLogBack_DefectInfo.fn_triggerAlarm,
                                                                        mtns.Product.fn_productID,
                                                                        mtns.Product.fn_model,
                                                                        mtns.Model.fn_model,
                                                                        mtns.Model.fn_family,
                                                                        sCurTime,
                                                                        AlarmSetting.fn_period,
                                                                        AlarmSetting.fn_defects,
                                                                        AlarmSetting.fn_defectQty,
                                                                        AlarmSetting.fn_id,
                                                                        AlarmSetting.fn_station,
                                                                        AlarmSetting.fn_family,
                                                                        Alarm.fn_stage,
                                                                        Alarm.fn_startTime,
                                                                        Alarm.fn_endTime,
                                                                        Alarm.fn_alarmSettingID,
                                                                        Alarm.fn_line,
                                                                        Alarm.fn_station,
                                                                        Alarm.fn_family,
                                                                        Alarm.fn_defect,
                                                                        Alarm.fn_reasonCode,
                                                                        Alarm.fn_reason,
                                                                        Alarm.fn_status,
                                                                        Alarm.fn_cdt
                                                                        );

                        sqlCtx.AddParam(mtns.AlarmSetting.fn_station, new SqlParameter("@" + mtns.AlarmSetting.fn_station, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_station)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_family, new SqlParameter("@" + mtns.AlarmSetting.fn_family, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_family)));
                        sqlCtx.AddParam(sCurTime, new SqlParameter("@" + sCurTime, SqlDbType.DateTime));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_period, new SqlParameter("@" + mtns.AlarmSetting.fn_period, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_period)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_defects, new SqlParameter("@" + mtns.AlarmSetting.fn_defects, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_defects)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_defectQty, new SqlParameter("@" + mtns.AlarmSetting.fn_defectQty, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_defectQty)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_id, new SqlParameter("@" + mtns.AlarmSetting.fn_id, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_id)));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.AlarmSetting.fn_station).Value = alarmSetting.Station;
                sqlCtx.Param(_Metas.AlarmSetting.fn_family).Value = alarmSetting.Family;
                if (alarmSetting.CurrTime == DateTime.MinValue)
                {
                    DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                    alarmSetting.CurrTime = cmDt;
                }
                sqlCtx.Param(sCurTime).Value = alarmSetting.CurrTime;
                sqlCtx.Param(_Metas.AlarmSetting.fn_period).Value = alarmSetting.Period;
                sqlCtx.Param(_Metas.AlarmSetting.fn_defects).Value = alarmSetting.Defects;
                sqlCtx.Param(_Metas.AlarmSetting.fn_defectQty).Value = alarmSetting.DefectQty;
                sqlCtx.Param(_Metas.AlarmSetting.fn_id).Value = alarmSetting.Id;

                //_Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
                ret = _Schema.SqlHelper.ExecuteScalarForAquireIdInsertWithTry(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int CreateAlarmWithAllDefectForFA(AlarmSettingInfo alarmSetting)
        {
            int ret = -1;
            try
            {
                var sCurTime = "curTime";

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        sqlCtx.Sentence = "INSERT {0}({26},{27},{28},{29},{30},{31},{32},{33},{34},{35},{36},{37}) " +
                                           "SELECT	'FA', DATEADD(HOUR, -@{20}, @{19}), @{19}, @{23}, a.{6}, " +
                                                  "a.{7}, d.{18}, b.{11}  AS Defect, 'ALM2' AS ReasonCode, " +
                                                  "'Defect: '+b.{11}+' / Qty:'+ CONVERT(VARCHAR,COUNT(a.{8}))+' >= '+ STR(@{22}) AS Reason, 'Created', @{19} " +
                                           "FROM {1} a " +
                                           "LEFT OUTER JOIN {2} b " +
                                           "ON a.{8}=b.{12} " +
                                           "INNER JOIN {3} c " +
                                           "ON a.{9}=c.{15} " +
                                           "INNER JOIN {4}..{5} d " +
                                           "ON c.{16}=d.{17} " +
                                           "WHERE a.{10}=0 " +
                                           "AND DATEDIFF(HOUR, a.{13}, @{19})<=@{20} " +
                                           "AND a.{7}=@{24} " +
                                           "AND b.{14}<>1 " +
                                           //"AND b.{11}+',' NOT LIKE @{21} " +
                                           "AND d.{18}=@{25} " +
                                           "GROUP BY a.{6}, a.{7}, d.{18}, b.{11} " +
                                           "HAVING COUNT(a.{8})>=@{22}; SELECT @@IDENTITY; ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(Alarm)),
                                                                        ToolsNew.GetTableName(typeof(ProductTestLogBack)),
                                                                        ToolsNew.GetTableName(typeof(ProductTestLogBack_DefectInfo)),
                                                                        ToolsNew.GetTableName(typeof(mtns.Product)),
                                                                        _Schema.SqlHelper.DB_GetData,
                                                                        ToolsNew.GetTableName(typeof(mtns.Model)),
                                                                        ProductTestLogBack.fn_line,
                                                                        ProductTestLogBack.fn_station,
                                                                        ProductTestLogBack.fn_id,
                                                                        ProductTestLogBack.fn_productID,
                                                                        ProductTestLogBack.fn_status,
                                                                        ProductTestLogBack_DefectInfo.fn_defectCodeID,
                                                                        ProductTestLogBack_DefectInfo.fn_productTestLogBackID,
                                                                        ProductTestLogBack.fn_cdt,
                                                                        ProductTestLogBack_DefectInfo.fn_triggerAlarm,
                                                                        mtns.Product.fn_productID,
                                                                        mtns.Product.fn_model,
                                                                        mtns.Model.fn_model,
                                                                        mtns.Model.fn_family,
                                                                        sCurTime,
                                                                        AlarmSetting.fn_period,
                                                                        "",//AlarmSetting.fn_defects,
                                                                        AlarmSetting.fn_defectQty,
                                                                        AlarmSetting.fn_id,
                                                                        AlarmSetting.fn_station,
                                                                        AlarmSetting.fn_family,
                                                                        Alarm.fn_stage,
                                                                        Alarm.fn_startTime,
                                                                        Alarm.fn_endTime,
                                                                        Alarm.fn_alarmSettingID,
                                                                        Alarm.fn_line,
                                                                        Alarm.fn_station,
                                                                        Alarm.fn_family,
                                                                        Alarm.fn_defect,
                                                                        Alarm.fn_reasonCode,
                                                                        Alarm.fn_reason,
                                                                        Alarm.fn_status,
                                                                        Alarm.fn_cdt
                                                                        );

                        sqlCtx.AddParam(mtns.AlarmSetting.fn_station, new SqlParameter("@" + mtns.AlarmSetting.fn_station, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_station)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_family, new SqlParameter("@" + mtns.AlarmSetting.fn_family, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_family)));
                        sqlCtx.AddParam(sCurTime, new SqlParameter("@" + sCurTime, SqlDbType.DateTime));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_period, new SqlParameter("@" + mtns.AlarmSetting.fn_period, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_period)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_defects, new SqlParameter("@" + mtns.AlarmSetting.fn_defects, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_defects)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_defectQty, new SqlParameter("@" + mtns.AlarmSetting.fn_defectQty, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_defectQty)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_id, new SqlParameter("@" + mtns.AlarmSetting.fn_id, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_id)));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.AlarmSetting.fn_station).Value = alarmSetting.Station;
                sqlCtx.Param(_Metas.AlarmSetting.fn_family).Value = alarmSetting.Family;
                if (alarmSetting.CurrTime == DateTime.MinValue)
                {
                    DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                    alarmSetting.CurrTime = cmDt;
                }
                sqlCtx.Param(sCurTime).Value = alarmSetting.CurrTime;
                sqlCtx.Param(_Metas.AlarmSetting.fn_period).Value = alarmSetting.Period;
                sqlCtx.Param(_Metas.AlarmSetting.fn_defects).Value = alarmSetting.Defects;
                sqlCtx.Param(_Metas.AlarmSetting.fn_defectQty).Value = alarmSetting.DefectQty;
                sqlCtx.Param(_Metas.AlarmSetting.fn_id).Value = alarmSetting.Id;

                //_Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
                ret = _Schema.SqlHelper.ExecuteScalarForAquireIdInsertWithTry(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void CreateAlarmWithYieldForFA(AlarmSettingInfo alarmSetting)
        {
            try
            {
                var sCurTime = "curTime";

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        sqlCtx.Sentence = "SELECT a.{5}, COUNT(a.{6}) AS Total INTO #temp " +
                                            "FROM {1} a, {2} b, {3}..{4} c " +
                                            "WHERE DATEDIFF(HOUR, a.{7}, @{14})<=@{15} " +
                                            "AND a.{8}=@{16} " +
                                            "AND a.{9}=b.{10} " +
                                            "AND b.{11}=c.{12} " +
                                            "AND c.{13}=@{17} " +
                                            "GROUP BY a.{5} " +
                                            "HAVING COUNT(a.{6})>=@{18} " +

                                            "INSERT {0} ({21},{22},{23},{24},{25},{26},{27},{28},{29},{30},{31},{32}) " +
                                            "SELECT 'FA', DATEADD(HOUR, -@{15}, @{14}), @{14}, @{20}, a.{5}, " +
                                            "b.{8}, d.{13}, '' AS Defect, 'ALM1' AS ReasonCode, " +
                                            "CONVERT(VARCHAR,COUNT(b.{6}))+' / '+ CONVERT(VARCHAR,a.Total)+' < '+ CONVERT(VARCHAR,@{19}) +'%' AS Reason, 'Created', @{14} " +
                                            "FROM #temp a, {1} b, {2} c, {3}..{4} d " +
                                            "WHERE a.{5}=b.{5} " +
                                            "AND DATEDIFF(HOUR, b.{7}, @{14})<=@{15} " +
                                            "AND b.{8}=@{16} " +
                                            "AND b.{9}=c.{10} " +
                                            "AND c.{11}=d.{12} " +
                                            "AND d.{13}=@{17} " +
                                            "And b.Status=1 " +
                                            "GROUP BY a.{5}, b.{8}, d.{13}, a.Total " +
                                            "HAVING COUNT(b.{6})*100<@{19}*a.Total " +

                                            "DROP TABLE #temp ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(Alarm)),
                                                                        ToolsNew.GetTableName(typeof(ProductTestLogBack)),
                                                                        ToolsNew.GetTableName(typeof(mtns.Product)),
                                                                        _Schema.SqlHelper.DB_GetData,
                                                                        ToolsNew.GetTableName(typeof(mtns.Model)),
                                                                        ProductTestLogBack.fn_line,
                                                                        ProductTestLogBack.fn_id,
                                                                        ProductTestLogBack.fn_cdt,
                                                                        ProductTestLogBack.fn_station,
                                                                        ProductTestLogBack.fn_productID,
                                                                        mtns.Product.fn_productID,
                                                                        mtns.Product.fn_model,
                                                                        mtns.Model.fn_model,
                                                                        mtns.Model.fn_family,
                                                                        sCurTime,
                                                                        AlarmSetting.fn_period,
                                                                        AlarmSetting.fn_station,
                                                                        AlarmSetting.fn_family,
                                                                        AlarmSetting.fn_minQty,
                                                                        AlarmSetting.fn_yieldRate,
                                                                        AlarmSetting.fn_id,
                                                                        Alarm.fn_stage,
                                                                        Alarm.fn_startTime,
                                                                        Alarm.fn_endTime,
                                                                        Alarm.fn_alarmSettingID,
                                                                        Alarm.fn_line,
                                                                        Alarm.fn_station,
                                                                        Alarm.fn_family,
                                                                        Alarm.fn_defect,
                                                                        Alarm.fn_reasonCode,
                                                                        Alarm.fn_reason,
                                                                        Alarm.fn_status,
                                                                        Alarm.fn_cdt
                                                                        );
                        sqlCtx.AddParam(sCurTime, new SqlParameter("@" + sCurTime, SqlDbType.DateTime));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_period, new SqlParameter("@" + mtns.AlarmSetting.fn_period, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_period)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_station, new SqlParameter("@" + mtns.AlarmSetting.fn_station, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_station)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_family, new SqlParameter("@" + mtns.AlarmSetting.fn_family, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_family)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_minQty, new SqlParameter("@" + mtns.AlarmSetting.fn_minQty, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_minQty)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_yieldRate, new SqlParameter("@" + mtns.AlarmSetting.fn_yieldRate, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_yieldRate)));
                        sqlCtx.AddParam(mtns.AlarmSetting.fn_id, new SqlParameter("@" + mtns.AlarmSetting.fn_id, ToolsNew.GetDBFieldType<mtns.AlarmSetting>(mtns.AlarmSetting.fn_id)));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                if (alarmSetting.CurrTime == DateTime.MinValue)
                {
                    DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                    alarmSetting.CurrTime = cmDt;
                }
                sqlCtx.Param(sCurTime).Value = alarmSetting.CurrTime;
                sqlCtx.Param(_Metas.AlarmSetting.fn_period).Value = alarmSetting.Period;
                sqlCtx.Param(_Metas.AlarmSetting.fn_station).Value = alarmSetting.Station;
                sqlCtx.Param(_Metas.AlarmSetting.fn_family).Value = alarmSetting.Family;
                sqlCtx.Param(_Metas.AlarmSetting.fn_minQty).Value = alarmSetting.MinQty;
                sqlCtx.Param(_Metas.AlarmSetting.fn_yieldRate).Value = alarmSetting.YieldRate;
                sqlCtx.Param(_Metas.AlarmSetting.fn_id).Value = alarmSetting.Id;

                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<fons.ProductInfo> GetProductInfoListUpperCaseItemType(string proid, IList<string> itemTypes)
        {
            try
            {
                IList<fons.ProductInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns.ProductInfo cond = new mtns.ProductInfo();
                        cond.productID = proid;

                        mtns.ProductInfo cond2 = new mtns.ProductInfo();
                        cond2.infoType = "[INSET]";

                        sqlCtx = FuncNew.GetConditionedSelect<mtns.ProductInfo>(tk, null, null, new ConditionCollection<mtns.ProductInfo>(
                            new EqualCondition<mtns.ProductInfo>(cond),
                            new InSetCondition<mtns.ProductInfo>(cond2, "UPPER({0})")), mtns.ProductInfo.fn_udt + FuncNew.DescendOrder);
                    }
                }
                sqlCtx.Param(mtns.ProductInfo.fn_productID).Value = proid;
                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(mtns.ProductInfo.fn_infoType), g.ConvertInSet(itemTypes));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<mtns.ProductInfo, fons.ProductInfo, fons.ProductInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<StationInfo> GetStationInfoListFromProductRepair(string productId, int status)
        {
            try
            {
                IList<StationInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                        sqlCtx.Sentence =   "SELECT DISTINCT c.{9}+' '+c.{10} AS [Text], " +
                                            "c.{9} AS Value " + 
                                            "FROM {0} a " + 
                                            "INNER JOIN {1} b " + 
                                            "ON a.{4} = b.{7} " +
                                            "LEFT JOIN {2}..{3} c " + 
                                            "ON b.{8} = c.{9} " +
                                            "WHERE a.{5} = @{5} " +
                                            "AND a.{6} = @{6} " +
                                            "ORDER BY c.{9}";
                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(ProductRepair)),
                                                                         ToolsNew.GetTableName(typeof(ProductRepair_DefectInfo)),
                                                                         _Schema.SqlHelper.DB_GetData,
                                                                         ToolsNew.GetTableName(typeof(_Metas.Station)),
                                                                         ProductRepair.fn_id,
                                                                         ProductRepair.fn_productID,
                                                                         ProductRepair.fn_status,
                                                                         ProductRepair_DefectInfo.fn_productRepairID,
                                                                         ProductRepair_DefectInfo.fn_returnStn,
                                                                         _Metas.Station.fn_station,
                                                                         _Metas.Station.fn_descr
                                                                         );

                        sqlCtx.AddParam(ProductRepair.fn_productID, new SqlParameter("@" + ProductRepair.fn_productID, ToolsNew.GetDBFieldType<ProductRepair>(ProductRepair.fn_productID)));
                        sqlCtx.AddParam(ProductRepair.fn_status, new SqlParameter("@" + ProductRepair.fn_status, ToolsNew.GetDBFieldType<ProductRepair>(ProductRepair.fn_status)));
                    }
                }
                sqlCtx.Param(ProductRepair.fn_productID).Value = productId;
                sqlCtx.Param(ProductRepair.fn_status).Value = status;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<StationInfo>();
                        while (sqlR.Read())
                        {
                            var item = new StationInfo();
                            item.Descr = g.GetValue_Str(sqlR, 0);
                            item.StationId = g.GetValue_Str(sqlR, 1);
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProduct> GetProductInfoListByConditions(IProduct eqCondition, IProduct isNullCondition)
        {
            try
            {
                IList<IProduct> ret = null;

                if (eqCondition == null)
                    eqCondition = new fons.Product();
                if (isNullCondition == null)
                    isNullCondition = new fons.Product();

                eqCondition.CartonWeight = eqCondition.UnitWeight = isNullCondition.CartonWeight = isNullCondition.UnitWeight = decimal.MinValue;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {

                _Metas.Product cond = FuncNew.SetColumnFromField<_Metas.Product, fons.Product>((fons.Product)eqCondition);
                _Metas.Product cond2 = FuncNew.SetColumnFromField<_Metas.Product, fons.Product>((fons.Product)isNullCondition);

                sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(null, null, new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond), new EqualCondition<_Metas.Product>(cond2, "ISNULL({0},'')")), _Metas.Product.fn_productID);
                var sqlCtx2 = FuncNew.GetConditionedSelect<_Metas.Product>(null, new string[] { _Metas.Product.fn_productID }, new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond2, "ISNULL({0},'')")));

                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<_Metas.Product, fons.Product>(sqlCtx, (fons.Product)eqCondition);
                sqlCtx2 = FuncNew.SetColumnFromField<_Metas.Product, fons.Product>(sqlCtx2, (fons.Product)isNullCondition);
                sqlCtx.OverrideParams(sqlCtx2);

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = mtns::FuncNew.SetFieldFromColumn<mtns::Product, fons.Product, IProduct>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProduct> GetProductInfoListByConditionsNotNull(IProduct eqCondition, IProduct notNullCondition)
        {
            try
            {
                IList<IProduct> ret = null;

                if (eqCondition == null)
                    eqCondition = new fons.Product();
                if (notNullCondition == null)
                    notNullCondition = new fons.Product();

                eqCondition.CartonWeight = eqCondition.UnitWeight = notNullCondition.CartonWeight = notNullCondition.UnitWeight = decimal.MinValue;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {

                _Metas.Product cond = FuncNew.SetColumnFromField<_Metas.Product, fons.Product>((fons.Product)eqCondition);
                _Metas.Product cond2 = FuncNew.SetColumnFromField<_Metas.Product, fons.Product>((fons.Product)notNullCondition);

                sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(null, null, new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond), new NotEqualCondition<_Metas.Product>(cond2, "ISNULL({0},'')")), _Metas.Product.fn_productID);
                var sqlCtx2 = FuncNew.GetConditionedSelect<_Metas.Product>(null, new string[] { _Metas.Product.fn_productID }, new ConditionCollection<_Metas.Product>(new NotEqualCondition<_Metas.Product>(cond2, "ISNULL({0},'')")));

                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<_Metas.Product, fons.Product>(sqlCtx, (fons.Product)eqCondition);
                sqlCtx2 = FuncNew.SetColumnFromField<_Metas.Product, fons.Product>(sqlCtx2, (fons.Product)notNullCondition);
                sqlCtx.OverrideParams(sqlCtx2);

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = mtns::FuncNew.SetFieldFromColumn<mtns::Product, fons.Product, IProduct>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IProduct> GetProductInfoListByPizzaPartSn(string partSn)
        {
            try
            {
                IList<IProduct> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.cartonWeight = cond.unitWeight = decimal.MinValue;
                        cond.pizzaID = partSn;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, null, null, new ConditionCollection<_Metas.Product>(
                       new AnyCondition<_Metas.Product>(cond, string.Format("{0} IN (SELECT {1} FROM {2}..{3} WHERE {4}={5})", "{0}", _Metas.Pizza_Part.fn_pizzaID, _Schema.SqlHelper.DB_PAK, ToolsNew.GetTableName(typeof(_Metas.Pizza_Part)), _Metas.Pizza_Part.fn_partSn, "{1}"))), _Metas.Product.fn_productID);
                    }
                }
                sqlCtx.Param(g.DecAny(_Metas.Product.fn_pizzaID)).Value = partSn;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = mtns::FuncNew.SetFieldFromColumn<mtns::Product, fons.Product, IProduct>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public DataTable GetProductRepairInfoListDataTable(IList<string> idList, IList<string> rsList)
        {
            DataTable ret = null;
            if (rsList != null && rsList.Count > 0)
                ret = GetProductRepairInfoListDataTableConsiderStation(idList, rsList);
            else
                ret = GetProductRepairInfoListDataTable(idList);

            //if (ret.Columns != null && ret.Columns.Count >= 12)
            //{
            //    ret.Columns[0].ColumnName = "IssueDate";
            //    ret.Columns[1].ColumnName = "Line";
            //    //ret.Columns[2].ColumnName = "ID";
            //    //ret.Columns[3].ColumnName = "Action";
            //    ret.Columns[4].ColumnName = "Family";
            //    ret.Columns[5].ColumnName = "Model";
            //    ret.Columns[6].ColumnName = "DefectCode";
            //    ret.Columns[7].ColumnName = "DefectDescription";
            //    ret.Columns[8].ColumnName = "RootCause";
            //    ret.Columns[9].ColumnName = "Owner";
            //    ret.Columns[10].ColumnName = "SN";
            //    ret.Columns[11].ColumnName = "ProdID";
            //}
            return ret;
        }

        DataTable GetProductRepairInfoListDataTable(IList<string> idList)
        {
            try
            {
                DataTable ret = null;

                //ITableAndFields tf1 = null;
                //ITableAndFields tf2 = null;
                //ITableAndFields tf3 = null;
                //ITableAndFields tf4 = null;
                //ITableAndFields tf5 = null;
                //ITableAndFields tf6 = null;
                //ITableAndFields tf7 = null;
                //ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        #region . OLD .
                        //tf1 = new TableAndFields<_Metas.ProductRepair>();
                        //_Metas.ProductRepair cond = new _Metas.ProductRepair();
                        //cond.productID = "[INSET]";
                        //tf1.Conditions.Add(new InSetCondition<_Metas.ProductRepair>(cond));
                        //_Metas.ProductRepair cond2 = new _Metas.ProductRepair();
                        //cond2.status = 1;
                        //tf1.Conditions.Add(new EqualCondition<_Metas.ProductRepair>(cond2));
                        //tf1.AddRangeToGetFuncedFieldNames(
                        //    new string[] { _Metas.ProductRepair.fn_cdt, string.Format("CONVERT(VARCHAR,t1.{0},111)", _Metas.ProductRepair.fn_cdt) },
                        //    new string[] { _Metas.ProductRepair.fn_line, "t1." + _Metas.ProductRepair.fn_line }
                        //    );

                        //tf2 = new TableAndFields<_Metas.ProductRepair_DefectInfo>();
                        //tf2.AddRangeToGetFuncedFieldNames(
                        //    new string[] { _Metas.ProductRepair_DefectInfo.fn_id, "t2." + _Metas.ProductRepair_DefectInfo.fn_id },
                        //    new string[] { _Metas.ProductRepair_DefectInfo.fn_action, "t2." + _Metas.ProductRepair_DefectInfo.fn_action }
                        //    );

                        //tf3 = new TableAndFields<_Metas.Model>();
                        //tf3.SubDBCalalog = _Schema.SqlHelper.DB_BOM;
                        //tf3.AddRangeToGetFuncedFieldNames(
                        //    new string[] { _Metas.Model.fn_family, "t3." + _Metas.Model.fn_family },
                        //    new string[] { _Metas.Model.fn_model, "t3." + _Metas.Model.fn_model }
                        //    );
                        
                        //tf4 = new TableAndFields<_Metas.DefectCode>();
                        //tf4.SubDBCalalog = _Schema.SqlHelper.DB_GetData;
                        //tf4.AddRangeToGetFuncedFieldNames(
                        //    new string[] { _Metas.DefectCode.fn_defect, "t4." + _Metas.DefectCode.fn_defect },
                        //    new string[] { _Metas.DefectCode.fn_descr, "t4." + _Metas.DefectCode.fn_descr }
                        //    );

                        //tf5 = new TableAndFields<_Metas.DefectInfo>();
                        //tf5.SubDBCalalog = _Schema.SqlHelper.DB_GetData;
                        //_Metas.DefectInfo cond5 = new _Metas.DefectInfo();
                        //cond5.type = "%Cause%";
                        //tf5.Conditions.Add(new LikeCondition<_Metas.DefectInfo>(cond5));
                        //tf5.AddRangeToGetFuncedFieldNames(
                        //    new string[] { _Metas.DefectInfo.fn_code, string.Format("t5.{0} + ' ' + t5.{1}", _Metas.DefectInfo.fn_code, _Metas.DefectInfo.fn_description) });

                        //tf6 = new TableAndFields<_Metas.DefectInfo>();
                        //tf6.SubDBCalalog = _Schema.SqlHelper.DB_GetData;
                        //_Metas.DefectInfo cond6 = new _Metas.DefectInfo();
                        //cond6.type = "Obligation";
                        //tf6.Conditions.Add(new EqualCondition<_Metas.DefectInfo>(cond6));
                        //tf6.AddRangeToGetFuncedFieldNames(
                        //     new string[] { _Metas.DefectInfo.fn_description, "t6." + _Metas.DefectInfo.fn_description }
                        //     );

                        //tf7 = new TableAndFields<_Metas.Product>();
                        //tf7.AddRangeToGetFuncedFieldNames(
                        //     new string[] { _Metas.Product.fn_custsn, "t7." + _Metas.Product.fn_custsn },
                        //     new string[] { _Metas.Product.fn_productID, "t7." + _Metas.Product.fn_productID }
                        //     );

                        //tafa = new ITableAndFields[] { tf1, tf2, tf3, tf4, tf5, tf6, tf7 };

                        //TableConnectionCollection tblCnnts = new TableConnectionCollection(
                        //    new TableConnectionItem<_Metas.ProductRepair, _Metas.Product>(tf1, _Metas.ProductRepair.fn_productID, tf7, _Metas.Product.fn_productID),
                        //    new TableConnectionItem<_Metas.ProductRepair, _Metas.ProductRepair_DefectInfo>(tf1, _Metas.ProductRepair.fn_id, tf2, _Metas.ProductRepair_DefectInfo.fn_productRepairID),
                        //    new TableConnectionItem<_Metas.ProductRepair, _Metas.Model>(tf1, _Metas.ProductRepair.fn_model, tf3, _Metas.Model.fn_model),
                        //    new TableConnectionItem<_Metas.ProductRepair_DefectInfo, _Metas.DefectCode>(tf2, _Metas.ProductRepair_DefectInfo.fn_defectCode, tf4, _Metas.DefectCode.fn_defect),
                        //    new TableConnectionItem<_Metas.ProductRepair_DefectInfo, _Metas.DefectInfo>(tf2, _Metas.ProductRepair_DefectInfo.fn_cause, tf5, _Metas.DefectInfo.fn_code),
                        //    new TableConnectionItem<_Metas.ProductRepair_DefectInfo, _Metas.DefectInfo>(tf2, _Metas.ProductRepair_DefectInfo.fn_obligation, tf6, _Metas.DefectInfo.fn_code)
                        //    );

                        //sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, null, tafa, tblCnnts, 
                        //    string.Format("CONVERT(VARCHAR,t1.{0},111)", _Metas.ProductRepair.fn_cdt),
                        //    "t1." + _Metas.ProductRepair.fn_line,
                        //    "t3." + _Metas.Model.fn_family, 
                        //    "t3." + _Metas.Model.fn_model,
                        //    "t7." + _Metas.Product.fn_custsn);
                        #endregion

                        sqlCtx = new SQLContextNew();
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                        sqlCtx.Sentence = "SELECT " +
                                            "CONVERT(VARCHAR,a.{8},111) AS IssueDate," +
                                            "a.{9} AS Line," +
                                            "b.{14}," +
                                            "b.{15} AS [Action]," +
                                            "b.{29} AS Mark," +
                                            "c.{20} AS Family," +
                                            "c.{21} AS Model," +
                                            "d.{22} AS DefectCode," +
                                            "d.{23} AS DefectDescription," +
                                            "e.{24} + ' ' + e.{25} AS RootCause," +
                                            "f.{25} AS Owner," +
                                            "g.{27} AS SN," +
                                            "g.{28} AS ProdID, " +
                                             "a.Station as Station " +
                                            "FROM {0} a " +
                                            "JOIN {1} b ON a.{10} = b.{16} " +
                                            "JOIN {2}..{3} c ON a.{11} = c.{21} " +
                                            "LEFT JOIN {4}..{5} d ON b.{17} = d.{22} " +
                                            "LEFT JOIN {4}..{6} e ON b.{18} = e.{24} AND e.{26} = @t5_{26} " +
                                            "LEFT JOIN {4}..{6} f ON b.{19} = f.{24} AND f.{26} = @t6_{26} " +
                                            "JOIN {7} g ON a.{12} = g.{28} " +
                                            "WHERE a.{12} IN (t1_INSET[{12}]) " +
                                            "AND a.{13} = @{13} " +
                                            "ORDER BY CONVERT(VARCHAR,a.{8},111), a.{9}, c.{20}, c.{21}, g.{27}";
                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(ProductRepair)),
                                                                         ToolsNew.GetTableName(typeof(ProductRepair_DefectInfo)),
                                                                         _Schema.SqlHelper.DB_BOM,
                                                                         ToolsNew.GetTableName(typeof(_Metas.Model)),
                                                                         _Schema.SqlHelper.DB_GetData,
                                                                         ToolsNew.GetTableName(typeof(_Metas.DefectCode)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.DefectInfo)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         ProductRepair.fn_cdt,
                                                                         ProductRepair.fn_line,
                                                                         ProductRepair.fn_id,
                                                                         ProductRepair.fn_model,
                                                                         ProductRepair.fn_productID,
                                                                         ProductRepair.fn_status,
                                                                         ProductRepair_DefectInfo.fn_id,
                                                                         ProductRepair_DefectInfo.fn_action,
                                                                         ProductRepair_DefectInfo.fn_productRepairID,
                                                                         ProductRepair_DefectInfo.fn_defectCode,
                                                                         ProductRepair_DefectInfo.fn_cause,
                                                                         ProductRepair_DefectInfo.fn_obligation,
                                                                         _Metas.Model.fn_family,
                                                                         _Metas.Model.fn_model,
                                                                         _Metas.DefectCode.fn_defect,
                                                                         _Metas.DefectCode.fn_descr,
                                                                         _Metas.DefectInfo.fn_code,
                                                                         _Metas.DefectInfo.fn_description,
                                                                         _Metas.DefectInfo.fn_type,
                                                                         _Metas.Product.fn_custsn,
                                                                         _Metas.Product.fn_productID,
                                                                         ProductRepair_DefectInfo.fn_mark
                                                                         );

                        sqlCtx.AddParam(ProductRepair.fn_status, new SqlParameter("@" + ProductRepair.fn_status, ToolsNew.GetDBFieldType<ProductRepair>(ProductRepair.fn_status)));
                        sqlCtx.AddParam("t5_" + _Metas.DefectInfo.fn_type, new SqlParameter("@t5_" + _Metas.DefectInfo.fn_type, ToolsNew.GetDBFieldType<_Metas.DefectInfo>(_Metas.DefectInfo.fn_type)));
                        sqlCtx.AddParam("t6_" + _Metas.DefectInfo.fn_type, new SqlParameter("@t6_" + _Metas.DefectInfo.fn_type, ToolsNew.GetDBFieldType<_Metas.DefectInfo>(_Metas.DefectInfo.fn_type)));

                        sqlCtx.Param(_Metas.ProductRepair.fn_status).Value = 1;
                        sqlCtx.Param(g.DecAlias("t5", _Metas.DefectInfo.fn_type)).Value = "FACause";
                        sqlCtx.Param(g.DecAlias("t6", _Metas.DefectInfo.fn_type)).Value = "Obligation";
                    }
                }
                //tafa = sqlCtx.TableFields;
                //tf1 = tafa[0];
                //tf2 = tafa[1];
                //tf3 = tafa[2];
                //tf4 = tafa[3];
                //tf5 = tafa[4];
                //tf6 = tafa[5];
                //tf7 = tafa[6];

                string Sentence = sqlCtx.Sentence.Replace(g.DecAlias("t1", g.DecInSet(_Metas.ProductRepair.fn_productID)), g.ConvertInSet(idList));

                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params);
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        DataTable GetProductRepairInfoListDataTableConsiderStation(IList<string> idList, IList<string> rsList)
        {
            try
            {
                DataTable ret = null;

                //ITableAndFields tf1 = null;
                //ITableAndFields tf2 = null;
                //ITableAndFields tf3 = null;
                //ITableAndFields tf4 = null;
                //ITableAndFields tf5 = null;
                //ITableAndFields tf6 = null;
                //ITableAndFields tf7 = null;
                //ITableAndFields[] tafa = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        #region . OLD .
                        //tf1 = new TableAndFields<_Metas.ProductRepair>();
                        //_Metas.ProductRepair cond = new _Metas.ProductRepair();
                        //cond.productID = "[INSET]";
                        //cond.station = "[INSET]";
                        //tf1.Conditions.Add(new InSetCondition<_Metas.ProductRepair>(cond));
                        //_Metas.ProductRepair cond2 = new _Metas.ProductRepair();
                        //cond2.status = 1;
                        //tf1.Conditions.Add(new EqualCondition<_Metas.ProductRepair>(cond2));
                        //tf1.AddRangeToGetFuncedFieldNames(
                        //    new string[] { _Metas.ProductRepair.fn_cdt, string.Format("CONVERT(VARCHAR,t1.{0},111)", _Metas.ProductRepair.fn_cdt) },
                        //    new string[] { _Metas.ProductRepair.fn_line, "t1." + _Metas.ProductRepair.fn_line }
                        //    );

                        //tf2 = new TableAndFields<_Metas.ProductRepair_DefectInfo>();
                        //tf2.AddRangeToGetFuncedFieldNames(
                        //    new string[] { _Metas.ProductRepair_DefectInfo.fn_id, "t2." + _Metas.ProductRepair_DefectInfo.fn_id },
                        //    new string[] { _Metas.ProductRepair_DefectInfo.fn_action, "t2." + _Metas.ProductRepair_DefectInfo.fn_action }
                        //    );

                        //tf3 = new TableAndFields<_Metas.Model>();
                        //tf3.SubDBCalalog = _Schema.SqlHelper.DB_BOM;
                        //tf3.AddRangeToGetFuncedFieldNames(
                        //    new string[] { _Metas.Model.fn_family, "t3." + _Metas.Model.fn_family },
                        //    new string[] { _Metas.Model.fn_model, "t3." + _Metas.Model.fn_model }
                        //    );

                        //tf4 = new TableAndFields<_Metas.DefectCode>();
                        //tf4.SubDBCalalog = _Schema.SqlHelper.DB_GetData;
                        //tf4.AddRangeToGetFuncedFieldNames(
                        //    new string[] { _Metas.DefectCode.fn_defect, "t4." + _Metas.DefectCode.fn_defect },
                        //    new string[] { _Metas.DefectCode.fn_descr, "t4." + _Metas.DefectCode.fn_descr }
                        //    );

                        //tf5 = new TableAndFields<_Metas.DefectInfo>();
                        //tf5.SubDBCalalog = _Schema.SqlHelper.DB_GetData;
                        //_Metas.DefectInfo cond5 = new _Metas.DefectInfo();
                        //cond5.type = "%Cause%";
                        //tf5.Conditions.Add(new LikeCondition<_Metas.DefectInfo>(cond5));
                        //tf5.AddRangeToGetFuncedFieldNames(
                        //    new string[] { _Metas.DefectInfo.fn_code, string.Format("t5.{0} + ' ' + t5.{1}", _Metas.DefectInfo.fn_code, _Metas.DefectInfo.fn_description) });

                        //tf6 = new TableAndFields<_Metas.DefectInfo>();
                        //tf6.SubDBCalalog = _Schema.SqlHelper.DB_GetData;
                        //_Metas.DefectInfo cond6 = new _Metas.DefectInfo();
                        //cond6.type = "Obligation";
                        //tf6.Conditions.Add(new EqualCondition<_Metas.DefectInfo>(cond6));
                        //tf6.AddRangeToGetFuncedFieldNames(
                        //     new string[] { _Metas.DefectInfo.fn_description, "t6." + _Metas.DefectInfo.fn_description }
                        //     );

                        //tf7 = new TableAndFields<_Metas.Product>();
                        //tf7.AddRangeToGetFuncedFieldNames(
                        //     new string[] { _Metas.Product.fn_custsn, "t7." + _Metas.Product.fn_custsn },
                        //     new string[] { _Metas.Product.fn_productID, "t7." + _Metas.Product.fn_productID }
                        //     );

                        //tafa = new ITableAndFields[] { tf1, tf2, tf3, tf4, tf5, tf6, tf7 };

                        //TableConnectionCollection tblCnnts = new TableConnectionCollection(
                        //    new TableConnectionItem<_Metas.ProductRepair, _Metas.Product>(tf1, _Metas.ProductRepair.fn_productID, tf7, _Metas.Product.fn_productID),
                        //    new TableConnectionItem<_Metas.ProductRepair, _Metas.ProductRepair_DefectInfo>(tf1, _Metas.ProductRepair.fn_id, tf2, _Metas.ProductRepair_DefectInfo.fn_productRepairID),
                        //    new TableConnectionItem<_Metas.ProductRepair, _Metas.Model>(tf1, _Metas.ProductRepair.fn_model, tf3, _Metas.Model.fn_model),
                        //    new TableConnectionItem<_Metas.ProductRepair_DefectInfo, _Metas.DefectCode>(tf2, _Metas.ProductRepair_DefectInfo.fn_defectCode, tf4, _Metas.DefectCode.fn_defect),
                        //    new TableConnectionItem<_Metas.ProductRepair_DefectInfo, _Metas.DefectInfo>(tf2, _Metas.ProductRepair_DefectInfo.fn_cause, tf5, _Metas.DefectInfo.fn_code),
                        //    new TableConnectionItem<_Metas.ProductRepair_DefectInfo, _Metas.DefectInfo>(tf2, _Metas.ProductRepair_DefectInfo.fn_obligation, tf6, _Metas.DefectInfo.fn_code)
                        //    );

                        //sqlCtx = FuncNew.GetConditionedJoinedSelect(tk, null, tafa, tblCnnts,
                        //    string.Format("CONVERT(VARCHAR,t1.{0},111)", _Metas.ProductRepair.fn_cdt),
                        //    "t1." + _Metas.ProductRepair.fn_line,
                        //    "t3." + _Metas.Model.fn_family,
                        //    "t3." + _Metas.Model.fn_model,
                        //    "t7." + _Metas.Product.fn_custsn);
                        #endregion

                        sqlCtx = new SQLContextNew();
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                        sqlCtx.Sentence =   "SELECT " +
                                            "CONVERT(VARCHAR,a.{8},111) AS IssueDate," +
                                            "a.{9} AS Line," +
                                            "b.{14}," +
                                            "b.{15} AS [Action]," +
                                            "b.{30} AS Mark," +
                                            "c.{20} AS Family," +
                                            "c.{21} AS Model," +
                                            "d.{22} AS DefectCode," +
                                            "d.{23} AS DefectDescription," +
                                            "e.{24} + ' ' + e.{25} AS RootCause," +
                                            "f.{25} AS Owner," +
                                            "g.{27} AS SN," +
                                            "g.{28} AS ProdID, " +
                                            "a.Station as Station " +
                                            "FROM {0} a " +
                                            "JOIN {1} b ON a.{10} = b.{16} " +
                                            "JOIN {2}..{3} c ON a.{11} = c.{21} " +
                                            "LEFT JOIN {4}..{5} d ON b.{17} = d.{22} " +
                                            "LEFT JOIN {4}..{6} e ON b.{18} = e.{24} AND e.{26} = @t5_{26} " +
                                            "LEFT JOIN {4}..{6} f ON b.{19} = f.{24} AND f.{26} = @t6_{26} " +
                                            "JOIN {7} g ON a.{12} = g.{28} " +
                                            "WHERE a.{12} IN (t1_INSET[{12}]) " +
                                            "AND a.{13} = @{13} " +
                                            "AND a.{29} IN (t1_INSET[{29}]) " +
                                            "ORDER BY CONVERT(VARCHAR,a.{8},111), a.{9}, c.{20}, c.{21}, g.{27}";
                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(ProductRepair)),
                                                                         ToolsNew.GetTableName(typeof(ProductRepair_DefectInfo)),
                                                                         _Schema.SqlHelper.DB_BOM,
                                                                         ToolsNew.GetTableName(typeof(_Metas.Model)),
                                                                         _Schema.SqlHelper.DB_GetData,
                                                                         ToolsNew.GetTableName(typeof(_Metas.DefectCode)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.DefectInfo)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         ProductRepair.fn_cdt,
                                                                         ProductRepair.fn_line,
                                                                         ProductRepair.fn_id,
                                                                         ProductRepair.fn_model,
                                                                         ProductRepair.fn_productID,
                                                                         ProductRepair.fn_status,
                                                                         ProductRepair_DefectInfo.fn_id,
                                                                         ProductRepair_DefectInfo.fn_action,
                                                                         ProductRepair_DefectInfo.fn_productRepairID,
                                                                         ProductRepair_DefectInfo.fn_defectCode,
                                                                         ProductRepair_DefectInfo.fn_cause,
                                                                         ProductRepair_DefectInfo.fn_obligation,
                                                                         _Metas.Model.fn_family,
                                                                         _Metas.Model.fn_model,
                                                                         _Metas.DefectCode.fn_defect,
                                                                         _Metas.DefectCode.fn_descr,
                                                                         _Metas.DefectInfo.fn_code,
                                                                         _Metas.DefectInfo.fn_description,
                                                                         _Metas.DefectInfo.fn_type,
                                                                         _Metas.Product.fn_custsn,
                                                                         _Metas.Product.fn_productID,
                                                                         ProductRepair.fn_station,
                                                                         ProductRepair_DefectInfo.fn_mark
                                                                         );

                        sqlCtx.AddParam(ProductRepair.fn_status, new SqlParameter("@" + ProductRepair.fn_status, ToolsNew.GetDBFieldType<ProductRepair>(ProductRepair.fn_status)));
                        sqlCtx.AddParam("t5_" + _Metas.DefectInfo.fn_type, new SqlParameter("@t5_" + _Metas.DefectInfo.fn_type, ToolsNew.GetDBFieldType<_Metas.DefectInfo>(_Metas.DefectInfo.fn_type)));
                        sqlCtx.AddParam("t6_" + _Metas.DefectInfo.fn_type, new SqlParameter("@t6_" + _Metas.DefectInfo.fn_type, ToolsNew.GetDBFieldType<_Metas.DefectInfo>(_Metas.DefectInfo.fn_type)));

                        sqlCtx.Param(_Metas.ProductRepair.fn_status).Value = 1;
                        sqlCtx.Param(g.DecAlias("t5", _Metas.DefectInfo.fn_type)).Value = "FACause";
                        sqlCtx.Param(g.DecAlias("t6", _Metas.DefectInfo.fn_type)).Value = "Obligation";
                    }
                }
                //tafa = sqlCtx.TableFields;
                //tf1 = tafa[0];
                //tf2 = tafa[1];
                //tf3 = tafa[2];
                //tf4 = tafa[3];
                //tf5 = tafa[4];
                //tf6 = tafa[5];
                //tf7 = tafa[6];

                string Sentence = sqlCtx.Sentence.
                    Replace(g.DecAlias("t1", g.DecInSet(_Metas.ProductRepair.fn_productID)), g.ConvertInSet(idList)).
                    Replace(g.DecAlias("t1", g.DecInSet(_Metas.ProductRepair.fn_station)), g.ConvertInSet(rsList));

                ret = _Schema.SqlHelper.ExecuteDataFill(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params);
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackupProductRepairDefectInfo(int id, string prodID, string editor)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductRepair_DefectInfo cond = new _Metas.ProductRepair_DefectInfo();
                        cond.id = id;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.ProductRepair_DefectInfo, _Metas.ProductRepair_DefectInfo_BackUp>(tk,
                            new string[][]{
                                new string[]{_Metas.ProductRepair_DefectInfo.fn__4M_,_Metas.ProductRepair_DefectInfo_BackUp.fn__4M_},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_action,_Metas.ProductRepair_DefectInfo_BackUp.fn_action},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_cause,_Metas.ProductRepair_DefectInfo_BackUp.fn_cause},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_cdt,_Metas.ProductRepair_DefectInfo_BackUp.fn_cdt},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_component,_Metas.ProductRepair_DefectInfo_BackUp.fn_component},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_cover,_Metas.ProductRepair_DefectInfo_BackUp.fn_cover},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_defectCode,_Metas.ProductRepair_DefectInfo_BackUp.fn_defectCode},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_distribution,_Metas.ProductRepair_DefectInfo_BackUp.fn_distribution},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_editor,_Metas.ProductRepair_DefectInfo_BackUp.fn_editor},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_id,_Metas.ProductRepair_DefectInfo_BackUp.fn_id},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_isManual,_Metas.ProductRepair_DefectInfo_BackUp.fn_isManual},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_location,_Metas.ProductRepair_DefectInfo_BackUp.fn_location},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_majorPart,_Metas.ProductRepair_DefectInfo_BackUp.fn_majorPart},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_manufacture,_Metas.ProductRepair_DefectInfo_BackUp.fn_manufacture},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_mark,_Metas.ProductRepair_DefectInfo_BackUp.fn_mark},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_mtaid,_Metas.ProductRepair_DefectInfo_BackUp.fn_mtaid},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_newPart,_Metas.ProductRepair_DefectInfo_BackUp.fn_newPart},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_newPartSno,_Metas.ProductRepair_DefectInfo_BackUp.fn_newPartSno},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_obligation,_Metas.ProductRepair_DefectInfo_BackUp.fn_obligation},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_oldPart,_Metas.ProductRepair_DefectInfo_BackUp.fn_oldPart},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_oldPartSno,_Metas.ProductRepair_DefectInfo_BackUp.fn_oldPartSno},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_partType,_Metas.ProductRepair_DefectInfo_BackUp.fn_partType},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_piastation,_Metas.ProductRepair_DefectInfo_BackUp.fn_piastation},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_productRepairID,_Metas.ProductRepair_DefectInfo_BackUp.fn_productRepairID},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_remark,_Metas.ProductRepair_DefectInfo_BackUp.fn_remark},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_responsibility,_Metas.ProductRepair_DefectInfo_BackUp.fn_responsibility},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_returnSign,_Metas.ProductRepair_DefectInfo_BackUp.fn_returnSign},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_returnStn,_Metas.ProductRepair_DefectInfo_BackUp.fn_returnStn},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_site,_Metas.ProductRepair_DefectInfo_BackUp.fn_site},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_subDefect,_Metas.ProductRepair_DefectInfo_BackUp.fn_subDefect},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_trackingStatus,_Metas.ProductRepair_DefectInfo_BackUp.fn_trackingStatus},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_type,_Metas.ProductRepair_DefectInfo_BackUp.fn_type},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_udt,_Metas.ProductRepair_DefectInfo_BackUp.fn_udt},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_uncover,_Metas.ProductRepair_DefectInfo_BackUp.fn_uncover},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_vendorCT,_Metas.ProductRepair_DefectInfo_BackUp.fn_vendorCT},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_versionA,_Metas.ProductRepair_DefectInfo_BackUp.fn_versionA},
                                new string[]{_Metas.ProductRepair_DefectInfo.fn_versionB,_Metas.ProductRepair_DefectInfo_BackUp.fn_versionB},
                                new string[]{"GETDATE()",_Metas.ProductRepair_DefectInfo_BackUp.fn_backUpCdt},
                                new string[]{string.Format("@{0}",_Metas.ProductRepair_DefectInfo_BackUp.fn_backUpEditor),_Metas.ProductRepair_DefectInfo_BackUp.fn_backUpEditor},
                                new string[]{string.Format("@{0}",_Metas.ProductRepair_DefectInfo_BackUp.fn_backUpProductID),_Metas.ProductRepair_DefectInfo_BackUp.fn_backUpProductID}
                            },
                            new ConditionCollection<_Metas.ProductRepair_DefectInfo>(
                                new EqualCondition<_Metas.ProductRepair_DefectInfo>(cond)));
                        sqlCtx.AddParam(_Metas.ProductRepair_DefectInfo_BackUp.fn_backUpEditor, new SqlParameter(string.Format("@{0}", _Metas.ProductRepair_DefectInfo_BackUp.fn_backUpEditor), ToolsNew.GetDBFieldType<_Metas.ProductRepair_DefectInfo_BackUp>(_Metas.ProductRepair_DefectInfo_BackUp.fn_backUpEditor)));
                        sqlCtx.AddParam(_Metas.ProductRepair_DefectInfo_BackUp.fn_backUpProductID, new SqlParameter(string.Format("@{0}", _Metas.ProductRepair_DefectInfo_BackUp.fn_backUpProductID), ToolsNew.GetDBFieldType<_Metas.ProductRepair_DefectInfo_BackUp>(_Metas.ProductRepair_DefectInfo_BackUp.fn_backUpProductID)));
                    }
                }
                sqlCtx.Param(_Metas.ProductRepair_DefectInfo.fn_id).Value = id;
                sqlCtx.Param(_Metas.ProductRepair_DefectInfo_BackUp.fn_backUpEditor).Value = editor;
                sqlCtx.Param(_Metas.ProductRepair_DefectInfo_BackUp.fn_backUpProductID).Value = prodID;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<RepairInfo> GetProductRepairDefectInfo(RepairInfo condition)
        {
            try
            {
                IList<RepairInfo> ret = null;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                mtns::SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                mtns::ProductRepair_DefectInfo cond = mtns::FuncNew.SetColumnFromField<mtns::ProductRepair_DefectInfo, RepairInfo>(condition);
                sqlCtx = mtns::FuncNew.GetConditionedSelect<mtns::ProductRepair_DefectInfo>(null, null, new mtns::ConditionCollection<mtns::ProductRepair_DefectInfo>(new mtns::EqualCondition<mtns::ProductRepair_DefectInfo>(cond)), mtns::ProductRepair_DefectInfo.fn_id);
                //    }
                //}
                sqlCtx = mtns::FuncNew.SetColumnFromField<mtns::ProductRepair_DefectInfo, RepairInfo>(sqlCtx, condition);

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = mtns::FuncNew.SetFieldFromColumn<mtns::ProductRepair_DefectInfo, RepairInfo, RepairInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void UpdateProducts(IMES.FisObject.FA.Product.Product setValue, IMES.FisObject.FA.Product.Product condition)
        {
            try
            {
                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                mtns.Product cond = FuncNew.SetColumnFromField<mtns.Product, fons.Product>(condition);
                mtns.Product setv = FuncNew.SetColumnFromField<mtns.Product, fons.Product>(setValue);
                setv.udt = DateTime.Now;

                setv.cartonWeight = cond.cartonWeight = setv.unitWeight = cond.unitWeight = decimal.MinValue;

                sqlCtx = FuncNew.GetConditionedUpdate<mtns.Product>(new SetValueCollection<mtns.Product>(new CommonSetValue<mtns.Product>(setv)), new ConditionCollection<mtns.Product>(new EqualCondition<mtns.Product>(cond)));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<mtns.Product, fons.Product>(sqlCtx, condition);
                sqlCtx = FuncNew.SetColumnFromField<mtns.Product, fons.Product>(sqlCtx, setValue, true);
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(g.DecSV(mtns.Product.fn_udt)).Value = cmDt;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public SupplierCodeInfo GetSupplierCodeByVendorsAndAstLike(string[] vendors, string ast)
        {
            try
            {
                SupplierCodeInfo ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        SupplierCode cond = new SupplierCode();
                        cond.vendor = "[INSET]";
                        SupplierCode cond2 = new SupplierCode();
                        cond2.code = ast;
                        sqlCtx = FuncNew.GetConditionedSelect<SupplierCode>(tk, "TOP 1", null, new ConditionCollection<SupplierCode>(
                            new InSetCondition<SupplierCode>(cond),
                            new AnyCondition<SupplierCode>(cond2, "{1} LIKE REPLACE({0},'X','_')")), SupplierCode.fn_idex);
                    }
                }
                sqlCtx.Param(g.DecAny(SupplierCode.fn_code)).Value = ast;

                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(SupplierCode.fn_vendor), g.ConvertInSet(vendors));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<SupplierCode, SupplierCodeInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckTheBoxId(IProduct item)
        {
            return CheckTheBoxId_Inner(item, "BoxId") || CheckTheBoxId_Inner(item, "UCC");
        }

        private bool CheckTheBoxId_Inner(IProduct item, string key)
        {
            logger.Info(string.Format("CheckThe{0} Begin", key));
            bool ret = false;
            if (item != null && !string.IsNullOrEmpty(item.PalletNo))
            {
                logger.InfoFormat("Found Product Object. ProductId:{0}", item.ProId);

                //string key = "BoxId";

                var objValue = item.GetExtendedPropertyBody(key);
                if (objValue != null && (objValue.IsInsertingOrUpdating || objValue.isWritenBoxId))
                {
                    logger.InfoFormat("Found Infovalue. ProductId:{0}", item.ProId);

                    var sValue= objValue.InfoValue.Trim();
                    if (sValue != string.Empty)
                    {
                        logger.InfoFormat("Found Infovalue string. ProductId:{0}", item.ProId);

                        ret = true;
                        var suspects = GetProductIdsByInfoValueAndProductId_OnTrans(key, sValue, !objValue.isWritenBoxId);//, item.PalletNo);
                        if (suspects != null && suspects.Count > 0)
                        {
                            logger.InfoFormat("Found Suspects. ProductId:{0}", item.ProId);

                            ret = false;
                            DateTime PriorityOne = DateTime.MinValue;
                            foreach(var suspect in suspects)
                            {
                                if (suspect.ProductID != item.ProId)
                                {
                                    logger.InfoFormat("Different Product. ProductId:{0}", item.ProId);

                                    bool check = true;
                                    if (PriorityOne != DateTime.MinValue && suspect.Udt.Ticks > PriorityOne.Ticks)
                                    {
                                        check = false;
                                    }

                                    if (check)
                                    {
                                        var suspectObj = this.Find_NoLock(suspect.ProductID);

                                        if (CheckCommonPallet(suspectObj, item) && CheckAutoBill(suspectObj) && CheckAutoBill(item))//增加自动单条件限制 //增加同一PalletNo条件限制
                                        {
                                            logger.InfoFormat("Fis Exception Occurs. ProductId:{0}", item.ProId);

                                            List<string> erpara = new List<string>();
                                            erpara.Add(sValue);
                                            erpara.Add(suspect.ProductID);
                                            erpara.Add(item.ProId);
                                            erpara.Add(key);
                                            var ex = new FisException("SYNC01", erpara);
                                            throw ex;
                                        }
                                    }
                                }
                                else
                                {
                                    if (PriorityOne == DateTime.MinValue)
                                        PriorityOne = suspect.Udt;
                                }
                            }
                        }
                    }
                    if (objValue.IsInsertingOrUpdating)
                        objValue.isWritenBoxId = true;
                }
            }
            return ret;
        }

        //private bool CheckAutoBill(string productId)
        //{
        //    bool ret = false;
        //    if (!string.IsNullOrEmpty(productId))
        //    {
        //        var prodObj = this.Find(productId);
        //        ret = CheckDnFlag(prodObj) || CheckPalletUcc(prodObj);
        //    }
        //    return ret;
        //}

        private bool CheckCommonPallet(IProduct prodObj1, IProduct prodObj2)
        {
            bool ret = false;
            if (prodObj1 != null && prodObj2 != null && !string.IsNullOrEmpty(prodObj1.PalletNo) && !string.IsNullOrEmpty(prodObj2.PalletNo))
            {
                ret = (prodObj1.PalletNo == prodObj2.PalletNo);
            }
            return ret;
        }

        private bool CheckAutoBill(IProduct prodObj)
        {
            bool ret = false;
            if (prodObj != null)
            {
                ret = CheckDnFlag(prodObj) || CheckPalletUcc(prodObj);
            }
            return ret;
        }

        private bool CheckDnFlag(IProduct prodObj)
        {
            bool ret = false;
            if (prodObj != null && !string.IsNullOrEmpty(prodObj.DeliveryNo))
            {
                var dnObj = DnRepository.Find(prodObj.DeliveryNo);
                if (dnObj != null)
                {
                    string flag = (string)dnObj.GetExtendedProperty("Flag");
                    if (flag == "N")
                        ret = true;
                }
            }
            return ret;
        }

        private bool CheckPalletUcc(IProduct prodObj)
        {
            bool ret = false;
            if (prodObj != null && !string.IsNullOrEmpty(prodObj.PalletNo))
            {
                var pltObj = PltRepository.Find(prodObj.PalletNo);
                if (pltObj != null)
                {
                    string ucc = pltObj.UCC;
                    if (!string.IsNullOrEmpty(ucc))
                        ret = true;
                }
            }
            return ret;
        }

        public IList<IProduct> GetProductWithAlarm(AlarmInfo condition)
        {
            IList<IProduct> ret = null;
            try
            {
                var id = "ID";
                var st = "StartTime";
                var et = "EndTime";

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();

                        //sqlCtx.Sentence = "SELECT prd.{4},prd.{5},prd.{6},prd.{7},prd.{8},prd.{9},prd.{10},prd.{11},prd.{12},prd.{13},prd.{14},prd.{15},prd.{16},prd.{17},prd.{32},prd.{33},prd.{34},prd.{35},prd.{36},prd.{37},prd.{38},prd.{39} FROM {0} a,{1} p,{2} pdi,{3} prd " +
                        //                  "WHERE a.{18}=@{29} " +
                        //                  "AND a.{19}=p.{21} " +
                        //                  "AND a.{20}=p.{22} " +
                        //                  "AND p.{23}=1 " +
                        //                  "AND (p.{24}>@{30} AND p.{24}<=@{31}) " +
                        //                  "AND a.Defect = pdi.DefectCodeID " +
                        //                  "AND p.{25}=pdi.{27} " +
                        //                  "AND pdi.{28}=1 " +
                        //                  "AND p.{26}=prd.{34} ";

                        //sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(Alarm)),
                        //                                                ToolsNew.GetTableName(typeof(ProductTestLogBack)),
                        //                                                ToolsNew.GetTableName(typeof(ProductTestLogBack_DefectInfo)),
                        //                                                ToolsNew.GetTableName(typeof(mtns.Product)),
                        //                                                mtns.Product.fn_cartonSN,
                        //                                                mtns.Product.fn_cartonWeight,
                        //                                                mtns.Product.fn_cdt,
                        //                                                mtns.Product.fn_custsn,
                        //                                                mtns.Product.fn_cvsn,
                        //                                                mtns.Product.fn_deliveryNo,
                        //                                                mtns.Product.fn_ecr,
                        //                                                mtns.Product.fn_mac,
                        //                                                mtns.Product.fn_mbecr,
                        //                                                mtns.Product.fn_mo,
                        //                                                mtns.Product.fn_model,
                        //                                                mtns.Product.fn_ooaid,
                        //                                                mtns.Product.fn_palletNo,
                        //                                                mtns.Product.fn_pcbid,
                        //                                                Alarm.fn_id,
                        //                                                Alarm.fn_line,
                        //                                                Alarm.fn_station,
                        //                                                ProductTestLogBack.fn_line,
                        //                                                ProductTestLogBack.fn_station,
                        //                                                ProductTestLogBack.fn_status,
                        //                                                ProductTestLogBack.fn_cdt,
                        //                                                ProductTestLogBack.fn_id,
                        //                                                ProductTestLogBack.fn_productID,
                        //                                                ProductTestLogBack_DefectInfo.fn_productTestLogBackID,
                        //                                                ProductTestLogBack_DefectInfo.fn_triggerAlarm,
                        //                                                id,
                        //                                                st,
                        //                                                et,
                        //                                                mtns.Product.fn_pcbmodel,
                        //                                                mtns.Product.fn_pizzaID,
                        //                                                mtns.Product.fn_productID,
                        //                                                mtns.Product.fn_prsn,
                        //                                                mtns.Product.fn_state,
                        //                                                mtns.Product.fn_udt,
                        //                                                mtns.Product.fn_unitWeight,
                        //                                                mtns.Product.fn_uuid
                        //                                                );
                        //sqlCtx.Sentence =
                        //        "SELECT prd.CartonSN,prd.CartonWeight,prd.Cdt,prd.CUSTSN,prd.CVSN,prd.DeliveryNo,prd.ECR,prd.MAC,prd.MBECR,prd.MO," +
                        //        "prd.Model,prd.OOAID,prd.PalletNo,prd.PCBID,prd.PCBModel,prd.PizzaID,prd.PRSN,prd.State,prd.Udt,prd.UnitWeight,prd.UUID FROM Alarm a left outer join ProductTestLogBack p on a.Line=p.Line " +
                        //        "and a.Station=p.Station left outer join ProductTestLogBack_DefectInfo pdi on pdi.ProductTestLogBackID=p.ID and pdi.DefectCodeID=a.Defect " +
                        //        "inner join Product prd on prd.ProductID=p.ProductID inner join Model e on prd.Model=e.Model and e.Family=a.Family " +
                        //        "WHERE a.ID=@" + id + " AND p.Status=0 " +
                        //        "AND (p.Cdt>@" + st + " AND p.Cdt<=@" + et + " ) " +
                        //        "AND pdi.TriggerAlarm=1";
                        if (string.IsNullOrEmpty(condition.Defect))
                        {
                            sqlCtx.Sentence =
                                "SELECT prd.ProductID,prd.Model FROM Alarm a left outer join ProductTestLogBack p on a.Line=p.Line " +
                                "and a.Station=p.Station left outer join ProductTestLogBack_DefectInfo pdi on pdi.ProductTestLogBackID=p.ID " +
                                "inner join Product prd on prd.ProductID=p.ProductID inner join Model e on prd.Model=e.Model and e.Family=a.Family " +
                                "WHERE a.ID=@" + id + " AND p.Status=0 " +
                                "AND (p.Cdt>@" + st + " AND p.Cdt<=@" + et + " ) " +
                                "AND pdi.TriggerAlarm=1";
                        }
                        else
                        {
                            sqlCtx.Sentence =
                                "SELECT prd.ProductID,prd.Model FROM Alarm a left outer join ProductTestLogBack p on a.Line=p.Line " +
                                "and a.Station=p.Station left outer join ProductTestLogBack_DefectInfo pdi on pdi.ProductTestLogBackID=p.ID and pdi.DefectCodeID=a.Defect " +
                                "inner join Product prd on prd.ProductID=p.ProductID inner join Model e on prd.Model=e.Model and e.Family=a.Family " +
                                "WHERE a.ID=@" + id + " AND p.Status=0 " +
                                "AND (p.Cdt>@" + st + " AND p.Cdt<=@" + et + " ) " +
                                "AND pdi.TriggerAlarm=1";
                        }

                        sqlCtx.AddParam(id, new SqlParameter("@" + id, ToolsNew.GetDBFieldType<Alarm>(Alarm.fn_id)));
                        sqlCtx.AddParam(st, new SqlParameter("@" + st, ToolsNew.GetDBFieldType<ProductTestLogBack>(ProductTestLogBack.fn_cdt)));
                        sqlCtx.AddParam(et, new SqlParameter("@" + et, ToolsNew.GetDBFieldType<ProductTestLogBack>(ProductTestLogBack.fn_cdt)));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(id).Value = condition.Id;
                sqlCtx.Param(st).Value = condition.StartTime;
                sqlCtx.Param(et).Value = condition.EndTime;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<IProduct>();
                        while (sqlR.Read())
                        {
                            fons.Product item = new fons.Product(GetValue_Str(sqlR, 0));
                            item.Model = GetValue_Str(sqlR, 1);
                            //item.CartonSN = GetValue_Str(sqlR, 0);
                            //item.CartonWeight = GetValue_Decimal(sqlR, 1);
                            //item.Cdt = GetValue_DateTime(sqlR, 2);
                            //item.CUSTSN = GetValue_Str(sqlR, 3);
                            //item.CVSN = GetValue_Str(sqlR, 4);
                            //item.DeliveryNo = GetValue_Str(sqlR, 5);
                            //item.ECR = GetValue_Str(sqlR, 6);
                            //item.MAC = GetValue_Str(sqlR, 7);
                            //item.MBECR = GetValue_Str(sqlR, 8);
                            //item.MO = GetValue_Str(sqlR, 9);
                            //item.Model = GetValue_Str(sqlR, 10);
                            //item.OOAID = GetValue_Str(sqlR, 11);
                            //item.PalletNo = GetValue_Str(sqlR, 12);
                            //item.PCBID = GetValue_Str(sqlR, 13);
                            //item.PCBModel = GetValue_Str(sqlR, 14);
                            //item.PizzaID = GetValue_Str(sqlR, 15);
                            ////16;
                            //item.PRSN = GetValue_Str(sqlR, 17);
                            //item.State = GetValue_Str(sqlR, 18);
                            //item.Udt = GetValue_DateTime(sqlR, 19);
                            //item.UnitWeight = GetValue_Decimal(sqlR, 20);
                            //item.UUID = GetValue_Str(sqlR, 21);
                            item.Tracker.Clear();
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<ProductPart> GetProductPartByPartLikeType(string productId, string partTypeLike)
        {
            try
            {
                IList<ProductPart> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product_Part cond = new _Metas.Product_Part();
                        cond.productID = productId;

                        _Metas.Product_Part cond2 = new _Metas.Product_Part();
                        cond2.partType = "%" + partTypeLike + "%";

                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product_Part>(tk, null, null, new ConditionCollection<_Metas.Product_Part>(
                       new EqualCondition<_Metas.Product_Part>(cond),
                       new LikeCondition<_Metas.Product_Part>(cond2)), _Metas.Product.fn_productID);
                    }
                }
                sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = productId;
                sqlCtx.Param(_Metas.Product_Part.fn_partType).Value = "%" + partTypeLike + "%";

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = mtns::FuncNew.SetFieldFromColumn<mtns::Product_Part, ProductPart, ProductPart>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductStatusByCarton(string carton, string uEditor)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductStatus cond = new _Metas.ProductStatus();
                        cond.productID = carton;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.ProductStatus, _Metas.UnpackProductStatus>(tk,
                            new string[][]{
                                new string[]{_Metas.ProductStatus.fn_cdt,_Metas.UnpackProductStatus.fn_cdt},
                                new string[]{_Metas.ProductStatus.fn_editor,_Metas.UnpackProductStatus.fn_editor},
                                new string[]{_Metas.ProductStatus.fn_line,_Metas.UnpackProductStatus.fn_line},
                                new string[]{_Metas.ProductStatus.fn_productID,_Metas.UnpackProductStatus.fn_productID},
                                new string[]{_Metas.ProductStatus.fn_reworkCode,_Metas.UnpackProductStatus.fn_reworkCode},
                                new string[]{_Metas.ProductStatus.fn_station,_Metas.UnpackProductStatus.fn_station},
                                new string[]{_Metas.ProductStatus.fn_status,_Metas.UnpackProductStatus.fn_status},
                                new string[]{_Metas.ProductStatus.fn_testFailCount,_Metas.UnpackProductStatus.fn_testFailCount},
                                new string[]{_Metas.ProductStatus.fn_udt,_Metas.UnpackProductStatus.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProductStatus.fn_ueditor), _Metas.UnpackProductStatus.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProductStatus.fn_updt}
                            },
                            new ConditionCollection<_Metas.ProductStatus>(
                                new AnyCondition<_Metas.ProductStatus>(cond, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", mtns.Product.fn_productID, ToolsNew.GetTableName(typeof(mtns.Product)), mtns.Product.fn_cartonSN, "{1}"))
                                ));
                        sqlCtx.AddParam(_Metas.UnpackProductStatus.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProductStatus.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProductStatus>(_Metas.UnpackProductStatus.fn_ueditor)));
                    }
                }
                sqlCtx.Param(g.DecAny(_Metas.ProductStatus.fn_productID)).Value = carton;
                sqlCtx.Param(_Metas.UnpackProductStatus.fn_ueditor).Value = uEditor;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductByDnPure(string dn, string uEditor)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.deliveryNo = dn;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.Product, _Metas.UnpackProduct>(tk,
                            new string[][]{
                                new string[]{_Metas.Product.fn_cartonSN,_Metas.UnpackProduct.fn_cartonSN},
                                new string[]{_Metas.Product.fn_cartonWeight,_Metas.UnpackProduct.fn_cartonWeight},
                                new string[]{_Metas.Product.fn_cdt,_Metas.UnpackProduct.fn_cdt},
                                new string[]{_Metas.Product.fn_custsn,_Metas.UnpackProduct.fn_custsn},
                                new string[]{_Metas.Product.fn_cvsn,_Metas.UnpackProduct.fn_cvsn},
                                new string[]{_Metas.Product.fn_deliveryNo,_Metas.UnpackProduct.fn_deliveryNo},
                                new string[]{_Metas.Product.fn_ecr,_Metas.UnpackProduct.fn_ecr},
                                new string[]{_Metas.Product.fn_mac,_Metas.UnpackProduct.fn_mac},
                                new string[]{_Metas.Product.fn_mbecr,_Metas.UnpackProduct.fn_mbecr},
                                new string[]{_Metas.Product.fn_mo,_Metas.UnpackProduct.fn_mo},
                                new string[]{_Metas.Product.fn_model,_Metas.UnpackProduct.fn_model},
                                new string[]{_Metas.Product.fn_ooaid,_Metas.UnpackProduct.fn_ooaid},
                                new string[]{_Metas.Product.fn_palletNo,_Metas.UnpackProduct.fn_palletNo},
                                new string[]{_Metas.Product.fn_pcbid,_Metas.UnpackProduct.fn_pcbid},
                                new string[]{_Metas.Product.fn_pcbmodel,_Metas.UnpackProduct.fn_pcbmodel},
                                new string[]{_Metas.Product.fn_pizzaID,_Metas.UnpackProduct.fn_pizzaID},
                                new string[]{_Metas.Product.fn_productID,_Metas.UnpackProduct.fn_productID},
                                new string[]{_Metas.Product.fn_prsn,_Metas.UnpackProduct.fn_prsn},
                                new string[]{_Metas.Product.fn_state,_Metas.UnpackProduct.fn_state},
                                new string[]{_Metas.Product.fn_udt,_Metas.UnpackProduct.fn_udt},
                                new string[]{_Metas.Product.fn_unitWeight,_Metas.UnpackProduct.fn_unitWeight},
                                new string[]{_Metas.Product.fn_uuid,_Metas.UnpackProduct.fn_uuid},
                                new string[]{string.Format("@{0}",_Metas.UnpackProduct.fn_ueditor), _Metas.UnpackProduct.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProduct.fn_updt}
                            },
                            new ConditionCollection<_Metas.Product>(
                                new EqualCondition<_Metas.Product>(cond)));
                        sqlCtx.AddParam(_Metas.UnpackProduct.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProduct.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProduct>(_Metas.UnpackProduct.fn_ueditor)));
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_deliveryNo).Value = dn;
                sqlCtx.Param(_Metas.UnpackProduct.fn_ueditor).Value = uEditor;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductInfoByDnPure(string dn, string uEditor, IList<string> infoTypeNames)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductInfo cond = new _Metas.ProductInfo();
                        cond.productID = dn;
                        _Metas.ProductInfo cond2 = new _Metas.ProductInfo();
                        cond2.infoType = "[INSET]";
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.ProductInfo, _Metas.UnpackProductInfo>(tk,
                            new string[][]{
                                new string[]{_Metas.ProductInfo.fn_cdt,_Metas.UnpackProductInfo.fn_cdt},
                                new string[]{_Metas.ProductInfo.fn_editor,_Metas.UnpackProductInfo.fn_editor},
                                new string[]{_Metas.ProductInfo.fn_id,_Metas.UnpackProductInfo.fn_productInfoID},
                                new string[]{_Metas.ProductInfo.fn_infoType,_Metas.UnpackProductInfo.fn_infoType},
                                new string[]{_Metas.ProductInfo.fn_infoValue,_Metas.UnpackProductInfo.fn_infoValue},
                                new string[]{_Metas.ProductInfo.fn_productID,_Metas.UnpackProductInfo.fn_productID},
                                new string[]{_Metas.ProductInfo.fn_udt,_Metas.UnpackProductInfo.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProductInfo.fn_ueditor), _Metas.UnpackProductInfo.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProductInfo.fn_updt}
                            },
                            new ConditionCollection<_Metas.ProductInfo>(
                                new AnyCondition<_Metas.ProductInfo>(cond, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", _Metas.Product.fn_productID, ToolsNew.GetTableName(typeof(_Metas.Product)), _Metas.Product.fn_deliveryNo, "{1}")),
                                new InSetCondition<_Metas.ProductInfo>(cond2)));
                        sqlCtx.AddParam(_Metas.UnpackProductInfo.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProductInfo.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProductInfo>(_Metas.UnpackProductInfo.fn_ueditor)));
                    }
                }
                sqlCtx.Param(g.DecAny(_Metas.ProductInfo.fn_productID)).Value = dn;
                sqlCtx.Param(_Metas.UnpackProductInfo.fn_ueditor).Value = uEditor;
                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(_Metas.ProductInfo.fn_infoType), g.ConvertInSet(infoTypeNames));
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void BackUpProductStatusByDnPure(string dn, string uEditor)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductStatus cond = new _Metas.ProductStatus();
                        cond.productID = dn;
                        sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.ProductStatus, _Metas.UnpackProductStatus>(tk,
                            new string[][]{
                                new string[]{_Metas.ProductStatus.fn_cdt,_Metas.UnpackProductStatus.fn_cdt},
                                new string[]{_Metas.ProductStatus.fn_editor,_Metas.UnpackProductStatus.fn_editor},
                                new string[]{_Metas.ProductStatus.fn_line,_Metas.UnpackProductStatus.fn_line},
                                new string[]{_Metas.ProductStatus.fn_productID,_Metas.UnpackProductStatus.fn_productID},
                                new string[]{_Metas.ProductStatus.fn_reworkCode,_Metas.UnpackProductStatus.fn_reworkCode},
                                new string[]{_Metas.ProductStatus.fn_station,_Metas.UnpackProductStatus.fn_station},
                                new string[]{_Metas.ProductStatus.fn_status,_Metas.UnpackProductStatus.fn_status},
                                new string[]{_Metas.ProductStatus.fn_testFailCount,_Metas.UnpackProductStatus.fn_testFailCount},
                                new string[]{_Metas.ProductStatus.fn_udt,_Metas.UnpackProductStatus.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProductStatus.fn_ueditor), _Metas.UnpackProductStatus.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProductStatus.fn_updt}
                            },
                            new ConditionCollection<_Metas.ProductStatus>(
                                new AnyCondition<_Metas.ProductStatus>(cond, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", _Metas.Product.fn_productID, ToolsNew.GetTableName(typeof(_Metas.Product)), _Metas.Product.fn_deliveryNo, "{1}"))));
                        sqlCtx.AddParam(_Metas.UnpackProductStatus.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProductStatus.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProductStatus>(_Metas.UnpackProductStatus.fn_ueditor)));
                    }
                }
                sqlCtx.Param(g.DecAny(_Metas.ProductStatus.fn_productID)).Value = dn;
                sqlCtx.Param(_Metas.UnpackProductStatus.fn_ueditor).Value = uEditor;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<IMES.FisObject.FA.Product.ProductInfo> GetProductInfoListByPalletNo(IMES.FisObject.FA.Product.ProductInfo condition, string palletNo)
        {
            try
            {
                IList<fons.ProductInfo> ret = null;

                //MethodBase mthObj = MethodBase.GetCurrentMethod();
                //int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                //lock (mthObj)
                //{
                //    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                //    {
                mtns.ProductInfo cond = FuncNew.SetColumnFromField<mtns.ProductInfo, fons.ProductInfo>(condition);

                mtns.ProductInfo cond2 = new mtns.ProductInfo();
                cond2.productID = palletNo;

                sqlCtx = FuncNew.GetConditionedSelect<mtns.ProductInfo>(null, null, new ConditionCollection<mtns.ProductInfo>(
                    new EqualCondition<mtns.ProductInfo>(cond),
                    new AnyCondition<mtns.ProductInfo>(cond2, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", mtns.Product.fn_productID, ToolsNew.GetTableName(typeof(mtns.Product)), mtns.Product.fn_palletNo, "{1}"))));
                //    }
                //}
                sqlCtx = FuncNew.SetColumnFromField<mtns.ProductInfo, fons.ProductInfo>(sqlCtx, condition);
                sqlCtx.Param(g.DecAny(mtns.ProductInfo.fn_productID)).Value = palletNo;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    ret = FuncNew.SetFieldFromColumn<mtns.ProductInfo, fons.ProductInfo, fons.ProductInfo>(ret, sqlR, sqlCtx);
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckExistCartonInfoWithProduct(string palletNo, string infoType)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new _Metas.SQLContextNew();

                        sqlCtx.Sentence =   "SELECT COUNT(1) FROM {0}..{1} a,{2} b " +
                                            "WHERE a.{3} = b.{5} " +
                                            "AND b.{6} = @{6} " +
                                            "AND a.{4} = @{4} ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, _Schema.SqlHelper.DB_PAK,
                                                                         ToolsNew.GetTableName(typeof(CartonInfo)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         CartonInfo.fn_cartonNo,
                                                                         CartonInfo.fn_infoType,
                                                                         _Metas.Product.fn_cartonSN,
                                                                         _Metas.Product.fn_palletNo
                                                                         );

                        sqlCtx.AddParam(CartonInfo.fn_infoType, new SqlParameter("@" + CartonInfo.fn_infoType, ToolsNew.GetDBFieldType<CartonInfo>(CartonInfo.fn_infoType)));
                        sqlCtx.AddParam(_Metas.Product.fn_palletNo, new SqlParameter("@" + _Metas.Product.fn_palletNo, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_palletNo)));
                        
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_palletNo).Value = palletNo;
                sqlCtx.Param(CartonInfo.fn_infoType).Value = infoType;
 
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, 0);
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckExistProductWithCartonInfo(string palletNo, string infoType)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new _Metas.SQLContextNew();

                        sqlCtx.Sentence =   "SELECT COUNT(1) FROM {2} b LEFT JOIN {0}..{1} a " +
                                            "ON a.{3} = b.{5} " +
                                            "AND b.{6} = @{6} " +
                                            "AND a.{4} = @{4} " +
                                            "WHERE ISNULL(a.{7}, '') = '' ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, _Schema.SqlHelper.DB_PAK,
                                                                         ToolsNew.GetTableName(typeof(CartonInfo)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         CartonInfo.fn_cartonNo,
                                                                         CartonInfo.fn_infoType,
                                                                         _Metas.Product.fn_cartonSN,
                                                                         _Metas.Product.fn_palletNo,
                                                                         CartonInfo.fn_infoValue
                                                                         );

                        sqlCtx.AddParam(CartonInfo.fn_infoType, new SqlParameter("@" + CartonInfo.fn_infoType, ToolsNew.GetDBFieldType<CartonInfo>(CartonInfo.fn_infoType)));
                        sqlCtx.AddParam(_Metas.Product.fn_palletNo, new SqlParameter("@" + _Metas.Product.fn_palletNo, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_palletNo)));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_palletNo).Value = palletNo;
                sqlCtx.Param(CartonInfo.fn_infoType).Value = infoType;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, 0);
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetInfoValueFromCartonInfoWithProduct(string palletNo, string infoType)
        {
            try
            {
                IList<string> ret = new List<string>();

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new _Metas.SQLContextNew();

                        sqlCtx.Sentence = "SELECT a.{7} FROM {0}..{1} a, {2} b " +
                                            "WHERE a.{3} = b.{5} " +
                                            "AND b.{6} = @{6} " +
                                            "AND a.{4} = @{4} " +
                                            "GROUP BY {7} "; // +
                                            //"HAVING COUNT(*) > 1 ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, _Schema.SqlHelper.DB_PAK,
                                                                         ToolsNew.GetTableName(typeof(CartonInfo)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         CartonInfo.fn_cartonNo,
                                                                         CartonInfo.fn_infoType,
                                                                         _Metas.Product.fn_cartonSN,
                                                                         _Metas.Product.fn_palletNo,
                                                                         CartonInfo.fn_infoValue
                                                                         );

                        sqlCtx.AddParam(CartonInfo.fn_infoType, new SqlParameter("@" + CartonInfo.fn_infoType, ToolsNew.GetDBFieldType<CartonInfo>(CartonInfo.fn_infoType)));
                        sqlCtx.AddParam(_Metas.Product.fn_palletNo, new SqlParameter("@" + _Metas.Product.fn_palletNo, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_palletNo)));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_palletNo).Value = palletNo;
                sqlCtx.Param(CartonInfo.fn_infoType).Value = infoType;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string>();
                        while (sqlR.Read())
                        {
                            string item = g.GetValue_Str(sqlR, 0);
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool CheckExistProductWithCartonInfo2(string palletNo, string infoType)
        {
            try
            {
                bool ret = false;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new _Metas.SQLContextNew();


                        sqlCtx.Sentence = "SELECT COUNT(1) FROM (SELECT * FROM {2} WHERE {6} = @{6}) b " +
                                            "LEFT JOIN (SELECT * FROM {0}..{1} WHERE {4} = @{4}) a " +
                                            "ON a.{3} = b.{5} WHERE ISNULL(a.{7}, '') = '' ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, _Schema.SqlHelper.DB_PAK,
                                                                         ToolsNew.GetTableName(typeof(CartonInfo)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         CartonInfo.fn_cartonNo,
                                                                         CartonInfo.fn_infoType,
                                                                         _Metas.Product.fn_cartonSN,
                                                                         _Metas.Product.fn_palletNo,
                                                                         CartonInfo.fn_infoValue
                                                                         );

                        sqlCtx.AddParam(CartonInfo.fn_infoType, new SqlParameter("@" + CartonInfo.fn_infoType, ToolsNew.GetDBFieldType<CartonInfo>(CartonInfo.fn_infoType)));
                        sqlCtx.AddParam(_Metas.Product.fn_palletNo, new SqlParameter("@" + _Metas.Product.fn_palletNo, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_palletNo)));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_palletNo).Value = palletNo;
                sqlCtx.Param(CartonInfo.fn_infoType).Value = infoType;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        int cnt = g.GetValue_Int32(sqlR, 0);
                        ret = cnt > 0;
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<string> GetInfoValueList(string palletNo, string infoType)
        {
            try
            {
                IList<string> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new _Metas.SQLContextNew();


                        sqlCtx.Sentence =   "SELECT a.{7} FROM " + 
                                            "(SELECT DISTINCT a.{3}, a.{7} FROM {0}..{1} a, {2} b " +
                                            "WHERE a.{3} = b.{5} " +
                                            "AND a.{4} = @{4} " +
                                            "AND b.{6} = @{6}) a " +
                                            "GROUP BY a.{7} " +
                                            "HAVING COUNT(*) > 1 ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, _Schema.SqlHelper.DB_PAK,
                                                                         ToolsNew.GetTableName(typeof(CartonInfo)),
                                                                         ToolsNew.GetTableName(typeof(_Metas.Product)),
                                                                         CartonInfo.fn_cartonNo,
                                                                         CartonInfo.fn_infoType,
                                                                         _Metas.Product.fn_cartonSN,
                                                                         _Metas.Product.fn_palletNo,
                                                                         CartonInfo.fn_infoValue
                                                                         );

                        sqlCtx.AddParam(CartonInfo.fn_infoType, new SqlParameter("@" + CartonInfo.fn_infoType, ToolsNew.GetDBFieldType<CartonInfo>(CartonInfo.fn_infoType)));
                        sqlCtx.AddParam(_Metas.Product.fn_palletNo, new SqlParameter("@" + _Metas.Product.fn_palletNo, ToolsNew.GetDBFieldType<_Metas.Product>(_Metas.Product.fn_palletNo)));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_palletNo).Value = palletNo;
                sqlCtx.Param(CartonInfo.fn_infoType).Value = infoType;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<string>();
                        while (sqlR.Read())
                        {
                            string item = g.GetValue_Str(sqlR, 0);
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public IList<SnoDetPoMoInfo> GetSnoDetPoMoInfoList_NOT98DN()
        {
            try
            {
                IList<SnoDetPoMoInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new _Metas.SQLContextNew();


                        sqlCtx.Sentence = "SELECT a.{3},a.{4},a.{7},a.{8},a.{9},a.{10},a.{11},a.{12},a.{13},a.{14},a.{15} FROM {0} a " +
                                            "LEFT JOIN {1}..{2} b " +
                                            "ON a.{3} = b.{5} " +
                                            "WHERE ISNULL(b.{6},'') <> '98' " +
                                            "ORDER BY a.{4} ";

                        sqlCtx.Sentence = string.Format(sqlCtx.Sentence, ToolsNew.GetTableName(typeof(_Metas.SnoDet_PoMo)), 
                                                                         _Schema.SqlHelper.DB_PAK,
                                                                         ToolsNew.GetTableName(typeof(_Metas.Delivery)),
                                                                         _Metas.SnoDet_PoMo.fn_delivery,
                                                                         _Metas.SnoDet_PoMo.fn_snoId,
                                                                         _Metas.Delivery.fn_deliveryNo,
                                                                         _Metas.Delivery.fn_status,
                                                                         _Metas.SnoDet_PoMo.fn_boxId,
                                                                         _Metas.SnoDet_PoMo.fn_cdt,
                                                                         _Metas.SnoDet_PoMo.fn_editor,
                                                                         _Metas.SnoDet_PoMo.fn_mo,
                                                                         _Metas.SnoDet_PoMo.fn_plt,
                                                                         _Metas.SnoDet_PoMo.fn_po,
                                                                         _Metas.SnoDet_PoMo.fn_poitem,
                                                                         _Metas.SnoDet_PoMo.fn_remark,
                                                                         _Metas.SnoDet_PoMo.fn_udt
                                                                         );
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = new List<SnoDetPoMoInfo>();
                        while (sqlR.Read())
                        {
                            var item = new SnoDetPoMoInfo();
                            item.delivery = g.GetValue_Str(sqlR, 0);
                            item.snoId = g.GetValue_Str(sqlR, 1);
                            item.boxId = g.GetValue_Str(sqlR, 2);
                            item.cdt = g.GetValue_DateTime(sqlR, 3);
                            item.editor = g.GetValue_Str(sqlR, 4);
                            item.mo = g.GetValue_Str(sqlR, 5);
                            item.plt = g.GetValue_Str(sqlR, 6);
                            item.po = g.GetValue_Str(sqlR, 7);
                            item.poitem = g.GetValue_Str(sqlR, 8);
                            item.remark = g.GetValue_Str(sqlR, 9);
                            item.udt = g.GetValue_DateTime(sqlR, 10);
                            ret.Add(item);
                        }
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public int GetCountOfInfoValueInProductInfo(string palletNo, string[] infoTypes)
        {
            try
            {
                int ret = 0;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        mtns.ProductInfo cond = new mtns.ProductInfo();
                        cond.infoType = "[INSET]";

                        mtns.ProductInfo cond2 = new mtns.ProductInfo();
                        cond2.productID = palletNo;

                        mtns.ProductInfo cond3 = new mtns.ProductInfo();
                        cond3.infoValue = string.Empty;

                        sqlCtx = FuncNew.GetConditionedSelectForFuncedField<mtns.ProductInfo>(tk, null, new string[][] { new string[] { mtns.ProductInfo.fn_infoValue, string.Format("COUNT(DISTINCT {0})", mtns.ProductInfo.fn_infoValue) } }, new ConditionCollection<mtns.ProductInfo>(
                                new InSetCondition<mtns.ProductInfo>(cond),
                                new AnyCondition<mtns.ProductInfo>(cond2, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", mtns.Product.fn_productID, ToolsNew.GetTableName(typeof(mtns.Product)), mtns.Product.fn_palletNo, "{1}")),
                                new NotEqualCondition<mtns.ProductInfo>(cond3)));

                        sqlCtx.Param(mtns.ProductInfo.fn_infoValue).Value = cond3.infoValue;
                    }
                }
                sqlCtx.Param(g.DecAny(mtns.ProductInfo.fn_productID)).Value = palletNo;
                string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(mtns.ProductInfo.fn_infoType), g.ConvertInSet(infoTypes));

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, Sentence, sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = g.GetValue_Int32(sqlR, sqlCtx.Indexes(mtns.ProductInfo.fn_infoValue));
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void CallOp_FAUnpackProduct(string prodId, string restation, string editor, string isprint)
        {
            try
            { 
                SqlParameter[] paramsArray = new SqlParameter[4];

                paramsArray[0] = new SqlParameter("@ProductID", SqlDbType.Char);
                paramsArray[0].Value = prodId;
                paramsArray[1] = new SqlParameter("@ReStation", SqlDbType.Char);
                paramsArray[1].Value = restation;
                paramsArray[2] = new SqlParameter("@Editor", SqlDbType.Char);
                paramsArray[2].Value = editor;
                paramsArray[3] = new SqlParameter("@IsPrint", SqlDbType.Char);
                paramsArray[3].Value = isprint;
               
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.StoredProcedure, "IMES_FA_UnpackProduct", paramsArray);
            }
            catch (Exception)
            {
                throw;
            }
        }

        #region . Locks For All Repository .

        public Guid GrabLockByTransThread(string type, string lockValue, ConcurrentLocksInfo clck)
        {
            try
            {
                Guid ret = Guid.NewGuid();

                var cl = FuncNew.SetColumnFromField<ConcurrentLocks, ConcurrentLocksInfo>(clck);
                cl.guid = ret;

                IUnitOfWork uow = new UnitOfWork.UnitOfWork();
                LockOrWaitAndHold_InnerDefered(uow, type, lockValue, cl);

                TableLockManager.lockTheTable(type, ret, uow);
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void ReleaseLockByTransThread(string type, Guid id)
        {
            try
            {
                IUnitOfWork uow = new UnitOfWork.UnitOfWork();
                DeleteLock_InnerDefered(uow, id);
                TableLockManager.releaseTheTable(type, id, uow);
            }
            catch (Exception)
            {
                throw;
            }
        }

        public Guid GrabLockBySeperateSegment(string type, string lockValue, ConcurrentLocksInfo clck)
        {
            try
            {
                Guid ret = Guid.NewGuid();

                var cl = FuncNew.SetColumnFromField<ConcurrentLocks, ConcurrentLocksInfo>(clck);
                cl.guid = ret;

                LockOrWaitAndHold_Inner(type, lockValue, cl);

                //var dmthrd = new Thread(new ParameterizedThreadStart(Proc_TheDaemonToRemoveTheLockPositively));
                //dmthrd.

                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void ReleaseLockBySeperateSegment(string type, Guid id)
        {
            try
            {
                DeleteLock_Inner(id);
            }
            catch (Exception)
            {
                throw;
            }
        }

        #region Common For All Repository

        public Guid LockOrWaitAndHold_Inner(string type, string lockValue, ConcurrentLocks clck)
        {
            Guid ret = Guid.Empty;
            ConcurrentLocks cl = PeerForLockAndWait_Inner(type, lockValue);//This is NOT the concrete line of lock.
            if (cl != null)
            {
                var tmNow = _Schema.SqlHelper.GetDateTime();
                if (cl.timeoutSpan4Hold < tmNow.Subtract(cl.cdt).Ticks)//Time out for lock
                {
                    //此处解锁，无论是那种Grab，都不当.前者报错，后者失锁，而失锁应该考虑抛异常给锁持有者.//DeleteLock_Inner(type, lockValue);//clear the lock.
                }
                else
                {
                    var diff = cl.timeoutSpan4Wait - (cl.timeoutSpan4Hold - tmNow.Subtract(cl.cdt).Ticks);
                    if (diff > 0)
                        System.Threading.Thread.Sleep(new TimeSpan(diff));//Still to wait for remain time.
                }
            }
            clck._LockValue = lockValue;
            clck.type = type;

            try
            {
                ConcurrentLocks cli = PeerForLockAndWait_Inner(type, lockValue);
                if (cli != null)
                    throw new Exception("UQ_ConcurrentLocks");
                else
                    ret = AddLock_Inner(clck);//This is the concrete line of lock. POTENTAIL: Transaction (Process ID ###) was deadlocked on lock resources with another process and has been chosen as the deadlock victim. Rerun the transaction.
            }
            catch(Exception ex)
            {
                //Violation of UNIQUE KEY constraint 'UQ_ConcurrentLocks'. 
                //Cannot insert duplicate key in object 'dbo.ConcurrentLocks'. The duplicate key value is (BTLoc, ALL).
                //The statement has been terminated.
                if ((ex is SqlException || ex is Exception) && ex.ToString().IndexOf("UQ_ConcurrentLocks") > -1)
                {
                    ConcurrentLocks cli = PeerForLockAndWait_Inner(type, lockValue);//This is NOT the concrete line of lock.
                    if (cli != null)
                    {
                        //现在正有另一个客户端在做相同的操作!  [Type: %1, Lock Value: %2, Editor: %3, Station: %4, Line: %5, Customer: %6]
                        throw new FisException("SYN001", new string[] { cli.type, cli._LockValue, cli.editor, cli.station, cli.line, cli.customer });
                    }
                    else
                    {
                        var begKey = "The duplicate key value is (";
                        var endKey = ").";
                        var beg = ex.ToString().IndexOf(begKey);
                        var end = ex.ToString().IndexOf(endKey);
                        if (beg > -1 && end > -1)
                        {
                            var str = ex.ToString().Substring(beg + begKey.Length, end - (beg + begKey.Length));
                            string[] tAndLv = str.Split(',');
                            if (tAndLv.Length > 1)
                                throw new FisException("SYN001", new string[] { tAndLv[0], tAndLv[1], "N/A", "N/A", "N/A", "N/A" });
                        }
                        throw new FisException("SYN001", new string[] { "N/A", "N/A", "N/A", "N/A", "N/A", "N/A" });
                    }
                }
                throw ex;
            }

            return ret;
        }

        private ConcurrentLocks PeerForLockAndWait_Inner(string type, string lockValue)
        {
            SqlDataReader sqlR = null;
            try
            {
                _Metas.ConcurrentLocks ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ConcurrentLocks cond = new _Metas.ConcurrentLocks();
                        cond._LockValue = lockValue;
                        cond.type = type;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ConcurrentLocks>(tk, null, null, new ConditionCollection<_Metas.ConcurrentLocks>(new EqualCondition<_Metas.ConcurrentLocks>(cond)));
                        sqlCtx.Sentence = sqlCtx.Sentence.Replace("WHERE", "WITH (NOLOCK) WHERE");
                    }
                }
                sqlCtx.Param(_Metas.ConcurrentLocks.fn_type).Value = type;
                sqlCtx.Param(_Metas.ConcurrentLocks.fn__LockValue).Value = lockValue;

                try
                {
                    sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);

                    if (sqlR != null && sqlR.Read())
                    {
                        //ret = FuncNew.SetColumnFromColumn<ConcurrentLocks>(sqlR, sqlCtx);
                        ret = new ConcurrentLocks();
                        ret._LockValue = g.GetValue_Str(sqlR, sqlCtx.Indexes(ConcurrentLocks.fn__LockValue));
                        ret.cdt = g.GetValue_DateTime(sqlR, sqlCtx.Indexes(ConcurrentLocks.fn_cdt));
                        ret.clientAddr = g.GetValue_Str(sqlR, sqlCtx.Indexes(ConcurrentLocks.fn_clientAddr));
                        ret.customer = g.GetValue_Str(sqlR, sqlCtx.Indexes(ConcurrentLocks.fn_customer));
                        ret.descr = g.GetValue_Str(sqlR, sqlCtx.Indexes(ConcurrentLocks.fn_descr));
                        ret.editor = g.GetValue_Str(sqlR, sqlCtx.Indexes(ConcurrentLocks.fn_editor));
                        ret.guid = g.GetValue_Guid(sqlR, sqlCtx.Indexes(ConcurrentLocks.fn_guid));
                        ret.line = g.GetValue_Str(sqlR, sqlCtx.Indexes(ConcurrentLocks.fn_line));
                        ret.station = g.GetValue_Str(sqlR, sqlCtx.Indexes(ConcurrentLocks.fn_station));
                        ret.timeoutSpan4Hold = g.GetValue_Int64(sqlR, sqlCtx.Indexes(ConcurrentLocks.fn_timeoutSpan4Hold));
                        ret.timeoutSpan4Wait = g.GetValue_Int64(sqlR, sqlCtx.Indexes(ConcurrentLocks.fn_timeoutSpan4Wait));
                        ret.type = g.GetValue_Str(sqlR, sqlCtx.Indexes(ConcurrentLocks.fn_type));
                    }
                }
                finally
                {
                    if (sqlR != null)
                    {
                        sqlR.Close();
                    }
                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        private Guid AddLock_Inner(ConcurrentLocks cl)
        {
            try
            {
                Guid ret = Guid.Empty;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = FuncNew.GetCommonInsert<ConcurrentLocks>(tk);
                    }
                }
                DateTime cmDt = _Schema.SqlHelper.GetDateTime();
                sqlCtx.Param(ConcurrentLocks.fn__LockValue).Value = cl._LockValue;
                sqlCtx.Param(ConcurrentLocks.fn_cdt).Value = cl.cdt = cmDt;
                sqlCtx.Param(ConcurrentLocks.fn_clientAddr).Value = cl.clientAddr;
                sqlCtx.Param(ConcurrentLocks.fn_customer).Value = cl.customer;
                sqlCtx.Param(ConcurrentLocks.fn_descr).Value = cl.descr;
                sqlCtx.Param(ConcurrentLocks.fn_editor).Value = cl.editor;
                sqlCtx.Param(ConcurrentLocks.fn_guid).Value = cl.guid;
                sqlCtx.Param(ConcurrentLocks.fn_line).Value = cl.line;
                sqlCtx.Param(ConcurrentLocks.fn_station).Value = cl.station;
                sqlCtx.Param(ConcurrentLocks.fn_timeoutSpan4Hold).Value = cl.timeoutSpan4Hold;
                sqlCtx.Param(ConcurrentLocks.fn_timeoutSpan4Wait).Value = cl.timeoutSpan4Wait;
                sqlCtx.Param(ConcurrentLocks.fn_type).Value = cl.type;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
                ret = cl.guid;
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public void DeleteLock_Inner(Guid key)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        ConcurrentLocks cond = new ConcurrentLocks();
                        cond.guid = key;
                        sqlCtx = FuncNew.GetConditionedDelete<ConcurrentLocks>(tk, new ConditionCollection<ConcurrentLocks>(new EqualCondition<ConcurrentLocks>(cond)));
                    }
                }
                sqlCtx.Param(ConcurrentLocks.fn_guid).Value = key;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        private void DeleteLock_Inner(string type, string lockValue)
        {
            try
            {
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        ConcurrentLocks cond = new ConcurrentLocks();
                        cond.type = type;
                        cond._LockValue = lockValue;
                        sqlCtx = FuncNew.GetConditionedDelete<ConcurrentLocks>(tk, new ConditionCollection<ConcurrentLocks>(new EqualCondition<ConcurrentLocks>(cond)));
                    }
                }
                sqlCtx.Param(ConcurrentLocks.fn_type).Value = type;
                sqlCtx.Param(ConcurrentLocks.fn__LockValue).Value = lockValue;
                _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_GetData, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
            }
            catch (Exception)
            {
                throw;
            }
        }

        //private static void Proc_TheDaemonToRemoveTheLockPositively()
        //{

        //}

        #region . Defered .

        private void LockOrWaitAndHold_InnerDefered(IUnitOfWork uow, string type, string lockValue, ConcurrentLocks clck)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), type, lockValue, clck);
        }

        private void DeleteLock_InnerDefered(IUnitOfWork uow, Guid key)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), key);
        }

        #endregion

        #endregion

        #endregion

        #region . Defered .

        public void CallOp_FAUnpackProductDefered(IUnitOfWork uow, string prodId, string restation, string editor, string isprint)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), prodId, restation, editor, isprint);
        }

        public void AddOneIProductPartDefered(IUnitOfWork uow, IProductPart item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void DeleteProductInfoDefered(IUnitOfWork uow, string[] prodIds, string infoType)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), prodIds, infoType);
        }

        public void UpdatePizzaIdForProductDefered(IUnitOfWork uow, string proId, string pizzaId)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), proId, pizzaId);
        }

        public void ChangeLabelKittingCodeDefered(IUnitOfWork uow, LabelKittingCode obj, string oldCode, string oldType)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), obj, oldCode, oldType);
        }

        public void AddLabelKittingCodeDefered(IUnitOfWork uow, LabelKittingCode obj)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), obj);
        }

        public void RemoveLabelKittingCodeDefered(IUnitOfWork uow, string code, string type)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), code, type);
        }

        public void UpdateSno1ForSpecialDetDefered(IUnitOfWork uow, string sno1, int[] ids)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), sno1, ids);
        }

        public void InsertSpecialDetDefered(IUnitOfWork uow, IMES.DataModel.SpecialDetInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void AddLightNoDefered(IUnitOfWork uow, IMES.DataModel.WipBuffer item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void UpdateLightNoDefered(IUnitOfWork uow, IMES.DataModel.WipBuffer item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void DeleteLightNoDefered(IUnitOfWork uow, int id)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), id);
        }

        public void DeleteTmpKitDefered(IUnitOfWork uow, string curLine, string type)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), curLine, type);
        }

        public void ImportTmpKitDefered(IUnitOfWork uow, IList<IMES.DataModel.TmpKitInfoDef> items)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), items);
        }

        public void ExecOpKittingAutoCheckDefered(IUnitOfWork uow, string family, string loc, string line)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), family, loc, line);
        }

        public void ExecOpKittingLocCheckDefered(IUnitOfWork uow, string pdline, string partType)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), pdline, partType);
        }

        public void ExecOpPAKKitLocFVDefered(IUnitOfWork uow, string pdline)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), pdline);
        }

        public void AddFAFloatLocationInfoDefered(IUnitOfWork uow, IMES.DataModel.FAFloatLocationInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void UpdateFAFloatLocationInfoDefered(IUnitOfWork uow, IMES.DataModel.FAFloatLocationInfo item, int id)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item, id);
        }

        public void DeleteFAFloatLocationInfoDefered(IUnitOfWork uow, int id)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), id);
        }

        public void AddPAKitLocDefered(IUnitOfWork uow, IMES.DataModel.PAKitLoc item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void UpdatePAKitLocDefered(IUnitOfWork uow, IMES.DataModel.PAKitLoc item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void UpdatePAKitLocDefered(IUnitOfWork uow, PAKitLoc setValue, PAKitLoc condition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), setValue, condition);
        }

        public void DeletePAKitLocDefered(IUnitOfWork uow, int id)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), id);
        }

        public void InsertProductBTDefered(IUnitOfWork uow, IMES.DataModel.ProductBTInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void DeleteProductBTByObjAndConditionDefered(IUnitOfWork uow, IMES.DataModel.ProductBTInfo cond)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), cond);
        }

        public void CallRpt_ITCNDTS_SET_IMAGEDOWN_14Defered(IUnitOfWork uow, string cpqsno, string flag, string version)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), cpqsno, flag, version);
        }

        public void DeleteRealModelDataDefered(IUnitOfWork uow, string pdline, string type)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), pdline, type);
        }

        public void DeleteMPInterfaceDefered(IUnitOfWork uow, object key)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), key);
        }

        public void UpdateUnPackProductStatusByDeliveryNoDefered(IUnitOfWork uow, IMES.FisObject.FA.Product.ProductStatus newStatus, string dn)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), newStatus, dn);
        }

        public void UpdateUnPackProductStatusByDnDefered(IUnitOfWork uow, IMES.FisObject.FA.Product.ProductStatus newStatus, string dn)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), newStatus, dn);
        }

        public void WriteUnPackProductLogByDeliveryNoDefered(IUnitOfWork uow, string dn, IMES.FisObject.FA.Product.ProductLog newLog)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dn, newLog);
        }

        public void WriteUnPackProductLogByDnDefered(IUnitOfWork uow, string dn, IMES.FisObject.FA.Product.ProductLog newLog)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dn, newLog);
        }

        public void UnPackProductInfoByDeliveryNoDefered(IUnitOfWork uow, string infoType, string dn)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), infoType, dn);
        }

        public void UnPackProductInfoByDeliveryNoAndInfoTypeDefered(IUnitOfWork uow, string infoType, string dn)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), infoType, dn);
        }

        public void UnPackProductByDeliveryNoDefered(IUnitOfWork uow, string dn)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dn);
        }

        public void UnPackProductByDnDefered(IUnitOfWork uow, string dn)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dn);
        }

        public void InsertTSModelDefered(IUnitOfWork uow, TsModelInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void DeleteTsModelDefered(IUnitOfWork uow, string mark, string model)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), mark, model);
        }

        public void UpdateSpecialDetSno1Defered(IUnitOfWork uow, string sno1, string tp, string snoid)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), sno1, tp, snoid);
        }

        public void AddSpecialDetInfoDefered(IUnitOfWork uow, SpecialDetInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void UpdateRunInTimeControlByTypeCodeAndTestStationDefered(IUnitOfWork uow, IMES.FisObject.FA.Product.RunInTimeControl runInTimeControl, string type, string code, string testStation)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), type, code, testStation);
        }

        public void UpdateProductsForUnboundDefered(IUnitOfWork uow, string dn)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dn);
        }

        public void DeleteProductInfoForUnboundDefered(IUnitOfWork uow, string infoType, string dn)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), infoType, dn);
        }

        public void DeleteProductPartByPartTypeAndDescrLikeDefered(IUnitOfWork uow, string prodId, string partType, string descrLike)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), prodId, partType, descrLike);
        }

        public void DeleteProductPartByLikePartTypeDefered(IUnitOfWork uow, string prodId, string partTypePrefix)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), prodId, partTypePrefix);
        }

        public void DeleteRunInTimeControlByTypeCodeAndTeststationDefered(IUnitOfWork uow, string type, string code, string teststation)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), type, code, teststation);
        }

        public void ChangeToBTDefferedDefered(IUnitOfWork uow, string modelName, string editor, string bt)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), modelName, editor, bt);
        }

        public void ChangeToNonBTDefered(IUnitOfWork uow, string modelName)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), modelName);
        }

        public void AddFaPaLightStationItemDefered(IUnitOfWork uow, FaPaLightstInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(),item);
        }

        public void DeleteFaPaLightStationItemDefered(IUnitOfWork uow, int id)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), id);
        }

        public void UpdateFaPaLightStationItemDefered(IUnitOfWork uow, FaPaLightstInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void AddKittingBoxSNItemDefered(IUnitOfWork uow, KittingBoxSNInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void DeleteProductPartByPartSnDefered(IUnitOfWork uow, string prodId, string partSn)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), prodId, partSn);
        }

        public void DeleteProductPartByPartNoDefered(IUnitOfWork uow, string prodId, string partNo)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), prodId, partNo);
        }

        public void UpdateProductStatusesDefered(IUnitOfWork uow, IMES.FisObject.FA.Product.ProductStatus setValue, string[] prodIds)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), setValue, prodIds);
        }

        public void InsertProductLogsDefered(IUnitOfWork uow, IMES.FisObject.FA.Product.ProductLog[] items)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), items);
        }

        public void UpdateProductsDefered(IUnitOfWork uow, IMES.FisObject.FA.Product.Product setValue, string[] prodIds)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), setValue, prodIds);
        }

        public void DeleteProductPartsDefered(IUnitOfWork uow, string[] prodIds, ProductPart otherCondition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), prodIds, otherCondition);
        }

        public void BackUpProductDefered(IUnitOfWork uow, string productId, string uEditor)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, uEditor);
        }

        public void BackUpProductStatusDefered(IUnitOfWork uow, string productId, string uEditor)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, uEditor);
        }

        public void BackUpProductPartDefered(IUnitOfWork uow, string productId, string uEditor, string partType, string descrLike)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, uEditor, partType, descrLike);
        }

        public void BackUpProductPartDefered(IUnitOfWork uow, string[] prodIds, ProductPart otherCondition, string uEditor)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), prodIds, otherCondition, uEditor);
        }

        public void RemoveProductPartByPartTypeAndDescrLikeDefered(IUnitOfWork uow, string productId, string partType, string descrLike)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, partType, descrLike);
        }

        public void BackUpProductPartDefered(IUnitOfWork uow, string productId, string uEditor)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, uEditor);
        }

        public void BackUpProductInfoDefered(IUnitOfWork uow, string productId, string uEditor, string infoTypeName)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, uEditor, infoTypeName);
        }

        public void BackUpProductInfoDefered(IUnitOfWork uow, string productId, string uEditor)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, uEditor);
        }

        public void BackUpProductByDnDefered(IUnitOfWork uow, string dn, string uEditor)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dn, uEditor);
        }

        public void BackUpProductStatusByDnDefered(IUnitOfWork uow, string dn, string uEditor)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dn, uEditor);
        }

        public void BackUpProductPartByDnDefered(IUnitOfWork uow, string dn, string uEditor)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dn, uEditor);
        }

        public void BackUpProductInfoByDnDefered(IUnitOfWork uow, string dn, string uEditor, IList<string> infoTypeNames)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dn, uEditor, infoTypeNames);
        }

        public void UpdateProductStatusByPalletDefered(IUnitOfWork uow, string palletSN, IMES.FisObject.FA.Product.ProductStatus newStatus, int newTestFailCount, StationStatus newStationStatus)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), palletSN, newStatus, newTestFailCount, newStationStatus);
        }

        public void DeleteKittingBoxSNItemDefered(IUnitOfWork uow, KittingBoxSNInfo condition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), condition);
        }

        public void UpdateProductPartDefered(IUnitOfWork uow, ProductPart setValue, ProductPart condition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), setValue, condition);
        }

        public void UpdateProductRepairDefectInfoDefered(IUnitOfWork uow, RepairInfo setValue, RepairInfo condition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), setValue, condition);
        }

        public void BackUpProductPartByBomNodeTypeAndDescrLikeDefered(IUnitOfWork uow, string productId, string uEditor, string bomNodeType, string descrLike)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, uEditor, bomNodeType, descrLike);
        }

        public void RemoveProductPartByBomNodeTypeAndDescrLikeDefered(IUnitOfWork uow, string productId, string bomNodeType, string descrLike)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, bomNodeType, descrLike);
        }

        public void BackUpProductPartByBomNodeTypeDefered(IUnitOfWork uow, string productId, string uEditor, string bomNodeType)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, uEditor, bomNodeType);
        }

        public void RemoveProductPartByBomNodeTypeDefered(IUnitOfWork uow, string productId, string bomNodeType)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, bomNodeType);
        }

        public void BackUpProductPartByPartTypeDefered(IUnitOfWork uow, string productId, string uEditor, string partType)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, uEditor, partType);
        }

        public void RemoveProductPartByPartTypeDefered(IUnitOfWork uow, string productId, string partType)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, partType);
        }

        public void BackUpProductPartByDescrLikeDefered(IUnitOfWork uow, string productId, string uEditor, string descrLike)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, uEditor, descrLike);
        }

        public void RemoveProductPartByDescrLikeDefered(IUnitOfWork uow, string productId, string descrLike)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, descrLike);
        }

        public void InsertKittingLogInfoDefered(IUnitOfWork uow, KittingLogInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void InsertKittingLogInfosFromKittingLocationFaXDefered(IUnitOfWork uow, KittingLogInfo item, KittingLocationFaXInfo condition, int[] proritySet)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item, condition, proritySet);
        }

        public void AddITCNDCheckQCHoldDefered(IUnitOfWork uow, ITCNDCheckQCHoldDef item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void RemoveITCNDCheckQCHoldDefered(IUnitOfWork uow, ITCNDCheckQCHoldDef condition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), condition);
        }

        public void ChangeITCNDCheckQCHoldDefered(IUnitOfWork uow, ITCNDCheckQCHoldDef setValue, ITCNDCheckQCHoldDef condition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), setValue, condition);
        }

        public void AddITCNDCheckSettingDefered(IUnitOfWork uow, ITCNDCheckSettingDef item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void RemoveITCNDCheckSettingDefered(IUnitOfWork uow, ITCNDCheckSettingDef condition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), condition);
        }

        public void ChangeITCNDCheckSettingDefered(IUnitOfWork uow, ITCNDCheckSettingDef setValue, ITCNDCheckSettingDef condition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), setValue, condition);
        }

        public void AddSnoDetPoMoInfoDefered(IUnitOfWork uow, SnoDetPoMoInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void DeleteSnoDetPoMoInfoDefered(IUnitOfWork uow, SnoDetPoMoInfo condition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), condition);
        }

        public void UpdateSnoDetPoMoInfoDefered(IUnitOfWork uow, SnoDetPoMoInfo setValue, SnoDetPoMoInfo condition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), setValue, condition);
        }

        public void UpdateProductInfoDefered(IUnitOfWork uow, IMES.FisObject.FA.Product.ProductInfo setValue, IMES.FisObject.FA.Product.ProductInfo condition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), setValue, condition);
        }

        public void InsertProductInfoDefered(IUnitOfWork uow, IMES.FisObject.FA.Product.ProductInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void InsertQcStatusDefered(IUnitOfWork uow, ProductQCStatus item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void UpdateForBindDNAndPalletDefered(IUnitOfWork uow, fons.Product item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public InvokeBody ExecSpForQueryDefered(IUnitOfWork uow, string dbConnString, string spName, params SqlParameter[] paramsArray)
        {
            return AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dbConnString, spName, paramsArray);
        }

        public void ExecSpForNonQueryDefered(IUnitOfWork uow, string dbConnString, string spName, params SqlParameter[] paramsArray)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dbConnString, spName, paramsArray);
        }

        public void BackUpProductDefered(IUnitOfWork uow, string uEditor, IMES.FisObject.FA.Product.Product eqCondition, IMES.FisObject.FA.Product.Product neqCondition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), uEditor, eqCondition, neqCondition);
        }

        public void BackUpProductInfoDefered(IUnitOfWork uow, string uEditor, IMES.FisObject.FA.Product.ProductInfo eqCondition, IMES.FisObject.FA.Product.ProductInfo neqCondition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), uEditor, eqCondition, neqCondition);
        }

        public void BackUpProductPartDefered(IUnitOfWork uow, string uEditor, ProductPart eqCondition, ProductPart neqCondition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), uEditor, eqCondition, neqCondition);
        }

        public void DeleteProductInfoDefered(IUnitOfWork uow, IMES.FisObject.FA.Product.ProductInfo eqCondition, IMES.FisObject.FA.Product.ProductInfo neqCondition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), eqCondition, neqCondition);
        }

        public void DeleteProductPartDefered(IUnitOfWork uow, ProductPart eqCondition, ProductPart neqCondition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), eqCondition, neqCondition);
        }

        public void InsertUnitWeightLogDefered(IUnitOfWork uow, IMES.DataModel.UnitWeightLog item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void InsertFaItCnDefectCheckInfoDefered(IUnitOfWork uow, FaItCnDefectCheckInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void DeleteFaItCnDefectCheckInfoDefered(IUnitOfWork uow, FaItCnDefectCheckInfo condition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), condition);
        }

        public void UpdateFaItCnDefectCheckInfoDefered(IUnitOfWork uow, FaItCnDefectCheckInfo setValue, FaItCnDefectCheckInfo condition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), setValue, condition);
        }

        public void CreateAlarmWithSpecifiedDefectForFADefered(IUnitOfWork uow, AlarmSettingInfo alarmSetting)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), alarmSetting);
        }

        public void UpdateForCreateAlarmWithDefectForFADefered(IUnitOfWork uow, AlarmSettingInfo alarmSetting)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), alarmSetting);
        }

        public void CreateAlarmWithExcludedDefectForFADefered(IUnitOfWork uow, AlarmSettingInfo alarmSetting)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), alarmSetting);
        }

        public void CreateAlarmWithAllDefectForFADefered(IUnitOfWork uow, AlarmSettingInfo alarmSetting)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), alarmSetting);
        }

        public void CreateAlarmWithYieldForFADefered(IUnitOfWork uow, AlarmSettingInfo alarmSetting)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), alarmSetting);
        }

        public void AddAstRuleInfoDefered(IUnitOfWork uow, AstRuleInfo item)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void DeleteAstRuleRuleDefered(IUnitOfWork uow, AstRuleInfo condition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), condition);
        }

        public void BackUpProductPartByDnDefered(IUnitOfWork uow, string uEditor, ProductPart eqCondition, ProductPart neqCondition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), uEditor, eqCondition, neqCondition);
        }

        public void BackupProductRepairDefectInfoDefered(IUnitOfWork uow, int id, string prodID, string editor)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), id, prodID, editor);
        }

        public void UpdateProductsDefered(IUnitOfWork uow, IMES.FisObject.FA.Product.Product setValue, IMES.FisObject.FA.Product.Product condition)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), setValue, condition);
        }

        public InvokeBody CheckTheBoxIdDefered(IUnitOfWork uow, IProduct item)
        {
            return AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
        }

        public void BackUpProductStatusByCartonDefered(IUnitOfWork uow, string carton, string uEditor)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), carton, uEditor);
        }

        public void BackUpProductByDnPureDefered(IUnitOfWork uow, string dn, string uEditor)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dn, uEditor);
        }

        public void BackUpProductInfoByDnPureDefered(IUnitOfWork uow, string dn, string uEditor, IList<string> infoTypeNames)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dn, uEditor, infoTypeNames);
        }

        public void BackUpProductStatusByDnPureDefered(IUnitOfWork uow, string dn, string uEditor)
        {
            AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), dn, uEditor);
        }

        #endregion

        #region . OnTrans .

        public IList<IProduct> GetProductListByDeliveryNo_OnTrans(string dn)
        {
            SqlDataReader sqlR = null;
            try
            {
                IList<IProduct> ret = new List<IProduct>();

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.deliveryNo = dn;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, null, null, new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond)));
                        sqlCtx.Sentence = sqlCtx.Sentence.Replace("WHERE", "WITH (INDEX=IX_Product_DeliveryNo,ROWLOCK,UPDLOCK) WHERE");
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_deliveryNo).Value = dn;

                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);

                ret = FuncNew.SetFieldFromColumn<mtns.Product, fons.Product, fons.IProduct>(ret, sqlR, sqlCtx);

                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                {
                    sqlR.Close();
                }
            }
        }

        public IList<IProduct> GetProductByCustomSn_OnTrans(string customerSn)
        {
            SqlDataReader sqlR = null;
            try
            {
                IList<IProduct> ret = new List<IProduct>();

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.Product cond = new _Metas.Product();
                        cond.custsn = customerSn;
                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, null, null, new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond)));
                        sqlCtx.Sentence = sqlCtx.Sentence.Replace("WHERE", "WITH (INDEX=_IDX_CUSTSN,ROWLOCK,UPDLOCK) WHERE");
                    }
                }
                sqlCtx.Param(_Metas.Product.fn_custsn).Value = customerSn;

                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);

                ret = FuncNew.SetFieldFromColumn<mtns.Product, fons.Product, fons.IProduct>(ret, sqlR, sqlCtx);

                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                {
                    sqlR.Close();
                }
            }
        }

        public int GetCombinedQtyByDN_OnTrans(string deliveryNo)
        {
            SqlDataReader sqlR = null;
            try
            {
                int ret = 0;

                _Schema.SQLContext sqlCtx = null;
                lock (MethodBase.GetCurrentMethod())
                {
                    if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                    {
                        _Schema.Product equalCond = new _Schema.Product();
                        equalCond.DeliveryNo = deliveryNo;
                        sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product), "COUNT", new List<string>() { _Schema.Product.fn_ProductID }, equalCond, null, null, null, null, null, null, null);

                        sqlCtx.Sentence = sqlCtx.Sentence.Replace("WHERE", "WITH (INDEX=IX_Product_DeliveryNo,ROWLOCK,UPDLOCK) WHERE");
                    }
                }
                sqlCtx.Params[_Schema.Product.fn_DeliveryNo].Value = deliveryNo;

                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>());
                if (sqlR != null && sqlR.Read())
                {
                    ret = GetValue_Int32(sqlR, sqlCtx.Indexes["COUNT"]);
                }

                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                {
                    sqlR.Close();
                }
            }
        }

        private IList<fons.ProductInfo> GetProductIdsByInfoValueAndProductId_OnTrans(string infoType, string infoValue, bool firstOrSecond)//, string palletNo)
        {
            SqlDataReader sqlR = null;
            try
            {
                IList<fons.ProductInfo> ret = null;

                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        _Metas.ProductInfo cond = new _Metas.ProductInfo();
                        cond.infoType = infoType;
                        cond.infoValue = infoValue;

                        //_Metas.ProductInfo cond2 = new _Metas.ProductInfo();
                        //cond2.productID = "[INSET]";

                        sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductInfo>(tk, null, null, new ConditionCollection<_Metas.ProductInfo>(
                            new EqualCondition<_Metas.ProductInfo>(cond)
                            //,new AnyCondition<_Metas.ProductInfo>(cond2, string.Format("{0} IN (SELECT a.{1} FROM {2} a WHERE a.{3}={4})", "{0}", 
                            //    _Metas.Product.fn_productID, ToolsNew.GetTableName(typeof(_Metas.Product)), _Metas.Product.fn_palletNo, "{1}"))
                                ),
                                _Metas.ProductInfo.fn_udt);
                    }
                }
                sqlCtx.Param(_Metas.ProductInfo.fn_infoType).Value = infoType;
                sqlCtx.Param(_Metas.ProductInfo.fn_infoValue).Value = infoValue;
                //sqlCtx.Param(g.DecAny(_Metas.ProductInfo.fn_productID)).Value = palletNo;

                string Sentence = sqlCtx.Sentence.Replace(string.Format("{0} WHERE", ToolsNew.GetTableName(typeof(_Metas.ProductInfo))), string.Format(firstOrSecond ? "{0} WITH (INDEX=IDX_ProductInfo_InfoType_InfoValue,ROWLOCK,UPDLOCK) WHERE" : "{0} WITH (NOLOCK) WHERE", ToolsNew.GetTableName(typeof(_Metas.ProductInfo))));

                sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, Sentence, sqlCtx.Params);
                ret = mtns::FuncNew.SetFieldFromColumn<_Metas.ProductInfo, fons.ProductInfo, fons.ProductInfo>(ret, sqlR, sqlCtx);
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (sqlR != null)
                {
                    sqlR.Close();
                }
            }
        }

        #endregion

        //public void UpdateCustSnForProduct(string proId, string custSn)
        //{
        //    try
        //    {
        //        MethodBase mthObj = MethodBase.GetCurrentMethod();
        //        int tk = mthObj.MetadataToken;
        //        SQLContextNew sqlCtx = null;
        //        lock (mthObj)
        //        {
        //            if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
        //            {
        //                _Metas.Product cond = new _Metas.Product();
        //                cond.productID = proId;
        //                _Metas.Product setv = new _Metas.Product();
        //                setv.custsn = custSn;
        //                setv.udt = DateTime.Now;
        //                sqlCtx = FuncNew.GetConditionedUpdate<_Metas.Product>(tk, new SetValueCollection<_Metas.Product>(new CommonSetValue<_Metas.Product>(setv)), new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond)));
        //            }
        //        }
        //        sqlCtx.Param(_Metas.Product.fn_productID).Value = proId;
        //        sqlCtx.Param(g.DecSV(_Metas.Product.fn_custsn)).Value = custSn;
        //        sqlCtx.Param(g.DecSV(_Metas.Product.fn_udt)).Value = _Schema.SqlHelper.GetDateTime();
        //        _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
        //    }
        //    catch (Exception)
        //    {
        //        throw;
        //    }
        //}


        #region Vincent add for others
        /// <summary>
        /// 此DN已結合PalletNo List
        /// </summary>
        /// <param name="dn">結合 DeliveryNo</param>
        /// <returns></returns>
        public IList<string> GetDeliveryNoListByPalletNo(string dn)
        {
            try
            {
                IList<string> ret = new List<string>();
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();
                        sqlCtx.Sentence = @"select distinct DeliveryNo from Product where PalletNo=@PalletNo";
                        sqlCtx.AddParam("PalletNo", new SqlParameter("@PalletNo", SqlDbType.VarChar));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param("PalletNo").Value = dn;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlCtx.Sentence,
                                                                                                                            sqlCtx.Params))
                {
                    while (sqlR != null && sqlR.Read())
                    {
                        ret.Add(sqlR.GetString(0).Trim());
                    }

                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }


       public  int CheckExistsProductIDOrModelOrFamily(string inputStr)
        {
            try
            {
                int  ret = 0;
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();
                        sqlCtx.Sentence = @"if exists(select ProductID from Product where ProductID =@Input)
                                                            Begin
                                                               select 1 as ret;
                                                               return;
                                                            end    
                                                            if exists(select Model from Model where Model =@Input)
                                                            Begin
                                                               select 2 as ret;
                                                               return;
                                                            end   
                                                            if exists(select Family from Family where Family =@Input)   
                                                            Begin
                                                               select 3 as ret;
                                                               return;
                                                            end";
                        sqlCtx.AddParam("Input", new SqlParameter("@Input", SqlDbType.VarChar));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param("Input").Value = inputStr;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlCtx.Sentence,
                                                                                                                            sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret=sqlR.GetInt32(0);
                        
                    }

                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }


       public void UpdateProductPreStation(IList<string> productIDList)
       {
           try
           {
               IList<string> ret = new List<string>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"MERGE INTO ProductStatusEx as Target 
                                                             Using (
		                                                                select ProductID,  Station, Status,  Line,
                                                                                   TestFailCount, Editor, Udt
		                                                                from @ProductIdList a 
                                                                        inner join ProductStatus b on a.data = b.ProductID
	                                                                ) as Source (ProductID,  Station, [Status], Line, TestFailCount, Editor, Udt)
	                                                         ON Target.ProductID = Source.ProductID 
	                                                         WHEN NOT MATCHED By Target THEN
		                                                            insert (ProductID, PreStation, PreStatus, PreLine, PreTestFailCount, PreEditor, PreUdt)
		                                                            values (ProductID, Station, [Status], Line, TestFailCount, Editor, Udt)
	                                                         WHEN MATCHED THEN
		                                                            update set PreStation=Station, PreStatus=[Status], PreLine=Line, 
		                                                                             PreTestFailCount=TestFailCount, PreEditor=Editor, PreUdt=Udt;";
                       SqlParameter para = new SqlParameter("@ProductIdList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("ProductIdList", para);
                       //sqlCtx.AddParam("Station", new SqlParameter("@Station", SqlDbType.VarChar));
                       //sqlCtx.AddParam("Status", new SqlParameter("@Status", SqlDbType.Int));
                       //sqlCtx.AddParam("Line", new SqlParameter("@Line", SqlDbType.VarChar));
                       //sqlCtx.AddParam("TestFailCount", new SqlParameter("@TestFailCount", SqlDbType.Int));
                       //sqlCtx.AddParam("Editor", new SqlParameter("@Editor", SqlDbType.VarChar));

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(productIDList);

               sqlCtx.Param("ProductIdList").Value = dt;
               //sqlCtx.Param("Station").Value = station;
               //sqlCtx.Param("Status").Value = status;
               //sqlCtx.Param("Line").Value = line;
               //sqlCtx.Param("TestFailCount").Value = testFailCount;
               //sqlCtx.Param("Editor").Value = editor;

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                  CommandType.Text,
                                                                                  sqlCtx.Sentence,
                                                                                  sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }     

       public void UpdateProductPreStationDefered(IUnitOfWork uow, IList<string> productIDList)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productIDList);
       }

       public void UpdateProductPreStation(IList<TbProductStatus> productStatusList)
       {
           try
           {
               IList<string> ret = new List<string>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"MERGE INTO ProductStatusEx as T
                                                             Using (
		                                                                select a.ProductID,  a.Station, a.Status,  a.Line,
                                                                                   a.TestFailCount, a.Editor, a.Udt
		                                                                from @TbProductStatus a
	                                                                ) as S
	                                                         ON T.ProductID = S.ProductID 
	                                                         WHEN NOT MATCHED THEN
		                                                            insert (ProductID, PreStation, PreStatus, PreLine, PreTestFailCount, PreEditor, PreUdt)
		                                                            values (S.ProductID, S.Station, S.[Status], S.Line, S.TestFailCount, S.Editor, S.Udt)
	                                                         WHEN MATCHED THEN
		                                                            update set PreStation=S.Station, PreStatus=S.[Status], PreLine=S.Line, 
		                                                                             PreTestFailCount=S.TestFailCount, PreEditor=S.Editor, PreUdt=S.Udt;";
                       SqlParameter para = new SqlParameter("@TbProductStatus", SqlDbType.Structured);
                       para.TypeName = "TbProductStatus";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("TbProductStatus", para);
                       //sqlCtx.AddParam("Station", new SqlParameter("@Station", SqlDbType.VarChar));
                       //sqlCtx.AddParam("Status", new SqlParameter("@Status", SqlDbType.Int));
                       //sqlCtx.AddParam("Line", new SqlParameter("@Line", SqlDbType.VarChar));
                       //sqlCtx.AddParam("TestFailCount", new SqlParameter("@TestFailCount", SqlDbType.Int));
                       //sqlCtx.AddParam("Editor", new SqlParameter("@Editor", SqlDbType.VarChar));

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable<TbProductStatus>(productStatusList);

               sqlCtx.Param("TbProductStatus").Value = dt;
               //sqlCtx.Param("Station").Value = station;
               //sqlCtx.Param("Status").Value = status;
               //sqlCtx.Param("Line").Value = line;
               //sqlCtx.Param("TestFailCount").Value = testFailCount;
               //sqlCtx.Param("Editor").Value = editor;

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                  CommandType.Text,
                                                                                  sqlCtx.Sentence,
                                                                                  sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void UpdateProductPreStationDefered(IUnitOfWork uow, IList<TbProductStatus> productStatusList)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productStatusList);
       }

       public void UpdateProductStatus(IList<string> productIDList, string line, string station, int status, int testFailCount, string editor)
       {
           try
           {
               IList<string> ret = new List<string>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"MERGE INTO ProductStatus as T 
                                                             Using (
		                                                            select data as ProductID,  @Station as Station, @Status as Status,@Line as Line, 
                                                                                @TestFailCount as TestFailCount, @Editor as Editor,  getdate() as Udt
		                                                            from @ProductIdList                                                                   
	                                                            ) as S 
	                                                            ON T.ProductID = S.ProductID 
	                                                            WHEN NOT MATCHED THEN
		                                                            insert (ProductID,Station,Status, ReworkCode, Line, TestFailCount, Editor, Cdt, Udt)
		                                                            values (S.ProductID, S.Station, S.[Status],'',  S.Line, S.TestFailCount, S.Editor, S.Udt, S.Udt)
	                                                            WHEN MATCHED THEN
		                                                             update set Station=S.Station, Status=S.[Status], Line= (case when S.Line='' then T.Line else S.Line end), 
		                                                                               TestFailCount=S.TestFailCount,Editor=S.Editor, Udt=S.Udt;";
                       SqlParameter para = new SqlParameter("@ProductIdList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("ProductIdList", para);
                       sqlCtx.AddParam("Station", new SqlParameter("@Station", SqlDbType.VarChar));
                       sqlCtx.AddParam("Status", new SqlParameter("@Status", SqlDbType.Int));
                       sqlCtx.AddParam("Line", new SqlParameter("@Line", SqlDbType.VarChar));
                       sqlCtx.AddParam("TestFailCount", new SqlParameter("@TestFailCount", SqlDbType.Int));
                       sqlCtx.AddParam("Editor", new SqlParameter("@Editor", SqlDbType.VarChar));

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(productIDList);

               sqlCtx.Param("ProductIdList").Value = dt;
               sqlCtx.Param("Station").Value = station;
               sqlCtx.Param("Status").Value = status;
               sqlCtx.Param("Line").Value = string.IsNullOrEmpty(line) ? string.Empty : line.Trim();
               sqlCtx.Param("TestFailCount").Value = testFailCount;
               sqlCtx.Param("Editor").Value = editor;

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                  CommandType.Text,
                                                                                  sqlCtx.Sentence,
                                                                                  sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }

       }
       public void UpdateProductStatusDefered(IUnitOfWork uow, IList<string> productIDList, string line, string station, int status, int testFailCount, string editor)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productIDList, line, station, status, testFailCount, editor);
       }

       public void WriteProductLog(IList<string> productIDList, string line, string station, int status, string editor)
       {
           try
           {
               IList<string> ret = new List<string>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"insert ProductLog(ProductID, Model, Station, Status, Line, Editor, Cdt)
                                                        select a.ProductID, a.Model, @Station, @Status, 
                                                                   (case when @Line='' then c.Line else @Line end), @Editor, GETDATE() 
                                                         from Product a
                                                         inner join ProductStatus c on a.ProductID = c.ProductID   
                                                         inner join @ProductIdList b on a.ProductID = b.data  ";
                       SqlParameter para = new SqlParameter("@ProductIdList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("ProductIdList", para);
                       sqlCtx.AddParam("Station", new SqlParameter("@Station", SqlDbType.VarChar));
                       sqlCtx.AddParam("Status", new SqlParameter("@Status", SqlDbType.Int));
                       sqlCtx.AddParam("Line", new SqlParameter("@Line", SqlDbType.VarChar));
                       //sqlCtx.AddParam("TestFailCount", new SqlParameter("@TestFailCount", SqlDbType.Int));
                       sqlCtx.AddParam("Editor", new SqlParameter("@Editor", SqlDbType.VarChar));

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(productIDList);

               sqlCtx.Param("ProductIdList").Value = dt;
               sqlCtx.Param("Station").Value = station;
               sqlCtx.Param("Status").Value = status;
               sqlCtx.Param("Line").Value = string.IsNullOrEmpty(line)? string.Empty: line.Trim();
               //sqlCtx.Param("TestFailCount").Value = testFailCount;
               sqlCtx.Param("Editor").Value = editor;

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                  CommandType.Text,
                                                                                  sqlCtx.Sentence,
                                                                                  sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }

       public void WriteProductLogDefered(IUnitOfWork uow, IList<string> productIDList, string line, string station, int status, string editor)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productIDList, line, station, status, editor);
       }


       public void UpdateStationToPreStation(IList<string> productIDList, string editor)
       {
           try
           {
               IList<string> ret = new List<string>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"update ProductStatus
                                                                set   Station= b.PreStation,
                                                                      Status = b.PreStatus,
                                                                      Line = b.PreLine,
                                                                      TestFailCount = b.PreTestFailCount,
                                                                      Editor =@Editor,
                                                                      Udt=GETDATE()  
                                                                from ProductStatus a
                                                                inner join ProductStatusEx b on a.ProductID = b.ProductID
                                                                inner join @ProductIdList c on a.ProductID = c.data";
                       SqlParameter para = new SqlParameter("@ProductIdList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("ProductIdList", para);
                       //sqlCtx.AddParam("Station", new SqlParameter("@Station", SqlDbType.VarChar));
                       //sqlCtx.AddParam("Status", new SqlParameter("@Status", SqlDbType.Int));
                       //sqlCtx.AddParam("Line", new SqlParameter("@Line", SqlDbType.VarChar));
                       //sqlCtx.AddParam("TestFailCount", new SqlParameter("@TestFailCount", SqlDbType.Int));
                       sqlCtx.AddParam("Editor", new SqlParameter("@Editor", SqlDbType.VarChar));

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(productIDList);

               sqlCtx.Param("ProductIdList").Value = dt;
               //sqlCtx.Param("Station").Value = station;
               //sqlCtx.Param("Status").Value = status;
               //sqlCtx.Param("Line").Value = line;
               //sqlCtx.Param("TestFailCount").Value = testFailCount;
               sqlCtx.Param("Editor").Value = editor;

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                  CommandType.Text,
                                                                                  sqlCtx.Sentence,
                                                                                  sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void UpdateStationToPreStationDefered(IUnitOfWork uow, IList<string> productIDList, string editor)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productIDList, editor);
       }

       public void WriteProdLogByPreStation(IList<string> productIDList, string editor)
       {
           try
           {
               IList<string> ret = new List<string>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"insert ProductLog(ProductID, Model, Station, Status, Line, Editor, Cdt)
                                                        select a.ProductID, a.Model, c.PreStation, c.PreStatus, c.PreLine, @Editor, GETDATE() 
                                                         from Product a
                                                         inner join ProductStatusEx c on a.ProductID = c.ProductID   
                                                         inner join @ProductIdList b on a.ProductID = b.data  ";
                       SqlParameter para = new SqlParameter("@ProductIdList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("ProductIdList", para);
                       //sqlCtx.AddParam("Station", new SqlParameter("@Station", SqlDbType.VarChar));
                       //sqlCtx.AddParam("Status", new SqlParameter("@Status", SqlDbType.Int));
                       //sqlCtx.AddParam("Line", new SqlParameter("@Line", SqlDbType.VarChar));
                       //sqlCtx.AddParam("TestFailCount", new SqlParameter("@TestFailCount", SqlDbType.Int));
                       sqlCtx.AddParam("Editor", new SqlParameter("@Editor", SqlDbType.VarChar));

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(productIDList);

               sqlCtx.Param("ProductIdList").Value = dt;
               //sqlCtx.Param("Station").Value = station;
               //sqlCtx.Param("Status").Value = status;
               //sqlCtx.Param("Line").Value = line;
               //sqlCtx.Param("TestFailCount").Value = testFailCount;
               sqlCtx.Param("Editor").Value = editor;

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                  CommandType.Text,
                                                                                  sqlCtx.Sentence,
                                                                                  sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void WriteProdLogByPreStationDefered(IUnitOfWork uow, IList<string> productIDList, string editor)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productIDList, editor);
       }

       public void WriteHoldCode(IList<string> productIDList, TestLog log, IList<string> defectList)
       {
           try
           {
               IList<string> ret = new List<string>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @" declare @IDList TbIntList
                                                            insert ProductTestLog(ActionName, Type, Line, FixtureID, Station, 
                                                                                  ErrorCode, Descr, Status, Editor, Cdt, ProductID)
                                                            Output Inserted.ID  into  @IDList                    
                                                            select @ActionName, @Type, (case when @Line='' then b.Line else @Line end) ,
                                                                        @FixtureID, @Station, 
                                                                        @ErrorCode, @Descr, @Status, @Editor, getdate(),a.data
                                                            from @ProductIdList a
                                                            inner join ProductStatus b on a.data = b.ProductID

                                                            insert dbo.ProductTestLog_DefectInfo(ProductTestLogID, DefectCodeID, Editor, Cdt)
                                                            select a.data as ProductTestLogID, b.data as DefectCode,@Editor,GETDATE()
                                                            from @IDList a, @DefectList b ";
                       SqlParameter para = new SqlParameter("@ProductIdList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("ProductIdList", para);

                       //SqlParameter para1 = new SqlParameter("@IDList", SqlDbType.Structured);
                       //para1.TypeName = "TbIntList";
                       //para1.Direction = ParameterDirection.Input;
                       //sqlCtx.AddParam("IDList", para1);


                       SqlParameter para2 = new SqlParameter("@DefectList", SqlDbType.Structured);
                       para2.TypeName = "TbStringList";
                       para2.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("DefectList", para2);

                       sqlCtx.AddParam("ActionName", new SqlParameter("@ActionName", SqlDbType.VarChar));
                       sqlCtx.AddParam("Type", new SqlParameter("@Type", SqlDbType.VarChar));
                       sqlCtx.AddParam("Line", new SqlParameter("@Line", SqlDbType.VarChar));

                       sqlCtx.AddParam("FixtureID", new SqlParameter("@FixtureID", SqlDbType.VarChar));
                       sqlCtx.AddParam("Station", new SqlParameter("@Station", SqlDbType.VarChar));
                       sqlCtx.AddParam("ErrorCode", new SqlParameter("@ErrorCode", SqlDbType.VarChar));
                       sqlCtx.AddParam("Descr", new SqlParameter("@Descr", SqlDbType.VarChar));
                       sqlCtx.AddParam("Status", new SqlParameter("@Status", SqlDbType.Int));
                       
                     
                       sqlCtx.AddParam("Editor", new SqlParameter("@Editor", SqlDbType.VarChar));

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(productIDList);
               sqlCtx.Param("ProductIdList").Value = dt;

               //DataTable dt1 = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(new List<int>());
               //sqlCtx.Param("IDList").Value = dt1;

               DataTable dt2 = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(defectList);
               sqlCtx.Param("DefectList").Value = dt2;

               sqlCtx.Param("ActionName").Value = log.ActionName;
               sqlCtx.Param("Type").Value = log.Type;
               sqlCtx.Param("Line").Value = string.IsNullOrEmpty(log.Line) ? string.Empty : log.Line.Trim();
               sqlCtx.Param("FixtureID").Value = log.FixtureId;
               sqlCtx.Param("Station").Value = log.Station;
               sqlCtx.Param("ErrorCode").Value = log.ErrorCode;
               sqlCtx.Param("Descr").Value = log.Descr;
               sqlCtx.Param("Status").Value = log.Status;

               sqlCtx.Param("Editor").Value = log.Editor;

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA,
                                                                                  CommandType.Text,
                                                                                  sqlCtx.Sentence,
                                                                                  sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void WriteHoldCodeDefered(IUnitOfWork uow, IList<string> productIDList, TestLog log, IList<string> defectList)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productIDList, log,defectList);
       }

       public void ReleaseHoldProductID(IList<HoldInfo> holdInfo, string releaseReason,string editor)
       {
           try
           {
               IList<string> ret = new List<string>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @" update ProductTestLog
                                                                set ErrorCode =@ErrorCode,
                                                                      Descr = 'HoldStation:'+Station+'~'+isnull(Descr,'')+'~HoldTime:'+cast(DATEDIFF(second,Cdt,getdate()) as varchar(32))+ '~HoldUser:' +@Editor,
                                                                      Station='Release'  
                                                                from ProductTestLog a
                                                                inner join @IDList b on a.ID = b.data  ";
                      
                       SqlParameter para1 = new SqlParameter("@IDList", SqlDbType.Structured);
                       para1.TypeName = "TbIntList";
                       para1.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("IDList", para1);

                       sqlCtx.AddParam("ErrorCode", new SqlParameter("@ErrorCode", SqlDbType.VarChar));
                       sqlCtx.AddParam("Editor", new SqlParameter("@Editor", SqlDbType.VarChar));  
                     
                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               var idList = (from item in holdInfo
                             select item.HoldID).ToList();
               DataTable dt1 = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(idList);
              sqlCtx.Param("IDList").Value = dt1;

              sqlCtx.Param("ErrorCode").Value = releaseReason;
              sqlCtx.Param("Editor").Value = editor;

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA,
                                                                                  CommandType.Text,
                                                                                  sqlCtx.Sentence,
                                                                                  sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void ReleaseHoldProductIDDefered(IUnitOfWork uow, IList<HoldInfo> holdInfo, string releaseReason, string editor)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), holdInfo,  releaseReason,editor);
       }

       public IList<string> GetProductIDByStation(IList<string> stationList)
       {
           try
           {
               IList<string> ret = new List<string>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"select a.ProductID
                                                            from Product a
                                                            inner join ProductStatus b on a.ProductID = b.ProductID
                                                            inner join  @StationList c on b.Station = c.data ";
                       SqlParameter para = new SqlParameter("@StationList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("StationList", para);
                      
                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(stationList);

               sqlCtx.Param("StationList").Value = dt;

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                           CommandType.Text,
                                                                                                                           sqlCtx.Sentence,
                                                                                                                           sqlCtx.Params))
               {
                   while (sqlR != null && sqlR.Read())
                   {
                       ret.Add(sqlR.GetString(0).Trim());
                   }

               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }
       public IList<string> GetProductIDByModelStation(string model, IList<string> stationList)
       {
           try
           {
               IList<string> ret = new List<string>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"select a.ProductID
                                                            from Product a
                                                            inner join ProductStatus b on a.ProductID = b.ProductID
                                                            inner join  @StationList c on b.Station = c.data
                                                            Where a.Model=@Model";
                       SqlParameter para = new SqlParameter("@StationList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("StationList", para);
                       sqlCtx.AddParam("Model", new SqlParameter("@Model", SqlDbType.VarChar));

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(stationList);

               sqlCtx.Param("StationList").Value = dt;

               sqlCtx.Param("Model").Value = model;

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                           CommandType.Text,
                                                                                                                           sqlCtx.Sentence,
                                                                                                                           sqlCtx.Params))
               {
                   while (sqlR != null && sqlR.Read())
                   {
                       ret.Add(sqlR.GetString(0).Trim());
                   }

               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }
       public  IList<string> GetModelByStation(IList<string> stationList)
       {
           try
           {
               IList<string> ret = new List<string>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"select distinct a.Model
                                                            from Product a
                                                            inner join ProductStatus b on a.ProductID = b.ProductID
                                                            inner join  @StationList c on b.Station = c.data ";
                       SqlParameter para = new SqlParameter("@StationList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("StationList", para);

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(stationList);

               sqlCtx.Param("StationList").Value = dt;

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                           CommandType.Text,
                                                                                                                           sqlCtx.Sentence,
                                                                                                                           sqlCtx.Params))
               {
                   while (sqlR != null && sqlR.Read())
                   {
                       ret.Add(sqlR.GetString(0).Trim());
                   }

               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }

       public IList<HoldInfo> GetHoldInfo(IList<string> productIDList)
       {
           try
           {
               IList<HoldInfo> ret = new List<HoldInfo>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"select a.ProductID, a.Model, a.CUSTSN, d.Station, c.PreStation, c.PreStatus,
                                                                       c.PreLine,d.Editor as HoldUser, d.Udt as HoldTime, 
                                                                       e.HoldCode, e.HoldCodeDescr, e.HoldID
                                                                from Product a
                                                                inner join @ProductIdList b on a.ProductID=b.data
                                                                inner join ProductStatusEx c on a.ProductID =c.ProductID
                                                                inner join ProductStatus d on a.ProductID =d.ProductID
                                                                Cross Apply dbo.fn_GetHoldCode(a.ProductID, d.Station, d.Status) e";
                       SqlParameter para = new SqlParameter("@ProductIdList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("ProductIDList", para);

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(productIDList);

               sqlCtx.Param("ProductIDList").Value = dt;

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                           CommandType.Text,
                                                                                                                           sqlCtx.Sentence,
                                                                                                                           sqlCtx.Params))
               {
                   while (sqlR != null && sqlR.Read())
                   {
                       HoldInfo item = IMES.Infrastructure.Repository._Schema.SQLData.ToObject<HoldInfo>(sqlR);
                       //IMES.Infrastructure.Repository._Schema.SQLData.TrimStringProperties(item);
                       ret.Add(item);
                   }

               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }

      
       public IList<HoldInfo> GetHoldInfo(string productIDorCustSN, string station) 
       {
           try
           {
               IList<HoldInfo> ret = new List<HoldInfo>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"select a.ProductID, a.Model, a.CUSTSN, d.Station,c.PreStation, c.PreStatus,
                                                                       c.PreLine,d.Editor as HoldUser, d.Udt as HoldTime, 
                                                                       e.HoldCode,e.HoldCodeDescr,e.HoldID
                                                                from Product a
                                                                inner join ProductStatusEx c on a.ProductID =c.ProductID
                                                                inner join ProductStatus d on a.ProductID =d.ProductID
                                                                Cross Apply dbo.fn_GetHoldCode(a.ProductID, d.Station, d.Status) e
                                                                where (a.ProductID=@ProductID or 
                                                                           a.CUSTSN=@ProductID) and
                                                                           d.Station=@Station";
                       sqlCtx.AddParam("ProductID", new SqlParameter("@ProductID", SqlDbType.VarChar));
                       //sqlCtx.AddParam("CUSTSN", new SqlParameter("@CUSTSN", SqlDbType.VarChar));
                       sqlCtx.AddParam("Station", new SqlParameter("@Station", SqlDbType.VarChar));
                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }



               sqlCtx.Param("ProductID").Value = productIDorCustSN;
               sqlCtx.Param("Station").Value = station;

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                           CommandType.Text,
                                                                                                                           sqlCtx.Sentence,
                                                                                                                           sqlCtx.Params))
               {
                   while (sqlR != null && sqlR.Read())
                   {
                       HoldInfo item = IMES.Infrastructure.Repository._Schema.SQLData.ToObject<HoldInfo>(sqlR);
                       //IMES.Infrastructure.Repository._Schema.SQLData.TrimStringProperties(item);
                       ret.Add(item);
                   }

               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }

       }

       public IList<HoldInfo> GetHoldInfo(string model, IList<string> stationList)
       {
           try
           {
               IList<HoldInfo> ret = new List<HoldInfo>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"select a.ProductID, a.Model, a.CUSTSN,b.Station,d.PreStation, d.PreStatus,
                                                                       d.PreLine,b.Editor as HoldUser, b.Udt as HoldTime,
                                                                       e.HoldCode, e.HoldCodeDescr, e.HoldID 
                                                            from Product a
                                                            inner join ProductStatus b on a.ProductID = b.ProductID
                                                            inner join  @StationList c on b.Station = c.data
                                                            inner join ProductStatusEx d on a.ProductID =d.ProductID
                                                            Cross Apply dbo.fn_GetHoldCode(a.ProductID, b.Station, b.Status) e
                                                            Where  a.Model=@Model  ";
                       SqlParameter para = new SqlParameter("@StationList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("StationList", para);
                       sqlCtx.AddParam("Model", new SqlParameter("@Model", SqlDbType.VarChar));

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(stationList);

               sqlCtx.Param("StationList").Value = dt;

               sqlCtx.Param("Model").Value = model;

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                           CommandType.Text,
                                                                                                                           sqlCtx.Sentence,
                                                                                                                           sqlCtx.Params))
               {
                   while (sqlR != null && sqlR.Read())
                   {

                       HoldInfo item = IMES.Infrastructure.Repository._Schema.SQLData.ToObject<HoldInfo>(sqlR);
                       //IMES.Infrastructure.Repository._Schema.SQLData.TrimStringProperties(item);
                       ret.Add(item);
                   }


               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }

       }

       public IList<HoldInfo> GetHoldInfoByProdID(IList<string> productIDList, IList<string> stationList)
       {
           try
           {
               IList<HoldInfo> ret = new List<HoldInfo>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"select a.ProductID, a.Model, a.CUSTSN,b.Station,d.PreStation, d.PreStatus,
                                                                       d.PreLine,b.Editor as HoldUser, b.Udt as HoldTime,
                                                                       e.HoldCode, e.HoldCodeDescr, e.HoldID 
                                                            from Product a
                                                            inner join ProductStatus b on a.ProductID = b.ProductID
                                                            inner join  @StationList c on b.Station = c.data
                                                            inner join  @ProductIDList f on a.ProductID = f.data 
                                                            inner join ProductStatusEx d on a.ProductID =d.ProductID
                                                            Cross Apply dbo.fn_GetHoldCode(a.ProductID, b.Station, b.Status) e";
                       SqlParameter para = new SqlParameter("@StationList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("StationList", para);
                       SqlParameter para1 = new SqlParameter("@ProductIDList", SqlDbType.Structured);
                       para1.TypeName = "TbStringList";
                       para1.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("ProductIDList", para1);

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

              sqlCtx.Param("StationList").Value = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(stationList);


              sqlCtx.Param("ProductIDList").Value = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(productIDList); ;

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                           CommandType.Text,
                                                                                                                           sqlCtx.Sentence,
                                                                                                                           sqlCtx.Params))
               {
                   while (sqlR != null && sqlR.Read())
                   {

                       HoldInfo item = IMES.Infrastructure.Repository._Schema.SQLData.ToObject<HoldInfo>(sqlR);
                       //IMES.Infrastructure.Repository._Schema.SQLData.TrimStringProperties(item);
                       ret.Add(item);
                   }


               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }

       }

       public IList<HoldInfo> GetHoldInfoByCustSN(IList<string> custSNList, IList<string> stationList)
       {
           try
           {
               IList<HoldInfo> ret = new List<HoldInfo>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"select a.ProductID, a.Model, a.CUSTSN,b.Station,d.PreStation, d.PreStatus,
                                                                       d.PreLine,b.Editor as HoldUser, b.Udt as HoldTime,
                                                                       e.HoldCode, e.HoldCodeDescr, e.HoldID 
                                                            from Product a
                                                            inner join ProductStatus b on a.ProductID = b.ProductID
                                                            inner join  @StationList c on b.Station = c.data
                                                            inner join  @CustSNList f on a.CUSTSN = f.data 
                                                            inner join ProductStatusEx d on a.ProductID =d.ProductID
                                                            Cross Apply dbo.fn_GetHoldCode(a.ProductID, b.Station, b.Status) e";
                       SqlParameter para = new SqlParameter("@StationList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("StationList", para);
                       SqlParameter para1 = new SqlParameter("@CustSNList", SqlDbType.Structured);
                       para1.TypeName = "TbStringList";
                       para1.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("CustSNList", para1);

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               sqlCtx.Param("StationList").Value = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(stationList);

               sqlCtx.Param("CustSNList").Value = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(custSNList); ;

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                           CommandType.Text,
                                                                                                                           sqlCtx.Sentence,
                                                                                                                           sqlCtx.Params))
               {
                   while (sqlR != null && sqlR.Read())
                   {

                       HoldInfo item = IMES.Infrastructure.Repository._Schema.SQLData.ToObject<HoldInfo>(sqlR);
                       //IMES.Infrastructure.Repository._Schema.SQLData.TrimStringProperties(item);
                       ret.Add(item);
                   }


               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }

       }


       public IList<ProductStatusExInfo> GetProductPreStation(IList<string> productIDList)
       {
           try
           {
               IList<ProductStatusExInfo> ret = new List<ProductStatusExInfo>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"select ProductID, PreStation, PreStatus, PreLine, PreTestFailCount, 
                                                                       PreEditor, PreUdt
                                                                from ProductStatusEx a
                                                                inner join @ProductIdList b on a.ProductID=b.data ";
                       SqlParameter para = new SqlParameter("@ProductIdList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("ProductIdList", para);

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(productIDList);

               sqlCtx.Param("ProductIdList").Value = dt;

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                           CommandType.Text,
                                                                                                                           sqlCtx.Sentence,
                                                                                                                           sqlCtx.Params))
               {
                   while (sqlR != null && sqlR.Read())
                   {
                       ProductStatusExInfo item = IMES.Infrastructure.Repository._Schema.SQLData.ToObject<ProductStatusExInfo>(sqlR);
                       //IMES.Infrastructure.Repository._Schema.SQLData.TrimStringProperties(item);
                       ret.Add(item);
                   }

               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }

       public IList<TbProductStatus> GetProductStatus(IList<string> productIDList)
       {
           try
           {
               IList<TbProductStatus> ret = new List<TbProductStatus>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"select ProductID, Station, Status, Line, TestFailCount, 
                                                                       ReworkCode,Editor, Udt
                                                                from ProductStatus a
                                                                inner join @ProductIdList b on a.ProductID=b.data ";
                       SqlParameter para = new SqlParameter("@ProductIdList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("ProductIdList", para);

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               
               DataTable dt = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(productIDList);
               
               sqlCtx.Param("ProductIdList").Value = dt;

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                           CommandType.Text,
                                                                                                                           sqlCtx.Sentence,
                                                                                                                           sqlCtx.Params))
               {
                   while (sqlR != null && sqlR.Read())
                   {
                       TbProductStatus item = IMES.Infrastructure.Repository._Schema.SQLData.ToObject<TbProductStatus>(sqlR);

                       //IMES.Infrastructure.Repository._Schema.SQLData.TrimStringProperties(item);
                       
                       ret.Add(item);
                   }

               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }

       public bool CheckPassStation(string productID, string station)
       {
           try
           {
               bool  ret = false;
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"select top 1 ID
                                                                from ProductLog 
                                                                where  ProductID=@ProductID and Station=@Station";

                       sqlCtx.AddParam("ProductID", new SqlParameter("@ProductID", SqlDbType.VarChar));
                       sqlCtx.AddParam("Station", new SqlParameter("@Station", SqlDbType.VarChar));

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               sqlCtx.Param("ProductID").Value = productID;
               sqlCtx.Param("Station").Value = station;

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                           CommandType.Text,
                                                                                                                           sqlCtx.Sentence,
                                                                                                                           sqlCtx.Params))
               {
                   if (sqlR != null && sqlR.Read())
                   {
                       ret = sqlR.HasRows;
                   }

               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }


        /// <summary>
        /// QCStatus by SKU, Line, TP
        /// </summary>
        /// <param name="line"></param>
        /// <param name="model"></param>
        /// <param name="tp"></param>
        /// <returns></returns>
        public bool ExistQCStatusByLineModelTp(string line, string model, string tp)
        {
            try
            {
                bool ret = false;
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();
                        sqlCtx.Sentence = @"select top 1 ID  from QCStatus where Line like @Line and Model=@Model and Tp=@Tp";
                        sqlCtx.AddParam("Line", new SqlParameter("@Line", SqlDbType.VarChar));
                        sqlCtx.AddParam("Model", new SqlParameter("@Model", SqlDbType.VarChar));
                        sqlCtx.AddParam("Tp", new SqlParameter("@Tp", SqlDbType.VarChar));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param("Line").Value = line+"%";
                sqlCtx.Param("Model").Value = model;
                sqlCtx.Param("Tp").Value = tp;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlCtx.Sentence,
                                                                                                                            sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = sqlR.HasRows;
                    }

                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// QCStatus by Region, Line , TP
        /// </summary>
        /// <param name="line"></param>
        /// <param name="region"></param>
        /// <param name="tp"></param>
        /// <returns></returns>
        public bool ExistQCStatusByLineRegionTp(string line, string region, string tp)
        {
            try
            {
                bool ret = false;
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();
                        sqlCtx.Sentence = @"select top 1 ID  from QCStatus where Line like @Line and Model like @Region and Tp=@Tp";
                        sqlCtx.AddParam("Line", new SqlParameter("@Line", SqlDbType.VarChar));
                        sqlCtx.AddParam("Region", new SqlParameter("@Region", SqlDbType.VarChar));
                        sqlCtx.AddParam("Tp", new SqlParameter("@Tp", SqlDbType.VarChar));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param("Line").Value = line + "%";
                sqlCtx.Param("Region").Value = "%"+region;
                sqlCtx.Param("Tp").Value = tp;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlCtx.Sentence,
                                                                                                                            sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = sqlR.HasRows;
                    }

                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }

        }

        public int GetSampleCountByModel(string tp, string line, string model)
        {
            try
            {
                int ret = 0;
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();
                        sqlCtx.Sentence = @"select count(distinct ProductID)  
                                                             from QCStatus 
                                                            where Line like @Line and 
                                                                       Model =@Model and 
                                                                       Tp=@Tp";
                        sqlCtx.AddParam("Line", new SqlParameter("@Line", SqlDbType.VarChar));
                        sqlCtx.AddParam("Model", new SqlParameter("@Model", SqlDbType.VarChar));
                        sqlCtx.AddParam("Tp", new SqlParameter("@Tp", SqlDbType.VarChar));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param("Line").Value = line + "%";
                sqlCtx.Param("Model").Value =model;
                sqlCtx.Param("Tp").Value = tp;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlCtx.Sentence,
                                                                                                                            sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = sqlR.GetInt32(0);
                    }

                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }
        public int GetSampleCountByFamily(string tp, string line, string family)
        {
            try
            {
                int ret = 0;
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();
                        sqlCtx.Sentence = @"select count(distinct ProductID)  
                                                            from QCStatus a
                                                            inner join Model b on a.Model = b.Model 
                                                            where a.Line like @Line and 
                                                                       b.Family =@Family and 
                                                                       a.Tp=@Tp ";
                        sqlCtx.AddParam("Line", new SqlParameter("@Line", SqlDbType.VarChar));
                        sqlCtx.AddParam("Family", new SqlParameter("@Family", SqlDbType.VarChar));
                        sqlCtx.AddParam("Tp", new SqlParameter("@Tp", SqlDbType.VarChar));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param("Line").Value = line + "%";
                sqlCtx.Param("Family").Value = family;
                sqlCtx.Param("Tp").Value = tp;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlCtx.Sentence,
                                                                                                                            sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = sqlR.GetInt32(0);
                    }

                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }



        public int GetSampleCountByPdLine(string tp, string pdLine, DateTime startTime, DateTime endTime)
        {
            try
            {
                int ret = 0;
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();
                        sqlCtx.Sentence = @"select count(distinct ProductID)  
                                                             from QCStatus 
                                                            where Line = @Line and 
                                                                       Tp=@Tp          and
                                                                       Cdt between @StartTime and @EndTime";
                        sqlCtx.AddParam("Line", new SqlParameter("@Line", SqlDbType.VarChar));                        
                        sqlCtx.AddParam("Tp", new SqlParameter("@Tp", SqlDbType.VarChar));
                        sqlCtx.AddParam("StartTime", new SqlParameter("@StartTime", SqlDbType.DateTime));
                        sqlCtx.AddParam("EndTime", new SqlParameter("@EndTime", SqlDbType.DateTime));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param("Line").Value = pdLine;                
                sqlCtx.Param("Tp").Value = tp;
                sqlCtx.Param("StartTime").Value = startTime;
                sqlCtx.Param("EndTime").Value = endTime;

                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlCtx.Sentence,
                                                                                                                            sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = sqlR.GetInt32(0);
                    }

                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }
        public int GetSampleCountByPdLineModel(string tp, string pdLine, string model, DateTime startTime, DateTime endTime)
        {
            try
            {
                int ret = 0;
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();
                        sqlCtx.Sentence = @"select count(distinct ProductID)  
                                                             from QCStatus 
                                                            where Line =@Line and 
                                                                       Model =@Model and 
                                                                       Tp=@Tp and
                                                                       Cdt between @StartTime and @EndTime";
                        sqlCtx.AddParam("Line", new SqlParameter("@Line", SqlDbType.VarChar));
                        sqlCtx.AddParam("Model", new SqlParameter("@Model", SqlDbType.VarChar));
                        sqlCtx.AddParam("Tp", new SqlParameter("@Tp", SqlDbType.VarChar));
                        sqlCtx.AddParam("StartTime", new SqlParameter("@StartTime", SqlDbType.DateTime));
                        sqlCtx.AddParam("EndTime", new SqlParameter("@EndTime", SqlDbType.DateTime));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param("Line").Value = pdLine ;
                sqlCtx.Param("Model").Value = model;
                sqlCtx.Param("Tp").Value = tp;
                sqlCtx.Param("StartTime").Value = startTime;
                sqlCtx.Param("EndTime").Value = endTime;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlCtx.Sentence,
                                                                                                                            sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = sqlR.GetInt32(0);
                    }

                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }
        public int GetSampleCountByPdLineFamily(string tp, string pdLine, string family, DateTime startTime, DateTime endTime)
        {
            try
            {
                int ret = 0;
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();
                        sqlCtx.Sentence = @"select count(distinct ProductID)  
                                                            from QCStatus a
                                                            inner join Model b on a.Model = b.Model 
                                                            where a.Line = @Line and 
                                                                       b.Family =@Family and 
                                                                       a.Tp=@Tp  and
                                                                       a.Cdt between @StartTime and @EndTime";
                        sqlCtx.AddParam("Line", new SqlParameter("@Line", SqlDbType.VarChar));
                        sqlCtx.AddParam("Family", new SqlParameter("@Family", SqlDbType.VarChar));
                        sqlCtx.AddParam("Tp", new SqlParameter("@Tp", SqlDbType.VarChar));
                        sqlCtx.AddParam("StartTime", new SqlParameter("@StartTime", SqlDbType.DateTime));
                        sqlCtx.AddParam("EndTime", new SqlParameter("@EndTime", SqlDbType.DateTime));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param("Line").Value = pdLine ;
                sqlCtx.Param("Family").Value = family;
                sqlCtx.Param("Tp").Value = tp;
                sqlCtx.Param("StartTime").Value = startTime;
                sqlCtx.Param("EndTime").Value = endTime;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlCtx.Sentence,
                                                                                                                            sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = sqlR.GetInt32(0);
                    }

                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public bool ExistQCStatusByPdLineModelTp(string pdLine, string model, string tp)
        {
            try
            {
                bool ret = false;
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();
                        sqlCtx.Sentence = @"select top 1 ID  from QCStatus where Line = @Line and Model=@Model and Tp=@Tp";
                        sqlCtx.AddParam("Line", new SqlParameter("@Line", SqlDbType.VarChar));
                        sqlCtx.AddParam("Model", new SqlParameter("@Model", SqlDbType.VarChar));
                        sqlCtx.AddParam("Tp", new SqlParameter("@Tp", SqlDbType.VarChar));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param("Line").Value = pdLine;
                sqlCtx.Param("Model").Value = model;
                sqlCtx.Param("Tp").Value = tp;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlCtx.Sentence,
                                                                                                                            sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = sqlR.HasRows;
                    }

                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }
        public bool ExistQCStatusByPdLineRegionTp(string pdLine, string region, string tp)
        {
            try
            {
                bool ret = false;
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();
                        sqlCtx.Sentence = @"select top 1 ID  from QCStatus where Line =@Line and Model like @Region and Tp=@Tp";
                        sqlCtx.AddParam("Line", new SqlParameter("@Line", SqlDbType.VarChar));
                        sqlCtx.AddParam("Region", new SqlParameter("@Region", SqlDbType.VarChar));
                        sqlCtx.AddParam("Tp", new SqlParameter("@Tp", SqlDbType.VarChar));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                sqlCtx.Param("Line").Value = pdLine;
                sqlCtx.Param("Region").Value = "%" + region;
                sqlCtx.Param("Tp").Value = tp;
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlCtx.Sentence,
                                                                                                                            sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = sqlR.HasRows;
                    }

                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

        //for spec check QCStatus Rule
        public bool ExistQCStatusByModelTpStatus(string model, string tp, IList<string> status, int intervalDays)
        {
            try
            {
                bool ret = false;
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();
                        sqlCtx.Sentence = @"select top 1 ID  from QCStatus 
                                                        where Model=@Model and 
                                                                  Tp=@Tp            and
                                                                  Status in ('{0}')     and
                                                                  Cdt>getdate()-@IntervalDays";
                       
                        sqlCtx.AddParam("Model", new SqlParameter("@Model", SqlDbType.VarChar));
                        sqlCtx.AddParam("Tp", new SqlParameter("@Tp", SqlDbType.VarChar));
                        sqlCtx.AddParam("IntervalDays", new SqlParameter("@IntervalDays", SqlDbType.Int));

                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }
                
                sqlCtx.Param("Model").Value = model;
                sqlCtx.Param("Tp").Value = tp;
                sqlCtx.Param("IntervalDays").Value = intervalDays;
                string sqlText = string.Format(sqlCtx.Sentence, string.Join("','", status.ToArray()));
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlText,
                                                                                                                            sqlCtx.Params))
                {
                    if (sqlR != null)
                    {
                        ret = sqlR.HasRows;
                    }

                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }
        public int GetSampleCountByModelDays(string tp, string model, int intervalDays)
        {
            try
            {
                int ret = 0;
                MethodBase mthObj = MethodBase.GetCurrentMethod();
                int tk = mthObj.MetadataToken;
                SQLContextNew sqlCtx = null;
                lock (mthObj)
                {
                    if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                    {
                        sqlCtx = new SQLContextNew();
                        sqlCtx.Sentence = @"select count(distinct a.ProductID)  
                                                            from QCStatus a                                                           
                                                            where  a.Model =@Model and 
                                                                       a.Tp= @Tp  and
                                                                       a.Cdt > getdate()-@IntervalDays";

                        sqlCtx.AddParam("Model", new SqlParameter("@Model", SqlDbType.VarChar));
                        sqlCtx.AddParam("Tp", new SqlParameter("@Tp", SqlDbType.VarChar));
                        sqlCtx.AddParam("IntervalDays", new SqlParameter("@IntervalDays", SqlDbType.Int));
                        SQLCache.InsertIntoCache(tk, sqlCtx);
                    }
                }

                sqlCtx.Param("Model").Value = model;
                sqlCtx.Param("Tp").Value = tp;
                sqlCtx.Param("IntervalDays").Value = intervalDays;
               
                using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_PAK,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlCtx.Sentence,
                                                                                                                            sqlCtx.Params))
                {
                    if (sqlR != null && sqlR.Read())
                    {
                        ret = sqlR.GetInt32(0);
                    }

                }
                return ret;
            }
            catch (Exception)
            {
                throw;
            }
        }

       public void UpdateProductRepair_DefectInfo_Mark(IList<int> mark_0, IList<int> mark_1, string editor)
       {
           try
           {
               IList<string> ret = new List<string>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @" update ProductRepair_DefectInfo
                                                              set Mark=0,
                                                                    Editor=@Editor,
                                                                    Udt=getdate()
                                                              from ProductRepair_DefectInfo a
                                                              inner join @IDList0 b on a.ID = b.data;

                                                              update ProductRepair_DefectInfo
                                                              set Mark=1,
                                                                    Editor=@Editor,
                                                                    Udt=getdate()
                                                              from ProductRepair_DefectInfo a
                                                              inner join @IDList1 b on a.ID = b.data;";

                       SqlParameter para1 = new SqlParameter("@IDList0", SqlDbType.Structured);
                       para1.TypeName = "TbIntList";
                       para1.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("IDList0", para1);

                       SqlParameter para2 = new SqlParameter("@IDList1", SqlDbType.Structured);
                       para2.TypeName = "TbIntList";
                       para2.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("IDList1", para2);

                       sqlCtx.AddParam("Editor", new SqlParameter("@Editor", SqlDbType.VarChar));

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }


               DataTable dt1 = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(mark_0);
               sqlCtx.Param("IDList0").Value = dt1;

               DataTable dt2 = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(mark_1);
               sqlCtx.Param("IDList1").Value = dt2;

               sqlCtx.Param("Editor").Value = editor;
               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA,
                                                                                  CommandType.Text,
                                                                                  sqlCtx.Sentence,
                                                                                  sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }

       public void UpdateProductRepair_DefectInfo_MarkDefered(IUnitOfWork uow, IList<int> mark_0, IList<int> mark_1, string editor)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), mark_0, mark_1);
       }



       public bool ExistCTOBom(string model)
       {
           try
           {
               bool ret = false;

               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       _Metas.Ctobom cond = new _Metas.Ctobom();
                       cond.mpno = model;
                       sqlCtx = FuncNew.GetConditionedSelect<_Metas.Ctobom>(tk, "COUNT", new string[] { _Metas.Ctobom.fn_id }, 
                           new ConditionCollection<_Metas.Ctobom>(new EqualCondition<_Metas.Ctobom>(cond)));
                   }
               }
               sqlCtx.Param(_Metas.Ctobom.fn_mpno).Value = model;

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_BOM, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
               {
                   if (sqlR != null && sqlR.Read())
                   {
                       int cnt = g.GetValue_Int32(sqlR, sqlCtx.Indexes("COUNT"));
                       ret = cnt > 0;
                   }
               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }

       /// <summary>
       /// EXISTS (SELECT * FROM FA.dbo.Product (nolock) WHERE CUSTSN=@CUSTSN)
       /// </summary>
       /// <param name="productId"></param>
       /// <returns></returns>
       public bool CheckExistCustomSn(string customSn)
       {
           try
           {
               bool ret = false;

               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       _Metas.Product cond = new _Metas.Product();
                       cond.custsn = customSn;
                       sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, "TOP 1 ", new string[] { _Metas.Product.fn_custsn },
                           new ConditionCollection<_Metas.Product>(new EqualCondition<_Metas.Product>(cond)));
                   }
               }
               sqlCtx.Param(_Metas.Product.fn_custsn).Value = customSn;

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, 
                                                                                                                            CommandType.Text, 
                                                                                                                             sqlCtx.Sentence, sqlCtx.Params))
               {
                   if (sqlR != null && sqlR.Read())
                   {
                       ret = sqlR.HasRows;
                   }
               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }
        #endregion

       #region for  Product_Part by CT
       public IList<IProductPart> GetProductPartsByValue(string partSn)
       {
           try
           {
               IList<IProductPart> ret = new List<IProductPart>();

               _Schema.SQLContext sqlCtx = null;
               lock (MethodBase.GetCurrentMethod())
               {
                   if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                   {
                       _Schema.Product_Part cond = new _Schema.Product_Part();
                       cond.partSn = partSn;
                       sqlCtx = _Schema.Func.GetConditionedSelect(MethodBase.GetCurrentMethod().MetadataToken, typeof(_Schema.Product_Part), cond, null, null);
                   }
               }
               sqlCtx.Params[_Schema.Product_Part.fn_partSn].Value = partSn;
               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params.Values.ToArray<SqlParameter>()))
               {
                   while (sqlR != null && sqlR.Read())
                   {


                       IProductPart item = new ProductPart(
                                                GetValue_Int32(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_id]),
                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_partNo]),
                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_productID]),
                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_station]),
                                                 GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_partType]),
                                               GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_custmerPn]),
                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_iecpn]),
                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_partSn]),
                                                GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_editor]),
                                                GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_udt]),               
                                                GetValue_DateTime(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_cdt])
                                                );
                       ((ProductPart)item).PartType = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_partType]);
                       ((ProductPart)item).BomNodeType = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_bomNodeType]);
                       ((ProductPart)item).CheckItemType = GetValue_Str(sqlR, sqlCtx.Indexes[_Schema.Product_Part.fn_checkItemType]);
                       ((ProductPart)item).Tracker.Clear();                      
                        ret.Add(item);
                                            
                   }
               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }
       #endregion

       #region others function

       public IList<ProductPart> GetProductPart(ProductPart condition)
       {
           try
           {
               IList<ProductPart> ret = new List<ProductPart>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   _Metas.Product_Part cond = FuncNew.SetColumnFromField<_Metas.Product_Part, ProductPart>(condition);

                   sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product_Part>(null, null,
                                                                                                  new ConditionCollection<_Metas.Product_Part>(new EqualCondition<_Metas.Product_Part>(cond)),
                                                                                                  _Metas.Product_Part.fn_productID, _Metas.Product_Part.fn_id);


               }
               sqlCtx = FuncNew.SetColumnFromField<_Metas.Product_Part, ProductPart>(sqlCtx, condition);

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlCtx.Sentence,
                                                                                                                            sqlCtx.Params))
               {

                   ret = FuncNew.SetFieldFromColumn<mtns::Product_Part, ProductPart, ProductPart>(ret, sqlR, sqlCtx);
               }

               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void UpdateProductPart(ProductPart item)
       {
           try
           {
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       _Metas.Product_Part cond = new _Metas.Product_Part();
                       cond.id = item.ID;
                       _Metas.Product_Part setv = FuncNew.SetColumnFromField<_Metas.Product_Part, ProductPart>(item, _Metas.Pizza_Part.fn_id);
                       setv.udt = DateTime.Now;

                       sqlCtx = FuncNew.GetConditionedUpdate<_Metas.Product_Part>(tk,
                                                                                                        new SetValueCollection<_Metas.Product_Part>(new CommonSetValue<_Metas.Product_Part>(setv)),
                                                                                                        new ConditionCollection<_Metas.Product_Part>(new EqualCondition<_Metas.Product_Part>(cond)));
                   }
               }

               sqlCtx.Param(_Metas.Product_Part.fn_id).Value = item.ID;

               sqlCtx = FuncNew.SetColumnFromField<_Metas.Product_Part, ProductPart>(sqlCtx, item, true);
               DateTime cmDt = _Schema.SqlHelper.GetDateTime();
               sqlCtx.Param(g.DecSV(_Metas.Product_Part.fn_udt)).Value = cmDt;

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA,
                                                                                CommandType.Text,
                                                                                sqlCtx.Sentence,
                                                                                sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void BackUpProductPartById(int id, string editor)
       {
           try
           {
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       _Metas.Product_Part cond = new _Metas.Product_Part();
                       cond.id = id;
                       sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.Product_Part, _Metas.UnpackProduct_Part>(tk,
                           new string[][]{
                                new string[]{_Metas.Product_Part.fn_bomNodeType,_Metas.UnpackProduct_Part.fn_bomNodeType},
                                new string[]{_Metas.Product_Part.fn_cdt,_Metas.UnpackProduct_Part.fn_cdt},
                                new string[]{_Metas.Product_Part.fn_checkItemType,_Metas.UnpackProduct_Part.fn_checkItemType},
                                new string[]{_Metas.Product_Part.fn_custmerPn,_Metas.UnpackProduct_Part.fn_custmerPn},
                                new string[]{_Metas.Product_Part.fn_editor,_Metas.UnpackProduct_Part.fn_editor},
                                new string[]{_Metas.Product_Part.fn_id,_Metas.UnpackProduct_Part.fn_product_PartID},
                                new string[]{_Metas.Product_Part.fn_iecpn,_Metas.UnpackProduct_Part.fn_iecpn},
                                new string[]{_Metas.Product_Part.fn_partNo,_Metas.UnpackProduct_Part.fn_partNo},
                                new string[]{_Metas.Product_Part.fn_partSn,_Metas.UnpackProduct_Part.fn_partSn},
                                new string[]{_Metas.Product_Part.fn_partType,_Metas.UnpackProduct_Part.fn_partType},
                                new string[]{_Metas.Product_Part.fn_productID,_Metas.UnpackProduct_Part.fn_productID},
                                new string[]{_Metas.Product_Part.fn_station,_Metas.UnpackProduct_Part.fn_station},
                                new string[]{_Metas.Product_Part.fn_udt,_Metas.UnpackProduct_Part.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProduct_Part.fn_ueditor), _Metas.UnpackProduct_Part.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProduct_Part.fn_updt}
                            },
                           new ConditionCollection<_Metas.Product_Part>(
                               new EqualCondition<_Metas.Product_Part>(cond)));
                       sqlCtx.AddParam(_Metas.UnpackProduct_Part.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProduct_Part.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProduct_Part>(_Metas.UnpackProduct_Part.fn_ueditor)));
                   }
               }
               sqlCtx.Param(_Metas.Product_Part.fn_id).Value = id;
               sqlCtx.Param(_Metas.UnpackProductStatus.fn_ueditor).Value = editor;
               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA,
                                                                         CommandType.Text,
                                                                         sqlCtx.Sentence,
                                                                         sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void UpdateProductPartDefered(IUnitOfWork uow, ProductPart item)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), item);
       }
       public void BackUpProductPartByIdDefered(IUnitOfWork uow, int id, string editor)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), id, editor);
       }

       public IMES.FisObject.FA.Product.ProductLog GetLatestLogByWc(string productId, string station)
       {
           try
           {
               IMES.FisObject.FA.Product.ProductLog ret = null;

               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       _Metas.ProductLog cond = new _Metas.ProductLog();
                       cond.productID = productId;
                       cond.station = station;                      
                       sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductLog>(tk, "TOP 1", null, new ConditionCollection<_Metas.ProductLog>(new EqualCondition<_Metas.ProductLog>(cond)), _Metas.ProductLog.fn_cdt + FuncNew.DescendOrder);
                   }
               }
               sqlCtx.Param(_Metas.ProductLog.fn_productID).Value = productId;
               sqlCtx.Param(_Metas.ProductLog.fn_station).Value = station;
              
               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
               {
                   ret = FuncNew.SetFieldFromColumn<_Metas.ProductLog, IMES.FisObject.FA.Product.ProductLog>(ret, sqlR, sqlCtx);
               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }


       public IMES.FisObject.FA.Product.ProductLog GetLatestLog(string productId)
       {
           try
           {
               IMES.FisObject.FA.Product.ProductLog ret = null;

               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       _Metas.ProductLog cond = new _Metas.ProductLog();
                       cond.productID = productId;                      
                       sqlCtx = FuncNew.GetConditionedSelect<_Metas.ProductLog>(tk, "TOP 1", null, new ConditionCollection<_Metas.ProductLog>(new EqualCondition<_Metas.ProductLog>(cond)), _Metas.ProductLog.fn_cdt + FuncNew.DescendOrder);
                   }
               }
               sqlCtx.Param(_Metas.ProductLog.fn_productID).Value = productId;
              

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params))
               {
                   ret = FuncNew.SetFieldFromColumn<_Metas.ProductLog, IMES.FisObject.FA.Product.ProductLog>(ret, sqlR, sqlCtx);
               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }


       public void DeleteProductPartByProductIDAndStation(IList<string> productIDList, IList<string> stationList,string editor)
       {
           try
           {
              
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @" delete Product_Part 
                                                            output deleted.ID, deleted.ProductID, deleted.PartNo, deleted.PartType, deleted.IECPn, 
                                                                   deleted.CustmerPn, deleted.PartSn, deleted.Station, deleted.Editor, deleted.Cdt, 
                                                                   deleted.Udt, deleted.BomNodeType, deleted.CheckItemType,@Editor,getdate()
                                                             into  UnpackProduct_Part(Product_PartID, ProductID, PartNo, PartType, IECPn, 
                                                                                      CustmerPn, PartSn, Station, Editor, Cdt, 
                                                                                      Udt, BomNodeType, CheckItemType, UEditor, UPdt)
                                                             from  Product_Part a
                                                            inner join @ProductIDList b on a.ProductID =b.data
                                                            inner join @StationList c on a.Station =c.data ";

                       SqlParameter para1 = new SqlParameter("@ProductIDList", SqlDbType.Structured);
                       para1.TypeName = "TbStringList";
                       para1.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("ProductIDList", para1);

                       SqlParameter para2 = new SqlParameter("@StationList", SqlDbType.Structured);
                       para2.TypeName = "TbStringList";
                       para2.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("StationList", para2);
                      
                       sqlCtx.AddParam("Editor", new SqlParameter("@Editor", SqlDbType.VarChar));

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt1 = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(productIDList);
               sqlCtx.Param("ProductIDList").Value = dt1;

               DataTable dt2 = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(stationList);
               sqlCtx.Param("StationList").Value = dt2;
              
               sqlCtx.Param("Editor").Value = editor;

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA,
                                                                                  CommandType.Text,
                                                                                  sqlCtx.Sentence,
                                                                                  sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void DeleteProductPartByProductIDAndStationDefered(IUnitOfWork uow, IList<string> productIDList, IList<string> stationList, string editor)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productIDList, stationList,editor);
       }

       public void UpdateForceNWCByProductID(IList<string> productIDList, string forceNWC, string editor)
       {
           try
           {
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"MERGE INTO ForceNWC as T
                                                        Using (
                                                                select a.ProductID,  a.Station
                                                                from ProductStatus a
                                                                inner join @ProductIDList b on a.ProductID = b.data 
                                                            ) as S
                                                        ON T.ProductID = S.ProductID 
                                                        WHEN NOT MATCHED THEN
                                                            insert (ProductID, PreStation, ForceNWC, Editor, Udt)
                                                            values (S.ProductID, S.Station, @ForceNWC, @Editor,GETDATE())
                                                        WHEN MATCHED THEN
                                                            update set T.PreStation=S.Station, T.ForceNWC=@ForceNWC,T.Editor=@Editor, T.Udt=GETDATE();";
                       SqlParameter para = new SqlParameter("@ProductIDList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("ProductIDList", para);
                       sqlCtx.AddParam("ForceNWC", new SqlParameter("@ForceNWC", SqlDbType.VarChar));                     
                       sqlCtx.AddParam("Editor", new SqlParameter("@Editor", SqlDbType.VarChar));

                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt1 = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(productIDList);
               sqlCtx.Param("ProductIDList").Value = dt1;

               sqlCtx.Param("ForceNWC").Value = forceNWC;
               sqlCtx.Param("Editor").Value = editor;

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA,
                                                                                  CommandType.Text,
                                                                                  sqlCtx.Sentence,
                                                                                  sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void UpdateForceNWCByProductIDDefered(IUnitOfWork uow, IList<string> productIDList, string forceNWC, string editor)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productIDList, forceNWC, editor);
       }


       public IList<string> GetProductIDListNeedToCheck(string dn,IList<string> qcStatusList)
       {
           try
           {
               IList<string> ret = null;

               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       _Metas.Qcstatus cond = new _Metas.Qcstatus();
                       cond.productID = dn;

                       _Metas.Qcstatus cond2 = new _Metas.Qcstatus();
                       cond2.tp = "PAQC";

                       _Metas.Qcstatus cond3 = new _Metas.Qcstatus();
                       cond3.status = "[INSET]";

                       sqlCtx = FuncNew.GetConditionedSelect<_Metas.Qcstatus>(tk, "DISTINCT", new string[] { _Metas.Qcstatus.fn_productID }, new ConditionCollection<_Metas.Qcstatus>(
                           new AnyCondition<_Metas.Qcstatus>(cond, string.Format("{0} IN (SELECT {1} FROM {2} WHERE {3}={4})", "{0}", _Metas.Product.fn_productID, ToolsNew.GetTableName(typeof(_Metas.Product)), _Metas.Product.fn_deliveryNo, "{1}")),
                           new EqualCondition<_Metas.Qcstatus>(cond2),
                           new InSetCondition<_Metas.Qcstatus>(cond3)), _Metas.Qcstatus.fn_productID);

                       sqlCtx.Param(_Metas.Qcstatus.fn_tp).Value = cond2.tp;
                       //sqlCtx.Sentence = sqlCtx.Sentence.Replace(g.DecInSet(_Metas.Qcstatus.fn_status), g.ConvertInSet(new string[] { "8", "A" }));
                   }
               }
               sqlCtx.Param(g.DecAny(_Metas.Qcstatus.fn_productID)).Value = dn;
               string sqlStr = sqlCtx.Sentence.Replace(g.DecInSet(_Metas.Qcstatus.fn_status), g.ConvertInSet(qcStatusList.ToArray()));
               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlStr, sqlCtx.Params))
               {
                   if (sqlR != null)
                   {
                       ret = new List<string>();
                       while (sqlR.Read())
                       {
                           string item = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Qcstatus.fn_productID));
                           ret.Add(item);
                       }
                   }
               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }



       public IList<string> GetProductPartCheckItemTypeByStation(IList<string> productIdList, IList<string> stationList)
       {
           try
           {
               IList<string> ret = new List<string>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"select distinct a.CheckItemType 
                                                         from Product_Part a,
                                                                 @ProductIDList b,
                                                                  @StationList c
                                                         where a.ProductID =b.data and
                                                                   a.Station =c.data ";
                       SqlParameter para = new SqlParameter("@ProductIDList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("ProductIDList", para);

                       SqlParameter para1 = new SqlParameter("@StationList", SqlDbType.Structured);
                       para1.TypeName = "TbStringList";
                       para1.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("StationList", para1);
                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt1 = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(productIdList);
               sqlCtx.Param("ProductIDList").Value = dt1;

               DataTable dt2 = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(stationList);
               sqlCtx.Param("StationList").Value = dt2;

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlCtx.Sentence,
                                                                                                                            sqlCtx.Params))
               {
                   if (sqlR != null)
                   {
                       while (sqlR.Read())
                       {
                           if (!sqlR.IsDBNull(0) && !string.IsNullOrEmpty(sqlR.GetString(0)))
                           {
                               ret.Add(sqlR.GetString(0).Trim());
                           }
                       }
                   }
               }

               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }
       public IList<ProductMBInfo> GetPCBListByProductId(IList<string> productIdList)
       {
           try
           {
               IList<ProductMBInfo> ret = new List<ProductMBInfo>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"select a.ProductID, a.Model, d.Family, a.PCBID, c.CVSN as OnBoardCPUSn
                                                        from Product a
                                                        inner join Model d on a.Model=d.Model
                                                        inner join  @ProductIDList b on a.ProductID = b.data
                                                        left join PCB c on a.PCBID =c.PCBNo ";
                       SqlParameter para = new SqlParameter("@ProductIDList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("ProductIDList", para);
                   
                   }
               }

               DataTable dt1 = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(productIdList);
               sqlCtx.Param("ProductIDList").Value = dt1;

             

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlCtx.Sentence,
                                                                                                                            sqlCtx.Params))
               {
                   if (sqlR != null)
                   {
                       while (sqlR.Read())
                       {
                           ret.Add(_Schema.SQLData.ToObject<ProductMBInfo>(sqlR));
                       }
                   }
               }

               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }

       public void UnPackMB(IList<string> productIdList)
       {
           try
           {
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"update Product
                                                        set PCBID='', MAC='', PCBModel='', MBECR='',
                                                              Udt=getdate()
                                                        where ProductID in (select data from @ProductIDList) ";
                       SqlParameter para = new SqlParameter("@ProductIDList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("ProductIDList", para);
                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt1 = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(productIdList);
               sqlCtx.Param("ProductIDList").Value = dt1;

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA,
                                                                                  CommandType.Text,
                                                                                  sqlCtx.Sentence,
                                                                                  sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void UnPackMBDefered(IUnitOfWork uow, IList<string> productIdList)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productIdList);
       }

       public void UnPackCPU(IList<string> productIdList)
       {
           try
           {
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"update Product
                                                        set CVSN='', Udt=getdate()
                                                        where ProductID in (select data from @ProductIDList) ";
                       SqlParameter para = new SqlParameter("@ProductIDList", SqlDbType.Structured);
                       para.TypeName = "TbStringList";
                       para.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("ProductIDList", para);
                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               DataTable dt1 = IMES.Infrastructure.Repository._Schema.SQLData.ToDataTable(productIdList);
               sqlCtx.Param("ProductIDList").Value = dt1;

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA,
                                                                                  CommandType.Text,
                                                                                  sqlCtx.Sentence,
                                                                                  sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void UnPackCPUDefered(IUnitOfWork uow, IList<string> productIdList)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productIdList);
       }


       public void BackUpProductPartByCheckItemType(string productId, string uEditor, string checkItemType)
       {
           try
           {
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       _Metas.Product_Part cond = new _Metas.Product_Part();
                       cond.productID = productId;
                       cond.checkItemType = checkItemType;
                       sqlCtx = FuncNew.GetConditionedForBackupInsert<_Metas.Product_Part, _Metas.UnpackProduct_Part>(tk,
                           new string[][]{
                                new string[]{_Metas.Product_Part.fn_bomNodeType,_Metas.UnpackProduct_Part.fn_bomNodeType},
                                new string[]{_Metas.Product_Part.fn_cdt,_Metas.UnpackProduct_Part.fn_cdt},
                                new string[]{_Metas.Product_Part.fn_checkItemType,_Metas.UnpackProduct_Part.fn_checkItemType},
                                new string[]{_Metas.Product_Part.fn_custmerPn,_Metas.UnpackProduct_Part.fn_custmerPn},
                                new string[]{_Metas.Product_Part.fn_editor,_Metas.UnpackProduct_Part.fn_editor},
                                new string[]{_Metas.Product_Part.fn_id,_Metas.UnpackProduct_Part.fn_product_PartID},
                                new string[]{_Metas.Product_Part.fn_iecpn,_Metas.UnpackProduct_Part.fn_iecpn},
                                new string[]{_Metas.Product_Part.fn_partNo,_Metas.UnpackProduct_Part.fn_partNo},
                                new string[]{_Metas.Product_Part.fn_partSn,_Metas.UnpackProduct_Part.fn_partSn},
                                new string[]{_Metas.Product_Part.fn_partType,_Metas.UnpackProduct_Part.fn_partType},
                                new string[]{_Metas.Product_Part.fn_productID,_Metas.UnpackProduct_Part.fn_productID},
                                new string[]{_Metas.Product_Part.fn_station,_Metas.UnpackProduct_Part.fn_station},
                                new string[]{_Metas.Product_Part.fn_udt,_Metas.UnpackProduct_Part.fn_udt},
                                new string[]{string.Format("@{0}",_Metas.UnpackProduct_Part.fn_ueditor), _Metas.UnpackProduct_Part.fn_ueditor},
                                new string[]{"GETDATE()",_Metas.UnpackProduct_Part.fn_updt}
                            },
                           new ConditionCollection<_Metas.Product_Part>(
                               new EqualCondition<_Metas.Product_Part>(cond)));
                       sqlCtx.AddParam(_Metas.UnpackProduct_Part.fn_ueditor, new SqlParameter(string.Format("@{0}", _Metas.UnpackProduct_Part.fn_ueditor), ToolsNew.GetDBFieldType<_Metas.UnpackProduct_Part>(_Metas.UnpackProduct_Part.fn_ueditor)));
                   }
               }
               sqlCtx.Param(_Metas.Product_Part.fn_productID).Value = productId;
               sqlCtx.Param(_Metas.UnpackProductStatus.fn_ueditor).Value = uEditor;
               sqlCtx.Param(_Metas.Product_Part.fn_checkItemType).Value = checkItemType;
               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, CommandType.Text, sqlCtx.Sentence, sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }

       public void BackUpProductPartByCheckItemTypeDefered(IUnitOfWork uow, string productId, string uEditor, string checkItemType)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, uEditor, checkItemType);
       }
       #endregion

       #region for Pilot Run MO Check
       public bool ExistsProductInfoAndLogStation(string infoType, string infoValue, IList<string> stationList, int status)
       {
           try
           {
               bool ret = false;
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = new SQLContextNew();
                       sqlCtx.Sentence = @"select top 1 a.ProductID, a.Status 
                                                        from ProductLog a, 
                                                             ProductInfo b,
                                                             @StationList c 
                                                        where a.ProductID = b.ProductID and 
                                                             b.InfoType=@InfoType and 
                                                             b.InfoValue=@InfoValue and 
                                                             a.Station =c.data   and
                                                             a.Status =@Status";

                       sqlCtx.AddParam("InfoType", new SqlParameter("@InfoType", SqlDbType.VarChar));
                       sqlCtx.AddParam("InfoValue", new SqlParameter("@InfoValue", SqlDbType.VarChar));
                       sqlCtx.AddParam("Status", new SqlParameter("@Status", SqlDbType.Int));
                       SqlParameter para1 = new SqlParameter("@StationList", SqlDbType.Structured);
                       para1.TypeName = "TbStringList";
                       para1.Direction = ParameterDirection.Input;
                       sqlCtx.AddParam("StationList", para1);
                       SQLCache.InsertIntoCache(tk, sqlCtx);
                   }
               }

               sqlCtx.Param("InfoType").Value = infoType;
               sqlCtx.Param("InfoValue").Value = infoValue;
               sqlCtx.Param("Status").Value = status;

               DataTable dt1 = _Schema.SQLData.ToDataTable(stationList);
               sqlCtx.Param("StationList").Value = dt1;

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA,
                                                                                                                           CommandType.Text,
                                                                                                                           sqlCtx.Sentence,
                                                                                                                           sqlCtx.Params))
               {
                   if (sqlR != null)
                   {
                       ret = sqlR.HasRows;
                   }

               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }
       #endregion

       #region for ITCNDCheckSetting
       public IList<ITCNDCheckSettingDef> GetITCNDCheckSettingByStationAndLine(string station, IList<string> lineList)
       {
           try
           {
               IList<ITCNDCheckSettingDef> ret = null;

               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               mtns::SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       mtns::Itcndchecksetting cond1 = new mtns::Itcndchecksetting();
                       cond1.station = station;
                       mtns::Itcndchecksetting cond2 = new mtns::Itcndchecksetting();
                       cond2.line = "INSET";
                       sqlCtx = mtns::FuncNew.GetConditionedSelect<mtns::Itcndchecksetting>(null, null,
                                                                                                new mtns::ConditionCollection<mtns::Itcndchecksetting>(new mtns::EqualCondition<mtns::Itcndchecksetting>(cond1),
                                                                                                                                                                                    new mtns::InSetCondition<mtns::Itcndchecksetting>(cond2)),
                                                                                                mtns::Itcndchecksetting.fn_line);
                   }
               }

               sqlCtx.Param(mtns::Itcndchecksetting.fn_station).Value = station;

               string Sentence = sqlCtx.Sentence.Replace(_Schema.Func.DecInSet(mtns::Itcndchecksetting.fn_line), _Schema.Func.ConvertInSet(lineList));

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA,
                                                                                                                       CommandType.Text,
                                                                                                                      Sentence,
                                                                                                                      sqlCtx.Params))
               {
                   ret = mtns::FuncNew.SetFieldFromColumn<mtns::Itcndchecksetting, ITCNDCheckSettingDef, ITCNDCheckSettingDef>(ret, sqlR, sqlCtx);
               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }
       #endregion

       #region CombinedAstNumber table
       public ReleasedAstNumberInfo GetAvailableReleaseAstNumberWithReadPast(string code, string astType, string state)
       {

           try
           {
               ReleasedAstNumberInfo ret = null;

               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       _Metas.CombinedAstNumber cond = new _Metas.CombinedAstNumber();
                       cond.code = code;
                       cond.astType = astType;
                       cond.state = state;
                       sqlCtx = FuncNew.GetConditionedSelect<_Metas.CombinedAstNumber>(tk, "TOP 1",
                                                                                                                                     new string[] { _Metas.CombinedAstNumber.fn_id,
                                                                                                                                                          _Metas.CombinedAstNumber.fn_code,
                                                                                                                                                          _Metas.CombinedAstNumber.fn_astType,
                                                                                                                                                          _Metas.CombinedAstNumber.fn_state,
                                                                                                                                                         _Metas.CombinedAstNumber.fn_astNo },
                                                                                                                                     new ConditionCollection<_Metas.CombinedAstNumber>(new EqualCondition<_Metas.CombinedAstNumber>(cond)),
                                                                                                                                    _Metas.CombinedAstNumber.fn_id);

                       sqlCtx.Sentence = sqlCtx.Sentence.Replace("WHERE", "WITH (INDEX=Idx_CombinedAstNumber_Code_AstType_State,ROWLOCK,READPAST) WHERE");
                   }
               }
               sqlCtx.Param(_Metas.CombinedAstNumber.fn_code).Value = code;
               sqlCtx.Param(_Metas.CombinedAstNumber.fn_astType).Value = astType;
               sqlCtx.Param(_Metas.CombinedAstNumber.fn_state).Value = state;

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA,
                                                                                               CommandType.Text,
                                                                                               sqlCtx.Sentence,
                                                                                               sqlCtx.Params))
               {

                   if (sqlR != null && sqlR.Read())
                   {
                       // ret = FuncNew.SetFieldFromColumnWithoutReadReader<_Metas.CombinedAstNumber, ReleasedAstNumberInfo>(ret, sqlR, sqlCtx);
                       ret = _Schema.SQLData.ToObjectByField<ReleasedAstNumberInfo>(sqlR);
                   }

               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }

       }

       public IList<CombinedAstNumberInfo> GetCombinedAstNumber(CombinedAstNumberInfo condition)
       {
           try
           {
               IList<CombinedAstNumberInfo> ret = new List<CombinedAstNumberInfo>();
               MethodBase mthObj = MethodBase.GetCurrentMethod();

               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {

                   CombinedAstNumber cond = FuncNew.SetColumnFromField<CombinedAstNumber, CombinedAstNumberInfo>(condition);

                   sqlCtx = FuncNew.GetConditionedSelect<CombinedAstNumber>(null, null,
                                                                                                    new ConditionCollection<CombinedAstNumber>(new EqualCondition<CombinedAstNumber>(cond)),
                                                                                                   _Metas.CombinedAstNumber.fn_code, _Metas.CombinedAstNumber.fn_astType, _Metas.CombinedAstNumber.fn_id);


               }
               sqlCtx = FuncNew.SetColumnFromField<CombinedAstNumber, CombinedAstNumberInfo>(sqlCtx, condition);

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_GetData,
                                                                                                                            CommandType.Text,
                                                                                                                            sqlCtx.Sentence,
                                                                                                                            sqlCtx.Params))
               {

                   ret = FuncNew.SetFieldFromColumn<mtns::CombinedAstNumber, CombinedAstNumberInfo, CombinedAstNumberInfo>(ret, sqlR, sqlCtx);
               }

               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void InsertCombinedAstNumber(CombinedAstNumberInfo info)
       {
           try
           {
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       sqlCtx = FuncNew.GetAquireIdInsert<CombinedAstNumber>(tk);
                   }
               }
               sqlCtx = FuncNew.SetColumnFromField<CombinedAstNumber, CombinedAstNumberInfo>(sqlCtx, info);

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA,
                                                                                 CommandType.Text,
                                                                                 sqlCtx.Sentence,
                                                                                 sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void InsertCombinedAstNumberDefered(IUnitOfWork uow, CombinedAstNumberInfo info)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), info);
       }
       public void UpdateCombinedAstNumber(CombinedAstNumberInfo info)
       {
           try
           {
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {

                   CombinedAstNumber cond = new CombinedAstNumber();
                   cond.id = info.ID;
                   CombinedAstNumber setv = FuncNew.SetColumnFromField<CombinedAstNumber, CombinedAstNumberInfo>(info, PartForbidRule.fn_id);
                   setv.udt = DateTime.Now;

                   sqlCtx = FuncNew.GetConditionedUpdate<CombinedAstNumber>(new SetValueCollection<CombinedAstNumber>(new CommonSetValue<CombinedAstNumber>(setv)),
                                                                                                             new ConditionCollection<CombinedAstNumber>(new EqualCondition<CombinedAstNumber>(cond)));

               }

               sqlCtx.Param(CombinedAstNumber.fn_id).Value = info.ID;

               sqlCtx = FuncNew.SetColumnFromField<CombinedAstNumber, CombinedAstNumberInfo>(sqlCtx, info, true);
               DateTime cmDt = _Schema.SqlHelper.GetDateTime();
               sqlCtx.Param(g.DecSV(CombinedAstNumber.fn_udt)).Value = cmDt;

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_GetData,
                                                                                CommandType.Text,
                                                                                sqlCtx.Sentence,
                                                                                sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void UpdateCombinedAstNumberDefered(IUnitOfWork uow, CombinedAstNumberInfo info)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), info);
       }
       #endregion

       public IList<ProductModel> GetProductListByDeliveryNoList(IList<string> deliveryNoLst)
       {
           try
           {
               IList<ProductModel> ret = new List<ProductModel>();

               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       _Metas.Product cond = new _Metas.Product();
                       cond.deliveryNo = "[INSET]";
                       sqlCtx = FuncNew.GetConditionedSelect<_Metas.Product>(tk, null, new string[] { _Metas.Product.fn_model, _Metas.Product.fn_custsn, _Metas.Product.fn_productID,
                                                                                                                _Metas.Product.fn_deliveryNo,_Metas.Product.fn_palletNo, _Metas.Product.fn_cartonSN}, new ConditionCollection<_Metas.Product>(new InSetCondition<_Metas.Product>(cond)), _Metas.Product.fn_custsn);
                   }
               }
               string Sentence = sqlCtx.Sentence.Replace(g.DecInSet(mtns::Product.fn_deliveryNo), g.ConvertInSet(deliveryNoLst));

               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader(_Schema.SqlHelper.ConnectionString_FA,
                                                                                                                    CommandType.Text,
                                                                                                                    Sentence, sqlCtx.Params))
               {
                   if (sqlR != null)
                   {

                       while (sqlR.Read())
                       {
                           var item = new ProductModel();
                           item.CustSN = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Product.fn_custsn));
                           item.Model = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Product.fn_model));
                           item.ProductID = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Product.fn_productID));
                           item.DeliveryNo = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Product.fn_deliveryNo));
                           item.PalletNo = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Product.fn_palletNo));
                           item.CartonNo = g.GetValue_Str(sqlR, sqlCtx.Indexes(_Metas.Product.fn_cartonSN));
                           ret.Add(item);
                       }
                   }
               }
               return ret;
           }
           catch (Exception)
           {
               throw;
           }
       }

       public void ExistsCustomSnThrowError(string productId, string customSn)
       {
           try
           {
               _Schema.SQLContext sqlCtx = null;
               lock (MethodBase.GetCurrentMethod())
               {
                   if (!_Schema.Func.PeerTheSQL(MethodBase.GetCurrentMethod().MetadataToken, out sqlCtx))
                   {
                       _Schema.Product cond = new _Schema.Product();
                       cond.CUSTSN = "INSET";

                       sqlCtx = _Schema.Func.GetConditionedFuncSelect(MethodBase.GetCurrentMethod().MetadataToken,
                                                                                           typeof(_Schema.Product), null, new string[] { _Schema.Product.fn_ProductID },
                                                                                            cond, null, null, null, null, null, null, null);
                       sqlCtx.Sentence = sqlCtx.Sentence.Replace("WHERE", "WITH(NOLOCK) WHERE");
                   }
               }


               sqlCtx.Params[_Schema.Product.fn_CUSTSN].Value = customSn;


               using (SqlDataReader sqlR = _Schema.SqlHelper.ExecuteReader_OnTrans(_Schema.SqlHelper.ConnectionString_FA,
                                                                                                                      CommandType.Text,
                                                                                                                   sqlCtx.Sentence,
                                                                                                                   sqlCtx.Params.Values.ToArray<SqlParameter>()))
               {
                   while (sqlR != null && sqlR.Read())
                   {
                       string id = GetValue_Str(sqlR, 0);
                       if (id != productId)
                       {
                           throw new FisException("CHK1223", new string[] { customSn });
                       }
                   }
               }
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void ExistsCustomSnThrowErrorDefered(IUnitOfWork uow, string productId, string customSn)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId, customSn);
       }

        #region UPS
       public void RemoveCDSIAST(string productId)
       {
           try
           {
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               mtns::SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                        mtns::Cdsiast cond =  new Cdsiast();
                        cond.snoId = productId;
                        sqlCtx = mtns::FuncNew.GetConditionedDelete<mtns::Cdsiast>(tk, new mtns::ConditionCollection<mtns::Cdsiast>(new mtns::EqualCondition<mtns::Cdsiast>(cond)));
                   }
               }

               sqlCtx.Param(Cdsiast.fn_snoId).Value = productId;

              _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, 
                                                                                                                CommandType.Text, 
                                                                                                                sqlCtx.Sentence, 
                                                                                                                sqlCtx.Params);
              
           }
           catch (Exception)
           {
               throw;
           }
       }
       public void RemoveCDSIASTDefered(IUnitOfWork uow, string productId)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId);
       }

       public void RemoveSnoDetPoMo(string productId)
       {
           try
           {
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               mtns::SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       mtns::SnoDet_PoMo cond = new SnoDet_PoMo();
                       cond.snoId = productId;
                       sqlCtx = mtns::FuncNew.GetConditionedDelete<mtns::SnoDet_PoMo>(tk, new mtns::ConditionCollection<mtns::SnoDet_PoMo>(new mtns::EqualCondition<mtns::SnoDet_PoMo>(cond)));
                   }
               }

               sqlCtx.Param(SnoDet_PoMo.fn_snoId).Value = productId;

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA,
                                                                          CommandType.Text,
                                                                          sqlCtx.Sentence,
                                                                          sqlCtx.Params);

           }
           catch (Exception)
           {
               throw;
           }
       }

       public void RemoveSnoDetPoMoDefered(IUnitOfWork uow, string productId)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId);
       }

       public void RemoveSpecialDet(string productId)
       {
           try
           {
               MethodBase mthObj = MethodBase.GetCurrentMethod();
               int tk = mthObj.MetadataToken;
               SQLContextNew sqlCtx = null;
               lock (mthObj)
               {
                   if (!SQLCache.PeerTheSQL(tk, out sqlCtx))
                   {
                       Special_Det cond = new Special_Det();
                       cond.snoId = productId;
                       
                       sqlCtx = FuncNew.GetConditionedDelete<Special_Det>(tk,  new ConditionCollection<Special_Det>(new EqualCondition<Special_Det>(cond)));
                   }
               }
              
               sqlCtx.Param(Special_Det.fn_snoId).Value = productId;

               _Schema.SqlHelper.ExecuteNonQuery(_Schema.SqlHelper.ConnectionString_FA, 
                                                                            CommandType.Text, 
                                                                            sqlCtx.Sentence, 
                                                                            sqlCtx.Params);
           }
           catch (Exception)
           {
               throw;
           }
       }

       public void RemoveSpecialDetDefered(IUnitOfWork uow, string productId)
       {
           AddOneInvokeBody(uow, MethodBase.GetCurrentMethod(), productId);
       }

        #endregion
    }
}
